Entry: type = H; first = Symbols; second = ; third = 
Entry: type = S; first = .'; second = scalar; third = transpose, 04_Vectors.htm#101
Entry: type = S; first = .^; second = scalar; third = power, 04_Vectors.htm#101
Entry: type = S; first = '; second = matrix; third = transpose, 04_Vectors.htm#102
Entry: type = C; first = string; second = delimiter; third = 
Entry: type = S; first = ^; second = matrix; third = power, 04_Vectors.htm#102
Entry: type = S; first = +; second = unary; third = positive, 04_Vectors.htm#103
Entry: type = S; first = -; second = unary; third = negative, 04_Vectors.htm#103
Entry: type = S; first = ~; second = unary; third = negation, 04_Vectors.htm#103
Entry: type = S; first = .*; second = scalar; third = multiplication, 04_Vectors.htm#104
Entry: type = S; first = ./; second = scalar; third = division, 04_Vectors.htm#104
Entry: type = S; first = .\; second = scalar; third = left_divide, 04_Vectors.htm#104
Entry: type = S; first = *; second = matrix; third = multiplication, 04_Vectors.htm#104
Entry: type = S; first = /; second = matrix; third = division, 04_Vectors.htm#104
Entry: type = S; first = \; second = matrix; third = left_divide, 04_Vectors.htm#104
Entry: type = C; first = backslash; second = _; third = 06_Strings.htm, 120#
Entry: type = S; first = +; second = addition; third = _, 04_Vectors.htm#105
Entry: type = S; first = -; second = subtraction; third = _, 04_Vectors.htm#105
Entry: type = S; first = :; second = colon; third = operator, 04_Vectors.htm#106
Entry: type = S; first = <; second = less; third = than, 04_Vectors.htm#107
Entry: type = S; first = <=; second = less; third = than_or_equal_to, 04_Vectors.htm#107
Entry: type = S; first = >=; second = greater; third = than_or_equal_to, 04_Vectors.htm#107
Entry: type = S; first = >; second = greater; third = than, 04_Vectors.htm#107
Entry: type = S; first = ==; second = equals; third = _, 04_Vectors.htm#107
Entry: type = S; first = ~=; second = not; third = equals, 04_Vectors.htm#107
Entry: type = S; first = =; second = assignment; third = operator, 02_Basics.htm#2_2_2
Entry: type = S; first = &; second = element-wise; third = AND, 04_Vectors.htm#108
Entry: type = S; first = |; second = element-wise; third = OR, 04_Vectors.htm#109
Entry: type = S; first = &&; second = short-circuit; third = AND, 04_Vectors.htm#110
Entry: type = S; first = ||; second = short-circuit; third = OR, 04_Vectors.htm#111
Entry: type = S; first = <...>; second = enter; third = parameters, Appendix_A.htm#201
Entry: type = S; first = %; second = percent; third = sign, Appendix_A.htm#202
Entry: type = S; first = .; second = structure; third = field, Appendix_A.htm#215
Entry: type = S; first = ...; second = next; third = line, Appendix_A.htm#216
Entry: type = S; first = []; second = empty; third = vector, Appendix_A.htm#204
Entry: type = S; first = ;; second = suppress; third = output, Appendix_A.htm#211
Entry: type = C; first = new; second = row; third = Appendix_A.htm, 212#
Entry: type = S; first = _; second = underscore; third = character, 02_Basics.htm#250
Entry: type = H; first = A; second = ; third = 
Entry: type = N; first = A/D; second = analog; third = to_digital
Entry: type = N; first = abstraction; second = ; third = 
Entry: type = N; first = acosd(...); second = ...; third = 
Entry: type = N; first = activation; second = stack; third = 
Entry: type = N; first = actual; second = parameters; third = 
Entry: type = N; first = adjacency; second = matrix; third = 
Entry: type = C; first = creation; second = of; third = 
Entry: type = N; first = algorithms; second = ; third = 
Entry: type = C; first = Breadth-First; second = Search; third = 
Entry: type = C; first = bubble; second = sort; third = 
Entry: type = C; first = complex,; second = analyzing; third = 
Entry: type = C; first = Dijkstras; second = ; third = 
Entry: type = C; first = insertion; second = sort; third = 
Entry: type = C; first = measuring; second = cost; third = of
Entry: type = C; first = merge; second = sort; third = 
Entry: type = C; first = performance; second = analysis; third = of
Entry: type = C; first = Prims; second = ; third = 
Entry: type = C; first = quick; second = sort; third = 
Entry: type = C; first = radix; second = sort; third = 
Entry: type = N; first = all(...); second = ...; third = 
Entry: type = N; first = alpha(...); second = ...; third = 
Entry: type = N; first = ASCII; second = ; third = 
Entry: type = N; first = ampersand; second = &; third = 
Entry: type = N; first = analog-to-digital; second = A/D; third = device
Entry: type = N; first = AND; second = ; third = 
Entry: type = C; first = element-wise; second = &; third = 
Entry: type = C; first = short-circuit; second = &&; third = 
Entry: type = N; first = any(...); second = ...; third = 
Entry: type = N; first = approximation; second = ; third = 
Entry: type = N; first = arithmetic; second = operations; third = 
Entry: type = C; first = with; second = arrays; third = 
Entry: type = C; first = on; second = character; third = strings
Entry: type = C; first = with; second = vectors; third = 
Entry: type = N; first = array; second = ; third = 
Entry: type = C; first = division; second = ./; third = 
Entry: type = C; first = exponentiation; second = .^; third = 
Entry: type = C; first = multiplication; second = .*; third = 
Entry: type = C; first = arithmetic; second = operations; third = with
Entry: type = C; first = cell; second = ; third = 
Entry: type = C; first = character; second = strings; third = 
Entry: type = C; first = concatenation; second = ; third = 
Entry: type = C; first = creating; second = ; third = 
Entry: type = C; first = elements; second = of; third = 
Entry: type = C; first = inserting; second = data; third = into
Entry: type = C; first = linear; second = ; third = 
Entry: type = C; first = linearized; second = ; third = 
Entry: type = C; first = logical; second = operations; third = with
Entry: type = C; first = matrices; second = vs.; third = 
Entry: type = C; first = operations; second = ; third = 
Entry: type = C; first = properties; second = of; third = 
Entry: type = C; first = reshaping; second = ; third = 
Entry: type = C; first = slicing; second = of; third = 
Entry: type = C; first = structure; second = ; third = 
Entry: type = C; first = transpose; second = of; third = 
Entry: type = N; first = assignment; second = operator; third = =
Entry: type = N; first = au; second = files; third = 
Entry: type = N; first = audioread(...); second = ...; third = 
Entry: type = N; first = auxiliary; second = functions; third = 
Entry: type = N; first = axis(...); second = ...; third = 
Entry: type = H; first = B; second = ; third = 
Entry: type = N; first = bar(...); second = ...; third = 
Entry: type = N; first = bar3(...); second = ...; third = 
Entry: type = N; first = barh(...); second = ...; third = 
Entry: type = N; first = barh3(...); second = ...; third = 
Entry: type = N; first = before(...); second = ...; third = 
Entry: type = N; first = behavioral; second = abstraction; third = 
Entry: type = N; first = BFS; second = ; third = 
Entry: type = N; first = Big; second = O; third = algebra
Entry: type = N; first = binary; second = files; third = 
Entry: type = N; first = binary; second = search; third = 
Entry: type = N; first = bits; second = ; third = 
Entry: type = N; first = black; second = box; third = view,
Entry: type = N; first = bodies; second = of; third = rotation
Entry: type = C; first = continuous; second = functions; third = 
Entry: type = C; first = discrete; second = functions; third = 
Entry: type = N; first = boolean; second = value; third = 
Entry: type = N; first = Breadth-First; second = Search; third = 
Entry: type = N; first = break; second = points; third = 
Entry: type = N; first = break; second = statement; third = 
Entry: type = N; first = bubble; second = sort; third = 
Entry: type = N; first = building; second = ; third = 
Entry: type = H; first = C; second = ; third = 
Entry: type = N; first = case; second = keyword; third = 
Entry: type = N; first = casting; second = ; third = 
Entry: type = N; first = catch; second = keyword; third = 
Entry: type = N; first = CAToString(...); second = ...; third = 
Entry: type = N; first = ceil(...); second = ...; third = 
Entry: type = N; first = cell; second = arrays; third = 
Entry: type = C; first = using; second = ; third = 
Entry: type = N; first = central; second = difference; third = 
Entry: type = N; first = char(...); second = ...; third = 
Entry: type = N; first = character; second = generators; third = 
Entry: type = N; first = character; second = mapping; third = 
Entry: type = N; first = character; second = strings; third = 
Entry: type = C; first = conversion; second = from; third = numbers
Entry: type = C; first = conversion; second = to; third = numbers
Entry: type = C; first = format; second = control; third = strings
Entry: type = C; first = logical; second = operation; third = on
Entry: type = C; first = mapping; second = ; third = 
Entry: type = C; first = as; second = numerical; third = values
Entry: type = C; first = operations; second = ; third = 
Entry: type = C; first = slicing; second = of; third = 
Entry: type = C; first = and; second = token; third = 
Entry: type = N; first = class(...); second = ...; third = 
Entry: type = N; first = classes; second = ; third = 
Entry: type = N; first = clc; second = command; third = 
Entry: type = N; first = clear; second = command; third = 
Entry: type = N; first = clf; second = command; third = 
Entry: type = N; first = close; second = all; third = command
Entry: type = N; first = code; second = blocks; third = 
Entry: type = N; first = collection; second = operations; third = 
Entry: type = C; first = building; second = ; third = 
Entry: type = C; first = filtering; second = ; third = 
Entry: type = C; first = inserting; second = ; third = 
Entry: type = C; first = mapping; second = ; third = 
Entry: type = C; first = searching; second = ; third = 
Entry: type = C; first = sorting; second = ; third = 
Entry: type = C; first = summarizing; second = ; third = 
Entry: type = C; first = traversing; second = ; third = 
Entry: type = N; first = colon; second = operator; third = :
Entry: type = N; first = color; second = mapped; third = images
Entry: type = N; first = color; second = masking; third = 
Entry: type = N; first = colormap(...); second = ...; third = function
Entry: type = N; first = column; second = vector; third = 
Entry: type = N; first = Command; second = History; third = window
Entry: type = N; first = Command; second = window; third = 
Entry: type = N; first = comments; second = ; third = 
Entry: type = N; first = compile-time; second = errors; third = 
Entry: type = N; first = compilers; second = ; third = 
Entry: type = N; first = compound; second = surfaces,; third = assembling
Entry: type = C; first = internal; second = details; third = 
Entry: type = C; first = internal; second = organization; third = of
Entry: type = N; first = computer; second = architectures,; third = history
Entry: type = N; first = computer; second = languages; third = 
Entry: type = N; first = concatenation; second = of; third = arrays
Entry: type = N; first = continue; second = statement; third = 
Entry: type = N; first = contour(...); second = ...; third = 
Entry: type = N; first = cross(...); second = ...; third = 
Entry: type = N; first = csvread(...); second = ...; third = 
Entry: type = N; first = csvwrite(...); second = ...; third = 
Entry: type = N; first = cubic; second = spline; third = interpolation
Entry: type = N; first = cumsum(...); second = ...; third = 
Entry: type = N; first = cumtrapz(...); second = ...; third = 
Entry: type = N; first = Current; second = Directory; third = window
Entry: type = N; first = curve; second = fitting; third = 
Entry: type = C; first = example; second = of; third = 
Entry: type = C; first = linear; second = regression; third = 
Entry: type = C; first = polynomial; second = regression; third = 
Entry: type = N; first = cycles,; second = graphs; third = 
Entry: type = N; first = cylinder,; second = construction; third = of
Entry: type = N; first = cylinder(...); second = ...; third = function
Entry: type = H; first = D; second = ; third = 
Entry: type = N; first = data; second = abstraction; third = 
Entry: type = N; first = data; second = typing; third = 
Entry: type = N; first = deal(...); second = ...; third = function
Entry: type = N; first = delimited; second = text; third = files
Entry: type = N; first = delimiter; second = ; third = 
Entry: type = N; first = dequeue(...); second = ...; third = function
Entry: type = N; first = derivative,; second = of; third = function
Entry: type = N; first = diag(...); second = ...; third = function
Entry: type = N; first = diagonal; second = array; third = 
Entry: type = N; first = diff(...); second = ...; third = function
Entry: type = N; first = differentiation; second = ; third = 
Entry: type = N; first = Dijkstra’s; second = algorithm; third = 
Entry: type = N; first = directional; second = edges; third = 
Entry: type = N; first = discrete; second = functions,; third = rotating
Entry: type = N; first = disp(...); second = ...; third = 
Entry: type = N; first = division; second = matrix; third = 
Entry: type = N; first = dlmread(...); second = ...; third = 
Entry: type = N; first = dlmwrite(...); second = ...; third = 
Entry: type = N; first = documentation; second = section; third = 
Entry: type = N; first = dot; second = notation; third = .
Entry: type = N; first = dot; second = operator; third = 
Entry: type = N; first = double(...); second = ...; third = 
Entry: type = H; first = E; second = ; third = 
Entry: type = N; first = edges,; second = graphs; third = 
Entry: type = N; first = Editor; second = window; third = 
Entry: type = N; first = element-wise; second = AND; third = &
Entry: type = N; first = element-wise; second = OR; third = |
Entry: type = N; first = elements; second = arrays; third = 
Entry: type = N; first = ellipses; second = ...; third = 
Entry: type = N; first = ellipsoid(...); second = ...; third = function
Entry: type = N; first = else; second = keyword; third = 
Entry: type = N; first = elseif; second = keyword; third = 
Entry: type = N; first = empty; second = vector; third = []
Entry: type = N; first = encapsulation; second = ; third = 
Entry: type = N; first = end; second = keyword; third = 
Entry: type = N; first = end; second = statement; third = 
Entry: type = N; first = engineering; second = examples; third = 
Entry: type = C; first = ceramic; second = composition; third = 
Entry: type = C; first = detecting; second = edges; third = 
Entry: type = C; first = electrical; second = circuit; third = analysis
Entry: type = C; first = encryption; second = ; third = 
Entry: type = C; first = forces; second = and; third = moments
Entry: type = C; first = geographic; second = data,; third = visualizing
Entry: type = C; first = geopolitical; second = data,; third = processing
Entry: type = C; first = graphs; second = ; third = 
Entry: type = C; first = liquid; second = levels,; third = computation
Entry: type = C; first = music; second = synthesizer; third = 
Entry: type = C; first = physical; second = structure,assembling; third = 
Entry: type = C; first = robot; second = arm; third = motion
Entry: type = C; first = soil; second = volume,; third = computation
Entry: type = C; first = solid; second = object; third = measurement
Entry: type = C; first = sorting; second = ; third = 
Entry: type = C; first = spacecraft; second = launch; third = 
Entry: type = C; first = spreadsheet; second = data; third = 
Entry: type = C; first = synthesizer; second = notes,; third = shaping
Entry: type = N; first = enqueue(...); second = ...; third = function
Entry: type = N; first = equal; second = to; third = ==
Entry: type = N; first = error(...); second = ...; third = 
Entry: type = N; first = Excel; second = spreadsheets; third = 
Entry: type = N; first = exceptions; second = ; third = 
Entry: type = C; first = generic; second = implementation; third = for
Entry: type = C; first = historical; second = approach; third = 
Entry: type = C; first = MATLAB; second = implementation; third = 
Entry: type = N; first = execution; second = errors; third = 
Entry: type = N; first = exponential; second = growth; third = O
Entry: type = N; first = extrapolation; second = ; third = 
Entry: type = N; first = eye(...); second = ...; third = 
Entry: type = H; first = F; second = ; third = 
Entry: type = N; first = fact(...); second = ; third = 
Entry: type = N; first = false; second = values; third = 
Entry: type = N; first = Fast; second = Fourier; third = Transform
Entry: type = C; first = implementation; second = ; third = 
Entry: type = C; first = overview; second = ; third = 
Entry: type = C; first = simple; second = spectral; third = analysis
Entry: type = N; first = fclose(...); second = ...; third = 
Entry: type = N; first = fft(...); second = ...; third = 
Entry: type = N; first = fgetl(...); second = ...; third = 
Entry: type = N; first = fgets(...); second = ...; third = 
Entry: type = N; first = fib(...); second = ...; third = 
Entry: type = N; first = Fibonacci; second = series; third = 
Entry: type = N; first = field; second = operator; third = 
Entry: type = N; first = fieldnames(...); second = ...; third = 
Entry: type = N; first = figure(...); second = ...; third = 
Entry: type = N; first = files; second = ; third = 
Entry: type = C; first = binary; second = ; third = 
Entry: type = C; first = delimited; second = text; third = 
Entry: type = C; first = opening/closing; second = ; third = 
Entry: type = C; first = reading/writing; second = ; third = 
Entry: type = N; first = fill(...); second = ...; third = 
Entry: type = N; first = filtering; second = operation; third = 
Entry: type = N; first = find(...); second = ...; third = 
Entry: type = N; first = fix(...); second = ...; third = 
Entry: type = N; first = floor(...); second = ...; third = 
Entry: type = N; first = flowcharts; second = ; third = 
Entry: type = N; first = folding; second = operation; third = 
Entry: type = N; first = fopen(...); second = ...; third = 
Entry: type = N; first = for; second = loop; third = 
Entry: type = C; first = breaking; second = out; third = of
Entry: type = C; first = example; second = of; third = 
Entry: type = C; first = indexing; second = implementation; third = using
Entry: type = C; first = MATLAB; second = implementation; third = 
Entry: type = C; first = structure; second = of; third = 
Entry: type = C; first = template; second = ; third = 
Entry: type = N; first = formal; second = parameters; third = 
Entry: type = N; first = format; second = control; third = strings
Entry: type = N; first = forward; second = difference; third = approximation
Entry: type = N; first = fprintf(...); second = ...; third = function
Entry: type = N; first = frame,; second = stack; third = 
Entry: type = N; first = frequency,; second = sound; third = 
Entry: type = N; first = function; second = name; third = section
Entry: type = N; first = functional; second = programming; third = 
Entry: type = N; first = function; second = ; third = 
Entry: type = C; first = acosd(...); second = ...; third = 
Entry: type = C; first = all(...); second = ...; third = 
Entry: type = C; first = alpha(...); second = ...; third = 
Entry: type = C; first = any(...); second = ...; third = 
Entry: type = C; first = auread(...); second = ...; third = 
Entry: type = C; first = auxiliary; second = local; third = 
Entry: type = C; first = axis(...); second = ...; third = 
Entry: type = C; first = bar(...); second = ...; third = 
Entry: type = C; first = bar3(...); second = ...; third = 
Entry: type = C; first = barh(...); second = ...; third = 
Entry: type = C; first = barh3(...); second = ...; third = 
Entry: type = C; first = before(...); second = ...; third = 
Entry: type = C; first = black; second = box; third = view
Entry: type = C; first = calling; second = ; third = 
Entry: type = C; first = CAToString(...); second = ...; third = 
Entry: type = C; first = ceil(...); second = ...; third = 
Entry: type = C; first = char(...); second = ...; third = 
Entry: type = C; first = class(...); second = ...; third = 
Entry: type = C; first = coef(...); second = ...; third = 
Entry: type = C; first = colormap(...); second = ...; third = 
Entry: type = C; first = contour(...); second = ...; third = 
Entry: type = C; first = cross(...); second = ...; third = 
Entry: type = C; first = csvread(...); second = ...; third = 
Entry: type = C; first = csvwrite(...); second = ...; third = 
Entry: type = C; first = cumsum(...); second = ...; third = 
Entry: type = C; first = cumtrapz(...); second = ...; third = 
Entry: type = C; first = cylinder(...); second = ...; third = 
Entry: type = C; first = deal(...); second = ...; third = 
Entry: type = C; first = definition; second = ; third = 
Entry: type = C; first = del2(...); second = ...; third = 
Entry: type = C; first = dequeue(...); second = ...; third = 
Entry: type = C; first = derivative; second = of; third = 
Entry: type = C; first = diag(...); second = ...; third = 
Entry: type = C; first = diff(...); second = ...; third = 
Entry: type = C; first = disp(...); second = ...; third = 
Entry: type = C; first = dlmread(...); second = ...; third = 
Entry: type = C; first = dlmwrite(...); second = ...; third = 
Entry: type = C; first = double(...); second = ...; third = 
Entry: type = C; first = ellipsoid(...); second = ...; third = 
Entry: type = C; first = encapsulation; second = in; third = 
Entry: type = C; first = enqueue(...); second = ...; third = 
Entry: type = C; first = error(...); second = ...; third = 
Entry: type = C; first = eye(...); second = ...; third = 
Entry: type = C; first = fact(...); second = ...; third = 
Entry: type = C; first = fclose(...); second = ...; third = 
Entry: type = C; first = fft(...); second = ...; third = 
Entry: type = C; first = fgetl(...); second = ...; third = 
Entry: type = C; first = fgets(...); second = ...; third = 
Entry: type = C; first = fib(...); second = ...; third = 
Entry: type = C; first = fieldnames(...); second = ...; third = 
Entry: type = C; first = figure(...); second = ...; third = 
Entry: type = C; first = fill(...); second = ...; third = 
Entry: type = C; first = find(...); second = ...; third = 
Entry: type = C; first = fix(...); second = ...; third = 
Entry: type = C; first = floor(...); second = ...; third = 
Entry: type = C; first = fopen(...); second = ...; third = 
Entry: type = C; first = fprintf(...); second = ...; third = 
Entry: type = C; first = from; second = ; third = 
Entry: type = C; first = getfield(...); second = ...; third = 
Entry: type = C; first = global; second = variables; third = 
Entry: type = C; first = gplot(...); second = ...; third = 
Entry: type = C; first = grAdjacency(...); second = ...; third = 
Entry: type = C; first = grid; second = off; third = ...
Entry: type = C; first = grid; second = on; third = ...
Entry: type = C; first = gt(...); second = ...; third = 
Entry: type = C; first = hist(...); second = ...; third = 
Entry: type = C; first = hold; second = off; third = ...
Entry: type = C; first = hold; second = on; third = ...
Entry: type = C; first = ifft(...); second = ...; third = 
Entry: type = C; first = image(...); second = ...; third = 
Entry: type = C; first = imread(...); second = ...; third = 
Entry: type = C; first = imshow(...); second = ...; third = 
Entry: type = C; first = imwrite(...); second = ...; third = 
Entry: type = C; first = input(...); second = ...; third = 
Entry: type = C; first = int2str(...); second = ...; third = 
Entry: type = C; first = integral; second = of; third = 
Entry: type = C; first = interp1(...); second = ...; third = 
Entry: type = C; first = interp2(...); second = ...; third = 
Entry: type = C; first = interp3(...); second = ...; third = 
Entry: type = C; first = inv(...); second = ...; third = 
Entry: type = C; first = is_before(...); second = ...; third = 
Entry: type = C; first = isa(...); second = ...; third = 
Entry: type = C; first = iscell(...); second = ...; third = 
Entry: type = C; first = ischar(...); second = ...; third = 
Entry: type = C; first = isempty(...); second = ...; third = 
Entry: type = C; first = isfield(...); second = ...; third = 
Entry: type = C; first = islogical(...); second = ...; third = 
Entry: type = C; first = isnumeric(...); second = ...; third = 
Entry: type = C; first = isPal(...); second = ...; third = 
Entry: type = C; first = isspace(...); second = ...; third = 
Entry: type = C; first = isstruct(...); second = ...; third = 
Entry: type = C; first = it(...); second = ...; third = 
Entry: type = C; first = largest(...); second = ...; third = 
Entry: type = C; first = lasterror(...); second = ...; third = 
Entry: type = C; first = legend(...); second = ...; third = 
Entry: type = C; first = length(...); second = ...; third = 
Entry: type = C; first = lightangle(...); second = ...; third = 
Entry: type = C; first = linspace(...); second = ...; third = 
Entry: type = C; first = load(...); second = ...; third = 
Entry: type = C; first = loglog(...); second = ...; third = 
Entry: type = C; first = magic(...); second = ...; third = 
Entry: type = C; first = max(...); second = ...; third = 
Entry: type = C; first = mean(...); second = ...; third = 
Entry: type = C; first = mesh(...); second = ...; third = 
Entry: type = C; first = meshc(...); second = ...; third = 
Entry: type = C; first = meshgrid(...); second = ...; third = 
Entry: type = C; first = meshz(...); second = ...; third = 
Entry: type = C; first = min(...); second = ...; third = 
Entry: type = C; first = nargin(...); second = ...; third = 
Entry: type = C; first = nargout(...); second = ...; third = 
Entry: type = C; first = num2str(...); second = ...; third = 
Entry: type = C; first = ones(...); second = ...; third = 
Entry: type = C; first = peek(...); second = ...; third = 
Entry: type = C; first = pie(...); second = ...; third = 
Entry: type = C; first = pie3(...); second = ...; third = 
Entry: type = C; first = plot(...); second = ...; third = 
Entry: type = C; first = plot3(...); second = ...; third = 
Entry: type = C; first = plotyy(...); second = ...; third = 
Entry: type = C; first = polar(...); second = ...; third = 
Entry: type = C; first = polyfit(...); second = ...; third = 
Entry: type = C; first = polyval(...); second = ...; third = 
Entry: type = C; first = rand(...); second = ...; third = 
Entry: type = C; first = randn(...); second = ...; third = 
Entry: type = C; first = read(...); second = ...; third = 
Entry: type = C; first = readcell(...); second = ...; third = 
Entry: type = C; first = readStruct(...); second = ...; third = 
Entry: type = C; first = reshape(...); second = ...; third = 
Entry: type = C; first = returning; second = multiple; third = results
Entry: type = C; first = rmfield(...); second = ...; third = 
Entry: type = C; first = rot90(...); second = ...; third = 
Entry: type = C; first = round(...); second = ...; third = 
Entry: type = C; first = save(...); second = ...; third = 
Entry: type = C; first = semilogx(...); second = ...; third = 
Entry: type = C; first = semilogy(...); second = ...; third = 
Entry: type = C; first = setfield(...); second = ...; third = 
Entry: type = C; first = shading(...); second = ...; third = 
Entry: type = C; first = size(...); second = ...; third = 
Entry: type = C; first = sort(...); second = ...; third = 
Entry: type = C; first = sound(...); second = ...; third = 
Entry: type = C; first = sphere(...); second = ...; third = 
Entry: type = C; first = spline(...); second = ...; third = 
Entry: type = C; first = sprintf(...); second = ...; third = 
Entry: type = C; first = sscanf(...); second = ...; third = 
Entry: type = C; first = storing/using; second = ; third = 
Entry: type = C; first = str2num(...); second = ...; third = 
Entry: type = C; first = strcmp(...); second = ...; third = 
Entry: type = C; first = strcmpi(...); second = ...; third = 
Entry: type = C; first = strtok(...); second = ...; third = 
Entry: type = C; first = struct(...); second = ...; third = 
Entry: type = C; first = structures; second = ; third = 
Entry: type = C; first = subplot(...); second = ...; third = 
Entry: type = C; first = sum(...); second = ...; third = 
Entry: type = C; first = surf(...); second = ...; third = 
Entry: type = C; first = surfc(...); second = ...; third = 
Entry: type = C; first = surfz(...); second = ...; third = 
Entry: type = C; first = text(...); second = ...; third = 
Entry: type = C; first = textscan(...); second = ...; third = 
Entry: type = C; first = title(...); second = ...; third = 
Entry: type = C; first = toString(...); second = ...; third = 
Entry: type = C; first = tril(...); second = ...; third = 
Entry: type = C; first = view(...); second = ...; third = 
Entry: type = C; first = waterfall(...); second = ...; third = 
Entry: type = C; first = wavread(...); second = ...; third = 
Entry: type = C; first = wavwrite(...); second = ...; third = 
Entry: type = C; first = writecell(...); second = ...; third = 
Entry: type = C; first = xlabel(...); second = ...; third = 
Entry: type = C; first = xlsread(...); second = ...; third = 
Entry: type = C; first = xlswrite(...); second = ...; third = 
Entry: type = C; first = ylabel(...); second = ...; third = 
Entry: type = C; first = zeros; second = of; third = 
Entry: type = C; first = zeros(...); second = ...; third = 
Entry: type = C; first = zlabel(...); second = ...; third = 
Entry: type = H; first = G; second = ; third = 
Entry: type = N; first = getfield(...); second = ...; third = 
Entry: type = N; first = global; second = keyword; third = 
Entry: type = N; first = Global; second = Scope; third = 
Entry: type = N; first = global; second = variables; third = 
Entry: type = N; first = gplot(...); second = ...; third = 
Entry: type = N; first = grAdjacency(...); second = ...; third = 
Entry: type = N; first = graphs; second = ; third = 
Entry: type = C; first = Breadth-First; second = Search; third = 
Entry: type = C; first = building; second = ; third = 
Entry: type = C; first = creating; second = ; third = 
Entry: type = C; first = cycles; second = ; third = 
Entry: type = C; first = defined; second = ; third = 
Entry: type = C; first = Dijkstra’s; second = algorithm; third = 
Entry: type = C; first = examples; second = ; third = 
Entry: type = C; first = nodes; second = ; third = 
Entry: type = C; first = paths; second = on; third = 
Entry: type = C; first = processing; second = ; third = 
Entry: type = C; first = short-circuit; second = evaluation; third = 
Entry: type = C; first = template; second = for; third = 
Entry: type = N; first = grid; second = on; third = ...
Entry: type = N; first = gt(...); second = ...; third = 
Entry: type = H; first = H; second = ; third = 
Entry: type = N; first = hardwiring; second = ; third = 
Entry: type = N; first = heap; second = ; third = 
Entry: type = N; first = help; second = command; third = 
Entry: type = N; first = helper; second = functions; third = 
Entry: type = N; first = heterogeneous; second = collections; third = 
Entry: type = N; first = high-level; second = I/O; third = functions
Entry: type = C; first = with; second = delimited; third = text
Entry: type = C; first = with; second = Excel; third = spreadsheets
Entry: type = C; first = exploration; second = ; third = 
Entry: type = N; first = hist(...); second = ...; third = function
Entry: type = N; first = hold; second = off; third = ...
Entry: type = N; first = hold; second = on; third = ...
Entry: type = N; first = homogeneous; second = collections; third = 
Entry: type = H; first = I; second = ; third = 
Entry: type = N; first = ifft(...); second = ...; third = 
Entry: type = N; first = image(...); second = ...; third = 
Entry: type = N; first = images; second = ; third = 
Entry: type = C; first = color; second = mapped; third = 
Entry: type = C; first = color; second = masking; third = with
Entry: type = C; first = displaying; second = ; third = 
Entry: type = C; first = format; second = of; third = 
Entry: type = C; first = gray; second = scale; third = 
Entry: type = C; first = kaleidoscope; second = ; third = 
Entry: type = C; first = nature; second = of; third = 
Entry: type = C; first = operation; second = on; third = 
Entry: type = C; first = reading; second = ; third = 
Entry: type = C; first = resolution; second = of; third = 
Entry: type = C; first = stretching/shrinking; second = ; third = 
Entry: type = C; first = on; second = surface; third = 
Entry: type = C; first = true; second = color; third = 
Entry: type = C; first = types; second = ; third = 
Entry: type = C; first = writing; second = ; third = 
Entry: type = N; first = Input/Output; second = I/O; third = 
Entry: type = C; first = high-level(...); second = see; third = also
Entry: type = C; first = lower-level(...); second = see; third = also
Entry: type = C; first = and; second = MATLAB; third = workspace
Entry: type = N; first = inserting; second = data,; third = in
Entry: type = N; first = insertion; second = sort; third = 
Entry: type = N; first = integration; second = ; third = 
Entry: type = N; first = interp1(...); second = ...; third = function
Entry: type = N; first = interp2(...); second = ...; third = function
Entry: type = N; first = interp3(...); second = ...; third = function
Entry: type = N; first = interpolation; second = ; third = 
Entry: type = C; first = cubic; second = spline; third = 
Entry: type = C; first = extrapolation; second = ; third = 
Entry: type = C; first = linear; second = ; third = 
Entry: type = N; first = interpreted; second = code; third = 
Entry: type = N; first = int2str(...); second = ...; third = function
Entry: type = N; first = inv(...); second = ...; third = function
Entry: type = N; first = isa(...); second = ...; third = function
Entry: type = N; first = is_before(...); second = ...; third = function
Entry: type = N; first = iscell(...); second = ...; third = function
Entry: type = N; first = ischar(...); second = ...; third = function
Entry: type = N; first = isempty(...); second = ...; third = function
Entry: type = N; first = isfield(...); second = ...; third = function
Entry: type = N; first = islogical(...); second = ...; third = function
Entry: type = N; first = isnumeric(...); second = ...; third = function
Entry: type = N; first = isPal(...); second = ...; third = function
Entry: type = N; first = isspace(...); second = ...; third = function
Entry: type = N; first = isstruct(...); second = ...; third = function
Entry: type = N; first = iteration; second = ; third = 
Entry: type = H; first = J; second = ; third = 
Entry: type = N; first = Joint; second = Photographic; third = Experts
Entry: type = H; first = K; second = ; third = 
Entry: type = N; first = kaleidoscope; second = ; third = 
Entry: type = H; first = L; second = ; third = 
Entry: type = N; first = length(...); second = ...; third = 
Entry: type = N; first = less; second = than; third = <
Entry: type = N; first = less; second = than; third = or
Entry: type = C; first = with; second = arrays; third = 
Entry: type = C; first = with; second = vectors; third = 
Entry: type = N; first = lightangle(...); second = ...; third = 
Entry: type = N; first = linear; second = arrays; third = 
Entry: type = N; first = linear; second = equations; third = simultaneous
Entry: type = N; first = linear; second = interpolation; third = 
Entry: type = N; first = linear; second = matrices; third = 
Entry: type = N; first = linear; second = regression; third = 
Entry: type = N; first = linearized; second = array; third = 
Entry: type = C; first = intersecting; second = ; third = 
Entry: type = C; first = rotating; second = ; third = 
Entry: type = N; first = linker; second = ; third = 
Entry: type = N; first = linspace(...); second = ...; third = 
Entry: type = N; first = load(...); second = ...; third = 
Entry: type = N; first = loader; second = ; third = 
Entry: type = N; first = Local; second = Scope; third = 
Entry: type = N; first = logic; second = errors; third = 
Entry: type = N; first = logical; second = expressions; third = 
Entry: type = N; first = logical; second = indexing; third = 
Entry: type = C; first = with; second = arrays; third = 
Entry: type = C; first = on; second = character; third = strings
Entry: type = C; first = with; second = vectors; third = 
Entry: type = N; first = logical; second = value; third = 
Entry: type = N; first = loglog(...); second = ...; third = 
Entry: type = N; first = loop-and-a-half; second = iteration; third = style
Entry: type = N; first = lower-level; second = I/O; third = functions
Entry: type = C; first = opening; second = files; third = 
Entry: type = C; first = closing; second = files; third = 
Entry: type = H; first = M; second = ; third = 
Entry: type = N; first = magic(...); second = ...; third = 
Entry: type = N; first = mapping; second = ; third = 
Entry: type = C; first = character; second = ; third = 
Entry: type = C; first = operation; second = ; third = 
Entry: type = N; first = MATLAB; second = ; third = 
Entry: type = C; first = data; second = manipulation; third = 
Entry: type = C; first = introduction; second = to; third = 
Entry: type = C; first = problem-solving; second = ; third = 
Entry: type = C; first = programming; second = concepts; third = 
Entry: type = C; first = user; second = interface; third = 
Entry: type = N; first = matrices; second = ; third = 
Entry: type = N; first = matrix; second = ; third = 
Entry: type = C; first = 2-D; second = rotation; third = 
Entry: type = C; first = 3-D; second = rotation; third = 
Entry: type = C; first = adjacency; second = ; third = 
Entry: type = C; first = division; second = ; third = 
Entry: type = C; first = exponentiation; second = ; third = 
Entry: type = C; first = identity; second = ; third = 
Entry: type = C; first = implementation; second = ; third = 
Entry: type = C; first = linear; second = ; third = 
Entry: type = C; first = multiplication; second = ; third = 
Entry: type = C; first = rotating; second = coordinates; third = 
Entry: type = C; first = sparse; second = ; third = 
Entry: type = N; first = max(...); second = ...; third = 
Entry: type = N; first = mean(...); second = ...; third = 
Entry: type = N; first = Mercator; second = projection; third = 
Entry: type = N; first = merge; second = sort; third = 
Entry: type = N; first = mesh(...); second = ...; third = 
Entry: type = N; first = meshc(...); second = ...; third = 
Entry: type = N; first = meshgrid(...); second = ...; third = 
Entry: type = N; first = meshz(...); second = ...; third = 
Entry: type = N; first = min(...); second = ...; third = 
Entry: type = N; first = minimum; second = spanning; third = trees
Entry: type = N; first = minus,; second = unary; third = 2
Entry: type = N; first = multiplication; second = array; third = 
Entry: type = N; first = music; second = synthesizer; third = 
Entry: type = N; first = musical; second = sounds; third = 
Entry: type = C; first = changing; second = frequency; third = of
Entry: type = H; first = N; second = ; third = 
Entry: type = N; first = NaN; second = ; third = 
Entry: type = N; first = nargin(...); second = ...; third = 
Entry: type = N; first = nargout(...); second = ...; third = 
Entry: type = N; first = Newton’s; second = method; third = 
Entry: type = N; first = nodes,; second = graphs; third = 
Entry: type = N; first = numbers; second = ; third = 
Entry: type = C; first = to; second = strings; third = 
Entry: type = C; first = from; second = strings; third = to
Entry: type = N; first = numerical; second = indexing; third = 
Entry: type = N; first = numerical; second = methods; third = 
Entry: type = C; first = analytical; second = operations; third = 
Entry: type = C; first = curve; second = fitting; third = 
Entry: type = C; first = differentiation; second = ; third = 
Entry: type = C; first = integration; second = ; third = 
Entry: type = C; first = interpolation; second = ; third = 
Entry: type = N; first = num2str(...); second = ...; third = 
Entry: type = H; first = O; second = ; third = 
Entry: type = N; first = object-oriented; second = programming; third = OOP
Entry: type = N; first = objects; second = ; third = 
Entry: type = N; first = ones(...); second = ...; third = 
Entry: type = N; first = operating; second = systems; third = OS
Entry: type = N; first = operation; second = ; third = 
Entry: type = C; first = analytical; second = ; third = 
Entry: type = C; first = on; second = arrays; third = 
Entry: type = C; first = character; second = string; third = 
Entry: type = C; first = frequency; second = domain; third = 
Entry: type = C; first = on; second = graphs; third = 
Entry: type = C; first = on; second = queues; third = 
Entry: type = C; first = summary; second = of; third = 
Entry: type = C; first = on; second = vectors; third = 
Entry: type = N; first = operations; second = on; third = collections
Entry: type = C; first = building; second = ; third = 
Entry: type = C; first = filtering; second = ; third = 
Entry: type = C; first = inserting; second = ; third = 
Entry: type = C; first = mapping; second = ; third = 
Entry: type = C; first = searching; second = ; third = 
Entry: type = C; first = sorting; second = ; third = 
Entry: type = C; first = summarizing; second = ; third = 
Entry: type = C; first = traversing; second = ; third = 
Entry: type = N; first = operators; second = dot; third = 
Entry: type = C; first = field; second = ; third = 
Entry: type = C; first = logical; second = ; third = 
Entry: type = C; first = precedence; second = ; third = 
Entry: type = N; first = OR; second = ; third = 
Entry: type = C; first = element-wise; second = ; third = 
Entry: type = C; first = short-circuit; second = ; third = 
Entry: type = H; first = P; second = ; third = 
Entry: type = N; first = palindromes; second = ; third = 
Entry: type = N; first = parabolic; second = dish; third = 
Entry: type = N; first = paradigms; second = ; third = 
Entry: type = N; first = parameters; second = ; third = 
Entry: type = C; first = cell; second = arrays; third = of
Entry: type = C; first = formal; second = vs.; third = actual
Entry: type = C; first = value; second = ; third = 
Entry: type = C; first = variable; second = numbers; third = of
Entry: type = N; first = parametric; second = plots; third = 
Entry: type = C; first = 2-D; second = ; third = 
Entry: type = C; first = 3-D; second = ; third = 
Entry: type = C; first = passing; second = by; third = reference
Entry: type = N; first = &; second = passing; third = by
Entry: type = N; first = paths; second = on; third = graphs
Entry: type = C; first = greedy; second = algorithm; third = 
Entry: type = C; first = Breadth-First; second = Search; third = 
Entry: type = C; first = Depth-First; second = Search; third = 
Entry: type = C; first = Dijkstra’s; second = algorithm; third = 
Entry: type = N; first = pause(...); second = ...; third = 
Entry: type = N; first = peek(...); second = ...; third = 
Entry: type = N; first = percent(...); second = %; third = 
Entry: type = N; first = pie(...); second = ...; third = 
Entry: type = N; first = pie3(...); second = ...; third = 
Entry: type = N; first = pixels; second = ; third = 
Entry: type = N; first = plaid; second = surface; third = 
Entry: type = N; first = playback; second = ; third = 
Entry: type = N; first = plot(...); second = ...; third = 
Entry: type = N; first = plot3(...); second = ...; third = 
Entry: type = N; first = plots; second = ; third = 
Entry: type = C; first = data,; second = manipulation; third = of
Entry: type = C; first = enhancement; second = tools; third = 
Entry: type = C; first = figures; second = as; third = containers
Entry: type = C; first = manually; second = editing; third = 
Entry: type = C; first = subplots; second = ; third = 
Entry: type = C; first = surface; second = ; third = 
Entry: type = N; first = plotyy(...); second = ...; third = 
Entry: type = N; first = polar(...); second = ...; third = 
Entry: type = N; first = polyfit(...); second = ...; third = 
Entry: type = N; first = polynomial; second = regression; third = 
Entry: type = N; first = polyval(...); second = ...; third = 
Entry: type = N; first = Prim’s; second = ; third = 
Entry: type = N; first = priority; second = queues; third = 
Entry: type = N; first = problem-solving; second = ; third = 
Entry: type = N; first = procedural; second = abstraction; third = 
Entry: type = N; first = procedural; second = programming; third = 
Entry: type = N; first = program; second = bugs; third = 
Entry: type = N; first = programming; second = ; third = 
Entry: type = N; first = programming; second = languages; third = 
Entry: type = H; first = Q; second = ; third = 
Entry: type = N; first = queue; second = ; third = 
Entry: type = C; first = implementation; second = ; third = 
Entry: type = C; first = nature; second = of; third = 
Entry: type = C; first = operations; second = on; third = 
Entry: type = C; first = overview; second = ; third = 
Entry: type = C; first = priority; second = ; third = 
Entry: type = C; first = testing; second = ; third = 
Entry: type = N; first = quick; second = sort; third = 
Entry: type = H; first = R; second = ; third = 
Entry: type = N; first = radix; second = sort; third = 
Entry: type = N; first = rand(...); second = ...; third = 
Entry: type = N; first = randn(...); second = ...; third = 
Entry: type = N; first = read(...); second = ...; third = 
Entry: type = N; first = readcell(...); second = ...; third = 
Entry: type = N; first = readStruct(...); second = ...; third = 
Entry: type = N; first = recording; second = ; third = 
Entry: type = N; first = recursion; second = ; third = 
Entry: type = C; first = activation; second = stack; third = 
Entry: type = C; first = defined; second = ; third = 
Entry: type = C; first = endless; second = ; third = 
Entry: type = C; first = examples; second = ; third = 
Entry: type = C; first = implementation; second = ; third = 
Entry: type = N; first = reshape(...); second = ...; third = 
Entry: type = N; first = resolution; second = ; third = 
Entry: type = C; first = image; second = ; third = 
Entry: type = C; first = of; second = recorded; third = data
Entry: type = N; first = RGB; second = ; third = 
Entry: type = N; first = rmfield(...); second = ...; third = 
Entry: type = N; first = rot90(...); second = ...; third = 
Entry: type = N; first = rotations; second = ; third = 
Entry: type = C; first = 2-D; second = ; third = 
Entry: type = C; first = 3-D; second = ; third = 
Entry: type = N; first = round(...); second = ...; third = 
Entry: type = N; first = runtime; second = errors; third = 
Entry: type = H; first = S; second = ; third = 
Entry: type = N; first = save(...); second = ...; third = 
Entry: type = N; first = scalar; second = vectors; third = 
Entry: type = N; first = scale; second = musical; third = 
Entry: type = N; first = scripts; second = ; third = 
Entry: type = C; first = creating; second = ; third = 
Entry: type = C; first = debugging; second = ; third = 
Entry: type = C; first = example; second = using; third = 
Entry: type = C; first = punctuating; second = ; third = 
Entry: type = C; first = running; second = ; third = 
Entry: type = N; first = searching; second = ; third = 
Entry: type = N; first = semicolon; second = ; third = 
Entry: type = N; first = semilogx(...); second = ...; third = 
Entry: type = N; first = semilogy(...); second = ...; third = 
Entry: type = N; first = setfield(...); second = ...; third = 
Entry: type = N; first = shading(...); second = ...; third = 
Entry: type = N; first = short-circuit; second = ; third = 
Entry: type = C; first = AND; second = &&; third = 
Entry: type = C; first = OR; second = ||; third = 
Entry: type = N; first = shortening; second = vector; third = 
Entry: type = N; first = shrinking; second = images; third = 
Entry: type = N; first = Simpson’s; second = rule; third = 
Entry: type = N; first = simultaneous; second = linear; third = equations
Entry: type = N; first = size(...); second = ...; third = 
Entry: type = C; first = of; second = arrays; third = 
Entry: type = C; first = of; second = character; third = strings
Entry: type = C; first = of; second = sounds; third = 
Entry: type = C; first = of; second = vectors; third = 
Entry: type = N; first = sort(...); second = ...; third = 
Entry: type = N; first = sorting; second = ; third = 
Entry: type = C; first = algorithm; second = for; third = 
Entry: type = C; first = bubble; second = ; third = 
Entry: type = C; first = example; second = using; third = 
Entry: type = C; first = insertion; second = ; third = 
Entry: type = C; first = measuring; second = algorithm; third = cost
Entry: type = C; first = merge; second = ; third = 
Entry: type = C; first = quick; second = ; third = 
Entry: type = C; first = radix; second = ; third = 
Entry: type = N; first = sound(...); second = ...; third = 
Entry: type = N; first = sound; second = ; third = 
Entry: type = C; first = example; second = using; third = 
Entry: type = C; first = Fast; second = Fourier; third = Transform
Entry: type = C; first = frequency; second = domain; third = operations
Entry: type = C; first = intensity; second = ; third = 
Entry: type = C; first = musical; second = ; third = 
Entry: type = C; first = physics; second = of; third = 
Entry: type = C; first = playback; second = ; third = 
Entry: type = C; first = recording; second = ; third = 
Entry: type = C; first = concatenating; second = ; third = 
Entry: type = C; first = slicing; second = ; third = 
Entry: type = N; first = sphere; second = ; third = 
Entry: type = N; first = sphere(...); second = ...; third = 
Entry: type = N; first = spline(...); second = ...; third = 
Entry: type = N; first = spreadsheets; second = ; third = 
Entry: type = N; first = sprintf(...); second = ...; third = 
Entry: type = N; first = square; second = array; third = 
Entry: type = N; first = sscanf(...); second = ...; third = 
Entry: type = N; first = stack; second = ; third = 
Entry: type = N; first = strcmp(...); second = ...; third = 
Entry: type = N; first = strcmpi(...); second = ...; third = 
Entry: type = N; first = stretching; second = images; third = 
Entry: type = N; first = strings; second = ; third = 
Entry: type = C; first = conversion; second = from; third = numbers
Entry: type = N; first = structure; second = arrays; third = 
Entry: type = C; first = constructing; second = ; third = 
Entry: type = C; first = acessing; second = elements; third = 
Entry: type = C; first = inserting; second = data; third = into
Entry: type = C; first = manipulation; second = ; third = 
Entry: type = C; first = functions; second = ; third = 
Entry: type = N; first = subplot(...); second = ...; third = 
Entry: type = N; first = sum(...); second = ...; third = 
Entry: type = N; first = surf(...); second = ...; third = 
Entry: type = N; first = surface; second = ; third = 
Entry: type = C; first = images; second = on; third = 
Entry: type = C; first = plots; second = ; third = 
Entry: type = C; first = 3-D; second = parametric; third = 
Entry: type = C; first = bodies; second = of; third = rotation
Entry: type = C; first = compound; second = surfacesf; third = 
Entry: type = C; first = cube; second = ; third = 
Entry: type = C; first = manipulation; second = of; third = 
Entry: type = C; first = parabolic; second = dish; third = 
Entry: type = N; first = surfc(...); second = ...; third = 
Entry: type = N; first = surfz(...); second = ...; third = 
Entry: type = N; first = switch; second = statement; third = 
Entry: type = C; first = template; second = for; third = 
Entry: type = H; first = T; second = ; third = 
Entry: type = N; first = text; second = files; third = 
Entry: type = C; first = delimited; second = ; third = 
Entry: type = C; first = reading; second = ; third = 
Entry: type = C; first = writing; second = ; third = 
Entry: type = N; first = textscan(...); second = ...; third = 
Entry: type = N; first = title(...); second = ...; third = 
Entry: type = N; first = token; second = ; third = 
Entry: type = N; first = toString(...); second = ...; third = 
Entry: type = N; first = trapezoidal; second = rule; third = 
Entry: type = N; first = tril(...); second = ...; third = 
Entry: type = N; first = type,; second = data; third = 
Entry: type = N; first = typographical; second = errors; third = 
Entry: type = H; first = U; second = ; third = 
Entry: type = N; first = uint8/16(...); second = ...; third = 
Entry: type = N; first = unary; second = minus; third = 
Entry: type = N; first = unary; second = not; third = ~
Entry: type = N; first = underscore; second = character; third = 
Entry: type = N; first = utilities,; second = operating; third = systems
Entry: type = H; first = V; second = ; third = 
Entry: type = N; first = value; second = parameters; third = 
Entry: type = N; first = value(...); second = s; third = 
Entry: type = C; first = assigning,; second = to; third = variables
Entry: type = C; first = boolean/logical; second = ; third = 
Entry: type = C; first = parameters; second = ; third = 
Entry: type = N; first = Variable; second = Editor; third = window
Entry: type = N; first = variable; second = ; third = 
Entry: type = C; first = assigning; second = values; third = to
Entry: type = C; first = global; second = ; third = 
Entry: type = C; first = names; second = ; third = 
Entry: type = C; first = scoping; second = ; third = 
Entry: type = N; first = vector(...); second = s; third = 
Entry: type = C; first = arithmetic; second = operations; third = with
Entry: type = C; first = concatenation; second = of; third = 
Entry: type = C; first = creating; second = ; third = 
Entry: type = C; first = elements; second = ; third = 
Entry: type = C; first = extracting/sorting; second = ; third = 
Entry: type = C; first = indexing; second = of; third = 
Entry: type = C; first = inserting; second = data; third = into
Entry: type = C; first = logical; second = operations; third = with
Entry: type = C; first = operating; second = on; third = 
Entry: type = C; first = scalar; second = ; third = 
Entry: type = C; first = shortening; second = ; third = 
Entry: type = C; first = size; second = of; third = 
Entry: type = C; first = slicing; second = ; third = 
Entry: type = N; first = vectors; second = of; third = indices
Entry: type = N; first = view(...); second = ...; third = 
Entry: type = N; first = von; second = Neumann; third = architecture
Entry: type = H; first = W; second = ; third = 
Entry: type = N; first = waterfall(...); second = ...; third = 
Entry: type = N; first = wav; second = files; third = 
Entry: type = N; first = wavread(...); second = ...; third = 
Entry: type = N; first = wavwrite(...); second = ...; third = 
Entry: type = N; first = weak; second = typing; third = 
Entry: type = N; first = weighted; second = graph; third = 
Entry: type = N; first = while; second = loop; third = 
Entry: type = C; first = breaking; second = ; third = 
Entry: type = C; first = example; second = ; third = 
Entry: type = C; first = loop-and-a-half; second = ; third = 
Entry: type = C; first = for; second = loop; third = vs.
Entry: type = C; first = MATLAB; second = implementation; third = 
Entry: type = C; first = structure; second = of; third = 
Entry: type = C; first = template; second = for; third = 
Entry: type = N; first = who; second = command; third = 
Entry: type = N; first = whos; second = command; third = 
Entry: type = N; first = windows; second = ; third = 
Entry: type = C; first = Command; second = History; third = window
Entry: type = C; first = Command; second = window; third = 
Entry: type = C; first = Current; second = Directory; third = window
Entry: type = C; first = Editor; second = window; third = 
Entry: type = C; first = Figure; second = window; third = 
Entry: type = C; first = Variable; second = Editor; third = window
Entry: type = C; first = Workspace; second = window; third = 
Entry: type = N; first = workspace,; second = saving; third = 
Entry: type = N; first = Workspace; second = window; third = 
Entry: type = N; first = wrapper; second = function; third = 
Entry: type = C; first = template; second = for; third = 
Entry: type = N; first = writecell(...); second = ...; third = 
Entry: type = H; first = X; second = ; third = 
Entry: type = N; first = xlabel(...); second = ...; third = 
Entry: type = N; first = xlsread(...); second = ...; third = 
Entry: type = N; first = xlswrite(...); second = ...; third = 
Entry: type = H; first = Y; second = ; third = 
Entry: type = N; first = ylabel(...); second = ...; third = 
Entry: type = H; first = Z; second = ; third = 
Entry: type = N; first = zeros(...); second = ...; third = 
Entry: type = N; first = zlabel(...); second = ...; third = 

   *** look in Preface.htm

   *** look in 01_Introduction.htm

   *** look in 02_Basics.htm

   *** look in 03_Functions.htm

   *** look in 04_Vectors.htm

   *** look in 05_Execution.htm

   *** look in 06_Strings.htm

   *** look in 07_Structures.htm

   *** look in 08_File_I_O.htm

   *** look in 09_Recursion.htm

   *** look in 10_Problem_Solving.htm

   *** look in 11_Plotting.htm

   *** look in 12_Matrices.htm

   *** look in 13_Images.htm

   *** look in 14_Sounds.htm

   *** look in 15_Numerical_Methods.htm

   *** look in 16_Sorting.htm

   *** look in 17_Graphs.htm

   *** look in Appendix_A.htm

   *** look in Appendix_B.htm

   *** look in Appendix_C.htm

   *** look in Appendix_D.htm

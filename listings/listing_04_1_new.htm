<code><strong>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% listing_04_1</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% Vector indexing script</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;clear; clc<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% Create a vector A with six elements.</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;A = [<font color="#ff8000">2</font> <font color="#ff8000">5</font> <font color="#ff8000">7</font> <font color="#ff8000">1</font> <font color="#ff8000">3</font> <font color="#ff8000">4</font>];<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% When predefining an index vector, if you want to refer to the size of a</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% vector, you must use either the length(...) function or the size(...)</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% function.</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;odds = <font color="#ff8000">1</font>:<font color="#ff8000">2</font>:length(A);<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% The disp(...) function shows the contents of its parameter in the</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% Interactions window, in this case: 'odd values of A using predefined</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% indices'. We use disp(...) rather than comments because comments are</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% visible only in the script itself, not in the program output, which we</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% need here.</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;disp(<font color="#c000c0">'odd values of A using predefined indices'</font>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% Using a predefined index vector to access elements in vector A.</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% Since no assignment is made, the variable ans takes on the value</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% of a three-element vector containing the odd-numbered elements of</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% A. Notice that these are the odd-numbered elements, not the</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% elements with odd values.</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;A(odds)<br>
&nbsp;&nbsp;&nbsp;&nbsp;disp(<font color="#c000c0">'odd values of A using anonymous indices'</font>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% The anonymous version of the command given in Line 4. Notice that the</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% anonymous version allows you to use the word end within the vector meaning</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% the index of its last element.</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;A(<font color="#ff8000">1</font>:<font color="#ff8000">2</font>:end)<br>
&nbsp;&nbsp;&nbsp;&nbsp;disp(<font color="#c000c0">'put evens into odd values in a new array'</font>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% Since B did not previously exist (a good reason to run the clear command</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% at the beginning of a script is to be sure this is true), a new vector is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% created with five elements (the largest index assigned in B). Elements in</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% B at positions less than five that were not assigned are zero filled.</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;B(odds) = A(<font color="#ff8000">2</font>:<font color="#ff8000">2</font>:end)<br>
&nbsp;&nbsp;&nbsp;&nbsp;disp(<font color="#c000c0">'set the even values in B to 99'</font>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% If you assign a scalar quantity to a range of indices in a vector, all</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% values at those indices are assigned the scalar value.</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;B(<font color="#ff8000">2</font>:<font color="#ff8000">2</font>:end) = <font color="#ff8000">99</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;disp(<font color="#c000c0">'find the small values in A'</font>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% Logical operations on a vector produce a vector of Boolean results. This</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% is not the same as typing small = [1 0 0 1 1 0] . If you want to create a</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% logical vector, you must use true and false, for example:</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">%       small = [true false false true true false]</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;small = A < <font color="#ff8000">4</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;disp(<font color="#c000c0">'add 10 to the small values'</font>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% This is actually performing the scalar arithmetic operation + 10</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% on an anonymous vector of three elements, and then assigning those</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% values to the range of elements in A.</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;A(small) = A(small) + <font color="#ff8000">10</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;disp(<font color="#c000c0">'this can be done in one ugly operation'</font>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% Not only is this unnecessarily complex, but it is also less efficient</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% because it is applying the logical operator to A twice. It is better to</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00A000">% use the form above.</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;A(A < <font color="#ff8000">10</font>) = A(A < <font color="#ff8000">10</font>) + <font color="#ff8000">10</font><br>
</strong></code>

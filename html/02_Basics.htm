<!DOCTYPE HTML>
<html>
<head>
	<title>02_Basics.htm</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
	<link rel="stylesheet" href="styles/styles.css" />
	<script async src="./javascript/index.js"></script>
</head>


<body>
<div>#top_nav#</div>
<div class="nav-obj">#nav_obj#</div>

<div class="content">
	<h1 id="2" align="center">Chapter 2: Matlab Basics</h1>

	<!-- Chapter Objectives -->
	<h2>Chapter Objectives</h2>
	<div class="container">
		<p>This chapter introduces you to<a id="1972"></a> some of<a id="2214"></a> the fundamentals of<a id="2215"></a> computing that apply to<a id="1973"></a> all programming<a id="193<a id="2204"></a>2"></a> languages, and<a id="1596"></a> specifically to<a id="1974"></a> the programming<a id="1933"></a> environment used for<a id="2612"></a> program development. The fundamentals of<a id="2216"></a> programming<a id="1934"></a> include</p>
		<ul>
			<li>How to<a id="1975"></a> use abstraction to<a id="1976"></a> think in a general way about a collection of<a id="2217"></a> data<a id="1896"></a> and<a id="1597"></a> procedural steps</li>
			<li>How to<a id="1977"></a> describe the solution of<a id="2218"></a> a problem as an algorithm<a id="1431"></a></li>
			<li>The three paradigms<a id="2197"></a> of<a id="2219"></a> computing and<a id="1598"></a> the position of<a id="2220"></a> MATLAB<a id="1823"></a> in that spectrum</li>
			<li>Three aspects of<a id="2221"></a> the apparently simple task of<a id="2222"></a> assigning<a id="2587"></a> a value<a id="2507"></a> to<a id="1978"></a> a variable<a id="2531"></a></li>
		</ul>
		<p>As you study the user<a id="1960"></a> interface, you will understand:</p>
		<ul>
			<li>How to<a id="1979"></a> explore single commands interactively and<a id="1599"></a> how to<a id="1980"></a> recall earlier commands to<a id="1981"></a> be repeated or changed</li>
			<li>Where to<a id="1982"></a> examine the variables and<a id="1600"></a> files</li>
			<li>How to<a id="1983"></a> view data<a id="1897"></a></li>
			<li>How graphical data<a id="1898"></a> are presented</li>
			<li>How to<a id="1984"></a> create scripts<a id="2450"></a> to<a id="1985"></a> solve simple arithmetic<a id="1440"></a> problems</li>
		</ul>
	</div>

	<!-- Introduction -->
	<h2>Introduction</h2>
	<div class="container">
		<p>The name MATLAB<a id="1824"></a> is a contraction of<a id="2223"></a> Matrix Laboratory. It was developed for<a id="2613"></a> engineers to<a id="1986"></a> create, manipulate, and<a id="1601"></a> visualize matrices<a id="1965"></a>&mdash;rectangular arrays of<a id="2224"></a> numerical<a id="2183"></a> values. At its most basic level, MATLAB<a id="1825"></a> can perform the same functions<a id="2478"></a> as your scientific calculator, but it has expanded far beyond its original capabilities and<a id="1602"></a> now provides an interactive system and<a id="1603"></a> programming<a id="1935"></a> language for<a id="2614"></a> many applications, including financial analysis as well as general scientific and<a id="1604"></a> technical computation. The following are the fundamental components of<a id="2225"></a> MATLAB<a id="1826"></a>:</p>
		<ul>
			<li>A computing system that accepts one instruction at a time in text<a id="2484"></a> form and<a id="1605"></a> implements the logic<a id="1781"></a> of<a id="2226"></a> that instruction. Instructions must conform to<a id="1987"></a> a specific syntax and<a id="1606"></a> vocabulary, which will be the topic of<a id="2227"></a> Chapters 3&ndash;9.</li>
			<li>A large library of<a id="2228"></a> modules that provide high-level capabilities for<a id="2615"></a> processing<a id="1570"></a> data<a id="1899"></a>. These modules will be the major topic of<a id="2229"></a> Chapters 10&ndash;17.</li>
			<li>A graphical user<a id="1961"></a> interface (GUI) that lets users assemble and<a id="1607"></a> implement programs that solve specific problems. The rest of<a id="2230"></a> this chapter will describe the basic behavior of<a id="2231"></a> these windows<a id="2666"></a>.</li>
		</ul>
		<p>MATLAB<a id="1827"></a> offers a number of<a id="2232"></a> advantages to<a id="1988"></a> users over conventional, compiled languages like C++, Java, or FOR<a id="2194"></a>TRAN:</p>
		<ul>
			<li>Because MATLAB<a id="1828"></a> programs are interpreted<a id="1741"></a> rather than compiled, the process of<a id="2233"></a> producing a working solution can be much quicker than with<a id="1745"></a> compiled languages.</li>
			<li>MATLAB<a id="1829"></a> excels at numerical<a id="2184"></a> calculations, especially matrix<a id="1966"></a> calculations.</li>
			<li>MATLAB<a id="1830"></a> has built-in graphics capabilities that produce professional-looking images<a id="1573"></a> for<a id="2616"></a> reports.</li>
		</ul>
		<p>However, the very attributes that make MATLAB<a id="1831"></a> convenient for<a id="2617"></a> a user<a id="1962"></a> to<a id="1989"></a> develop quick<a id="2475"></a> solutions to<a id="1990"></a> certain problems make it unsuitable for<a id="2618"></a> other kinds of<a id="2234"></a> projects. For example<a id="2458"></a>:</p>
		<ul>
			<li>MATLAB<a id="1832"></a> does not work well for<a id="2619"></a> large computing projects where a number of<a id="2235"></a> developers share coding responsibilities.</li>
			<li>Professional GUIs and<a id="1608"></a> windowing applications (like the MATLAB<a id="1833"></a> system itself) are best written in a compiled language.</li>
		</ul>
	</div>

	<div class="chp-section" data-sect-num="1" data-sect-name="Programming Language Background">
		<!-- Programming Language Background -->
		<h2 id="2_1">2.1 Programming Language Background</h2>
		<div class="container">
			<p>Before learning about concepts in computing, you need to<a id="1991"></a> understand the background of<a id="2236"></a> programming<a id="193<a id="2205"></a>6"></a> languages. This section discusses the following aspects of<a id="2237"></a> programming<a id="193<a id="2206"></a>7"></a> languages: abstraction, algorithms, programming<a id="1938"></a> paradigms<a id="2198"></a>, and<a id="1609"></a> three fundamental concepts of<a id="2238"></a> programming<a id="1939"></a>&mdash;assigning<a id="2588"></a> values to<a id="1992"></a> variables, data<a id="1900"></a> typing, and<a id="1610"></a> the difference between classes<a id="1467"></a> and<a id="1611"></a> objects<a id="2188"></a>.</p>
		</div>

		<div class="chp-subsection" data-sub-num="1" data-sub-name="Abstraction">
			<!-- Abstraction -->
			<h3 id="2_1_1">2.1.1 Abstraction</h3>
			<div class="container">
				<p>For the purpose of<a id="2239"></a> this text<a id="2485"></a>, we will define abstraction as &ldquo;expressing a quality apart from<a id="1538"></a> a particular implementation<a id="2209"></a>.&rdquo; We use the concept of<a id="2240"></a> abstraction in everyday conversation without thinking about it:</p>
				<p><code>&ldquo;To convert from<a id="1539"></a> degrees Celsius to<a id="1993"></a> Kelvin, you add 273 to<a id="1994"></a> the temperature.&rdquo;</code><br>
				<code>&ldquo;drive home.&rdquo; </code></p>
				<p>The first is an example<a id="2459"></a> of<a id="2241"></a> <strong>data<a id="1901"></a> abstraction<a id="1505"></a></strong>. <code>&ldquo;The temperature&rdquo;</code> could mean a single reading<a id="1586"></a> from<a id="1540"></a> the thermometer hanging outside the window or a table of<a id="2242"></a> temperature readings for<a id="2620"></a> the month of<a id="2243"></a> August. The specifics are unimportant; the phrase captures all you need to<a id="1995"></a> know. The second example<a id="2460"></a> is actually much more complex &mdash; an example<a id="2461"></a> of<a id="2244"></a> multiple levels of<a id="2245"></a> <strong>procedural abstraction<a id="2203"></a></strong>. To a person taking the same route home every night, <code>&ldquo;drive home&rdquo;</code> is all that is required to<a id="1996"></a> understand the idea. To a competent driver unfamiliar with<a id="1746"></a> the route, the next level of<a id="2246"></a> abstraction might be necessary&mdash;turn right out of<a id="2247"></a> the parking lot, left onto Main Street, and<a id="1612"></a> so on<a id="1784"></a>. For instructions to<a id="1997"></a> guide a future robotic commuter vehicle, an incredibly fine-grained level of<a id="2248"></a> abstraction will be required. Everything taken for<a id="2621"></a> granted in the higher level abstractions will need to<a id="1998"></a> be meticulously spelled out for<a id="2622"></a> the robotic vehicle &mdash; start the engine, accelerate the vehicle, look out for<a id="2623"></a> traffic, keep in the lane, find the turn, steer the vehicle, control the speed, observe and<a id="1613"></a> obey all signs, and<a id="1614"></a> so on<a id="1785"></a>.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="2" data-sub-name="Algorithms">
			<!-- Algorithms -->
			<h3 id="2_1_2">2.1.2 Algorithms</h3>
			<div class="container clearfix">
				<div class="float-sm-right card">
					<img src="..\Images\Fig_2_0.JPG" alt="Figure 2.1" class="fig card-image">
					<p class="figure-name card-title">Figure<a id="2742"></a> 2.1: Problem Decomposition</p>
				</div>
				<p>Chapter 1 defined<a id="1566"></a> problem solving as the ability to<a id="1999"></a> isolate sub-problems that seem simple and<a id="1615"></a> appropriate to<a id="2000"></a> solve, and<a id="1616"></a> then assemble the solutions to<a id="2001"></a> these sub-problems. The solutions to<a id="2002"></a> each of<a id="2249"></a> these sub-problems would be expressed as an <b>algorithm<a id="1432"></a></b>, which is a sequence of<a id="2250"></a> instructions for<a id="2624"></a> solving a sub-problem. The process of<a id="2251"></a> solving each sub-problem and<a id="1617"></a> assembling the solutions to<a id="2003"></a> form the solution to<a id="2004"></a> the whole problem could also be expressed as an algorithm<a id="1433"></a> at a higher level of<a id="2252"></a> abstraction.</p>
				<p>The level of<a id="2253"></a> abstraction needed to<a id="2005"></a> describe an algorithm<a id="1434"></a> varies greatly with<a id="1747"></a> the mechanism available. For example<a id="2462"></a>, describing the algorithm<a id="1435"></a> (recipe) for<a id="2625"></a> baking cookies might take the following forms:</p>
				<ul>
					<li>To your grandmother, who<a id="2665"></a> has been baking cookies for<a id="2626"></a> the last 50 years, it might be <code>&ldquo;Please bake some cookies.&rdquo;</code></li>
					<li>To others it might be <code>&ldquo;Buy a cookie mix and<a id="1618"></a> follow the directions.&rdquo;</code></li>
					<li>To a young person learning to<a id="2006"></a> cook from<a id="1541"></a> scratch, the algorithm<a id="1436"></a> might include an intricate series of<a id="2254"></a> instructions for<a id="2627"></a> measuring<a id="2474"></a>, sifting, and<a id="1619"></a> combining ingredients; setting the oven temperature and<a id="1620"></a> preheating the oven; forming the cookies and<a id="1621"></a> putting them on<a id="1786"></a> the cookie sheet; and<a id="1622"></a> so on<a id="1787"></a>.</li>
				</ul>
				<p>In programming<a id="1940"></a> terms, algorithms are frequently expressed first conceptually at a high level of<a id="2255"></a> abstraction, as illustrated in Figure<a id="2743"></a> 2.1. The solutions to<a id="2007"></a> each sub-problem would then be expressed at lower and<a id="1623"></a> lower levels of<a id="2256"></a> abstraction until the description is sufficient to<a id="2008"></a> write programs that solve each sub-problem, thereby contributing the pieces that, when assembled, solve the whole problem.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="3" data-sub-name="Programming Paradigms">
			<!-- Programming Paradigms -->
			<h3 id="2_1_3">2.1.3 Programming Paradigms</h3>
			<div class="container">
				<p>From the Greek word <i>paradeigma</i>&mdash;&ldquo;to<a id="2009"></a> show alongside&rdquo;&mdash;the American Heritage Dictionary defines a paradigm as &ldquo;a set of<a id="2257"></a> assumptions, concepts, values, and<a id="1624"></a> practices that constitutes a way of<a id="2258"></a> viewing reality for<a id="2628"></a> the community that shares them, especially in an intellectual discipline.&rdquo; So a programming<a id="1941"></a> paradigm becomes a codified set of<a id="2259"></a> practices allowing the community of<a id="2260"></a> computing professionals to<a id="2010"></a> frame their ideas. This section considers three radically different paradigms<a id="2199"></a>: functional programming<a id="1537"></a>, procedural programming<a id="1942"></a>, and<a id="1625"></a> object-oriented<a id="2186"></a> programming<a id="1943"></a>.</p>
				<p><b>Functional programming<a id="1944"></a></b> is typically associated with<a id="1748"></a> languages like Lisp and<a id="1626"></a> Forth, in which every programming<a id="1945"></a> operation<a id="1583"></a> is actually implemented as a function<a id="1534"></a> call with<a id="1749"></a> no side effects (changes of<a id="2261"></a> state of<a id="2262"></a> the program surroundings) permitted or implemented in the language. Without side effects, a programming<a id="1946"></a> solution can be mathematically proven to<a id="2011"></a> be correct&mdash;an enormous advantage. Except for<a id="2629"></a> the discussion of<a id="2263"></a> recursion<a id="2212"></a>, this paradigm will not be mentioned again.</p>
				<p><b>Procedural programming<a id="1947"></a></b> is typical of<a id="2264"></a> languages like FOR<a id="2195"></a>TRAN, C, and<a id="1627"></a> MATLAB<a id="1834"></a>, where the basic programs or sub-programs are sequences of<a id="2265"></a> operations<a id="2189"></a> on<a id="1788"></a> data<a id="1902"></a> items that are generally accessible to<a id="2012"></a> all programs. Although side effects from<a id="1542"></a> sub-programs&mdash;such as changing<a id="1967"></a> the values of<a id="2266"></a> variables outside that sub-program&mdash;are considered poor practice, they are not prohibited by the language.</p>
				<p><b>Object-oriented programming<a id="1948"></a> (OOP)</b>, typical of<a id="2267"></a> languages like C++, Ada, and<a id="1628"></a> Java, is a relatively new addition to<a id="2013"></a> the world of<a id="2268"></a> programming<a id="1949"></a> paradigms<a id="2200"></a>. It is characterized by the concept of<a id="2269"></a> encapsulating, or packaging, data<a id="1903"></a> items together with<a id="1750"></a> the methods or functions<a id="2479"></a> that manipulate those data<a id="1904"></a> items. In this paradigm, side effects are explicitly managed by controlling access to<a id="2014"></a> the data<a id="1905"></a> and<a id="1629"></a> methods in a particular grouping. The major theme in true<a id="1587"></a> OOP is that &ldquo;everything is an object.&rdquo; You will see MATLAB<a id="1835"></a> exhibiting many traits of<a id="2270"></a> OOP as you work through this book, but you will not need to<a id="2015"></a> use this programming<a id="1950"></a> paradigm.</p>
			</div>
		</div>
	</div>

	<div class="chp-section" data-sect-num="2" data-sect-name="Basic Data Manipulation">
		<!-- Basic Data Manipulation -->
		<h2 id="2_2">2.2 Basic Data Manipulation</h2>
		<div class="container">
			<p>In order to<a id="2016"></a> use MATLAB<a id="1836"></a> to<a id="2017"></a> demonstrate basic data<a id="1906"></a> manipulation<a id="2477"></a>, we begin with<a id="1751"></a> an exercise in starting and<a id="1630"></a> stopping the MATLAB<a id="1837"></a> system, and<a id="1631"></a> then discuss assigning<a id="2589"></a> values to<a id="2018"></a> variables, how Matlab determines the data<a id="1907"></a> type,<a id="2501"></a> and<a id="1632"></a> the difference between a class and<a id="1633"></a> an object.</p>
		</div>

		<div class="chp-subsection" data-sub-num="1" data-sub-name="Starting and Stopping MATLAB">
			<!-- Starting and Stopping MATLAB -->
			<h3 id="2_2_1">2.2.1 Starting and<a id="1634"></a> Stopping MATLAB<a id="1838"></a></h3>
			<div class="container">
				<p>The process of<a id="2271"></a> starting and<a id="1635"></a> stopping MATLAB<a id="1839"></a> varies with<a id="1752"></a> the nature<a id="1579"></a> of<a id="2272"></a> the implementation<a id="2210"></a>. Refer to<a id="2019"></a> the &quot;Getting Started&quot; that came with<a id="1753"></a> your MATLAB<a id="1840"></a> release. We will soon see the details of<a id="2273"></a> all the&nbsp;possible windows<a id="2667"></a>. For the moment, however, we will interact with<a id="1754"></a> MATLAB<a id="1841"></a> by typing instructions in the Command<a id="2674"></a> window that will always be the first window available to<a id="2020"></a> you..</p>
				<div class="exercise">#exercise_2_1#</div>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="2" data-sub-name="Assigning Values to Variables">
			<!-- Assigning Values to Variables -->
			<h3 id="2_2_2">2.2.2 Assigning Values to<a id="2021"></a> Variables</h3>
			<div class="container">
				<p>The concept of<a id="2274"></a> assigning<a id="2590"></a> values to<a id="2022"></a> variables is the first challenge facing novice programmers. The difficulty arises because many programming<a id="195<a id="2207"></a>1"></a> languages (including MATLAB<a id="1842"></a>) present this simple concept in a syntax that is very similar to<a id="2023"></a> conventional algebra, but with<a id="1755"></a> significantly different meaning. Consider, for<a id="2630"></a> example<a id="2463"></a>, the following algebraic expression:</p>
				<p><code>z = x + y</code></p>
				<p>In normal algebra, this is a two-way relationship that is an identity for<a id="2631"></a> the duration of<a id="2275"></a> the problem. If you knew the values of<a id="2276"></a> <code>z</code> and<a id="1636"></a> <code>x</code>, you could derive the value<a id="2508"></a> of<a id="2277"></a> <code>y</code> with<a id="1756"></a> no further analysis. To a programmer, however, this statement has a different meaning. It means that you want to<a id="2024"></a> sum the values given to<a id="2025"></a> the variables <code>x</code> and<a id="1637"></a> <code>y</code>, and<a id="1638"></a> store the result in a variable<a id="2532"></a> called <code>z</code>. If either <code>x</code> or <code>y</code> is unknown at the time of<a id="2278"></a> executing this statement, an error ensues. In particular, this relationship is true<a id="1588"></a> only for<a id="2632"></a> this statement. The relationship can be revoked in the next instruction, which might be:</p>
				<p><code>z = 4*x - y</code></p>
				<p>In algebra, this pair of<a id="2279"></a> statements collectively constrains the values of<a id="2280"></a> <code>x</code>, <code>y</code>, and<a id="1639"></a> <code>z</code>. In programming<a id="1952"></a>, the only significance is that the programmer decided to<a id="2026"></a> calculate the current value<a id="2509"></a> of<a id="2281"></a> <code>z</code> differently. A few computer languages are sensitive to<a id="2027"></a> this dilemma and<a id="1640"></a> use a different symbol for<a id="2633"></a> assigning<a id="2591"></a> values to<a id="2028"></a> a variable<a id="2533"></a>. For example<a id="2464"></a>, in Pascal or Ada, an instruction to<a id="2029"></a> assign the value<a id="2510"></a> <code>z = x + y</code> would be written as follows: <code>z := x + y</code> The &ldquo;<code>:=</code>&rdquo; operator clearly indicates that this is an assignment<a id="1447"></a> statement, not an algebraic identity.</p>
				<p><strong>Variable<a id="2526"></a> names<a id="2592"></a></strong>: In general, variable<a id="2534"></a> names<a id="2593"></a> may contain any combination of<a id="2282"></a> uppercase and<a id="1641"></a> lowercase alphabetic letters, numbers<a id="1969"></a>, and<a id="1642"></a> the special characters <code>_</code> (underscore) and<a id="1643"></a> <code>$</code> (dollar). The underscore<a id="2505"></a> character<a id="1813"></a> is frequently used to<a id="2030"></a> represent a space in a variable<a id="2535"></a> name because spaces are not allowed. However, variable<a id="2536"></a> names<a id="2594"></a> may not begin with<a id="1757"></a> a numeric character<a id="1814"></a>, and<a id="1644"></a> even though the names<a id="2595"></a> may be hundreds of<a id="2283"></a> characters long, the first 64 characters must be unique. Exercise 2.2 demonstrates the assignment<a id="1448"></a> of<a id="2284"></a> values to<a id="2031"></a> variables.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="3" data-sub-name="Data Typing">
			<!-- Data Typing -->
			<h3 id="2_2_3">2.2.3 Data Typing</h3>
			<div class="container clearfix">
				<div class="card float-sm-right style-points">
			      <p class="card-title">Style Points 2.1</p>
			      <p class="card-text">
							<p ID="250">1. Some early versions of<a id="2285"></a> the FOR<a id="2196"></a>TRAN and<a id="1645"></a> Basic languages severely restricted the number of<a id="2286"></a> characters you could use for<a id="2634"></a> variable<a id="2537"></a> names<a id="2596"></a>. It is no longer necessary to<a id="2032"></a> program as if you were still in the &ldquo;bad old days.&rdquo; Choose names<a id="2597"></a> for<a id="2635"></a> variables that describe their content. For example<a id="2465"></a>, a variable<a id="2538"></a> used to<a id="2033"></a> store the velocity of<a id="2287"></a> an object should be named <code>velocity_in_feet_per_second</code> rather than <code>v</code>.</p>
							<p>2. Since the space character<a id="1815"></a> is not permitted in variable<a id="2539"></a> names<a id="2598"></a>, there are two conventions for<a id="2636"></a> joining multiple words together to<a id="2034"></a> make a single variable<a id="2540"></a> name. One uses the underscore<a id="2506"></a> character<a id="1816"></a> to<a id="2035"></a> separate the words (<code>file_size<a id="2602"></a></code>), and<a id="1646"></a> the other capitalizes the first letter of<a id="2288"></a> additional words (<code>fileSize</code>).You should choose one convention and<a id="1647"></a> be consistent with<a id="1758"></a> it. You cannot use a hyphen to<a id="2036"></a> concatenate words&mdash;MATLAB<a id="1843"></a> treats the name <code>file-size<a id="2603"></a></code> as the arithmetic<a id="1441"></a> operation<a id="1584"></a> subtracting the value<a id="2511"></a> of<a id="2289"></a> the variable<a id="2541"></a> <code>size<a id="2604"></a></code> from<a id="1543"></a> the value<a id="2512"></a> of<a id="2290"></a> the variable<a id="2542"></a> <code>file</code>.</p>
					</div>
				<p>It is important to<a id="2037"></a> understand how MATLAB<a id="1844"></a> treats the data<a id="1908"></a> stored in a variable<a id="2543"></a>. Different languages take varying approaches to<a id="2038"></a> this problem, and<a id="1648"></a> languages in general fall into two broad categories: untyped and<a id="1649"></a> typed. In general, interpreted<a id="1742"></a> languages like Lisp, Forth, Python, and<a id="1650"></a> MATLAB<a id="1845"></a> determine the type of<a id="2291"></a> data<a id="1909"></a> contained by a variable<a id="2544"></a> based on<a id="1789"></a> the type of<a id="2292"></a> data<a id="1910"></a> being stored there. Such languages are referred to<a id="2039"></a> as untyped languages. Each assignment<a id="1449"></a> statement is presumed to<a id="2040"></a> be correct. If the variable<a id="2545"></a> already exists, both its type and<a id="1651"></a> value<a id="2513"></a> are reassigned; if it did not exist before, a new variable<a id="2546"></a> is created. Exercise 2.2 illustrates the effect of<a id="2293"></a> performing simple mathematical operations<a id="2190"></a> in MATLAB<a id="1846"></a>. By putting <code>49</code> into the variable<a id="2547"></a> <code>radius</code>, you established its type as numeric and<a id="1652"></a> enabled it to<a id="2041"></a> be used in normal arithmetic<a id="1442"></a> operations<a id="2191"></a>. Character strings are specified by including arbitrary characters between single quote marks. These have the type <code>char</code>, and<a id="1653"></a> must be handled differently, as discussed fully in Chapter 6. When you stored a character<a id="1817"></a> string in the variable<a id="2548"></a> radius, adding 1 to<a id="2042"></a> it did not cause an error in MATLAB<a id="1847"></a> as it would in some other languages, because addition is actually defined<a id="1567"></a> for<a id="2637"></a> character<a id="1818"></a> strings<a id="1466"></a>. It just did something radically different &mdash; it actually converted the individual characters to<a id="2043"></a> numbers<a id="1970"></a> and<a id="1654"></a> then added <code>1</code>!</p>
			</div>
			<div class="exercise">#exercise_2_2#</div>
			<div class="container">
				<p>While this ability to<a id="2044"></a> assign data<a id="1911"></a> types<a id="1589"></a> dynamically is good for<a id="2638"></a> interpreted<a id="1743"></a> languages, it has two undesirable consequences that are really hard to<a id="2045"></a> unravel as the program runs:</p>
				<ul>
					<li>Typographical errors that misspell variable<a id="2549"></a> names<a id="2599"></a> in assignment<a id="1450"></a> statements cause new variables to<a id="2046"></a> be declared unintentionally and<a id="1655"></a> without the user<a id="1963"></a> noticing the error</li>
					<li>Logical errors that assign incompatible data<a id="1912"></a> to<a id="2047"></a> the same variable<a id="2550"></a> can cause obscure runtime<a id="2449"></a> errors</li>
				</ul>
				<p><strong>Typed languages </strong>require that programmers declare both the name and<a id="1656"></a> type of<a id="2294"></a> a variable<a id="2551"></a> before a value<a id="2514"></a> can be assigned to<a id="2048"></a> it. With this information, a compiler can then do a better job of<a id="2295"></a> ensuring that the programmer is not using a variable<a id="2552"></a> in an unintended way. Typed languages fall into two categories: weak<a id="2607"></a> typing and<a id="1657"></a> strong typing. If programmers decide to<a id="2049"></a> use only the normal data<a id="1913"></a> types<a id="1590"></a>, such as double and<a id="1658"></a> char as we saw above, this is known as <strong>weak<a id="2608"></a> typing </strong>and<a id="1659"></a> is the usual approach to<a id="2050"></a> typing. In some extreme circumstances, programmers may choose to<a id="2051"></a> be more restrictive and<a id="1660"></a> define specific data<a id="1914"></a> types<a id="1591"></a> with<a id="1759"></a> a limited set of<a id="2296"></a> permitted interactions. This is called <strong>strong typing</strong>. For example<a id="2466"></a>, programmers might define the following data<a id="1915"></a> types<a id="1592"></a>, all of<a id="2297"></a> which are actually of<a id="2298"></a> type double: <code>meters</code>, <code>seconds</code>, and<a id="1661"></a> <code>meters_per_second</code>. The compiler would then be provided with<a id="1760"></a> a set of<a id="2299"></a> rules specifying the legal relationships between these types<a id="1593"></a>. For example<a id="2467"></a>, assignments can only be made to<a id="2052"></a> a variable<a id="2553"></a> of<a id="2300"></a> type <code>meters_per_ second</code> from<a id="1544"></a> another variable<a id="2554"></a> of<a id="2301"></a> the same type,<a id="2502"></a> or by dividing a variable<a id="2555"></a> of<a id="2302"></a> type <code>meters</code> by a variable<a id="2556"></a> of<a id="2303"></a> type <code>seconds</code>. Before rushing to<a id="2053"></a> judge on<a id="1790"></a> the pickiness of<a id="2304"></a> this approach, note that this would have avoided the loss in 1999 of<a id="2305"></a> the Mars Climate Orbiter, which crashed into Mars because one group of<a id="2306"></a> programmers used English units while<a id="2609"></a> another used metric.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="4" data-sub-name="Classes and Objects">
			<!-- Classes and Objects -->
			<h3 id="2_2_4">2.2.4 Classes and<a id="1662"></a> Objects</h3>
			<div class="container">
				<p>This section discusses two different attributes of<a id="2307"></a> a variable<a id="2557"></a>: its type and<a id="1663"></a> its value<a id="2515"></a>. In Section 2.2.2 you saw that a variable<a id="2558"></a> is a container for<a id="2639"></a> data<a id="1916"></a>, whose value<a id="2516"></a> is determined by what is assigned to<a id="2054"></a> the variable<a id="2559"></a>. In Section 2.2.3 you saw that by making that assignment<a id="1451"></a> to<a id="2055"></a> a variable<a id="2560"></a>, MATLAB<a id="1848"></a> also infers the type of<a id="2308"></a> data<a id="1917"></a> stored in that variable<a id="2561"></a>. You will see that while<a id="2610"></a> MATLAB<a id="1849"></a> is an untyped language, the programs you write will behave differently if applied to<a id="2056"></a> data<a id="1918"></a> of<a id="2309"></a> different types<a id="1594"></a>. For example<a id="2468"></a>, the type <code>double</code> specifies the form and<a id="1664"></a> expected behavior of<a id="2310"></a> a number. Adding <code>1</code> to<a id="2057"></a> a variable<a id="2562"></a> of<a id="2311"></a> class <code>double</code> containing <code>4</code> will, as expected, produce the result <code>5</code>. Similarly, the type <code>char</code> is intended to<a id="2058"></a> hold<a id="1563"></a> a single character<a id="1819"></a>. Adding <code>1</code> to<a id="2059"></a> a <code>char</code> variable<a id="2563"></a> containing the value<a id="2517"></a> <code>&quot;d&quot;</code> will produce the numerical<a id="2185"></a> equivalent of<a id="2312"></a> the character<a id="1820"></a> <code>&quot;e&quot;</code>. MATLAB<a id="1850"></a> refers to<a id="2060"></a> the type of<a id="2313"></a> data<a id="1919"></a> in a variable<a id="2564"></a> as its class, and<a id="1665"></a> the value<a id="2518"></a> contained in the variable<a id="2565"></a> at any time as an object, an instance of<a id="2314"></a> that class. So in the operation<a id="1585"></a>:</p>
				<p><code>this_number = 42.0</code></p>
				<p>the variable<a id="2566"></a> <code>this_number</code> would be defined<a id="1568"></a> (if it didn&#39;t already exist); its class would be set to<a id="2061"></a> <code>double</code>, the inherent type of<a id="2315"></a> a floating point number; and<a id="1666"></a> its value<a id="2519"></a> to<a id="2062"></a> <code>42.0</code>. So the word <code>double</code> corresponds to<a id="2063"></a> a type definition or class, while<a id="2611"></a> the variable<a id="2567"></a> <code>this_number</code> is a variable<a id="2568"></a> of<a id="2316"></a> that type,<a id="2503"></a> which is an instance of<a id="2317"></a> that class or, in programming<a id="1953"></a> terms, an object.</p>
			</div>
		</div>
	</div>

	<div class="chp-section" data-sect-num="3" data-sect-name="MATLAB User Interface">
		<!-- MATLAB User Interface -->
		<h2 id="2_3">2.3 MATLAB<a id="1851"></a> User Interface</a></h2>
		<div class="container">
			<p>MATLAB<a id="1852"></a> uses several display windows<a id="2668"></a>. The default view includes a large Command<a id="2675"></a> window and<a id="1667"></a> a set of<a id="2318"></a> other windows<a id="2669"></a> showing the files, variables, and<a id="1668"></a> command history. You can customize the window layout by selecting the blue bar on<a id="1791"></a> the top of<a id="2319"></a> the window and<a id="1669"></a> dragging that window. You can even drop one window on<a id="1792"></a> top of<a id="2320"></a> another so they share screen space as shown in Figs 2.3 and<a id="1670"></a> 2.4. If you want to<a id="2064"></a> return to<a id="2065"></a> the default window layout, select the HOME tab at the top of<a id="2321"></a> the screen and<a id="1671"></a> pull down Layout-&gt;Default.</p>
			<p>Other windows<a id="2670"></a>, such as an editor window or a figure window, will automatically open when needed.</p>
		</div>

		<div class="chp-subsection" data-sub-num="1" data-sub-name="Command Window">
			<!-- Command Window -->
			<h3 id="2_3_1">2.3.1 Command<a id="2676"></a> Window<a id="1484"></a></h3>
			<div class="container clearfix">
				<div class="card float-right">
			      <img src="..\Images\Fig_2_1.JPG" alt="Figure 2.2" class="fig card-image">
			      <p class="figure-name card-title">Figure<a id="2744"></a> 2.2: Command<a id="2677"></a> Window<a id="1485"></a></p>
			    </div>
				<p>You can use MATLAB<a id="1853"></a> in two modes:</p>
				<ul>
					<li>Command<a id="2678"></a> mode, which is useful if you need instant responses to<a id="2066"></a> specific MATLAB<a id="1854"></a> commands, and<a id="1672"></a></li>
					<li>Edit mode, in which practical solutions are developed.</li>
				</ul>
				<p>When working in Command<a id="2679"></a> mode, we use the Command<a id="2680"></a> window, which offers an environment similar to<a id="2067"></a> a scientific calculator. This window lets you save any values you calculate, but you cannot permanently save the commands used to<a id="2068"></a> generate those values. Figure<a id="2745"></a> 2.2 shows how the Command<a id="2681"></a> Window<a id="1486"></a> might look after the completion of<a id="2322"></a> an exercise similar to<a id="2069"></a> Exercise 2.2. The Command<a id="2682"></a> window is useful for<a id="2640"></a> performing quick<a id="2476"></a> experiments to<a id="2070"></a> discover the effects of<a id="2323"></a> different commands in MATLAB<a id="1855"></a> before embedding them in a larger program. You can perform calculations in the Command<a id="2683"></a> window much like doing calculations on<a id="1793"></a> a scientific calculator. In fact, most of<a id="2324"></a> the syntax is even the same. Exercise 2.3 shows how you might use the Command<a id="2684"></a> window to<a id="2071"></a> test two simple calculations. Notice that in both of<a id="2325"></a> the commands in Exercise 2.3, MATLAB<a id="1856"></a> echoes the result as if it were saved in a variable<a id="2569"></a> called <code>ans</code>. This is the default variable<a id="2570"></a> used to<a id="2072"></a> save the result of<a id="2326"></a> any calculation you perform in the Command<a id="2685"></a> window that is not specifically assigned to<a id="2073"></a> another variable<a id="2571"></a>. Notice also the use of<a id="2327"></a> one of<a id="2328"></a> MATLAB<a id="1857"></a>&rsquo;s many built-in functions<a id="2480"></a>, <code>cos(...)</code> that computes the cosine of<a id="2329"></a> an angle in radians, and<a id="1673"></a> values, in this case<a id="1461"></a>, <code>pi</code>.</p>
				<p>You will see in the next section how to<a id="2074"></a> use the Editor<a id="2729"></a> window<a id="1506"></a> to<a id="2075"></a> create and<a id="1674"></a> execute a text<a id="2486"></a> file of<a id="2330"></a> commands as the first step to<a id="2076"></a> unleashing the full programming<a id="1954"></a> capability of<a id="2331"></a> the language.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="2" data-sub-name="Command History">
			<!-- Command History -->
			<h3 id="2_3_2">2.3.2 Command<a id="2686"></a> History<a id="1473"></a></h3>
			<div class="container">
				<p>The Command<a id="2687"></a> History<a id="1474"></a> records the commands you issued in the Command<a id="2688"></a> window in chronological sequence. When you exit MATLAB<a id="1858"></a> or when you issue the <code>clc<a id="1468"></a></code> (Clear Commands) instruction, the commands listed in the Command<a id="2689"></a> window are cleared. However, the Command<a id="2690"></a> History<a id="1475"></a> retains a list of<a id="2332"></a> all the commands you issued. When in Command<a id="2691"></a> mode, you can recall commands from<a id="1545"></a> the Command<a id="2692"></a> History<a id="1476"></a> with<a id="1761"></a> the up-arrow key. A window pops up listing the most recent entries if the Command<a id="2693"></a> History<a id="1477"></a>. In general, the up-arrow and<a id="1675"></a> down-arrow keys can navigate throughout the Command<a id="2694"></a> History<a id="1478"></a> copying each command in turn in the Command<a id="2695"></a> Window<a id="1487"></a>. You execute any command from<a id="1546"></a> the Command<a id="2696"></a> History<a id="1479"></a> with<a id="1762"></a> the Enter key.</p>
				<p>While more complex operations<a id="2192"></a> on<a id="1794"></a> the Command<a id="2697"></a> History<a id="1480"></a> are available, we recommend changing<a id="1968"></a> to<a id="2077"></a> Edit mode, building<a id="1460"></a> and<a id="1676"></a> saving sequences of<a id="2333"></a> commands as scripts<a id="2451"></a>.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="3" data-sub-name="Workspace Window">
			<!-- Workspace Window -->
			<h3 id="2_3_3">2.3.3 Workspace<a id="2753"></a> Window</h3>
			<div class="container clearfix">
				<div class="card float-right">
				      <img src="..\Images\Fig_2_2.JPG" alt="Figure 2.3" class="fig card-image">
				      <p class="figure-name card-title">Figure<a id="2746"></a> 2.3: Workspace<a id="2754"></a> Window</p>
			  </div>
				<p>The Workspace<a id="2755"></a> window keeps track of<a id="2334"></a> the variables you have defined<a id="1569"></a> as you execute commands in the Command<a id="2698"></a> window or from<a id="1547"></a> scripts<a id="2452"></a> or functions<a id="2481"></a>. By default, the columns in the window display the name of<a id="2335"></a> the variable<a id="2572"></a> and<a id="1677"></a> its current value<a id="2520"></a>. You can customize the columns by right-clicking the menu bar containing &quot;Name.&quot; In Figure<a id="2747"></a> 2.3, we have added columns for<a id="2641"></a> the size<a id="2605"></a> of<a id="2336"></a> the variables, the number of<a id="2337"></a> bytes occupied in memory and<a id="1678"></a> the data<a id="1920"></a> type,<a id="2504"></a> or class. In this case<a id="1462"></a>, we are seeing the workspace that results from<a id="1548"></a> Exercise 2.2. Notice that in addition to<a id="2078"></a> the &quot;class&quot; column, the icon to<a id="2079"></a> the left of<a id="2338"></a> the variable<a id="2573"></a> name symbolizes the data<a id="1921"></a> type of<a id="2339"></a> the variables. We see that the variable<a id="2574"></a> <code>label</code> is a 1 &times; 18 array<a id="1443"></a>, uses 36 bytes of<a id="2340"></a> memory, and<a id="1679"></a> is an object of<a id="2341"></a> class char. We will discuss strings in a later chapter.</p>
				<p>You can recall the values for<a id="2642"></a> any variable<a id="2575"></a> by typing the variable<a id="2576"></a> name in the Command<a id="2699"></a> window. If you prefer to<a id="2080"></a> have a less<a id="1744"></a> cluttered desktop, you can close<a id="1470"></a> any of<a id="2342"></a> the windows<a id="2671"></a> except the Command<a id="2700"></a> window by clicking the x in the upper-right corner of<a id="2343"></a> each window.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="4" data-sub-name="Current Folder Window">
			<!-- Current Folder Window -->
			<h3 id="2_3_4">2.3.4 Current<a id="2718"></a> Folder Window</h3>
			<div class="container clearfix">
				<div class="card float-right">
			      <img src="..\Images\Fig_2_3.JPG" alt="Figure 2.4" class="fig card-image">
			      <p class="figure-name card-title">Figure<a id="2748"></a> 2.4: Current<a id="2719"></a> Folder Window</p>
			  </div>
				<p>When MATLAB<a id="1859"></a> accesses files from<a id="1549"></a> and<a id="1680"></a> saves information to<a id="2081"></a> your hard drive, it uses the current directory shown on<a id="1795"></a> the tool bar above the Command<a id="2701"></a> window. The default for<a id="2643"></a> the current directory depends on<a id="1796"></a> your version of<a id="2344"></a> the software and<a id="1681"></a> how it was installed. This can be changed by selecting another directory from<a id="1550"></a> the drop-down list to<a id="2082"></a> the right of<a id="2345"></a> the current directory name, or by browsing through your computer files using the browse button located to<a id="2083"></a> the right of<a id="2346"></a> the drop-down list.</p>
				<p>Like the Workspace<a id="2756"></a> Window, the Current<a id="2720"></a> Folder window can be customized. By right-clicking the white bar containing &quot;Name&quot;, you can select columns for<a id="2644"></a> the size<a id="2606"></a>, date modified, type or description of<a id="2347"></a> the file. The first three add columns to<a id="2084"></a> the display. If the file is a .m file the Description selection (shown in Fig 2.4) adds a row below the file basic information indicating the purpose of<a id="2348"></a> the file. In this case<a id="1463"></a>, we have a file that implements the my_cylinder function<a id="1535"></a> and<a id="1682"></a> a script to<a id="2085"></a> test that function<a id="1536"></a>. MATLAB<a id="1860"></a> finds that information as the first comment line on<a id="1797"></a> these files as discussed in Chapter 3.</p>
			</div>
			<div class="exercise">#exercise_2_3#</div>
		</div>

		<div class="chp-subsection" data-sub-num="5" data-sub-name="Variable Editor">
			<!-- Variable Editor -->
			<h3 id="2_3_5">2.3.5 Variable<a id="2527"></a> Editor<a id="2730"></a></h3>
			<div class="container">
				<p>Double-clicking on<a id="1798"></a> any variable<a id="2577"></a> listed in the Workspace<a id="2757"></a> window automatically launches a Variable<a id="2528"></a> Editor<a id="2731"></a> window<a id="1507"></a>. Values stored in the variable<a id="2578"></a> are displayed in a spreadsheet<a id="1530"></a>-like format<a id="1576"></a>. You can change values in the Variable<a id="2529"></a> editor, or you can add new values.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="6" data-sub-name="Figure Window">
			<!-- Figure Window -->
			<h3 id="2_3_6">2.3.6 Figure<a id="2749"></a> Window</h3>
			<div class="container">
				<p>A Figure<a id="1532"></a> window is created automatically when a MATLAB<a id="1861"></a> command requests presentation of<a id="2349"></a> a graph or an image<a id="2213"></a>. Any additional graphs<a id="1524"></a> you create will overwrite the plot in the current Figure<a id="2750"></a> window unless you specifically command MATLAB<a id="1862"></a> to<a id="2086"></a> open a new Figure<a id="2751"></a> window with<a id="1763"></a> the <code>figure</code> command. MATLAB<a id="1863"></a> makes it easy to<a id="2087"></a> customize graphs<a id="1525"></a> by adding titles, x and<a id="1683"></a> y labels, multiple lines, and<a id="1684"></a> more with<a id="1764"></a> MATLAB<a id="1864"></a> built-in commands. Details of<a id="2350"></a> these commands will be presented in Chapter 11.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="7" data-sub-name="Editor Window">
			<!-- Editor Window -->
			<h3 id="2_3_7">2.3.7 Editor<a id="2732"></a> Window</h3>
			<div class="container">
				<p>MATLAB<a id="1865"></a> provides a text<a id="2487"></a> editor, enabling you to<a id="2088"></a> create or modify text<a id="2488"></a> files that run in the editor window. This window lets you type and<a id="1685"></a> save a series of<a id="2351"></a> commands without executing them. You can also open the editor window by double-clicking a file name in the Current<a id="2721"></a> Directory<a id="1497"></a> window or by typing: <code>&gt;&gt; edit &lt;file_name&gt; </code>in the Command<a id="2702"></a> window, where <code>&gt;&gt; edit &lt;file_name&gt; </code> is the name of<a id="2352"></a> the file you want to<a id="2089"></a> open. You can open multiple files at the same time, using the tabbed overlays to<a id="2090"></a> identify the files. An asterisk appears on<a id="1799"></a> the tab with<a id="1765"></a> the file name to<a id="2091"></a> indicate that the file has been modified since it was saved. Options under the Window menu let you organize the multiple files in various ways that make more than one file visible at once. When closing<a id="1812"></a> the Editor<a id="2733"></a> window<a id="1508"></a>, MATLAB<a id="1866"></a> displays a dialog asking if you need to<a id="2092"></a> save any changed files.</file_name></file_name></p>
			</div>
		</div>
	</div>

	<div class="chp-section" data-sect-num="4" data-sect-name="Scripts">
		<!-- Scripts -->
		<h2 id="2_4">2.4 Scripts</h2>
		<div class="container">
			<p>This section describes the basic mechanism for<a id="2645"></a> creating<a id="1564"></a>, saving, and<a id="1686"></a> executing scripts<a id="2453"></a> as m-files. Building script files lets you save and<a id="1687"></a> reuse program statements without retyping them in the Command<a id="2703"></a> window.</p>
		</div>

		<div class="chp-subsection" data-sub-num="1" data-sub-name="Text Files">
			<!-- Text Files -->
			<h3 id="2_4_1">2.4.1 Text Files</h3>
			<div class="container">
				<p>MATLAB<a id="1867"></a> uses text<a id="2489"></a> files as a permanent means of<a id="2353"></a> saving scripts<a id="2454"></a> (sets of<a id="2354"></a> instructions) rather than just entering commands in the Command<a id="2704"></a> window. As you will see in Chapter 8, text<a id="2490"></a> files are streams of<a id="2355"></a> characters stored sequentially with<a id="1766"></a> &ldquo;markers&rdquo; that indicate the end<a id="1514"></a> of<a id="2356"></a> each line of<a id="2357"></a> text<a id="2491"></a>. For now, think of<a id="2358"></a> a script much like writing<a id="1595"></a> an e-mail message&mdash;a number of<a id="2359"></a> lines of<a id="2360"></a> text<a id="2492"></a> written in a &ldquo;smart&rdquo; editor. The MATLAB<a id="1868"></a> Editor<a id="2734"></a> uses various techniques to<a id="2093"></a> help<a id="1571"></a> you format<a id="1577"></a> commands in these files.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="2" data-sub-name="Creating Scripts">
			<h3 id="2_4_2">2.4.2 Creating Scripts</h3>
			<div class="container">
				<p>A MATLAB<a id="1869"></a> script consists of<a id="2361"></a> a combination of<a id="2362"></a> executable instructions that MATLAB<a id="1870"></a> interprets and<a id="1688"></a> comment statements that help<a id="1572"></a> readers understand the script. You create comments<a id="1488"></a> by putting a percent sign (%) in the text<a id="2493"></a> file. MATLAB<a id="1871"></a> will ignore all text<a id="2494"></a> from<a id="1551"></a> that mark to<a id="2094"></a> the end<a id="1515"></a> of<a id="2363"></a> the current line. The MATLAB<a id="1872"></a> Editor<a id="2735"></a> colors all such comments<a id="1489"></a> green to<a id="2095"></a> distinguish them from<a id="1552"></a> the executable instructions. Most applications that use files specify a particular file name ext ension ( the characters after the period in the file name) to<a id="2096"></a> identify how the text<a id="2495"></a> files will be used. MATLAB<a id="1873"></a> uses the extension .m, and<a id="1689"></a> the script files are often referred to<a id="2097"></a> as m-files. You create a new script file either by choosing File &gt; New &gt; M-File or by clicking the new file icon on<a id="1800"></a> the far left of<a id="2364"></a> the tool bar. The MATLAB<a id="1874"></a> Editor<a id="2736"></a> will then open a blank file in which you can enter commands and<a id="1690"></a> comments<a id="1490"></a>. Try creating<a id="1565"></a> the script described in Exercise 2.3.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="3" data-sub-name="The Current Directory">
			<!-- Current Directory -->
			<h3 id="2_4_3">2.4.3 The Current<a id="2722"></a> Directory<a id="1498"></a></h3>
			<div class="container">
				<p>After you have entered a script, you must name it and<a id="1691"></a> save it in a directory. MATLAB<a id="1875"></a> will need to<a id="2098"></a> find that directory&mdash;its working directory&mdash;in order to<a id="2099"></a> run the script. By default, MATLAB<a id="1876"></a> expects scripts<a id="2455"></a> to<a id="2100"></a> be stored in the working directory, displayed in the tool bar at the top of<a id="2365"></a> the MATLAB<a id="1877"></a> main window. The specific path will vary with<a id="1767"></a> your version of<a id="2366"></a> MATLAB<a id="1878"></a>. However, the Current<a id="2723"></a> Directory<a id="1499"></a> window always shows the default location when MATLAB<a id="1879"></a> starts. If you decide to<a id="2101"></a> store your scripts<a id="2456"></a> elsewhere, you will need to<a id="2102"></a> redirect MATLAB<a id="1880"></a> to<a id="2103"></a> that directory by typing it into the Current<a id="2724"></a> Directory<a id="1500"></a> window or using the browse button to<a id="2104"></a> the right of<a id="2367"></a> the display. Once script files are saved in your working directory, you can edit them again by selecting and<a id="1692"></a> opening<a id="1811"></a> them with<a id="1768"></a> the MATLAB<a id="1881"></a> Editor<a id="2737"></a>. To open them, either use the open menu command or double-click the file name in the Current<a id="2725"></a> Directory<a id="1501"></a> window. Before you close<a id="1471"></a> MATLAB<a id="1882"></a>, you should save the file created in Exercise 2.3.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="4" data-sub-name="Running Scripts">
			<!-- Running Scripts -->
			<h3 id="2_4_4">2.4.4 Running Scripts</h3>
			<div class="container">
				<p>After you have built and<a id="1693"></a> saved a script, you can run it using any of<a id="2368"></a> the following methods:</p>
				<ul>
					<li>Type the name of<a id="2369"></a> the script in the Command<a id="2705"></a> window.</li>
					<li>Choose the Debug &gt; Run menu item in the MATLAB<a id="1883"></a> Editor<a id="2738"></a> window<a id="1509"></a>.</li>
					<li>Press the F5 key when the script is visible in the editor. Doing this saves the script automatically before executing it.</li>
				</ul>
				<p>The latest versions of<a id="2370"></a> MATLAB<a id="1884"></a> will echo the file name in the Command<a id="2706"></a> window when you invoke the script by the latter two methods. After you execute the script, the trace output is written to<a id="2105"></a> the Command<a id="2707"></a> window as if you had typed the script instructions there one at a time. For practice, run the script created in Exercise 2.3.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="5" data-sub-name="Punctuating Scripts">
			<!-- Punctuating Scripts -->
			<h3 id="2_4_5">2.4.5 Punctuating Scripts</h3>
			<div class="container">
				<p>Many programming<a id="195<a id="2208"></a>5"></a> languages put a semicolon<a id="2471"></a> (;) at the end<a id="1516"></a> of<a id="2371"></a> a line to<a id="2106"></a> indicate the end<a id="1517"></a> of<a id="2372"></a> a command. Since the MATLAB<a id="1885"></a> language uses the end<a id="1518"></a> of<a id="2373"></a> a line to<a id="2107"></a> indicate the end<a id="1519"></a> of<a id="2374"></a> a command, it does not require an end<a id="1520"></a>-of<a id="2375"></a>-line command character<a id="1821"></a>. If a long command needs to<a id="2108"></a> be extended to<a id="2109"></a> the next line for<a id="2646"></a> convenience in viewing the program, three periods, frequently referred to<a id="2110"></a> as ellipses<a id="1513"></a>, must be entered at the end<a id="1521"></a> of<a id="2376"></a> the line to<a id="2111"></a> continue<a id="1493"></a> the script. The MATLAB<a id="1886"></a> language uses the semicolon<a id="2472"></a> for<a id="2647"></a> a different purpose. By default, all assignment<a id="1452"></a> commands display their results in the Command<a id="2708"></a> window in text<a id="2496"></a> form. For complex programs, the volume of<a id="2377"></a> this output can become too large. Whenever you really don&rsquo;t want to<a id="2112"></a> see all that output, putting a semicolon<a id="2473"></a> character<a id="1822"></a> at the end<a id="1522"></a> of<a id="2378"></a> a line will prevent the results of<a id="2379"></a> that assignment<a id="1453"></a> from<a id="1553"></a> displaying<a id="1575"></a> in the Command<a id="2709"></a> window.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="6" data-sub-name="Debugging Scripts">
			<!-- Debugging Scripts -->
			<h3 id="2_4_6">2.4.6 Debugging Scripts</h3>
			<div class="container">
				<p>MATLAB<a id="1887"></a> provides extensive debugging<a id="2457"></a> capabilities based on<a id="1801"></a> the use of<a id="2380"></a> break points<a id="1455"></a>, which are places in your program where you want to<a id="2113"></a> stop and<a id="1694"></a> verify that the code is doing what you expect. You insert break points<a id="1456"></a> as you edit a code segment by clicking the small dash between the line number and<a id="1695"></a> the start of<a id="2381"></a> the text<a id="2497"></a>. If the program is ready to<a id="2114"></a> run, a red dot appears in place of<a id="2382"></a> the dash where you clicked. If the file has been changed and<a id="1696"></a> hasn&rsquo;t been saved, the dot will be gray<a id="1578"></a>, in which case<a id="1464"></a> you should save the file. You can set any number of<a id="2383"></a> break points<a id="1457"></a> throughout your code. After you start running<a id="2470"></a> a program, when MATLAB<a id="1888"></a> reaches a break point, execution<a id="1531"></a> stops, an arrow overwrites the break point symbol, and<a id="1697"></a> you can examine the contents of<a id="2384"></a> the variables either in the Workspace<a id="2758"></a> window or by passing<a id="2201"></a> the mouse slowly over the variable<a id="2579"></a> in the Editor<a id="2739"></a> window<a id="1510"></a>. A Debugging tool bar is available with<a id="1769"></a> icons that let you:</p>
				<ul>
					<li>Continue executing the logic<a id="1782"></a> from<a id="1554"></a> this point (other break points<a id="1458"></a> may come into effect)</li>
					<li>Step over the logic<a id="1783"></a> in this line to<a id="2115"></a> the next line in this code block</li>
					<li>Step into any modules referenced by this line of<a id="2385"></a> code</li>
					<li>Step out of<a id="2386"></a> this current code block
				</ul>
			<p>Use the script from<a id="1555"></a> Listing 2.1 to<a id="2116"></a> practice inserting<a id="1445"></a> break points<a id="1459"></a>.</p>
			<div class="listing">#listing_02_1#</div>
			</div>
		</div>
	</div>

	<div class="chp-section" data-sect-num="5" data-sect-name="Engineering Example - Spacecraft Launch">
		<!-- Engineering Example -->
		<h2 id="2_5">2.5 Engineering Example - Spacecraft Launch</h2>
		<div class="container">
			<p>In 1996, the Ansari X Prize was offered for<a id="2648"></a> the first time for<a id="2649"></a> a private venture: a reusable spacecraft<a id="1526"></a>. The requirements were for<a id="2650"></a> the same vehicle to<a id="2117"></a> carry three people into outer space twice in a two-week time period. The competition was won in 2004 by Tier 1, a company led by Burt Rutan. Their concept was to<a id="2118"></a> have a mother ship take off and<a id="1698"></a> land on<a id="1802"></a> a conventional runway carrying Space Ship One. The spacecraft<a id="1527"></a> would be launched at 25,000 feet altitude and<a id="1699"></a> would reach outer space (an altitude of<a id="2387"></a> 100 km), then glide back and<a id="1700"></a> land on<a id="1803"></a> the same runway. They repeated this within a week, and<a id="1701"></a> they won the prize.</p>
			<p><strong>Problem:</strong> Assuming that the spacecraft<a id="1528"></a> uses all its fuel to<a id="2119"></a> achieve a vertical velocity <code>u</code> at 25,000 feet, what is the value<a id="2521"></a> of<a id="2388"></a> <code>u</code> for<a id="2651"></a> the spacecraft<a id="1529"></a> to<a id="2120"></a> reach outer space?</p>
			<p><strong>Solution:</strong> There are two parts to<a id="2121"></a> this problem: converting units to<a id="2122"></a> the metric system, and<a id="1702"></a> choosing and<a id="1703"></a> solving an equation for<a id="2652"></a> motion under constant acceleration (the rocket motor is no longer burning).</p>
			<ol>
				<li>
					<p>Convert the launch altitude from<a id="1556"></a> feet to<a id="2123"></a> meters. I like to<a id="2124"></a> remember as few numbers<a id="1971"></a> as possible. I do remember that 1 inch = 2.54 cm, so we will use this in a MATLAB<a id="1889"></a> script to<a id="2125"></a> find the conversion from<a id="1557"></a> feet to<a id="2126"></a> meters. The appropriate chain of<a id="2389"></a> calculations is this:</p>
					<p><code>meters = feet X (meters/cm) X (cm/inch) X (inch/feet) </code></p>
				</li>
				<li>
					<p>Find and<a id="1704"></a> solve the equation. Given the following:</p>
					<ul>
						<li>Initial and<a id="1705"></a> final altitudes from<a id="1558"></a> which you can compute the distance traveled: <code>s</code></li>
						<li>The motion is under constant acceleration, the force of<a id="2390"></a> gravity: <code>g</code></li>
						<li>To just reach outer space, the final velocity, <code>v</code>, is 0</li>
						<li>The initial velocity, <code>u</code>, is needed</li>
					</ul>
					<br>
					<p>So after some diligent head scratching, we remember the equation of<a id="2391"></a> motion under constant acceleration connecting <code>u</code>, <code>v</code>, <code>s</code>, and<a id="1706"></a> <code>a</code> is:</p>
					<p><code>v2 = u2 + 2as</code></p>
				</li>
			</ol>
			<p>However, this is not yet in a useful form. For computers to<a id="2127"></a> be able to<a id="2128"></a> solve an equation, you need the unknown quantity on<a id="1804"></a> the left of<a id="2392"></a> the equation and<a id="1707"></a> everything known on<a id="1805"></a> the right. Since <code>u</code> is the unknown, we move this to<a id="2129"></a> the left side of<a id="2393"></a> the assignment<a id="1454"></a>, and<a id="1708"></a> organize the known quantities to<a id="2130"></a> the right. These are the final velocity, <code>v</code> (i.e., 0) the given distance, <code>s</code>, and<a id="1709"></a> the acceleration, <code>a</code>. Since the positive direction for<a id="2653"></a> <code>u</code> and<a id="1710"></a> <code>s</code> is upward, but gravity is downward, we must use <code>a = -g</code>, and<a id="1711"></a> the equation can be transformed to<a id="2131"></a>: <code>u = -gs</code> With this information, you can now solve this problem. </p>
			<p>Listing 2.2 show the author's version of<a id="2394"></a> a script to<a id="2132"></a> perform  this calculation. Although most modern computing environments, including MATLAB<a id="1890"></a>, have tools that actually solve symbolic equations, these tools are not appropriate for<a id="2654"></a> an introduction<a id="1931"></a> to<a id="2133"></a> programming<a id="1956"></a> and<a id="1712"></a> will not be discussed in this book.</p>
			<div class="listing">#listing_02_2#</div>
		</div>
	</div>

	<!-- Chapter Summary -->
	<h2>Chapter Summary</h2>
	<div class="container">
		<p>This chapter presented some fundamental notions of<a id="2395"></a> computing and<a id="1713"></a> introduced you to<a id="2134"></a> the nature<a id="1580"></a> of<a id="2396"></a> MATLAB<a id="1891"></a>, its user<a id="1964"></a> interface, and<a id="1714"></a> the fundamental tools for<a id="2655"></a> making programs work.</p>
		<ul>
			<li>Abstraction lets you refer to<a id="2135"></a> collections<a id="1472"></a> of<a id="2397"></a> data<a id="1922"></a> or instructions as a whole</li>
			<li>An algorithm<a id="1437"></a> is a set of<a id="2398"></a> instructions at an appropriate level of<a id="2399"></a> abstraction for<a id="2656"></a> solving a specific problem</li>
			<li>A data<a id="1923"></a> class describes the type of<a id="2400"></a> data<a id="1924"></a> and<a id="1715"></a> the nature<a id="1581"></a> of<a id="2401"></a> operations<a id="2193"></a> that can be performed on<a id="1806"></a> that data<a id="1925"></a></li>
			<li>An object is a specific instance of<a id="2402"></a> a class with<a id="1770"></a> specific values that can be assigned to<a id="2136"></a> a variable<a id="2580"></a></li>
			<li>The Command<a id="2710"></a> window lets you experiment with<a id="1771"></a> ideas by entering commands line-by-line and<a id="1716"></a> seeing immediate results</li>
			<li>The Command<a id="2711"></a> History<a id="1481"></a> window lets you review and<a id="1717"></a> recall previous commands</li>
			<li>The Workspace<a id="2759"></a> window lists the names<a id="2600"></a>, values, and<a id="1718"></a> class of<a id="2403"></a> your local variables.</li>
			<li>The Current<a id="2726"></a> Directory<a id="1502"></a> window lists the current files in the directory to<a id="2137"></a> which MATLAB<a id="1892"></a> is currently pointed</li>
			<li>A Document window opens when a variable<a id="2581"></a> in the Workspace<a id="2760"></a> window is selected, to<a id="2138"></a> let you view and<a id="1719"></a> edit data<a id="1926"></a> items</li>
			<li>A Figure<a id="1533"></a> window presents data<a id="1927"></a> and<a id="1720"></a>/or images<a id="1574"></a> when invoked by programs</li>
			<li>The Editor<a id="2740"></a> window<a id="1511"></a> lets you view and<a id="1721"></a> modify text<a id="2498"></a> files</li>
			<li>Scripts provide the basic mechanism for<a id="2657"></a> implementing solutions to<a id="2139"></a> problems</li>
		</ul>
	</div>


<h2>Self Test</h2>
<div class="container">

<p>Use the following questions to<a id="2140"></a> check your understanding of<a id="2404"></a> the material in this chapter:</p>

<h3>True or False</h3>
<ol>
<li>A bag of<a id="2405"></a> groceries is an example<a id="2469"></a> of<a id="2406"></a> abstraction.</li>
<li>An algorithm<a id="1438"></a> is a series of<a id="2407"></a> logical<a id="1446"></a> steps that solves one specific problem.</li>
<li>It is impossible to<a id="2141"></a> write a complete, practical program in any paradigm other than procedural</li>
<li>To be useful to<a id="2142"></a> an algorithm<a id="1439"></a>, the result of<a id="2408"></a> every computation must be assigned to<a id="2143"></a> a variable<a id="2582"></a>.</li>
<li>In programming<a id="1957"></a>, if you know the values of<a id="2409"></a> z and<a id="1722"></a> x in the expression
z = x + y, you can derive the value<a id="2522"></a> of<a id="2410"></a> y.</li>
<li>Untyped languages are free to<a id="2144"></a> ignore the nature<a id="1582"></a> of<a id="2411"></a> the data<a id="1928"></a> in variables.</li>
<li>Anything assigned to<a id="2145"></a> be the value<a id="2523"></a> of<a id="2412"></a> a variable<a id="2583"></a> is an object.</li>
<li>Class is a concept restricted to<a id="2146"></a> object-oriented<a id="2187"></a> programming<a id="1958"></a>.</li>
<li>You can permanently save the commands entered in the Command<a id="2712"></a> window.</li>
<li>Double-clicking an entry in the Command<a id="2713"></a> History<a id="1482"></a> window lets you rerun that command.</li>
<li>You can manually<a id="2202"></a> change the values of<a id="2413"></a> variables displayed in the Workspace<a id="2761"></a> window.</li>
<li>You double-click a file name in the Current<a id="2727"></a> Directory<a id="1503"></a> window to<a id="2147"></a> run that script.</li>
<li>A Document window lets you view and<a id="1723"></a> edit data<a id="1929"></a> items.</li>
<li>MATLAB<a id="1893"></a> permits multiple Figure<a id="2752"></a> windows<a id="2672"></a> to<a id="2148"></a> be open simultaneously.</li>
<li>An asterisk on<a id="1807"></a> the File Name tab in the Editor<a id="2741"></a> window<a id="1512"></a> indicates that this is a script that can be executed.</li>
<li>MATLAB<a id="1894"></a> echoes comments<a id="1491"></a> entered in a script in the Command<a id="2714"></a> window.</li>
<li>When the name of<a id="2414"></a> script is typed in the Command<a id="2715"></a> window, it will be saved if necessary before it is executed.</li>
</ol> 
<h3>Fill in the Blanks</h3>
<ol>
<li>____________ means expressing a quality apart from<a id="1559"></a> a particular implementation<a id="2211"></a>.</li>
<li>____________ is a sequence of<a id="2415"></a> instructions for<a id="2658"></a> solving a problem.</li>
<li>Without _________, a programming<a id="1959"></a> solution can be mathematically proven to<a id="2149"></a> be correct.</li>
<li>Variable<a id="2530"></a> names<a id="2601"></a> must not begin with<a id="1772"></a> _____.</li>
<li>Armed with<a id="1773"></a> both the	__________ and<a id="1724"></a> _________ of<a id="2416"></a> a variable<a id="2584"></a>, a compiler can do a better job of<a id="2417"></a> ensuring that the programmer isn’t misinterpreting data<a id="1930"></a>.</li>
<li>An instance of<a id="2418"></a> a ________ is a(n) _________ that is usually stored in a variable<a id="2585"></a> of<a id="2419"></a> that  ________ .		.
</li>
<li>You can	_________ in the Command<a id="2716"></a> window in a manner similar to<a id="2150"></a> the way you ___________________ on<a id="1808"></a> a scientific calculator.</li>
<li>You	____________ an entry in the Command<a id="2717"></a> History<a id="1483"></a> window to<a id="2151"></a> ______________
 	that command.</li>
<li>The columns in the Workspace<a id="2762"></a> window show the _______ of<a id="2420"></a> the variable<a id="2586"></a>, its _______, and<a id="1725"></a> its	_____________.</li>
<li>You	______________ the name of<a id="2421"></a> a file in the Current<a id="2728"></a> Directory<a id="1504"></a> window to<a id="2152"></a> edit that file.</li>
<li>A Document window opens automatically when you ________________	a(n) ____________
 	 in the Workspace<a id="2763"></a> window.</li>
<li>Graphics windows<a id="2673"></a> are created when a(n) _______________	requests a graph.</li>
<li>You create comments<a id="1492"></a> by putting a(n)	_____________ in the text<a id="2499"></a> file.</li>
<li>MATLAB<a id="1895"></a> will	_________ all text<a id="2500"></a> from<a id="1560"></a> the comment mark to<a id="2153"></a> ____________.
</li>
</ol>
<h3>Programming Projects</h3>
<ol>
<li>You are given two sides of<a id="2422"></a> a triangle, a = 4.5 and<a id="1726"></a> b = 6. The angle between them is 35 degrees. Write a script to<a id="2154"></a> find the length of<a id="2423"></a> the third side and<a id="1727"></a> the area of<a id="2424"></a> the triangle.</li>
<li>In the bottom of<a id="2425"></a> the ninth inning, the bases are loaded and<a id="1728"></a> the Braves are down by three runs. Chipper Jones steps to<a id="2155"></a> the plate. Twice he swings and<a id="1729"></a> misses. The crowd heads for<a id="2659"></a> the exits. The next pitch is a fast ball down the middle. He swings and<a id="1730"></a> makes perfect contact with<a id="1774"></a> the ball, sending it up at a 45-degree angle toward the fence 400 ft away.<br>
a.	Write a script to<a id="2156"></a> determine how fast he must hit the ball to<a id="2157"></a> land at the base of<a id="2426"></a> the fence, neglecting the air resistance.<br>
b.	Perform a brief experiment to<a id="2158"></a> determine whether there was a better angle at which to<a id="2159"></a> hit the ball so that it could clear<a id="1469"></a> a 12 ft fence.</li>
<li>If an ice cream cone is 6 inches tall, and<a id="1731"></a> its rim has a diameter of<a id="2427"></a> 2 inches, write a script to<a id="2160"></a> determine the weight of<a id="2428"></a> the ice cream that can fit in the cone, assuming that the ice cream above the cone is a perfect hemisphere. You may neglect the thickness of<a id="2429"></a> the cone material. Assume that a gallon of<a id="2430"></a> ice cream weighs 8 lb and<a id="1732"></a> occupies 7.5 cubic<a id="1494"></a> feet.</li>
<li>Write a script that validates the relationship between sin u, cos u, and<a id="1733"></a> tan u by evaluating these functions<a id="2482"></a> at suitably chosen values of<a id="2431"></a> u.</li>
<li>I like my shower to<a id="2161"></a> remain hot for<a id="2660"></a> hours at 100F, but am too cheap to<a id="2162"></a> buy one of<a id="2432"></a> those on<a id="1809"></a>-demand hot water systems. I don't care how slowly the water runs. The water supply is at 50F, and<a id="1734"></a> the water heater is rated at 50,000 BTU/hour. Write a script to<a id="2163"></a> compute the maximum flow rate of<a id="2433"></a> my shower (in cubic<a id="1495"></a> feet per minute) that keeps the water temperature above 100°F.</li>
<li>It takes an average of<a id="2434"></a> 45 horsepower to<a id="2164"></a> run an electric car at an average speed of<a id="2435"></a> 35 mph. Write a script to<a id="2165"></a> compute the electrical<a id="1523"></a> storage capacity of<a id="2436"></a> the battery system that would make this car practical for<a id="2661"></a> a 25-mile commute, recharging the batteries only at home at night when the electricity is cheap. How many D cell<a id="1444"></a> alkaline batteries would be needed for<a id="2662"></a> this?</li>
<li>You want to<a id="2166"></a> buy a $300,000 home with<a id="1775"></a> 20% down payment. The current compound<a id="2483"></a> interest rate is 4.5%.<br>
a.	Write a script to<a id="2167"></a> determine:<br>
<ul>
<li>the monthly payments for<a id="2663"></a> a 30-year loan,</li>
<li>the equivalent simple interest rate,</li>
<li>the total interest paid over the life of<a id="2437"></a> the loan.<br>
</ul>
b.	Now, repeat the computation for<a id="2664"></a> a 15-year loan at 5%. Is this a
better deal?
</li>
<li>The distance from<a id="1561"></a> my house to<a id="2168"></a> my office is 1.5 miles. Every morning, I have to<a id="2169"></a> decide whether to<a id="2170"></a> take the bus that averages (once it arrives) 25 mph, or to<a id="2171"></a> walk. I can walk at 4 mph. Write a script to<a id="2172"></a> determine how frequently the buses should run to<a id="2173"></a> give them a 50% chance of<a id="2438"></a> getting me to<a id="2174"></a> the office faster than walking.</li>
<li>A glass has the shape of<a id="2439"></a> a truncated cone of<a id="2440"></a> height 5 inches. Its top diameter is 3.5 inches, and<a id="1735"></a> its base diameter is 2 inches. If water is poured into the glass at 2 gallons per minute, write a script to<a id="2175"></a> calculate how long it takes to<a id="2176"></a> fill the glass to<a id="2177"></a> the brim. One gallon is 7.5 cubic<a id="1496"></a> feet</li>
<li>You can calculate the aerodynamic drag on<a id="1810"></a> an object by the formula: <br>

Drag = 1/2 r V**2 Cd <br></li>
<li>The air density, r, is 1.3 kg/m3 and<a id="1736"></a> the value<a id="2524"></a> of<a id="2441"></a> the drag area, CdS, is a measure of<a id="2442"></a> the resistance of<a id="2443"></a> the object as it moves through the air. An object falling through air reaches terminal velocity when the aerodynamic drag equals the object's weight.</li>
<li>sky diver weighing 80 kg has a Cd S value<a id="2525"></a> of<a id="2444"></a> 0.7 when horizontal with<a id="1776"></a> arms and<a id="1737"></a> legs extended, and<a id="1738"></a> 0.15 when head down with<a id="1777"></a> arms and<a id="1739"></a> legs in line. One diver jumps from<a id="1562"></a> a plane at an  altitude of<a id="2445"></a> 5,000 m in the horizontal position. After 20 sec, another diver jumps. Write a script to<a id="2178"></a> determine how much
time the second diver must spend head down in order to<a id="2179"></a> catch<a id="1465"></a> up to<a id="2180"></a> the first diver. Also compute the height above the ground where they first meet. For simplicity, you may assume that the sky divers immediately reach their terminal velocity when jumping.</li>
<li>You are given a circle with<a id="1778"></a> radius 5 centered at x = 1, y = 2.
You want to<a id="2181"></a> calculate the intersection of<a id="2446"></a> some lines with<a id="1779"></a> that
circle. Write a script to<a id="2182"></a> find the x and<a id="1740"></a> y coordinates of<a id="2447"></a> both
points of<a id="2448"></a> intersection. You should test this code at least with<a id="1780"></a>
these lines:<br>

y = 2x - 1<br>
y = -2x - 10<br>
</div>
</div>

</body>
</html>


<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN"> 
<html> 
<head> 
<title>08_File_I_O</title> 
<link rel="stylesheet" href="styles/styles.css" /> 
<script async src="./javascript/index.js"></script> 
</head> 
<body bgcolor="#ffffff"> 
<h1 align="center">Chapter 8: File Input and Output</h1> 

<table align="center"> 
<tbody> 
<tr> 
<td><a href="07_Structures.htm">previous</a></td> 
<td><a href="Contents.htm">home</a></td> 
<td><a href="09_Recursion.htm">next</a></td> 
</tr> 
</tbody> 
</table>
<ul>
<li><a href="#8_1">8.1	Concept: Serial Input and Output (I/O)</a>
<li><a href="#8_2">8.2	Workspace I/O</a>
<li><a href="#8_3">8.3	High-level I/O Functions</a>
<ul>
    <li><a href="#8_3_1">8.3.1	Exploration</a>
    <li><a href="#8_3_2">8.3.2	Spreadsheets</a>
    <li><a href="#8_3_3">8.3.3	Delimited Text Files</a>
</ul>
<li><a href="#8_4">8.4	Lower-level File I/O</a>
<ul>
    <li><a href="#8_4_1">8.4.1	Opening and Closing Files</a>
    <li><a href="#8_4_2">8.4.2	Reading Text Files</a>
    <li><a href="#8_4_3">8.4.3	Examples of Reading Text Files</a>
    <li><a href="#8_4_4">8.4.4	Writing Text Files</a>
</ul>
<li><a href="#8_5">8.5	Engineering Example— Spreadsheet Data</a>
</ul>
<h1>Chapter Objectives</h1>

This chapter discusses three levels of capability for reading and writing files in MATLAB, each including a discussion of the circumstances under which they are appropriate: 

■ Saving and restoring the workspace 

■ High-level functions for accessing files in specific formats 

■ Low-level file access programs for general-purpose file processing 

Reading and writing data in data files are fundamental to the utility of programming languages in general, and MATLAB in particular. In addition to the obvious need to save and restore scripts and functions (covered in Chapter 2), here we consider three types of activities that read and write data files. 

■ The MATLAB language provides for the basic ability to save your workspace (or parts of your workspace) to a file and restore it later for further processing. 
■ There are high-level functions that consume the name of a file whose contents are in any one of a number of popular formats and produce an internal representation of the data from that file in a form ready for processing. 
■ Almost all these functions have an equivalent write function that will write a new file in the same format after you have manipulated the data. 
■ However, we also need to deal with lower-level capabilities for manipulating text files that do not contain recognizable structures. 

<h1>Introduction</h1>
 This chapter discusses files that contain workspace variables, spreadsheet data, and text files containing delimited numbers and plain text. Subsequent chapters will discuss image files and sound files. For information on the other file formats, consult the help documentation for details of their usage. The MATLAB language also provides the ability to access binary files—files whose data are not in text form—but the interpretation of binary data is beyond the scope of this text, and we will not consider binary files here. Refer to MATLAB documentation for information about binary files.  
<h2><a name="8_1">8.1 Concept: Serial Input and Output (I/O)</a></h2>
 We frequently refer to the process of reading and writing data files as Input/Output (I/O). We have already seen and used examples of file I/O to store and retrieve data and programs. Your script and function files are stored in your current directory and could be invoked from there by name from the Command window. In general, any computer file system saves and retrieves data as a sequential (serial) stream of characters, as shown in Figure 8.1. Mixed in with the characters that represent the data are special characters (“delimiters”) that specify the organization of the data.  When a program opens a file by name for reading, it continually requests blocks of data from the file data stream until the end of the file is reached. As the data are received, the program must identify the delimiting characters and reformat the data to reconstruct the organization of the data as represented in the file. Similarly, when writing data to a file, the program must serialize the data, as shown in Figure 8.2. To preserve the organization of the data, the appropriate delimiting characters must be inserted into the serial character stream.  The purpose of the file I/O functions discussed in this chapter is to encapsulate these fundamental operations into a single system function, or at least into a manageable collection of functions.  
<h2><a name="8_2">8.2 Workspace I/O</a></h2>
 The MATLAB language defines the tools to save your complete workspace to a file with the save command and reload it with the load command. If you provide a file name with the save command, a file of that name will be written into your current directory in such a form that a subsequent load command with that file name will restore the saved workspace. By convention, these files will have a .mat extension. If you do not provide a file name, the workspace is saved as matlab.mat.  If you are using MATLAB, you can also identify specific variables that you want to save—either by listing them explicitly or by providing logical expressions to indicate the variable names. For example:  >> save mydata.mat a b c* would save the variables a and b and any variable beginning with the letter c. For more details, consult the MATLAB help documentation.  
<h2><a name="8_3">8.3 High-Level I/O Functions</a></h2>
 We turn to the general case of file I/O in which we expect to load data from external sources, process that data, and perhaps save data back to the file system with enhancements created by   your  program.  When  you  try  to process  data  from  some  unknown source, it is difficult to write code to process the data without some initial exploration   of   the   nature   and organization of that data. So a good habit is to explore the data in a file by whatever means you have available and then decide how to process the data according to your observations. Most programming languages require the programmer to write detailed programs to read and write files, especially those produced by other application programs or data acquisition packages. Fortunately for MATLAB programmers, much of this messy work has been built into special file readers and writers. Table 8.1 identifies the type of data, the name of the appropriate reader and writer, and the internal form in which MATLAB returns the data.  
<h3><a name="8_3_1">8.3.1	Exploration</a></h3>
 The types of data of immediate interest are text files and spreadsheets. In Table 8.1 notice that the delimited text files are presumed to contain numerical values, whereas the spreadsheet data may be either numerical data stored as doubles or string data stored in cell arrays. Typically, text files are delimited by a special character (comma, tab, or anything else) to designate the column divider and a new-line character to designate the rows. Once the data are imported, all of our normal array and matrix processing tools can be applied. The exception to this rule is the plain text reader that must be provided with a format specifier to define the data, and the names of the variables in which the data are to be stored.  So when you are approached with a file, the file extension (the part of the file name after the dot) gives you a significant clue to the nature of the data. For example, if it is the output from a spreadsheet, you should open the data in that spreadsheet program to explore its contents and organization. [Typically, spreadsheet data will not open well in a plain text editor.] If you do not recognize the file extension as coming from a spreadsheet, try opening the file in a plain text editor such as that used for your scripts and functions and see if the data are legible. You should be able to discern the field delimiters and the content of each line if the file contains plain text.  
<h3><a name="8_3_2">8.3.2	Spreadsheets</a></h3>
 Excel is a Microsoft product that implements spreadsheets. Spreadsheets are rectangular arrays containing labeled rows and columns of cells. The data in the cells may be numbers, strings, or formulae that combine the data values in other cells. Because of this computational capability, spreadsheets can be used to solve many problems, and most offer flexible plotting packages for presenting the results in colorful charts. There are occasions, however, when we need to apply the power of the MATLAB language to the data in a spreadsheet.  MATLAB provides a reader for Excel spreadsheets that gives you a significant amount of flexibility in retrieving the data from the spreadsheet. Consider the typical set of data in a spreadsheet named grades.xls shown in Table 8.2. The goal of your spreadsheet reader is to separate the text and numerical portions of the spreadsheet. The parameter consumed by your spreadsheet reader is the name of the file; you can ask for up to three return variables: the first will hold all the numerical values in an array of doubles; the second will hold all the text data in cell arrays; and the third, if you request it, will hold both string and numerical data in cell arrays (try Exercise 8.1).  The reader first determines the smallest rectangle on the spreadsheet containing all of the numerical data; we will refer to this as the “number rectangle.” Then it produces the following results:  1.	The first returned result is an array with the same number of rows and columns as the number rectangle and containing the values of all the numeric data in that rectangle. If there are non-numeric values within that rectangle, they are replaced by NaN, the built-in name for anything that is not a number. 2.	The second returned result is a cell array with the same size as the original spreadsheet, containing only the string data; to ensure the consistency of this cell array, all numbers present are replaced by the empty string. 3.	The third returned result is a cell array also with the same size as the original spreadsheet, containing both the strings and the num- bers. Cells that are blank are presumed to be numerical, and are assigned as a cell containing an empty vector.  Frequently, after processing data, you need to write the results back to a spreadsheet. Excel spreadsheets can be written using:  xlswrite(<filename>, <array>, <sheet>, <range>)  where <filename> is the name of the file, <array> is the data source (a cell array), <sheet> is the sheet name, and <range> is the range of cells in Excel cell identity notation. The sheet name and range are optional.  
<h3><a name="8_3_3">8.3.3	Delimited Text Files</a></h3>
 If information is not available specifically in spreadsheet form, it can frequently be presented in text file form. If the data in a text file are numerical values only and are organized in a reasonable form, you can read the file directly into an array. It is necessary that the data values are separated (delimited) by commas, spaces, or tab characters. Rows in the data are separated as expected by the new-line character. These values might be saved in a file named nums.txt. This type of numerical data (not strings) in general delimited form can be read using dlmread(<file>,<delimiter>), where the delimiter parameter is a single character that can be used to specify an unusual delimiting character. However, the function can usually determine common delimiter situations without specifying the parameter.  The dlmread(...) function produces a numerical array containing the data values. Try reading delimited files in Exercise 8.2. Table 8.3 shows the content of the file nums.txt.  Notice that the array elements where data are not supplied are filled with zero.  Delimited data files can be written using: dlmwrite( <filename>, <array>, <dlm>) where <filename> is the name of the file, <array> is the data source (a numerical array), and <dlm> is the delimiting character. If  the  delimiting  character  is  not  specified,  it  is  presumed  to  be  a comma. The csvread(...) function is a special case of dlm read(...) where the delimiter is presumed to be a comma, and it produces a numerical array containing the data values. As noted above, the MATLAB version of csvread(...) has been enhanced so that if the data contain only numerical values,  it  will  return  an  array. However, if the data contain some   strings, it produces the three results specified above for xls read(...). The normal content of CSV files allows embedded strings to contain the comma character. This is accomplished by surrounding any such string with double quotes—for   example, "Jones, Tom" in a CSV file would prevent the embedded comma from separating this string into the two strings: 'Jones' and 'Tom'.  
<h2><a name="8_4">8.4 Lower-Level File I/O</a></h2>
 Some text files contain data in mixed format that are not readable by the high-level file reading functions. The MATLAB language provides a set of lower-level I/O functions that permit general-purpose text file reading and writing. The following is a partial discussion of these functions that is sufficient for most text file processing needs. In general, the file must be opened to return a value to be used by subsequent functions to identify its data stream. We usually refer to this identifier as the “file handle.” After the file contents have been manipulated, the file must be closed to complete the activity. Because these are lower-level functions used in combination to solve problems, we will need to discuss the behavior of several of them before we can show examples of their use.  
<h3><a name="8_4_1">8.4.1	Opening and Closing Files</a></h3>
 To open a file for reading or writing, use fh = fopen( <filename>, <purpose>) where fh is a file handle used in subsequent function calls to identify this particular input stream, <filename> is the name of the file, and <purpose> is a string specifying the purpose for opening the file. The most common purposes are 'r' to read the file, 'w' to write it, or 'a' to append to an existing file. See the help files for more complex situations. If the purpose is 'r', the file must already exist; if 'w' and the file already exists, it will be overwritten; if 'a' and the file already exists, the new data will be appended to the end. The consequence of failure to open the file is system dependent. In the standard version on a PC, this is indicated by returning a file handle of –1. To close the file, call fclose( fh ).  
<h3><a name="8_4_2">8.4.2	Reading Text Files</a></h3>
 To read a file, three levels of support are provided: reading whole lines with or without the new-line character, parsing into tokens with delimiters, or parsing into cell arrays using a format string.  ■	To read a whole line including the new-line character, use str = fgets( fh ) that will return each line as a string until the end of the file, when the value –1 is returned instead of a string. To leave out each new-line character, use fgetl(...) instead (the last character is a lowercase L). ■	To parse each line into tokens (elementary text strings) separated by white space delimiters, use a combination of fgetl(...) and the tokenizer function [<tk>, <rest>] = strtok( <ln> ); where <tk> is a string token, <rest> is the remainder of the line, and <ln> is a string to be parsed into tokens.  ■	If you are using MATLAB, you could try to parse a line according to a specific format string into a cell array by using ca = textscan( fh, <format> ); where ca is the resulting cell array, fh is the file handle, and <format> is a format control string such as we used for sscanf(...) in Chapter 6.  
<h3><a name="8_4_3">8.4.3	Examples of Reading Text Files</a></h3>
 To illustrate the use of these functions for reading a text file, the script shown in Listing 8.1 shows a script that will list any text file in the Command window. In Listing 8.1: Line 1: Asks the user for the name of a file. Line 2: Opens the file for reading and returns the file handle. Line 3: Initializes the while loop control variable. Line 4: When the file read reaches the end of the file, the reading function returns −1 instead of a string. Line 5: Reads a string, including the end of line character. Line 6: Classic loop-and-a-half logic that determines whether there is a line to process. Line 7: Displays that line if present.  Line 10: Closes the file when finished. As an example of the use of a tokenizer, consider the code shown in Listing 8.2, which performs the same function as Listing 8.1 but uses tokens.  Line 5: Uses fgetl(...) instead of fgets(...) because the tokenizer does not need the new-line character. Line 7: Initializes the resulting cell array. Line 8: The tokenizer will be finished when it leaves an empty line as the result. Line 9: Creates a token from the remains of the line and puts the remains back into the variable ln. Line 10: Adds the current token to the result. Line 12: Shows the tokens for one line. Line 15: Closes the file. Run the scripts in Listings 8.1 and 8.2. This will show the difference in output results between the conventional listing script and the tokenizing lister. With the tokenizer, we see each individual token (really, each word in a normal text file) separately listed.  
<h3><a name="8_4_4">8.4.4	Writing Text Files</a></h3>
 Once a file has been opened for writing, the fprintf(...) function can be used to write to it by including its file handle as the first parameter. For example, Listing 8.3 is a minor alteration to Listing 8.1, copying a text file instead of listing it in the Command window.  In Listing 8.3: Line 2: Fetches the output file name. Line 4: Opens the output file for writing. Line 9: Adding oh as the first parameter to fprintf(...) redirects the output to the specified file. Line 13: Closes the output file.  
<h2><a name="8_5">8.5	Engineering Example—Spreadsheet Data</a></h2>

■	Frequently, engineering data are provided in spreadsheets. Here we will adapt the structure assembly problem from Chapter 7. The script for that solution created the data using a constructor function. Consider the situation in which the data are provided in a spreadsheet such as that shown in Figure 8.3. We have to start by examining the layout of the data and the process necessary to extract what we need. Bearing in mind the three results returned from xlsread(...), first we determine which of the three is most appropriate:
■	The {xlsread(...)} function is going to include all the numerical cells from the spreadsheet in the numerical array. This is awkward because there are numbers in the first column; and since the primary interest in this problem is not the numerical data, we will not use the numerical array directly.
■	However, this is not exclusively a text processing problem. Since we need the numerical coordinates, the second, text-only result is not what we need.
■	Therefore, in this particular application, we will process the raw data provided by csvread(...), giving both the string and numerical  data.
The other concern is that there are a different number of connections on each row of the sheet. When a connection is present, it is a string. When it is not there, we refer to the behavior of the raw data to discover that the contents of empty cells appear as [] of type double.

We need a function that will read this file and produce the same model of the structure used in Chapter 7. Such a function is shown in Listing 8.4.
In Listing 8.4:
Line 1: The function consumes the file name and produces a structure array with the fields described in the following comments. Line 2: Reads the spreadsheet and keeps only the raw data.
Line 3: Gets the rows and columns in the raw data; we need to ignore the top row and left column.
Line 4: Initializes the output index for the structure array.
Line 5: Ignoring the first row, traverses all the remaining rows. Line 6: The component name is in the second column.
Line 7: The coordinates of the component are in the third and fourth columns.
Lines 8–9: Initialize the search for the connections for this component. It is important to empty the array conn before each pass to avoid “inheriting” data from a previous row.
Lines 10–11: Extract each item in turn from the row.
Lines 12–14: If the item is not of class char, this is the blank cell at the end of the row; the break command exits the for loop moving across the row.
Lines 15–16: Otherwise, it stores the connection and keeps going. Lines 18–20: When the connections are complete, it stores them in the structure, stores the structure in the structure array, and continues to the next row.
Line 21: When the rows are completed, the data are ready to return to the calling script.

To test this function, replace the structure array construction in lines 1–22 of Listing 7.6 in Chapter 7 with the following line:

data = readStruct('Structure_data.xls');
The script should then produce the same results as before.

Chapter Summary

We have described three levels of capability for reading and writing files:
■	The save and load operators allow you to save variables from the workspace and restore them to the workspace
■	Specialized functions read and write spreadsheets and delimited text files
■	Lower-level functions provide the ability to open and close files, and to read and write text files in any form that is required

[Special Characters]

[Problems]



<table align="center"> 
<tbody> 
<tr> 
<td><a href="07_Structures.htm">previous</a></td> 
<td><a href="Contents.htm">home</a></td> 
<td><a href="09_Recursion.htm">next</a></td> 
</tr> 
</tbody> 
</table> 

<p align="center"><font size="1">This Web Page was Built with PageBreeze </font><a href="http://pagebreeze.com" target="_blank"><font size="1">Free HTML Editor</font></a><font size="1"> </font></p> 
</body> 
</html> 
-1.000000e+00 

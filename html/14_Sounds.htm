<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<head>
<title>14_Sounds</title>
<link rel="stylesheet" href="styles/styles.css" />
<script async src="./javascript/index.js"></script>
</head>
<body bgcolor="#ffffff">
<h1 align="center">Chapter 14: Sounds</h1>

<table align="center">
<tbody>
<tr>
<td><a href="13_Images.htm">previous</a></td>
<td><a href="Contents.htm">home</a></td>
<td><a href="15_Numerical_Methods.htm">next</a></td>
</tr>
</tbody>
</table>
<ul>
<li><a href="#14_1">14.1   The Physics of Sound</a>
<li><a href="#14_2">14.2   Recording and Playback</a>
<li><a href="#14_3">14.3    Implementation</a>
<li><a href="#14_4">14.4  Time Domain Operations</a>
<ul>
    <li><a href="#14_4_1">14.4.1 Slicing and Concatenating Sound</a>
    <li><a href="#14_4_2">14.4.2 Musical Background</a>
    <li><a href="#14_4_3">14.4.3  Changing Sound Frequency</a>
</ul>
<li><a href="#14_5">14.5  The Fast Fourier Transform</a>
<ul>
    <li><a href="#14_5_1">14.5.1 Background</a>
    <li><a href="#14_5_2">14.5.2 Implementation</a>
    <li><a href="#14_5_3">14.5.3  Simple Spectral Analysis</a>
</ul>
<li><a href="#14_6">14.6  Frequency Domain Operations</a>
<li><a href="#14_7">14.7    Engineering Example— Music Synthesizer</a>
</ul>

<!-- Chapter Objectives -->
<h1>Chapter Objectives</h1>
<p>This chapter discusses the following:</p>
<ul>
    <li>How sound is physically recorded and played back and our internal storage of sound</li>
    <li>Operations that can be performed with the original time trace</li>
    <li>The ability to transform the data into the frequency domain and the physical significance of the transformed data</li>
    <li>Operations that can be performed in the frequency domain</li>
</ul>

<!--
<h1>Introduction</h1>
 [not needed here] DMS  -->

<!-- The Physics of Sound -->
<h2><a name="14_1">14.1	The Physics of Sound</a></h2>
 <p>Any sound source produces sound in the form of pressure fluctuations in the air. While the air molecules move infinitesimal distances in order to propagate the sound, the important part of sound propagation is that pressure waves move rapidly through the air by causing air molecules to “jostle” each other. These pressure fluctuations can be viewed as analog signals—data that have a continuous range of values. These signals have two attributes: their amplitude and their frequency characteristics.</p>
 <p>In absolute terms, sound is measured as the <b>amplitude</b> of pressure fluctuations on a surface like an eardrum or a microphone. However, the challenging characteristic of these data is their dynamic range. Our ears are able to detect small sounds with amplitudes around 10<sup>10</sup> (10 billion) times smaller than the loudest comfortable sound. Sound intensity is therefore usually reported logarithmically, measured in decibels where the intensity of a sound in decibels is calculated as follows:</p>
 <p><code>I<sub>DB</sub> = 10 log<sub>10</sub>(I / I<sub>0</sub>)</code></p>
 <p>where I is the measured pressure fluctuation and I<sub>0</sub> is a reference pressure usually established as the lowest pressure fluctuation a really good ear can detect, 2 x 10<sup>−4</sup> dynes/cm<sup>2</sup>.</p>
 <p>Also, sounds are pressure fluctuations at certain <b>frequencies</b>. The human ear can hear sounds as low as 50 Hz and as high as 20 kHz. Voices on the telephone sound odd because the upper frequency is limited by the telephone equipment to 4 kHz. Typically, hearing damage due to aging or exposure to excessive sound levels causes an ear to lose sensitivity to high and/or low frequencies.</p>

 <!-- Recording and Playback -->
<h2><a name="14_2">14.2	Recording and Playback</a></h2>
 <p>Early attempts at sound recording concentrated first on mechanical, and later magnetic, methods for storing and reproducing sound. The phonograph/record player depended on the motion of a needle in a groove as a cylinder or disk rotated at constant speed under the playback head. Not surprisingly, when you see the incredible dynamic range required, even the best stereos could not reproduce high-quality sound. Later, analog magnetic tape in various forms replaced the phonograph, offering less wear on the recording and better, but still limited, dynamic range. Digital recording has almost completely supplanted analog recording and will be the subject of this chapter.</p>
 <p>Of course, sound amplitude in analog form is unintelligible to a computer—it must be turned into an electrical signal by a microphone, amplified to suitable voltage levels, digitized, and stored, as shown in Figure 14.1. The key to successful digital recording and playback—whether by digital tape machines, compact disks, or computer files—is the design of the analog-to-digital (A/D) and digital-to-analog (D/A) devices. The reader should remember that this is still low-level data. Each word coming out of the A/D or going into the D/A merely represents the pressure on the microphone at a point in time.</p>
 <p>The primary parameter governing the sound quality is the recording rate—how quickly the mechanism records samples of the sound (the sampling rate). Basic sampling theory suggests that we should use a sampling rate twice the highest frequency you are interested in reproducing, usually around 20,000 samples per second for good music, 5,000 samples per second for speech.</p>
 <p>The other parameter, the resolution of the recorded data, has remarkably little effect on the quality of the recording to an untrained ear. The resolution is usually either 8 bits (−128 to 127) or 16 bits (−32,768 to 32767). While 8-bit resolution ought to offer very limited dynamic range, and theoretically should be used only for recording speech, in practice it results in a quality of reproduction for music that is, to an untrained ear, indistinguishable from   that   provided   by   16-bit resolution.</p>
 <p>These parameters must be stored with  any  digital  sound  recording medium and retrieved by the tools that play those sounds. To be able to play such a file, we must receive not only the data stream, but also information indicating the sample frequency, <code>Fs</code>, and the word size.</p>
 <p><b>Technical Insight 14.1</b> The background theory of sampling is beyond the scope of this text. Interested readers should research Nyquist on a good search engine.</p>

 <!-- Implementation -->
<h2><a name="14_3">14.3	Implementation</a></h2>
 <!--[MAJOR REWRITE REQUIRED]--> 
 <p>MATLAB offers a number of tools for reading sound files: <code>wavread(...)</code> for <code>wav</code> files and <code>auread(...)</code> for .au files, for example. Both return three variables: a vector of sound values, the sampling frequency in Hz (samples per second), and the number of bits used to record the data (8 or 16).</p>
 <p>To play a sound file, MATLAB provides the function <code>sound(data, rate)</code> where <code>data</code> is the vector of sound values, and <code>rate</code> is the playback frequency, usually the frequency at which the sound values were recorded. We will see that the function <code>sound(...)</code> passes the data directly to the computer’s sound card, but different implementations will manage the behavior of the software that plays the sound in one of two ways.</p>
 <p><i>Blocking vs. Non-blocking:</i> "Blocking" refers to the behavior of your system after you have called the <code>sound(...)</code> function to play a sound. Blocking players will not return control to the code playing the sound until the sound has completed. This will allow only one sound to be played from an application at a time. Non-blocking players will not wait for the sound card to finish playing the sound, so multiple calls to the <code>sound(...)</code> function will overlay different sounds. You will need to experiment with your particular system to determine whether it blocks or not.</p>
 <!--Put these online??A number of .wav files are included on the book’s Companion Web site to demonstrate many aspects of sound files.<-->

 <!-- Time Domain Operations -->
<h2><a name="14_4">14.4	Time Domain Operations</a></h2>
 <p>First, we consider three kinds of operations on sound files in the time domain: slicing, playback frequency changes, and sound file frequency changes.</p>

 <!-- Slicing and Concatenating Sound -->
<h3><a name="14_4_1">14.4.1 Slicing and Concatenating Sound</a></h3>
 <p>Consider the problem of constructing comedic sayings by choosing and assembling words from published speeches. The Companion Web site contains a sampling of speech clips selected from various Web sites. In particular, it has the <i>Apollo 13</i> speech, "Houston, we have a problem"; "Frankly, my dear..." from <i>Gone with the Wind</i>; and "You can’t handle the truth" from <i>A Few Good Men</i>. Exercise 14.1 describes the process of assembling parts of these speeches into a semi-coherent conversation.</p>
 <p>The first part of Exercise 14.1 reads the <i>Apollo 13</i> speech, plays the speech, and plots the data (with the data index as x-axis). The resulting plot is shown in the left half of Figure 14.2. Since the sound actually includes more than we need, the next step is to crop this file to keep only the words we need. By listening to the speech using the function <code>sound(...)</code>, and judiciously zooming and panning the plot, it is possible to narrow down the location in the file where the problem speech starts, at about 111000. In Exercise 14.2 you will extract the first part of the speech.</p>
 <p>In Exercise 14.2 we truncate the speech file to the words we need and also, realizing that the amplitude of these words is a little low, raise its amplitude by a factor of 2.</p>
 <p>In Exercise 14.3, by a similar process, we remove "my dear" from the "frankly, my dear..." speech, reducing its amplitude by one-half, which results in Figure 14.3.</p>

 <!-- Musical Background -->
<h3><a name="14_4_2">14.4.2	Musical Background</a></h3>
 <p>For good historical reasons, music is usually described graphically on a music score. The graphics describe for each note to be played its pitch and its duration, together with other notations indicating how to introduce expression and quality into the music. However, this graphical notation is not amenable to the simple representation of music we need for these experiments. Rather, we will use the representation illustrated in Figure 14.5. The right side of this figure shows a standard piano keyboard, the index of each white note, and the number of half steps necessary to achieve the pitch of each note. On the left side of the figure, we see the method to be used in this text to describe simple tunes. It will consist of an array with two columns and n rows, where n is the number of notes to be played for each tune. The first column is the key number to play, and the second column is the number of beats each note should be played.</p>
 <p>The examples to follow will manipulate the file <code>piano.wav</code> to produce a snippet of music. This file is a recording of a single note played on a piano. <!--Other files provided in the Companion Web site are the same note played on a variety of instruments.--> There are two ways to accomplish this, as follows:</p>
 <ol>
     <li>Playing each note at a different playback frequency</li>
     <li>Stretching or shrinking each note to match the required note pitch and playing them all at the same playback frequency</li>
 </ol>
 <p>The first way is easier to understand and code, but very inflexible; the second method is a little more difficult to implement, but completely extensible. Musically speaking, if a sound is played at twice its natural frequency, it is heard as one musical octave higher. When you play a scale by playing each white key in turn from one note to the next octave, there are 8 keys to play with 7 frequency changes: 5 whole note steps (those separated by a black note) and 2 half note steps, for a total of 12 half note steps. These 12 half steps are logarithmically divided where the frequency multiplier between half note steps is 2<sup>1/12</sup>.</p>

 <!-- Changing Sound Frequency -->
<h3><a name="14_4_3">14.4.3	Changing Sound Frequency</a></h3>
 <p>We will leave as an exercise for the reader the question of playing a tune by changing the playback frequency of each note, which is really never a practical thing to do, and concentrate on playing all the notes of a tune with the same playback frequency. This allows the different notes to be copied into a single sound file and saved to be played back on any digital sound system.</p>
 <p>In order to change the perceived note frequency without changing the playback frequency, we have to change the number of data samples in the original data file much as we stretched or shrunk an image in Section 13.4.1. Use Exercise 14.5 to experiment with this technique for playing notes at different pitches.</p>
 <p>In Exercise 14.5 we first read and play the note at its natural frequency. Then we raise its pitch by removing about one-third of the samples and then lower the pitch by an octave by doubling the number of samples.</p>
 <p><b>Play a Scale</b> Listing 14.1 shows a script that uses this capability to play the C Major scale (all white notes) on the piano. It repeatedly shortens the vector <code>newNote</code> to increase the frequency of the note played.</p>
 <p><b>Play a Simple Tune</b> We now write a script to build a playable <code>.wav</code> file using the note shrinking technique. The script is shown in Listing 14.2. It uses the array <code>steps</code> to decide how many half-tone steps are necessary to reach the nth note on the scale and uses the array <code>doremi</code> to define the tune. The first column specifies the relative pitch (the note on the scale) and the second the duration in "beats." The script sets the beat time to be 0.2 seconds.</p>
 <p>The goal of the script is to put the notes into a single sound array called tune, as illustrated in Figure 14.6, rather than playing the notes "on the fly." This is accomplished as follows:</p>
 <ul>
     <li>Create an empty array, <code>tune</code>, of the appropriate length (the length of the original note plus the total number of beats in the song)</li>
     <li>Initialize <code>storeAt</code> to store the first note at the start of the tune</li>
     <li>Iterate across the <code>tune</code> definition array <code>doremi</code> with the following steps:
         <ul>
             <li>Start with the original <code>note</code></li>
             <li>Get the key index to decide how many times to raise the note array by half a step</li>
             <li>Raise the <code>note</code> to the right pitch and save it as <code>theNote</code></li>
             <li>Add that <code>theNote</code> vector to the <code>tune</code> vector, starting at <code>storeAt</code></li>
             <li>Move the <code>storeAt</code> variable down the <code>tune</code> vector a distance equivalent to the duration of that note</li>
         </ul>
     </li>
     <li>When all the notes have been added to the tune file, play the tune and save it as a <code>.wav</code> file.</li>
 </ul>

<!-- The Fast Fourier Transform -->
<h2><a name="14_5">14.5  The Fast Fourier Transform</a></h2>
 <p>Typically, the time history display of a sound shows you the amplitude of the sound as a function of time but makes no attempt at showing the frequency content. While this works for the exercises above, we are often more interested in the frequency content of a sound file, for which we need a different presentation—a spectrum display.</p>

 <!-- Background -->
<h3><a name="14_5_1">14.5.1	Background</a></h3>
 <p>In general, a spectrum display shows the amount of sound energy in a given frequency band throughout the duration of the sound analyzed but ignores the time at which the sound at that frequency was generated. Many acoustic amplifiers (see Figure 14.7) include two features that allow you to customize the sound output:</p>
 <ul>
     <li>A spectral display that changes values as the sound is played, indicating the amount of sound energy (vertically) in different frequency bands (horizontally)</li>
     <li>Filter controls to change the relative amplification in different frequency bands</li>
 </ul>
 <p> In the following paragraphs, we will consider only the analysis of the sound frequency content. The ability to reshape the sound frequency content as the sound plays is beyond the scope of this text.</p>
 <p>To achieve the motion of the spectrum display, software to analyze a segment of the sound file runs periodically and updates the spectrum display. Typically, perhaps 20 times a second, 1/20th second of sound file is analyzed and transformed. The software used for this conversion is known as the Fourier transform.</p>
 <p>While the mathematics of the Fourier transform is beyond the scope of this book, we can make use of the tools it offers without concerning ourselves with the details. There are a number of implementations of this transform; perhaps the most commonly used is the Fast Fourier Transform (FFT).  The  FFT  uses  clever  matrix  manipulations  to  optimize  the algorithm needed to generate the forward (time to frequency) and reverse (frequency to time) transforms.</p>

 <!-- Implementation -->
<h3><a name="14_5_2">14.5.2	Implementation</a></h3>
 <p>Figure 14.8 illustrates the overall process of transforming between the time domain and frequency domain. It starts with a simple sound file, a vector of N sound values in the range (−1.0 to 1.0), which, if played back at a sample frequency <code>Fs</code> samples per second, reproduces the sound. The parameters of interest for characterizing the time trace are:</p>
 <table>
     <tr>
         <td><code>N</code></td>
         <td>the number of samples Fs</td>
     </tr>
     <tr>
         <td><code>F<sub>s</sub></code></td>
         <td>the sampling frequency</td>
     </tr>
     <tr>
         <td><code>&Delta;t</code></td>
         <td>the time between samples, computed as <code>1/Fs</code></td>
     </tr>
     <tr>
         <td><code>T<sub>max</sub></code></td>
         <td>the maximum time is N x &Delta;t</td>
     </tr>
 </table>
 <p>The FFT consumes a file with these characteristics and produces a frequency spectrum with a corresponding set of characteristics. The frequency spectrum consists of the same number, <code>N</code>, of data points, each of which is a complex value with real and imaginary parts. (While many displays actually plot the magnitude of the spectrum values, to accomplish the inverse transform, the complex values must be retained.) The frequency values are "folded" on the plot so that zero frequency occurs at either end of the spectrum, and the maximum frequency occurs in the middle, at spectrum data point <code>N/2</code>.</p>
 <p>The equivalent characteristics for the spectrum data are as follows:</p>
 <table>
     <tr>
         <td><code>N</code></td>
         <td>the number of samples</td>
     </tr>
     <tr>
         <td><code>&Delta;f</code></td>
         <td>the frequency difference between samples, computed as <code>1/T<sub>max</sub></code></td>
     </tr>
     <tr>
         <td><code>F<sub>max</sub></code></td>
         <td>the frequency value at the end of the plot, is <code>N x &Delta;f</code> However, since the mathematics force this frequency to actually replicate the beginning frequency, the maximum effective frequency actually occurs at the mid-point with value <code>F<sub>max</sub>/2</code>.</td>
     </tr>
 </table>
 <p>The FFT is mechanized using the function <code>fft(...)</code>, which consumes the time history and produces the complex spectrum file. The inverse FFT  function, <code>ifft(...)</code>,  takes  a spectrum array and reconstructs the time history. This pair of functions provides a powerful set of tools for manipulating sound files.</p>
 <p><b>Technical Insight 14.2</b>The fact that the actual maximum frequency is half of the sampling frequency is consistent with the Nyquist criterion that the maximum frequency you can discern with digital sampling is half the sampling frequency.</p>

 <!-- Simple Spectral Analysis -->
<h3><a name="14_5_3">14.5.3	Simple Spectral Analysis</a></h3>
 <p>Listing 14.3 illustrates a script that creates 10 seconds of an 8 Hz sine wave, plots the first second of it, performs the FFT, and plots the real and imaginary parts of the spectrum. Notice the following:</p>
 <ul>
     <li>A sine wave in the time domain transforms to a line in the frequency domain because all its energy is concentrated at that frequency—8 Hz in this example.</li>
     <li>Since the FFT is a linear process, multiple sine or cosine waves added together at different frequencies have additive effects in the spectrum.</li>
     <li>The resulting spectrum is complex (with real and imaginary parts) and symmetrical about its center, the point of maximum frequency. On the plot, of course, one cannot make the frequency axis labels reduce from the center to the end.</li>
     <li>The real part of the spectrum is mirrored about the center; the imaginary part is mirrored and inverted (the complex conjugate of the original data).</li>
     <li>The phase of the complex spectrum retains the position of the sine wave in the time domain—it would be totally real for a cosine wave symmetrically placed in time and totally imaginary for a sine wave in the same relationship.</li>
 </ul>
 <p>The script in Listing 14.3 creates three sub-plots: the original sine wave and then the amplitude and phase of the spectrum.</p>
 <p>Figure 14.9 shows the result from running this script. It confirms the earlier statement that the real part of the spectrum is mirrored about the center frequency, and the imaginary part is mirrored and inverted.</p>

 <!-- Frequency Domain Operations -->
<h2><a name="14_6">14.6  Frequency Domain Operations</a></h2>
 <p>As a typical example of operating in the frequency domain, we will consider analyzing the spectral quality of different musical instruments. The intent of this section is to develop a plot showing the spectra of a selection of different musical instruments. We will first build a function that plots the spectrum for a single instrument and then build the script to create all the plots. Listing 14.4 shows a function that reads the .wav file of an instrument from the music samples in the University of Miami’s Audio and Signal Processing Laboratory<a href = "http://chronos.ece.miami.edu/~dasp/samples/samples.html">[1]</a>. All the instruments are carefully playing a note at about 260 Hz.</p>
<p>The results are shown in Figure 14.10. It is interesting to notice the following:</p>
<ul>
    <li>None of the instruments produce a pure tone. The lowest frequency at which there is energy is usually called the fundamental frequency, and successive peaks to the right at multiples of the fundamental frequency are referred to, for example, as the first, second, and third harmonics.</li>
    <li>Several instruments have much more energy in the harmonics than in the fundamental frequency.</li>
    <li>"Families" of instruments have similar spectral shapes—the strings, for example, have strong fundamental and second harmonic energy. In principle, these characteristic spectral "signatures" can be used to synthesize the sound of instruments, and even to identify individual instruments when played in groups.</li>
</ul>

 <!-- Engineering Example -->
<h2><a name="14_7">14.7 Engineering Example—Music Synthesizer</a></h2>
<p>A music synthesizer is an electronic instrument with a piano style keyboard that is able to simulate the sound of multiple instruments. Unlike the instrument sounds we have used so far, the instrument sounds are not stored as large time histories. Rather, they are stored as the Fourier coefficients  similar to those illustrated in Figure 14.10. The sound is then reconstructed by multiplying sin or cosine waves of the right frequency by the stored coefficients. For some instruments, this is sufficient. Other instruments such as pianos need to have the amplitude of the resulting sound modified to match a typical profile. Listing 14.6 illustrates a possible technique for extracting the most important Fourier coefficients from the piano sound. The result will be a little disappointing because the sound does not fade with time. We will need some techniques from the next chapter to complete the story.</p>
<p>We will complete this synthesis for a piano sound in the next chapter.</p>

<!-- Chapter Summary -->
<h2>Chapter Summary</h2>
<p>This chapter presented the following:</p>
<ul>
    <li>Sounds are read with specific readers that provide a time history and sampling frequency</p>
    <li>Sounds can be played through the computer’s sound system and saved to disk as a sound file ready for playing on any digital player</li>
    <li>We can slice and concatenate sounds to edit speeches and change the frequency of the sound to change its pitch</li>
    <li>We can analyze the frequency content of sound using the Fast Fourier Transform (FFT)</li>
    <li>We can modify the spectra by adding, deleting, or changing the sound levels at chosen frequencies under certain controlled conditions</li>
    <li>We can reconstruct a sound from the FFT coefficients.</li>

[Special Characters]

[Problems]


<table align="center">
<tbody>
<tr>
<td><a href="13_Images.htm">previous</a></td>
<td><a href="Contents.htm">home</a></td>
<td><a href="15_Numerical_Methods.htm">next</a></td>
</tr>
</tbody>
</table>

<p align="center"><font size="1">This Web Page was Built with PageBreeze </font><a href="http://pagebreeze.com" target="_blank"><font size="1">Free HTML Editor</font></a><font size="1"> </font></p>
</body>
</html>

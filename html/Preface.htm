<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<head>
<meta name="GENERATOR" content="PageBreeze Free HTML Editor (http://www.pagebreeze.com)">
<meta http-equiv="Content-Type" content="text/html;charset=ISO-8859-1" >
<title>Preface</title>
</head>
<body bgcolor="#ffffff">
<h1 align="center">Preface</h1>

<table align="center">
	<tbody>
		<tr>
			<td><a href="Contents.htm">previous</a></td>
			<td><a href="Contents.htm">home</a></td>
			<td><a href="01_Introduction.htm">next</a></td>
		</tr>
	</tbody>
</table>

<p style="margin-left: 40px; margin-right: 40px"><q cite="Laurence Sterne (1713–1768), British author, clergyman">That of all the several ways of beginning a book which are now in practice throughout the known world, I am confident my own way of doing it is the best&mdash;I&rsquo;m sure it is the most religious&mdash;for I begin with writing the first sentence, and trusting to Almighty God for the second. </q></p>

<p style="text-align: right; margin-right: 40px">Laurence Sterne (1713&ndash;1768), British author, clergyman<br />
&nbsp;</p>

<p>This book introduces the power, satisfaction, and joy of computing to beginning engineering students who have little or no previous computing experience. It began as a snapshot of the content of a Georgia Tech course that introduces engineers to computing. However, it has been extensively enhanced to meet the needs of a wider audience of students and educators who want to understand programming for other reasons. In this book, to understand computing, we use the basic syntax and capabilities of MATLAB, a user-friendly language that is emerging as one of the most popular computing languages in engineering.</p>

<h3>Previous Editions</h3>

<p>All editions of "Engineering Computation Using MATLAB" were published as conventional paper text books by Pearson Addison Wesley, the Third Edition ISBN being 978-0-13-256870-8. The basic conceptual framework of that work has been retained in this new, on-line edition.</p>

<h3>New to the Fourth Edition</h3>

<p>This edition is the first of two &quot;giant steps for mankind&quot; or at least, those universities that teach MATLAB at a fundamental level. There will be no paper copies of this edition printed. It will be published only as an on-line resource.</p>

<p>We will of course be able to use color and motion whenever appropriate.</p>

<p>We are no longer limited by paper print formatting constraints.</p>

<p>We are no longer constrained by page breaks. Code listings can then be as long as necessary to implement a coding problem, being accessible as scrolling windows. Students will be able to paste all the listings from the text into Matlab to study its behavior.</p>
<p>The second &quot;giant step&quot;will change the scrolling windows into edit windows in which the student can directly run the code and make edits to observe the effects of modifications to the code.</p> 



<h4>Pedagogical Style</h4>

<p>Computing is not a spectator sport. Students learn computing by using a computing system to solve problems. This text not only presents computing concepts and their MATLAB implementation, but also offers students extensive hands-on exercises. The text illustrates the ideas with examples from the world of engineering and presents sample problems that students might encounter. Each chapter includes topics that go a step beyond the basic content of an introductory class. This gives professors the choice to progress slowly, and more thoroughly, through the material in two semesters. It also offers advanced students enrichment materials for their personal study.</p>

<p>The overall philosophy of this text approaches programming tools in the following manner:</p>

<ol>
	<li>Explain a computing concept in general</li>
	<li>Discuss its implementation in MATLAB</li>
	<li>Provide exercises to master the concept</li>
</ol>

<p>To help facilitate students&rsquo; understanding of a concept and its implementation, the text uses three features: general templates, flow charts and MATLAB listings. The general templates provide a foundation for students to understand concepts in general and can be applied to any language. The flow charts are graphical representations of logic flows and the MATLAB listings show students how to implement concepts in MATLAB including comments with detailed explanations of the code.</p>

<h4>Features of the Text</h4>

<p><strong>Exercises</strong>: Allow students a &ldquo;Do It Yourself&rdquo; approach to master concepts by trying what they just learned. Exercises follow each new topic.</p>

<p><strong>Style Points</strong>: Advise students about writing quality code that is easy to understand, debug, and reuse. &brvbar; Hints: Enrich students&rsquo; understanding of a topic</p>

<p><strong>Hints </strong>are interspersed through the book at points where students may benefit from a little extra &ldquo;aside.&rdquo; &brvbar;</p>

<p><strong>Engineering Examples</strong>: Provide robust models and apply to real- world issues that will motivate students. Examples from different engineering disciplines are presented at the end of each chapter.</p>

<p><strong>Special Characters, Reserved Words</strong>, and <strong>Functions</strong>: Provides a quick reference for the key MATLAB principles discussed in each chapter.</p>

<p><strong>Self Test</strong>: Helps students to check their understanding of the material in each chapter.</p>

<p><strong>Programming Projects</strong>: Offer a variety of large-scale projects that students can work on to solidify their skills</p>

<h4>Chapter Overview</h4>

<p>Chapter 1: <em>Introduction </em>discusses the history of computer architectures as they apply to computing systems today. The chapter provides an overview of computer hardware and software and how programs execute.</p>

<p>Chapter 2: <em>Introduction </em>discusses some basic concepts of computing and then introduces the basic operation of the MATLAB user interface. The chapter also describes how to capture simple MATLAB programs in the form of scripts.</p>

<p>Chapter 3: <em>Functions </em>describes how to implement procedural abstraction by defining reusable code blocks.</p>

<p>Chapter 4: <em>Vectors and Arrays </em>introduces the fundamental machinery that sets MATLAB apart from other languages&mdash;its ability to perform mathematical and logical operations on homogeneous collections of numbers.</p>

<p>Chapter 5: <em>Execution Control </em>describes the common techniques used to control the execution of code blocks&mdash;conditional operation and iteration.</p>

<p>Chapter 6: <em>Strings </em>discusses how MATLAB operates on variables containing text.</p>

<p>Chapter 7: <em>Cell Arrays and Structures</em> discusses two kinds of heterogeneous data collections accessed by index and by name.</p>

<p>Chapter 8: <em>File Input and Output </em>describes three levels of ability provided in MATLAB for transferring data to and from data files&mdash;saving workspaces, specific tools that read and write specific data files, and general-purpose tools for processing any kind of file.</p>

<p>Chapter 9: <em>Recursion </em>discusses and illustrates a widely used alternative approach to repetitive code execution.</p>

<p>Chapter 10: <em>Principles of Problem Solving </em>introduces ideas that help students design solutions to new problems and avoid the &ldquo;blank sheet of paper&rdquo; syndrome&mdash;how to start a program.</p>

<p>Chapter 11: <em>Plotting </em>takes the student from basic plotting in two dimensions to the advanced tools that draw representations of three-dimensional objects with smooth shading and even multiple light effects.</p>

<p>Chapter 12: <em>Matrices </em>describes specific MATLAB capabilities that implement matrix algebra.</p>

<p>Chapter 13: <em>Images </em>discusses how to use vector and array algebra to manipulate color pictures.</p>

<p>Chapter 14:&nbsp;<em>Sound </em>shows how to analyze, synthesize, and operate on sound files.</p>

<p>Chapter 15: <em>Numerical Methods </em>introduces numerical techniques that commonly occur in engineering: interpolation, curve fitting, integration, and differentiation.</p>

<p>Chapter 16: <em>Sorting </em>presents five algorithms for ordering data, each of which has applicability under certain circumstances&mdash;Insertion Sort, Bubble Sort, Quick Sort, Merge Sort, and Radix Sort&mdash;and then compares their performance on large quantities of data.</p>

<p>Chapter 17: <em>Processing Graphs </em>discusses how to represent graphs in general and then how to solve two important engineering problems&mdash;finding a minimal spanning tree and finding an optimal path between two nodes of the graph.</p>

<p><em>Appendices </em>provide a summary of the MATLAB special characters, reserved words, and functions used throughout the text, the ASCII character set, the internal number representation inside the computer, and answers to the True or False and Fill in the Blank questions.</p>

<h4>Paths through the Book</h4>

<p>Not all courses that cover programming and MATLAB follow the same syllabus. Engineering Computation with MATLAB is designed to facilitate teaching the material with different styles and at different speeds. For example, Chapters 3, 4, and 5 cover writing your own functions, MATLAB array manipulation and iteration. There are three schools of thought about the appropriate way to introduce these concepts. One would introduce array constructs first and follow up with the more &ldquo;traditional&rdquo; concept of iteration; another would teach iteration first and deal with the MATLAB-specific array operations later; and the third would treat functions first. I chose to order the book according t o the arrays-first approach, to suit a particular teaching style. However, should you prefer iteration or functions first, Chapters 3, 4, and 5 can be used in any order you wish. In practice, over the years, our course has shifted to a functions-first approach so that we can use function interfaces to isolate students&rsquo; code for automated code grading. Chapters 6&ndash;9 should be taught in sequence&mdash;there are dependencies between chapters that would make it awkward change the order. Chapter 10 is an important chapter that is difficult to place on a class schedule. Where it stands in the book appears to be a logical position. However, at that point in the semester, beginning students are still not ready to think about larger problems. I have usually covered this material (if at all) at the end of each semester by way of review. Chapter 11 provides basic plotting capability and is necessary for the remaining chapters. After that, Chapters 12&ndash;17 are virtually independent and can be taught in any order, but should follow Chapters 2&ndash;11.</p>

<h4>Supplements</h4>

<p>Various supplemental materials for this text are available at the book&rsquo;s Companion Web site: www.pearsonhighered.com/smith. The following are accessible to all readers:</p>

<p>Solutions to selected Programming Projects</p>

<p>Selected full-color figures</p>

<p>Source code for all MATLAB listings</p>

<p>In addition, the following supplements are available to qualified instructors at Addison-Wesley&rsquo;s Instructor Resource Center. Please visit www.pearsonhighered.com/irc, or send an e-mail to computing@aw.com.</p>

<p>Solutions to all of the Programming Projects</p>

<p>PowerPoint lecture slides</p>

<h4>Acknowledgments</h4>

<p>The underlying philosophy of this book and the material that forms its skeleton originated in the work of Professor Russell Shackelford around 1996. Dr. Melody Moore, currently an Associate Professor in the Interactive Computing department of the College of Computing at Georgia Tech, was instrumental in creating many of the teaching materials (then as overhead transparencies) from which this class was first taught. I am deeply indebted to Professor James Craig from the Aerospace Engineering department at Georgia Tech, who joined me in co-teaching the first engineering version of CS1, taught me much about MATLAB, and pioneered this class from the original 35 students to its current size of over 1,000 engineering students per semester. This engineering class became a vessel for introducing the students to the MATLAB language.</p>

<p>I would like to thank the following reviewers for their insight and wisdom during the process of manuscript development:</p>

<p>Kenneth Rouse, Auburn University</p>

<p>Suparna Datta, Northeastern University</p>

<p>Gerardine G. Botte, Ohio University</p>

<p>Mica Grujicic, Clemson University</p>

<p>Kuldip S. Rattan, Wright State University</p>

<p>Y.J. Lin, The University of Akron</p>

<p>Mark Nagurka, Marquette University</p>

<p>Michael Peshkin, Northwestern University</p>

<p>Howard Silver, Fairleigh Dickinson University</p>

<p>Steve Swinnea, The University of Texas at Austin</p>

<p>The material has benefited from the efforts of every Georgia Tech teaching assistant (TA), graduate student, instructor, and professor who has taught CS1, a list too long to enumerate. In particular, those wonderfully creative TAs who developed the ideas for examples used in this text have enriched it immeasurably. I wish to credit Professor Aaron Bobick with an important contribution made in the course of one short conversation. That conversation was responsible for pulling the class back from the brink of being merely a MATLAB programming class to one with roots in CS concepts. Professor Bobick taught CS1 with me in the fall of 2004. Early in the semester he made a very simple request: he said it would be easier for him to teach the class if we explicitly expressed the computing concepts inherent in each lesson, rather than leaving him&mdash;and the students&mdash;to tease the concepts out of the teaching materials.</p>

<table align="center">
	<tbody>
		<tr>
			<td><a href="Contents.htm">previous</a></td>
			<td><a href="Contents.htm">home</a></td>
			<td><a href="01_Introduction.htm">next</a></td>
		</tr>
	</tbody>
</table>

<p align="center"><font size="1">This Web Page was Built with PageBreeze </font><a href="http://pagebreeze.com" target="_blank"><font size="1">Free HTML Editor</font></a><font size="1"> </font></p>
</body>
</html>

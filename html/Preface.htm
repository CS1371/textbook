<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<head>
<meta name="GENERATOR" content="PageBreeze Free HTML Editor (http://www.pagebreeze.com)">
<meta http-equiv="Content-Type" content="text/html;charset=ISO-8859-1" >
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
<link rel="stylesheet" href="styles/styles.css" />
<title>Preface</title>
</head>
<body>
<div>#top_nav#</div>
<div class="nav-obj">#nav_obj#</div>
<div class="content">
	<h1 align="center">Preface</h1>

	<p style="margin-left: 40px; margin-right: 40px"><q cite="Laurence Sterne (1713â€“1768), British author, clergyman">That of<a id="633"></a> all the several ways of<a id="634"></a> beginning a book which are now in practice throughout the known world, I am confident my own way of<a id="635"></a> doing it is the best&mdash;I&rsquo;m sure it is the most religious&mdash;for<a id="744"></a> I begin with<a id="456"></a> writing<a id="364"></a> the first sentence, and<a id="369"></a> trusting to<a id="530"></a> Almighty God for<a id="745"></a> the rest. </q></p>

	<p style="text-align: right; margin-right: 40px">Laurence Sterne (1713&ndash;1768), British author, clergyman<br>
	</p>

	<p>This book introduces the power, satisfaction, and<a id="370"></a> joy of<a id="636"></a> computing to<a id="531"></a> beginning engineering<a id="320"></a> students who<a id="766"></a> have little or no previous computing experience. It began as a snapshot of<a id="637"></a> the content of<a id="638"></a> a Georgia Tech course that introduces engineers to<a id="532"></a> computing. However, it has been extensively enhanced to<a id="533"></a> meet the needs of<a id="639"></a> a wider audience of<a id="640"></a> students and<a id="371"></a> educators who<a id="767"></a> want to<a id="534"></a> understand programming<a id="510"></a> for<a id="746"></a> other reasons. In this book, to<a id="535"></a> understand computing, we use the basic syntax and<a id="372"></a> capabilities of<a id="641"></a> MATLAB<a id="482"></a>, a user<a id="526"></a>-friendly language that is emerging as one of<a id="642"></a> the most popular computing languages in engineering<a id="321"></a>. We also recognize that a programming<a id="511"></a> language merely exists as an imperfect medium by which we express solutions to<a id="536"></a> problems. Like any other language, if a programming<a id="512"></a> language is not used continually, any skill temporarily acquired will be lost. The course for<a id="747"></a> which this book is offered as a resource is taught to<a id="537"></a> freshmen in most Engineering schools. The author was approached by a faculty member whose primary audience was college seniors.  After the usual introductions, the faculty member made the observation that we must be doing something wrong because his students did not know how to<a id="538"></a> program. This observation seemed to<a id="539"></a> be at odds with<a id="457"></a> the course evaluation strategy whereby a student could not pass the class without successfully writing<a id="365"></a> programs that solved non-trivial problems. So I asked how much programming<a id="513"></a> the students in that discipline used during their sophomore and<a id="373"></a> junior years, and<a id="374"></a> was told that in those years, the students were too busy with<a id="458"></a> their core classes<a id="308"></a> to<a id="540"></a> exercise their programming<a id="514"></a> skills.</p>

	<h1>Text Books Past, Present and<a id="375"></a> Future</h1>

	<p>In the past, a number of<a id="643"></a> paper editions of<a id="644"></a> this text<a id="727"></a> were printed by Pearson Addison Wesley, and<a id="376"></a> I will always be grateful for<a id="748"></a> the support provided by their staff over the years driving this text<a id="728"></a> towards the goal of<a id="645"></a> helping students to<a id="541"></a> learn how to<a id="542"></a> solve problems by writing<a id="366"></a> programs. The lasting legacy from<a id="333"></a> the paper editions was a collection of<a id="646"></a> files containing the textual material and<a id="377"></a> the fixed images<a id="360"></a> and<a id="378"></a> listings illustrating the material. <br>
	This edition is the first of<a id="647"></a> two &quot;giant steps for<a id="749"></a> mankind&quot; moving completely away from<a id="334"></a> paper text<a id="729"></a> books to<a id="543"></a> Web-based reference material.

	<p>We will of<a id="648"></a> course be able to<a id="544"></a> use color<a id="312"></a> and<a id="379"></a> animations whenever appropriate</p>

	<p>We are no longer page limited by paper constraints of<a id="649"></a> page size<a id="742"></a> and<a id="380"></a> layout and<a id="381"></a> the total page count.</p>

	<h1>Important Attributes that survive the Transition</h1>

	Three important features of<a id="650"></a> the text<a id="730"></a> survived the transition away from<a id="335"></a> paper: the pedagogical style, the philosophy of<a id="651"></a> teaching and<a id="382"></a> the use of<a id="652"></a> graphics to<a id="545"></a> illustrate code features:</p>


	<h2>1. Pedagogical Style</h2>

	<p>Computing is not a spectator sport. Students learn computing by using a computing system to<a id="546"></a> solve problems. This text<a id="731"></a> not only presents computing concepts and<a id="383"></a> their MATLAB<a id="483"></a> implementation<a id="628"></a>, but also offers students extensive hands-on<a id="474"></a> exercises. The text<a id="732"></a> illustrates the ideas with<a id="459"></a> examples<a id="351"></a> from<a id="336"></a> the world of<a id="653"></a> engineering<a id="322"></a>, provides style points, and<a id="384"></a> presents sample problems that students might encounter. Each chapter includes topics that go a step beyond the basic content of<a id="654"></a> an introductory class. This gives professors the choice to<a id="547"></a> progress slowly, and<a id="385"></a> more thoroughly, through the material in two semesters. It also offers advanced students enrichment materials for<a id="750"></a> their personal study.</p>

	<h2>2. The overall philosophy</h2>
The overall philosophy of<a id="655"></a> this text<a id="733"></a> approaches programming<a id="515"></a> tools in the following manner:
	<ol>
		<li>Explain a computing concept in general</li>
		<li>Discuss its implementation<a id="629"></a> in MATLAB<a id="484"></a></li>
		<li>Provide exercises to<a id="548"></a> master the concept</li>
	</ol>

	<h2>3. Graphical illustrations</h2>
	<p>To help<a id="355"></a> facilitate students&rsquo; understanding of<a id="656"></a> the concept and<a id="386"></a> its implementation<a id="630"></a>, the text<a id="734"></a> uses two features: general templates and<a id="387"></a> MATLAB<a id="485"></a> listings. The general templates provide a foundation for<a id="751"></a> students to<a id="549"></a> understand concepts in general and<a id="388"></a> can be applied to<a id="550"></a> any language. The MATLAB<a id="486"></a> listings show students how to<a id="551"></a> implement concepts in MATLAB<a id="487"></a> and<a id="389"></a> include detailed explanations of<a id="657"></a> the code.</p>

	<h1>Features of<a id="658"></a> the Text that have been Retained</h1>
	<p>Some features of<a id="659"></a> the paper text<a id="735"></a> editions were retained. In some cases, they were significantly changed to<a id="552"></a> take advantage of<a id="660"></a> the technically advanced delivery medium.
	<p><strong>Exercises</strong>: Allow students a &ldquo;Do It Yourself&rdquo; approach to<a id="553"></a> master concepts by trying what they just learned. Exercises follow each new topic.</p>

	<p><strong>Style Points</strong>: Style Points advise students about writing<a id="367"></a> quality code that is easy to<a id="554"></a> understand, debug, and<a id="390"></a> reuse.</p>

	<p><strong>Hints: </strong>Hints enrich students&rsquo; understanding of<a id="661"></a> a topic. They are interspersed through the book at points where students may benefit from<a id="337"></a> a little extra &ldquo;aside.&rdquo;</p>

	<p><strong>Engineering Examples</strong>: Engineering Examples provide robust models and<a id="391"></a> apply to<a id="555"></a> real-world issues that will motivate students. Examples from<a id="338"></a> different engineering<a id="323"></a> disciplines are presented at the end<a id="318"></a> of<a id="662"></a> each chapter.</p>

	<p><strong>Special Characters, Reserved Words, and<a id="392"></a> Functions</strong> provide a quick<a id="720"></a> reference for<a id="752"></a> the key MATLAB<a id="488"></a> principles discussed in each chapter.</p>

	<p><strong>Self Test</strong>: Self Tests help<a id="356"></a> students to<a id="556"></a> check their understanding of<a id="663"></a> the material in each chapter.</p>

	<p><strong>Programming Projects</strong>: Offer a variety of<a id="664"></a> large-scale<a id="717"></a> projects that students can work on<a id="475"></a> to<a id="557"></a> solidify their skills</p>

	<h1>Features of<a id="665"></a> the Text that have been Removed</h1>
	<p>
	In the first three editions of<a id="666"></a> this text<a id="736"></a>, the paper editions, we used to<a id="558"></a> make available to<a id="559"></a> students and<a id="393"></a> lecturers a huge zip file. It contained several types<a id="363"></a> of<a id="667"></a> material believed to<a id="560"></a> be helpful to<a id="561"></a> the teaching process. With this new, web-based edition and<a id="394"></a> carefully considering how best to<a id="562"></a> teach these topics, we have abandoned that zip file. </p>
	<h2>1. Solutions to<a id="563"></a> selected Programming Projects</h2>
	The point of<a id="668"></a> the programming<a id="516"></a> projects is not to<a id="564"></a> enable students to<a id="565"></a> write exactly the right code, but to<a id="566"></a> create their own solution to<a id="567"></a> the problems.  If the solutions were available, there is a serious danger that students will look at the solution, perhaps understand how it works and<a id="395"></a> copy it into a note book, believing that they have learned that kind of<a id="669"></a> solution.  In fact, this short-cut to<a id="568"></a> the answer has deprived the student of<a id="670"></a> the opportunity to<a id="569"></a> struggle with<a id="460"></a> the form and<a id="396"></a> implementation<a id="631"></a> of<a id="671"></a> the program that solves this problem.</p>

	<h2>2. Source code for<a id="753"></a> all MATLAB<a id="489"></a> listings</h2>
	<p>Another aspect of<a id="672"></a> programming<a id="517"></a> is that an expert programmer rarely starts with<a id="461"></a> a blank screen. In his initial problem solving analysis, the programmer frequently recognizes similarity to<a id="570"></a> other programs he has written or that are available and<a id="397"></a> documented elsewhere.  In this edition of<a id="673"></a> the web-based text<a id="737"></a>, the listings are actually in scrollable windows<a id="771"></a> that allow students to<a id="571"></a> copy and<a id="398"></a> extract as much as they need ready to<a id="572"></a> be adapted to<a id="573"></a> the needs of<a id="674"></a> the specific solution required.</p>

	<h2>3. Lecture slides</h2>
	<p>At the risk of<a id="675"></a> kicking over some sacred cows, I have a passionate dislike for<a id="754"></a> teaching programming<a id="518"></a> classes<a id="309"></a> from<a id="339"></a> fixed projection media. I recall a painful experience sitting in the back of<a id="676"></a> a lecture hall to<a id="574"></a> observe a novice instructor. He was standing with<a id="462"></a> his back to<a id="575"></a> the students, scratching his head and<a id="399"></a> observing that he had no idea what that slide meant. When the teaching materials are available like a politician's teleprompter, there is an overpowering temptation to<a id="576"></a> just read the slides, thereby removing from<a id="340"></a> the lecture any opportunity to<a id="577"></a> demonstrate the thought processes behind solving a particular kind of<a id="677"></a> problem.</p>

	<h1>Back to<a id="578"></a> the Future</h1>
	<p>What else<a id="317"></a> could possibly be done in the next major release?  I mentioned earlier that one advantage of<a id="678"></a> having the listings live in a window would be for<a id="755"></a> a student to<a id="579"></a> be able to<a id="580"></a> paste code from<a id="341"></a> that window into the programming<a id="519"></a> environment and<a id="400"></a> then experiment with<a id="463"></a> the code and<a id="401"></a> perhaps adapt it to<a id="581"></a> solving a different problem. But what if that window was actually an edit/execute programming<a id="520"></a> environment?  Students could then look at the listing and<a id="402"></a> experiment right there with<a id="464"></a> the effect of<a id="679"></a> changes.<br>
	While simple in concept, there are numerous technical and<a id="403"></a> business / licensing issues that will require significant effort to<a id="582"></a> overcome.</p>
	<h1>Chapter Overview</h1>

	<p>Chapter 1: <em>Introduction </em>discusses the history of<a id="680"></a> computer architectures<a id="314"></a> as they apply to<a id="583"></a> computing systems today. The chapter provides an overview<a id="632"></a> of<a id="681"></a> computer hardware and<a id="404"></a> software and<a id="405"></a> how programs execute.</p>

	<p>Chapter 2: <em>Basics </em>discusses some basic concepts of<a id="682"></a> computing and<a id="406"></a> then introduces the basic operation<a id="361"></a> of<a id="683"></a> the MATLAB<a id="490"></a> user<a id="527"></a> interface. The chapter also describes how to<a id="584"></a> capture simple MATLAB<a id="491"></a> programs in the form of<a id="684"></a> scripts<a id="718"></a>.</p>

	<p>Chapter 3: <em>Functions </em>describes how to<a id="585"></a> implement procedural abstraction<a id="627"></a> by defining reusable code blocks.</p>

	<p>Chapter 4: <em>Vectors and<a id="407"></a> Arrays </em>introduces the fundamental machinery that sets MATLAB<a id="492"></a> apart from<a id="342"></a> other languages&mdash;its ability to<a id="586"></a> perform mathematical and<a id="408"></a> logical<a id="306"></a> operations<a id="625"></a> on<a id="476"></a> homogeneous<a id="359"></a> collections<a id="310"></a> of<a id="685"></a> numbers<a id="529"></a>.</p>

	<p>Chapter 5: <em>Execution Control </em>describes the common techniques used to<a id="587"></a> control the execution<a id="330"></a> of<a id="686"></a> code blocks&mdash;conditional operation<a id="362"></a> and<a id="409"></a> iteration<a id="451"></a>.</p>

	<p>Chapter 6: <em>Strings </em>discusses how MATLAB<a id="493"></a> operates on<a id="477"></a> variables containing text<a id="738"></a>.</p>

	<p>Chapter 7: <em>Cell Arrays and<a id="410"></a> Structures</em> discusses two kinds of<a id="687"></a> heterogeneous<a id="358"></a> data<a id="504"></a> collections<a id="311"></a> accessed by index and<a id="411"></a> by name.</p>

	<p>Chapter 8: <em>File Input and<a id="412"></a> Output </em>describes three levels of<a id="688"></a> ability provided in MATLAB<a id="494"></a> for<a id="756"></a> transferring data<a id="505"></a> to<a id="588"></a> and<a id="413"></a> from<a id="343"></a> data<a id="506"></a> files&mdash;saving workspaces, specific tools that read and<a id="414"></a> write specific data<a id="507"></a> files, and<a id="415"></a> general-purpose tools for<a id="757"></a> processing<a id="354"></a> any kind of<a id="689"></a> file.</p>

	<p>Chapter 9: <em>Recursion </em>discusses and<a id="416"></a> illustrates a widely used alternative approach to<a id="589"></a> repetitive code execution<a id="331"></a>.</p>

	<p>Chapter 10: <em>Principles of<a id="690"></a> Problem Solving </em>introduces ideas that help<a id="357"></a> students design solutions to<a id="590"></a> new problems and<a id="417"></a> avoid the &ldquo;blank sheet of<a id="691"></a> paper&rdquo; syndrome&mdash;how to<a id="591"></a> start a program.</p>

	<p>Chapter 11: <em>Plotting </em>takes the student from<a id="344"></a> basic plotting in two dimensions to<a id="592"></a> the advanced tools that draw representations of<a id="692"></a> three-dimensional objects<a id="623"></a> with<a id="465"></a> smooth shading and<a id="418"></a> even multiple light effects.</p>

	<p>Chapter 12: <em>Matrices </em>describes specific MATLAB<a id="495"></a> capabilities that implement matrix<a id="528"></a> algebra.</p>

	<p>Chapter 13: <em>Images </em>discusses how to<a id="593"></a> use vector and<a id="419"></a> array<a id="302"></a> algebra to<a id="594"></a> manipulate color<a id="313"></a> pictures.</p>

	<p>Chapter 14:&nbsp;<em>Sound </em>shows how to<a id="595"></a> analyze, synthesize, and<a id="420"></a> operate on<a id="478"></a> sound<a id="721"></a> files.</p>

	<p>Chapter 15: <em>Numerical Methods </em>introduces numerical<a id="621"></a> techniques that commonly occur in engineering<a id="324"></a>: interpolation<a id="450"></a>, curve<a id="622"></a> fitting<a id="315"></a>, integration<a id="449"></a>, and<a id="421"></a> differentiation<a id="316"></a>.</p>

	<p>Chapter 16: <em>Sorting </em>presents five algorithms for<a id="758"></a> ordering data<a id="508"></a>, each of<a id="693"></a> which has applicability under certain circumstances&mdash;Insertion Sort, Bubble Sort, Quick Sort, Merge Sort, and<a id="422"></a> Radix Sort&mdash;and<a id="423"></a> then compares their performance on<a id="479"></a> large quantities of<a id="694"></a> data<a id="509"></a>.</p>

	<p>Chapter 17: <em>Processing Graphs </em>discusses how to<a id="596"></a> represent graphs<a id="329"></a> in general and<a id="424"></a> then how to<a id="597"></a> solve two important engineering<a id="325"></a> problems&mdash;finding a minimal spanning tree and<a id="425"></a> finding an optimal path between two nodes<a id="353"></a> of<a id="695"></a> the graph.</p>

	<p><em>Appendices </em>provide a summary<a id="624"></a> of<a id="696"></a> the MATLAB<a id="496"></a> special characters, reserved words, and<a id="426"></a> functions<a id="723"></a> used throughout the text<a id="739"></a>, the ASCII<a id="301"></a> character<a id="481"></a> set, the internal number representation inside the computer, and<a id="427"></a> answers to<a id="598"></a> the True or False and<a id="428"></a> Fill in the Blank questions.</p>

	<h1>Paths through the Book</h1>

	<p>Not all courses that cover programming<a id="521"></a> and<a id="429"></a> MATLAB<a id="497"></a> follow the same syllabus. &ldquo;Engineering Computation with<a id="466"></a> MATLAB<a id="498"></a>&rdquo; is designed to<a id="599"></a> facilitate teaching the material with<a id="467"></a> different styles and<a id="430"></a> at different speeds. For example<a id="719"></a>, Chapters 3, 4, and<a id="431"></a> 5 cover writing<a id="368"></a> your own functions<a id="724"></a>, MATLAB<a id="499"></a> array<a id="303"></a> manipulation<a id="722"></a> and<a id="432"></a> iteration<a id="452"></a>. There are three schools of<a id="697"></a> thought about the appropriate way to<a id="600"></a> introduce these concepts. One school would introduce array<a id="304"></a> constructs first and<a id="433"></a> follow up with<a id="468"></a> the more &ldquo;traditional&rdquo; concept of<a id="698"></a> iteration<a id="453"></a>; another would teach iteration<a id="454"></a> first and<a id="434"></a> deal with<a id="469"></a> the MATLAB<a id="500"></a>-specific array<a id="305"></a> operations<a id="626"></a> later; and<a id="435"></a> the third would treat functions<a id="725"></a> first. In practice, over the years, our course has shifted to<a id="601"></a> a functions<a id="726"></a>-first approach so that we can use function<a id="332"></a> interfaces to<a id="602"></a> isolate students&rsquo; code for<a id="759"></a> automated code grading. However, should you prefer iteration<a id="455"></a> or arrays first, Chapters 3, 4, and<a id="436"></a> 5 can be used in any order you wish. <br>
	Chapters 6&ndash;9 should be taught in sequence&mdash;there are dependencies between chapters that would make it awkward change the order. Chapter 10 is an important chapter that is difficult to<a id="603"></a> place on<a id="480"></a> a class schedule. Where it stands in the book appears to<a id="604"></a> be a logical<a id="307"></a> position. However, at that point in the semester, beginning students are still not ready to<a id="605"></a> think about larger problems. I have usually covered this material (if at all) at the end<a id="319"></a> of<a id="699"></a> each semester by way of<a id="700"></a> review. Chapter 11 provides basic plotting capability and<a id="437"></a> is necessary for<a id="760"></a> the remaining chapters. After that, Chapters 12&ndash;17 are virtually independent and<a id="438"></a> can be taught in any order, but should follow Chapters 2&ndash;11.</p>

	<h1>Supplementary Materials</h1>
	We do provide with<a id="470"></a> this web-based text<a id="740"></a> access to<a id="606"></a> video mini-lectures created by the author and<a id="439"></a> his fellow instructors Kantwon Rogers and<a id="440"></a> Cedric Stallworth.  These mini-lectures allow students to<a id="607"></a> observe in condensed form the process of<a id="701"></a> solving problems.
	<br> These mini-lectures link the student to<a id="608"></a> a vast library of<a id="702"></a> programming<a id="522"></a> problems organized by topic and<a id="441"></a> difficulty levels. </p>

	<h1>Acknowledgments</h1>

	<p>The underlying philosophy of<a id="703"></a> this book and<a id="442"></a> the material that forms its skeleton originated in the work of<a id="704"></a> Professor Russell Shackelford around 1996. Dr. Melody Moore, currently an Associate Professor in the Interactive Computing department of<a id="705"></a> the College of<a id="706"></a> Computing at Georgia Tech, was instrumental in creating<a id="350"></a> many of<a id="707"></a> the teaching materials (then as overhead transparencies) from<a id="345"></a> which this class was first taught. I am deeply indebted to<a id="609"></a> Professor James Craig from<a id="346"></a> the Aerospace Engineering department at Georgia Tech, who<a id="768"></a> joined me in co-teaching the first engineering<a id="326"></a> version of<a id="708"></a> CS1, taught me much about MATLAB<a id="501"></a>, and<a id="443"></a> pioneered this class from<a id="347"></a> the original 35 students to<a id="610"></a> its current size<a id="743"></a> of<a id="709"></a> over 1,000 engineering<a id="327"></a> students per semester. This engineering<a id="328"></a> class became a vessel for<a id="761"></a> introducing the students to<a id="611"></a> the MATLAB<a id="502"></a> language.</p>
	<p>The material has benefited from<a id="348"></a> the efforts of<a id="710"></a> every Georgia Tech teaching assistant (TA), graduate student, instructor, and<a id="444"></a> professor who<a id="769"></a> has taught CS1, a list too long to<a id="612"></a> enumerate. In particular, those wonderfully creative TAs who<a id="770"></a> developed the ideas for<a id="762"></a> examples<a id="352"></a> used in this text<a id="741"></a> have enriched it immeasurably.<br>
	My thanks to<a id="613"></a> current instructors Kantwon Rogers and<a id="445"></a> Cedric Stallworth for<a id="763"></a> their diligence in developing video mini-lectures and<a id="446"></a> the many conversations over the years about how best to<a id="614"></a> teach programming<a id="523"></a> to<a id="615"></a> students.<br>
	Thanks also to<a id="616"></a> Amanda Walters whose diligence and<a id="447"></a> deep understanding of<a id="711"></a> programming<a id="524"></a> with<a id="471"></a> html transformed our initial rough draft into a work of<a id="712"></a> elegance.<br>
	I also wish to<a id="617"></a> credit Professor Aaron Bobick with<a id="472"></a> an important contribution made in the course of<a id="713"></a> one short conversation. Professor Bobick taught CS1 with<a id="473"></a> me in the fall of<a id="714"></a> 2004. Early in the semester he made a very simple request: he said it would be easier for<a id="764"></a> him to<a id="618"></a> teach the class if we explicitly expressed the computing concepts inherent in each lesson, rather than leaving him&mdash;and<a id="448"></a> the students&mdash;to<a id="619"></a> tease the concepts out of<a id="715"></a> the teaching materials. That conversation was responsible for<a id="765"></a> pulling the class back from<a id="349"></a> the brink of<a id="716"></a> being merely a MATLAB<a id="503"></a> programming<a id="525"></a> class to<a id="620"></a> one deeply rooted in CS concepts. "And the rest is history."</p>
</div>


</body>
</html>


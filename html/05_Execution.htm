<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<head>
    <title>05_Execution</title>
    <link rel="stylesheet" href="styles/styles.css" />
    <script async src="./javascript/index.js"></script>
</head>
<body bgcolor="#ffffff">
<h1 align="center">Chapter 5: Execution Control</h1>

<table align="center">
	<tbody>
		<tr>
			<td><a href="04_Vectors.htm">previous</a></td>
			<td><a href="Contents.htm">home</a></td>
			<td><a href="06_Strings.htm">next</a></td>
		</tr>
	</tbody>
</table>

<ul>
	<li><a href="#5_1">5.1   Concept: Code Blocks</a>
	<li><a href="#5_2">5.2  Conditional Execution in General</a>
	<li><a href="#5_3">5.3   if Statements</a>
	<ul>
		<li><a href="#5_3_1">5.3.1  General Template</a></li>
		<li><a href="#5_3_2">5.3.2   MATLAB Implementation</a></li>
		<li><a href="#5_3_3">5.3.3  Important Ideas</a></li>
	</ul>
	<li><a href="#5_4">5.4   switch Statements</a>
	<ul>
		<li><a href="#5_4_1">5.4.1  General Template</a></li>
		<li><a href="#5_4_2">5.4.2   MATLAB Implementation</a></li>
	</ul>
	<li><a href="#5_5">5.5   Iteration in General</a>
	<li><a href="#5_6">5.6   for Loops</a>
	<ul>
		<li><a href="#5_6_1">5.6.1  General for Loop Template</a></li>
		<li><a href="#5_6_2">5.6.2   MATLAB Implementation</a></li>
		<li><a href="#5_6_3">5.6.3  Indexing Implementation</a></li>
		<li><a href="#5_6_4">5.6.4   Breaking out of a for Loop</a></li>
	</ul>
	<li><a href="#5_7">5.6   while Loops</a>
	<ul>
		<li><a href="#5_7_1">5.7.1  General while Loop Template</a></li>
		<li><a href="#5_7_2">5.7.2   MATLAB Implementation</a></li>
		<li><a href="#5_7_3">5.7.3  Loop-and-a-Half Implementation</a></li>
		<li><a href="#5_7_4">5.6.4   Breaking out of a while Loop</a></li>
	</ul>
	<li><a href="#5_8">5.8  Engineering Example — Computing  Liquid  Levels</a>
</ul>
<h2>Chapter Objectives</h2>

<p>This chapter discusses techniques for changing the flow of control in a program, which may be necessary for two reasons:
<ul>
<li>You may want to execute some parts of the code under certain specific circumstances</li>
<li>You may want to repeat a section of code a certain number of times</li>
</ul>
In Chapter 3 we used the array notation to gather numbers into a form where they could be processed collectively rather than individually. This chapter deals with code blocks (collections of one or more lines of code) that solve a particular segment of a problem in the same way. We will see how to define a code block, how to decide to execute a code block under certain conditions only, and how to repeat execution of a code block.</p>

<h2><a name="5_1">5.1	Concept: Code Blocks</a></h2>

A code block is a collection of zero or more computer instructions packaged together in order to treat them as a single entity.  This allows us to selectively execute or skip some blocks or to repeat them under contolled circumstances. Some computer languages identify code blocks by enclosing them in braces (<code>{. . .}</code>); others identify them by the level of indentation of the text. The MATLAB language uses the occurrence of key words in the text to define the extent of code blocks. Keywords like <code><font color="blue">if, switch, while, for, case, otherwise, else, elseif, </code></font>and<code><font color="blue"> end</font></code> are identified with blue coloring by the MATLAB text editor. They are not part of the code block, but they serve as instructions on what to do with the code block and as delimiters that define the extent of the code block. So, for example, all the commands in a script are a code block that terminates either at the end of the script or at the beginning of the first function definition.  Similarly, in a function definition, the body of the code from the function key word to the "matching" end is a code block.  As we will soon see, code blocks can be nested within code blocks, each having a beginning key word with a matching end.

<h2><a name="5_2">5.2	Conditional Execution in General</a></h2>

<figure style="float: right; margin-left: 10px; margin_bottom: 5px">
<p><img alt="image" height="250" src="Fig_5_1.jpg" width="250" /></p>
<figcaption><b>Fig 5.1: Simple if statement</b></figcaption></figure>
<p>To this point, the statements written in our scripts and functions have been executed in sequence from the instruction at the top to the instruction at the bottom. However, it is frequently necessary to make choices about how to process a set of data based on some characteristic of that data. We have seen logical expressions that result in a Logical result — <code>true</code> or <code>false</code>. This section discusses the code that implements the idea shown in Figure 5.1.  </p>
<p>In the flowchart shown in Figure 5.1, a set of statements (the code block to be executed) is shown as a rectangle, a decision point is shown as a diamond, and the flow of program control is indicated by arrows. When decision points are drawn, there will be at least two arrows leaving that symbol, each labeled with the reason one would take that path. This concept makes the execution of a code block conditional upon some test. If the result of the test is <code>true</code>, the code block is executed. Otherwise, the default code block is executed.  If the default code block is empty when the test fails, no code is executed and control proceeds to the instruction(s) after the end of the code block.</p>
<p>An important generalization of this concept is shown in Figure 5.2.  Here the solution is generalized to permit the first code block to be implemented under the first condition as before. Now, however, if that first logical test returns false, a second test is performed to determine whether the second code block should be executed. If that test returns false, as many further tests as necessary may be performed, each with the appropriate code block to be implemented when the result is true. Finally, if none of these tests return true, the last code block, usually identified by the else keyword—(n 1 1) in the figure—is executed. As the flowchart shows, as soon as one of the code blocks is executed, the next instruction to execute is the one that follows the conditional code after the end statement. In particular, if there is no else clause, it is possible that no code at all is executed in this conditional statement.<p>
<figure>
<center><p><img alt="image" height="250" src="Fig_5_2.jpg" width="600" /></p>
<figcaption><b>Fig 5.2: Compound if statement</b></figcaption></center></figure>


There are two common styles in which to implement this conditional behavior. First we will discuss the most general form, the if statement, and then we will discuss the more restrictive, but tidier, switch statement. Both implementations are found in most modern languages, albeit with slightly different syntax. In each case, the code block to be implemented is all the statements between the key words colored blue by the MATLAB editor.

<h2><a name="5_3">5.3  if Statements</a></h2>


Here we introduce the concept of a programming template. Many programming texts still use the idea of flowcharts, such as those illustrated in Figures 5.1 and 5.2, to describe the design of a solution in a manner independent of the code implementation. However, since this graphical form cannot be maintained with a text editor, if the design of the solution changes, it is difficult to maintain any design description that is separate from the code itself.

Throughout the remainder of this text, we will describe the overall design of a code module using a design template. Design templates are a textual form of flowchart consisting of the key words that control program flow and placeholders that identify the code blocks and expressions that are necessary to implement the solution logic. Design templates are powerful tools for the novice programmer to overcome the “blank sheet of paper” problem—“how do I start solving this problem?” All programmers need to do is recognize the nature of the solution and write down the appropriate template. Then solving a particular problem becomes the relatively simple task of writing the code blocks identified by the template.

To discuss the if statement, first we consider its general, language independent template and then its MATLAB implementation.

<h3><a name="5_3_1">5.3.1	General Template</a></h3>

<div class="container">
  <div class="sidebar_R">
<h4>Template 5.1 shows the general form of the if statement</h4>
<code>if &lt;logical test 1&gt;<br>
&nbsp;&nbsp;&lt;code block 1&gt;<br>
elseif &lt;logical test 2&gt;<br>
&nbsp;&nbsp;&lt;code block 2&gt;<br>
&nbsp;&nbsp;.<br>
&nbsp;&nbsp;.<br>
&nbsp;&nbsp;.<br>
elseif &lt;logical test n&gt;<br>
&nbsp;&nbsp;&lt;code block n&gt;<br>
else<br>
&nbsp;&nbsp;&lt;default code block&gt;<br>
end<br></code>
</div>
<div class="container">
 Note the following:<br>
<ul>
<li>The only essential ingredients are the first if statement, one code block, and the end statement. All other features may be added as your logic requires.</li>
<li>The code blocks may contain any sequence of legal MATLAB statements, including other if statements (nested ifs), switch statements, or iterations (see Section 5.5).</li>
<li>Nested if statements with a code block are an alternative implementation of a logical AND statement.</li>
<li>Recall that logical operations can be applied to a vector, resulting in a vector of Boolean values. This vector may be used as a logical expression. The if statement will accept this expression as true if all of the elements are true.</li>
</div>
<h3><a name="5_3_2">5.3.2	MATLAB Implementation</a></h3>
<p>Listing 5.1 is an example of the use of if statements. Notice that a compound if statement can select at most one code block, and if the default code block is empty, it could run no code blocks at all</p>
<div class="container">
  <div class="sidebar_R">
<h4>Exercise 5.1 Using if statements</h4>
<p>Write a script that uses input(...) to request a numerical grade in percentage
and uses if statements to convert that grade to a letter grade according to the
following table:</p>
<ul>
<li>90% and better: A</li>
<li>80%–90%: B</li>
<li>70%–80%: C</li>
<li>60%–70%: D</li>
<li>Below 60%: F</li>
</ul>
<p>Test your script by running it repeatedly for legal and illegal values of the
grade percentage and check your work against the script shown in Listing 5.2.
</div>
<div class="container">
<h4>Listing 5.1: example of a MATLAB if statement</h4>
<code>if day == 7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% is the day Saturday?<br>
&nbsp;&nbsp;state = 'weekend'&nbsp;&nbsp;% if so, it's a weekend<br>
elseif day == 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% if not Saturday, is it Sunday?<br>
&nbsp;&nbsp;state = 'weekend'&nbsp;&nbsp;% if so, it's a weekend<br>
else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% it's neither Saturday or Sunday,<br>
&nbsp;&nbsp;state = 'weekday'&nbsp;&nbsp;% must be a weekday<br>
end<br>
</code>
Exercise 5.1 gives you the opportunity to practice using if statements, and Listing 5.2 shows a script that will satisfy Exercise 5.1.

<h4>Listing 5.2 Script with if statements</h4>
<code>
grade = input('what grade? ');&nbsp;&nbsp;% request and receive a numerical grade value from the user<br>
if grade &gt;= 90&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% if it is greater or equal to 90,<br>
&nbsp;&nbsp;letter = 'A'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% the letter grade is A<br>
elseif grade &gt;= 80&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% otherwise, if it is greater or equal to 80,<br>
&nbsp;&nbsp;letter = 'B'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% the letter grade is B<br>
elseif grade &gt;= 70&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% otherwise, if it is greater or equal to 70,<br>
&nbsp;&nbsp;letter = 'C'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% the letter grade is C<br>
elseif grade &gt;= 60&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% otherwise, if it is greater or equal to 60,<br>
&nbsp;&nbsp;letter = 'D'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% the letter grade is D<br>
else% otherwise,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;%  otherwise,<br>
&nbsp;&nbsp;letter = 'F'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% the letter grade is F<br>
end<br>
</code>
</div>

<h3><a name="5_3_3">5.3.3	Important Ideas</a></h3>
<p>There are two important ideas that are necessary for the successful implementation of if statements: the general form of the logical expressions and short-circuit analysis.</p>
<b>Logical Expressions</b>: The <code>if</code> statement requires a logical expression for its condition. A logical expression is any collection of constants, variables, and operators whose result is a logical <code>true</code> or <code>false</code> value. Logical expressions can be created in the following ways:
<ul>
<li>The value of a Logical constant (e.g., <code>true</code> or <code>false</code>)</li>
<li>The value of a variable containing a Logical result (e.g., <code>found</code>)</li>
<li>The result of a logical operation on two scalar quantities (e.g., <code>A > 5</code>)</li>
<li>The result of negating a logical quantity using the unary negation operator (e.g., <code>~found</code>)</li>
<li>The result of combining multiple scalar logical expressions with the operators and (<code>&amp;&amp;</code>) or or (<code>||</code>) (e.g., <code>A</code> and <code>B</code> (<code>A &amp;&amp; B</code>) or <code>A</code> or <code>B</code> (<code>A || B</code>)). </li>
<li>The results of the functions that are the logical equivalent of the <code>&amp;&amp;</code>,
<code>||</code>, and <code>~</code> operators: <code>and(A, B)</code> <code>or(A, B)</code> and <code>not(A)</code></li>
<li>The results of other functions that operate on logical vectors: <code>any(...)</code> and <code>all(...)</code></li>
</ul>
<p><b>Note carefully:</b>
<ol>
<li>The "variables" <code>A</code> and <code>B</code> in the examples above may be considered as surrogates for arbitrarily complex expressions that may be enclosed in parentheses for clarity and result in the values <code>true</code> or <code>false</code>.</li>
<li>The result from <code>any(...)</code> will be <code>true</code> if any logical value in the vector is <code>true</code>. The result from <code>all(...)</code> will be true only if all logical values in the vector are <code>true</code>. </li>
<li>The function <code>all(...)</code> is implicitly called if you supply a vector of logical values to the <code>if</code> statement, as shown in Listing 5.3.</li>
<li>The MATLAB Command window echoes logical
results as <code>1</code> (<code>true</code>) or <code>0</code> (<code>false</code>). In spite of this
appearance, logical values are not numeric and should
never be treated as if they were.</li>
</ol>
<h4>Listing 5.3: The if statement with a logical vector</h4>
<code>clear; clc<br>
&nbsp;&nbsp;% Make the variable A a logical vector.<br>
&nbsp;&nbsp;A = [true true false]<br>
&nbsp;&nbsp;% Using this as a logical expression, MATLAB internally converts<br>
&nbsp;&nbsp;% this expression to if all(A).<br>
&nbsp;&nbsp;if A<br>
&nbsp;&nbsp;&nbsp;&nbsp;% All the values of A are not true; therefore, any code<br>
&nbsp;&nbsp;&nbsp;&nbsp;% written here does not execute.<br>
 &nbsp;&nbsp;end<br>
&nbsp;&nbsp;% Make all the elements of A true.<br>
&nbsp;&nbsp;A(3) = true;<br>
&nbsp;&nbsp;if A<br>
&nbsp;&nbsp;&nbsp;&nbsp;% this code block will now execute.<br>
&nbsp;&nbsp; end<br>
</code><br>
	

<b>Short-Circuit Evaluation</b>: When evaluating a sequence of logical <code>&amp;&amp;</code> or <code>||</code> expressions, MATLAB will stop processing when it finds the first result that makes all subsequent processing irrelevant. This concept is best illustrated by an example. Assume that <code>A</code> and <code>B</code> are logical results and you want to evaluate <code>A &amp;&amp; B</code>. Since the result of this is <code>true</code> only if both <code>A</code> and <code>B</code> are <code>true</code>, if you evaluate <code>A</code> and the result is <code>false</code>, no value of <code>B</code> can possibly change the outcome <code>A &amp;&amp; B</code>.	Therefore, there is no reason to evaluate any more components of a logical
and expression once a false result has been found. Similarly, if you want <code>A
|| B</code>, if <code>A</code> is found to be <code>true</code>, you do not need to evaluate <code>B</code>. </p>
<p>For example,
suppose you want to test the nth element of a vector <code>v</code> using a variable <code>n</code>,
and you are concerned that <code>n</code> might not be a legal index value.

The following code could be used:<br>

<code>&nbsp;&nbsp;if (n &gt; 0) &amp;&amp; (n &lt;= length(v)) &amp;&amp; (v(n) &gt; 0)<br>
&nbsp;&nbsp;&nbsp;&nbsp;% success!<br>
&nbsp;&nbsp;end<br>
</code>
If <code>n</code> were not a legal index, the indexed accessor <code>v(n)</code> would cause an error for attempting to reach beyond the end of the vector. However, by putting the tests of <code>n</code> first, the short-circuit logic would not process the last part of the expression if either test of <code>n</code> failed.</p>

<h2><a name="5_4">5.4 switch Statements</a></h2>

A switch statement implements the logic shown in Figure 5.2 in a different programming style by allowing the programmer to consider a number of different possible values for the value of one variable. First we consider the general, language-independent template for switch statements, and then its MATLAB implementation.

<div class="container">
  <div class="sidebar_R">
<b>Template 5.2 General template for <br>
the switch statement</b><br>
<code>
&nbsp;&nbsp;switch &lt;parameter&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;case &lt;case specification 1&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;code block 1&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;case &lt;case specification 2&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;code block 2&gt;<br>
&nbsp;&nbsp;.<br>
&nbsp;&nbsp;.<br>
&nbsp;&nbsp;&nbsp;&nbsp;case &lt;case specification n&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;code block n&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;otherwise<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;default code block&gt;<br>
&nbsp;&nbsp;end
</code>
</div>
<div class="container">

<h3><a name="5_4_1">5.4.1	General Template</a></h3>

<p>Template 5.2 shows the general template for the switch statement. 
Note the following:</p>
<ul>
<li>All tests refer to the value of the same parameter that may be any legal MATLAB statement returning a single element or string {see chapter 6}</li>
<li>case specifications may be either a single value or string or a set of values or strings enclosed in braces { ... }</li>
<li>otherwise specifies the code block to be executed when none of the case values apply</li>
<li>The code blocks may contain any sequence of legal MATLAB statements, including other if statements (nested ifs), switch statements, or iterations</li>
</ul>
</div>
<h3><a name="5_4_2">5.4.2	MATLAB Implementation</a></h3>

<p>Listing 5.4 shows the MATLAB implementation of a typical logical problem: determining the number of days in a month. It assumes that the value of month is 1 . . . 12, and leapYear is a logical variable identifying the current year as a leap year.</p>
<h4>Listing 5.4: compute days in a month</h4>

<div class="container">
  <div class="sidebar_R">
<b>Style Points 5.1</b><br>
<p>The use of indentation is not required in the MATLAB
language, and it has no significance with regard to syntax.
However, the appropriate use of indentation greatly
improves the legibility of code and you should use it. You
have probably already noted that in addition to colorizing
control statements, the text editor automatically places the
control statements in the indented positions illustrated in
Listings 5.3 and 5.4.</p>
</div>

<div class="contents">
<code>month = input('Please enter a month as a number: ');<br>
switch month&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% All tests refer to the value of the<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% variable month.<br>
&nbsp;&nbsp;case {9, 4, 6, 11} % indices for Sept, Apr, June, Nov<br>
&nbsp;&nbsp;&nbsp;&nbsp;days = 30;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% The code block extends from the case <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% statement to the next control statement<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% (case, otherwise, or end).<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% Other languages use a break statement<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% to prevent this code block from falling<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% through to the next case.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% This is not necessary in MATLAB <br>
% and can cause <b>very</b> strange behavior!<br>
&nbsp;&nbsp;case 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% the index for Feb<br>
&nbsp;&nbsp;&nbsp;&nbsp;if leapYear&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% This code block contains an if statement<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% to deal with the February case. <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% It presumes that a logical variable<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% leapYear has been created to indicate<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% whether this month is in a leap year.<br>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;days = 29;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% yes it is<br>
&nbsp;&nbsp;&nbsp;&nbsp;else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;days = 28;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% no it isn't<br>
&nbsp;&nbsp;&nbsp;&nbsp;end<br>
&nbsp;&nbsp;case {1, 3, 5, 7, 8, 10, 12} % other legal month index values<br>
&nbsp;&nbsp;&nbsp;&nbsp;days = 31;<br>
&nbsp;&nbsp;otherwise<br>
&nbsp;&nbsp;&nbsp;&nbsp;error('bad month index')<br>
end<br>
</code>
</div>
<div class="container">
  <div class="sidebar_R">
<b>Exercise 5.2: Using a switch statement</b><br><br>
<p>
Write and test the script in Listing 5.4. You will need to preset a value for <code>leapYear</code>.<br>
Test your script by running it repeatedly for legal and illegal values of the
month.<br>
Modify your script to ask whether the current year is a leap year. (It’s best to
ask only for February.) You could use code like the following:<br>
<code>ans = input('leap year (yes/no)', 's');<br>
leapYear = (ans(1) == 'y');<br>
</code>
Test this new script thoroughly.<br>
Try this test without the second parameter to <code>input(...)</code>. <br>
Can you explain what is happening?<br>
Modify the script again to accept the year rather than yes/no, and implement
the logic to determine whether that year is a leap year.
</p>
</div>
<div class="contents">
Try using the switch statement in Exercise 5.2.

<h2><a name="5_5">5.5	Iteration in General</a></h2>
<p>The if and switch statements allow us to decide to skip code blocks based on conditions in the data. The for and while constructs allow us to repeat code blocks. Note, however, that the MATLAB language is designed to avoid iteration. Under most circumstances of processing numbers, the array processing operations built into the language make do-it-yourself loop constructs unnecessary.</p>
<p>When you do decide you have to use it, iteration allows controlled repetition of a code block. Control statements at the beginning of the code block specify the manner and extent of the repetition:
<ul>
<li>The for loop is designed to repeat its code block a fixed number of times and largely automates the process of managing the iteration.</li>
<li>The while loop is more flexible in character. In contrast to the fixed repetition of the for loop, its code block can be repeated a variable number of times, depending on the values of data being processed. It is much more of a “do-it-yourself” iteration kit.</li>
</ul>



<h2><a name="5_6">5.6	for Loops</a></h2>

<figure style="float: right; margin-left: 10px; margin_bottom: 5px">
<p><img alt="image" height="250" src="Fig_5_3.jpg" width="200" /></p>
<figcaption><b>Fig 5.3: a for loop</b></figcaption></figure>

Figure 5.3 shows a simple for loop. [Figure 5.3 goes here] The hexagonal shape illustrates the control of repetition. The repeated execution of the code block is performed under the control of a loop-control variable. It is first set to an initial value that is tested against a terminating condition. If the terminating test succeeds, the program leaves the for loop. Otherwise, the computations in the code block are performed using the current value of that variable. When one pass through the code block is finished, the variable is updated to its next value, and control returns to the termination test.

<h3><a name="5_6_1">5.6.1	General for Loop Template</a></h3>

<div class="container">
  <div class="sidebar_L">
<b>Template 5.3: a for loop</b><br>
<br><code>
for &lt;variable specification&gt; <br>
&nbsp;&nbsp;&lt;code block&gt;<br>
end</code>
</div>
<div class="content">
<br>The general template for implementing for loops is shown in Template 5.3. All of the mechanics of iteration control are handled automatically in the variable specification section. In some languages—especially those with their origins in C—the variable specification is a formidable collection of statements that provide great generality of loop management. The designers of the MATLAB language, with its origins in matrix processing, chose a much simpler approach for specifying the variable range, as shown in the general template. The repetition of the code block is managed completely by the specification of the loop control variable.
</div>
</div>
<h3><a name="5_6_2">5.6.2	MATLAB Implementation</a></h3>


<p>The core concept in the MATLAB for loop implementation is embedded in the logic of the variable specification, which is accomplished as follows:<br>
<code>&lt;variable specification&gt;: &lt;variable&gt; = &lt;vector&gt;</code><br>

where <code>&lt;variable&gt;</code> is the name of the loop control variable and <code>&lt;vector&gt;</code> is any vector that can be created by the techniques discussed in Chapter 4. If we were to use the variable specification:<br>
<code> x = A</code><br>
 MATLAB would proceed as follows:
<ol>
<li>Set an invisible index to 1.</li>
<li>Repeat steps 3 to 5 as long as that index is less than or equal to the length of A.</li>
<li>Set the value of x to A(index)</li>
<li>Evaluate the code block with that value of x</li>
<li>Increment the index</li>
</ol>
<p>For a simple example of for loops, the code shown in Listing 5.5 solves a problem that should be done in a single MATLAB instruction: <code>max(A)</code> where <code>A</code> is a vector of integers. However, by expanding this into a <code>for</code> loop, we see the basic structure of the <code>for</code> loop at work. </p>
<h4>Listing 5.5 Example of a for loop</h4>

<div class="container">
  <div class="sidebar_R">
<b>Common Pitfalls 5.2</b>
<p>
By setting the default answer to the first value, we avoid the
problem of seeding the result with a value that could be
already outside the range of the vector values. For example,
we might think that<br><code>theMax = 0;</code><br> would be a satisfactory
seed. However, this would not do well if all the elements of
A were negative.</p>
</div>
<div class="contents">

<code>A = ceil(rand(1,10)*100) % create the initial vector generalizing the<br>
% values of A using the rand(...) function to create a vector with <br>
% 10 elements each between 0 and 100.
% The ceil(...) function rounds each value up to the next higher integer. <br>
theMax = A(1); % The tidiest way to find something in a collection of numbers is to<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% seed the result, theMax, with the first number<br>
for x = A % iterate through A<br>
&nbsp;&nbsp;% The code block extends from the for statement to the associated end statement.<br>
&nbsp;&nbsp;% The code will be executed the same number of times as the length of A<br>
&nbsp;&nbsp;% <i>even if you change the values of x or A</i> within the code block.<br>
&nbsp;&nbsp;% At each iteration, the value of x will be set to the next<br>
&nbsp;&nbsp;% element from the array A.<br>
&nbsp;&nbsp;if x > theMax % test each element<br>
&nbsp;&nbsp;&nbsp;&nbsp;theMax = x;<br>
&nbsp;&nbsp;end<br>
end<br>
fprintf('max(A) is %d\n', theMax);<br>
% The fprintf(...) function is a very flexible means of formatting output to the Command window.<br>
% See the discussion in Chapter 8, or enter the following in the Command window:<br>
>> help fprintf</code><br>
</div>
 
<h3><a name="5_6_3">5.6.3	Indexing Implementation</a></h3>
<p>The above for loop implementation may seem very strange to those with a C-based language background, in which the loop-control variable is usually an index into the array being traversed rather than an element from that array. In order to illustrate the difference, we will adapt the code from Listing 5.5 to solve a slightly different problem that approximates the behavior of max(A). This time we need to know not only the maximum value in the array, but also its index. This requires that we resort to indexing the array in a more conventional style, as shown in Listing 5.6. </p>
<h4>Listing 5.6: for statement using indexing</h4>
<p><code>A = ceil(rand(1,10)*100) % create the initial random vector again<br>
theMax = A(1); % Initialize theMax and where<br>
where = 1;<br>
for index = 1:length(A) % Create an anonymous vector of indices from 1 to <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% the length of A and use it to define the loop-control variable, index.<br>
&nbsp;&nbsp;x = A(index); % Extract the appropriate element from A to operate with.<br>
&nbsp;&nbsp;if x > theMax % The same comparison logic as shown in Listing 5.5<br>
&nbsp;&nbsp;&nbsp;&nbsp;theMax = x;<br>
&nbsp;&nbsp;&nbsp;&nbsp;where = index; % In addition to saving the new max value, we save the index
where it occurs.<br>
&nbsp;&nbsp;end<br>
end<br>
fprintf('the max value in A is %d at %d\n', ... <br>
&nbsp;&nbsp;&nbsp;&nbsp;theMax, where);<br>
% This is our first occurrence where a logical line of code extends beyond the physical limitations<br>
%  of a single line. Since MATLAB normally uses the end of the line to indicate the end of an<br>
%  operation, we use ellipses (...) to specify that the logic is continued onto the next line<br>
</code></p>
<p>Enter and run the scripts in Listings 5.5 and 5.6. They should each produce the vector A and its maximum value, and the second listing would also tell you at what index that maximum occurred.</p>

<h3><a name="5_6_4">5.6.4	Breaking out of a for Loop</a></h3>


<p>If you are in a <code>for</code> loop and find a circumstance where you really do not want to continue iterating, the <code>break</code> statement will skip immediately out of the innermost containing loop. If you want to continue iterating but omit all further steps of the current iteration, you can use the <code>continue</code> statement. </p>
<p><b>Note:</b> This use of the <code>break</code> statement explains why it is really bad to put <code>break</code> statements inside switch statements.  Other languages require <code>break</code> statements between the <code>cases</code> to prevent "falling through" to the next code body.  MATLAB never allows that, and a <code>break</code> statement there will exit immediately from the nearest enclosing iteration - very rarely what you want, and very difficult to diagnose!</p>

<h2><a name="5_7">5.7 while Loops</a></h2>

We use while loops in general to obtain more control over the number of times the iteration is repeated. Figure 5.4 illustrates the control flow for a while loop. Since the termination test is performed as the loop is entered, the loop control expression must normally be initialized to a state that will permit the first loop entry. It is possible that the code block is not executed at all — for example, if there is/are no data to process.

<h3><a name="5_7_1">5.7.1 General while Template</a></h3>

<div class="container">
  <div class="sidebar_L">
<b>Template 5.4: a while loop</b><br>
<br><code>
&lt;initialize&gt;<br>
while &lt;~(exit test)&gt; <br>
&nbsp;&nbsp;&lt;code block&gt;  % <b>must</b> change<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% the exit state <br> 
end</code>
</div>
<div class="content">
<figure style="float: right; margin-left: 10px; margin_bottom: 5px">
<img alt="image" height="300" src="Fig_5_4.jpg" width="200" />
<figcaption><b>Fig 5.4: Logic of a while loop</b></figcaption></figure>

<p>Template 5.4 shows the general template for implementing while loops. The logical expression controlling the iteration is testing some state of the workspace; therefore, two things that were automatic in the for loop must be manually accomplished with the while loop:<br>
&nbsp;&nbsp;1. initializing the test, and<br>
&nbsp;&nbsp;2. updating the logic in the code block so that the test will eventually fail and the iteration will stop.<br>
<b>Note:</b> Sooner or later, everyone forgets to update the exit test and your code "locks up" in an endless while loop.  To force the process to exit, press Ctl-C on the keyboard.</p>
</div>
<h3><a name="5_7_2">5.7.2	MATLAB while Loop Implementation</a></h3>
<p>To illustrate the use of a while loop, Listing 5.7 shows you how to solve the same problem of finding the largest value in a vector.using the while syntax.</p>
<h4>Listing 5.7 while loop example</h4>
<code>
A = ceil(rand(1,10)*100) % Create a test vector and initialize the answers as before.<br>
theMax = A(1);<br>
where = 1;<br>
index = 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% Initialize the loop index value since this is now manually updated.<br>
while index <= length(A) % This test will fail immediately if the vector A is empty.<br>
&nbsp;&nbsp;x = A(index);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% extract and test the vector value required<br>
&nbsp;&nbsp;if x > theMax<br>
&nbsp;&nbsp;&nbsp;&nbsp;theMax = x;<br>
&nbsp;&nbsp;&nbsp;&nbsp;where = index;<br>
&nbsp;&nbsp;end<br>
&nbsp;&nbsp;index = index + 1; &nbsp;&nbsp;&nbsp;&nbsp;% <i>update the index value</i><br>
end<br>
fprintf('the max value in A is %d at %d\n', ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;theMax, where);<br>
</code></p>
<p>Enter and run the script in Listing 5.7. It should produce similar results as before



<h3><a name="5_7_3">5.7.3	Loop-and-a-Half Implementation</a></h3>
<p>Listing 5.8 illustrates the implementation of the loop-and-a-half iteration style, in which we must enter the loop and perform some computation before realizing that we do not need to continue. Here we continually ask the user for the radius of a circle until an illegal radius is entered, which is our cue to terminate the iteration. For each radius entered, we want to display the area and circumference of the circle with that radius.</p>
<h4>Listing 5.8 Loop-and-a-half example</h4>
<div class="container">
  <div class="sidebar_R">
<b>Style Points 5.2</b>
<p>
We wrote the for loop examples in two styles: the
direct access style and the indexing style. Many people
code in the indexing style even when the index value
is not explicitly required. This is slightly tacky and
demonstrates a lack of appreciation for the full power
of the MATLAB language.</p>
</div>
<div class="contents">

<code>R = 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% Initializes the radius value to allow the loop to be entered the first time.<br>
while R > 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% We will remain in this loop until the user enters an illegal radius.<br>
&nbsp;&nbsp;R = input('Enter a radius: ');<br>
&nbsp;&nbsp;if R > 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% We want to present the area and circumference only if the<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% radius has a legal value. Since this test occurs in the middle of the while loop, <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% we call this “loop-and-a-half" processing.<br>
&nbsp;&nbsp;&nbsp;&nbsp;area = pi * R^2; % Compute and display the area and circumference of a circle with this radius. <br>
&nbsp;&nbsp;&nbsp;&nbsp;circum = 2 * pi * R;<br>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf('area = %f; circum = %f\n', ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;area, circum);<br>
&nbsp;&nbsp;end<br>
end<br>
</code>
</div>
Try this script with any number of radius values.

<h3><a name="5_7_4">5.7.4 Breaking a while Loop</a></h3>

As with the <code>for</code> loop, <code>break</code> will exit the innermost <code>while</code> loop, and <code>continue</code> will skip to the end of the loop but remain within it.

<h2><a name="5_8">5.8	Engineering Example—Computing Liquid Levels</a></h2>

<figure style="float: right; margin-left: 10px; margin_bottom: 5px">
<img alt="image" height="300" src="Fig_5_5.jpg" width="200" />
<figcaption><b>Fig 5.5: parially filled tank</b></figcaption></figure>

Figure 5.5 shows a cylindrical tank of height H  and radius r with a hemispherical cap on each end (also of radius, r ). If the height of the liquid is h, what is the volume of liquid in the tank? Clearly, the calculation of the volume of liquid in the tank depends upon the relationship between h, H, and r:
<ul>
<li>If h is less than r, we need the volume, v, of a partially filled sphere given by:
<figure>
<center><img alt="image" height="40" src="eq_1.jpg" width="150"></center></figure></li>
<li>If h is greater than r but less than H - r, we need the volume of a fully filled hemisphere plus the volume of a cylinder of height h - r:
<figure>
<center><img alt="image" height="40" src="eq_2.jpg" width="190"></center></figure></li>
<li>If h is greater than H + r, we need the volume of a fully filled sphere plus the volume of a cylinder of height H-2r minus the partially empty upper hemisphere of height H - h:
<center><img alt="image" height="40" src="eq_3.jpg" width="400"></center></figure></li>
</ul>
The script to perform this calculation is shown in Listing 5.9. Rather than performing the computations for one liquid level only, we should write the script so that we continue to consider tanks of different dimensions and different liquid heights for each tank until the user indicates that he needs no more results.

<h4>Listing 5.9: Script to compute liquid levels in a Tank</h4>
<code>
clear; clc<br>
&nbsp;&nbsp;% Initialize another_tank to start the while loop code.<br>
&nbsp;&nbsp;another_tank = true;<br>
&nbsp;&nbsp;while another_tank<br>
&nbsp;&nbsp;&nbsp;&nbsp;% Get the tank dimensions.<br>
&nbsp;&nbsp;&nbsp;&nbsp;H = input('Overall tank height: ');<br>
&nbsp;&nbsp;&nbsp;&nbsp;r = input('tank radius: ');<br>
&nbsp;&nbsp;&nbsp;&nbsp;% Initialize more_heights to start the inner while loop.<br>
&nbsp;&nbsp;&nbsp;&nbsp;more_heights = true;<br>
&nbsp;&nbsp;&nbsp;&nbsp;while more_heights<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% Get the liquid height.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h = input('liquid height: ');<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;%% Calculations for legal values of h. Notice that no<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% dot operators are required here, because these conditional<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% computations will not work correctly with vectors.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if h < r<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v = (1/3)*pi*h.^2.*(3*r-h);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elseif h < H-r<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v = (2/3)*pi*r^3 + pi*r^2*(h-r);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elseif h <= H<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v = (4/3)*pi*r^3 + pi*r^2*(H-2*r) ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- (1/3)*pi*(H-h)^2*(3*r-H+h);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% Illegal h values end up here.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;disp('liquid level too high')<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% Jump to the end of the inner loop, skipping the printout.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% Print the result.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf( ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'rad %0.2f ht %0.2f level %0.2f vol %0.2f\n', ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r,	H,	h,	v);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% More levels when "y" is entered.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;more_heights = input('more levels? (y/n)','s')=='y';<br>
&nbsp;&nbsp;&nbsp;&nbsp;end<br>
&nbsp;&nbsp;&nbsp;&nbsp;% Another tank when “y" is entered.<br>
&nbsp;&nbsp;&nbsp;&nbsp;another_tank = input('another tank? (y/n)','s')=='y';<br>
&nbsp;&nbsp;end<br>

</code>


Table 5.1 [Table 5.1 here] shows some typical results.


<h2>Chapter Summary</h2>

This chapter presented techniques for changing the flow of control of a program for condition execution and repetitive execution:
<ul>
<li>The most general conditional form is the if statement, with or without the accompanying elseif and else statements</li>
<li>The switch statement considers different cases of the values of a countable variable</li>
<li>A for loop in its most basic form executes a code block for each of the elements of a vector</li>
<li>A while loop repeats a code block a variable number of times, as long as the conditions specified for continuing the repetition remain true</li>
</ul>
[Summary Table 04]

[Problems added here]


<table align="center">
	<tbody>
		<tr>
			<td><a href="04_Vectors.htm">previous</a></td>
			<td><a href="Contents.htm">home</a></td>
			<td><a href="06_Strings.htm">next</a></td>
		</tr>
	</tbody>
</table>


<p align="center"><font size="1">This Web Page was Built with PageBreeze </font><a href="http://pagebreeze.com" target="_blank"><font size="1">Free HTML Editor</font></a><font size="1"> </font></p>
</body>
</html>

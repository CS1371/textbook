<!DOCTYPE HTML>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
  <link rel="stylesheet" href="styles/styles.css" />
  <script async src="./javascript/index.js"></script>
<title>Appendix D</title>
</head>
<body>
<div>#top_nav#</div>
<div class="nav-obj">#nav_obj#</div>

<div class="content">
  <h1 align="center" id="1">Appendix D - Answers to<a id="18918"></a> Self-Test Questions</h1>
<h2>Chapter 1</h2>
<h3>Answers to<a id="18919"></a> True or False</h3>
<ol><li>True.</li>
<li>False. Although Charles Babbage is usually credited with<a id="18838"></a> the design of<a id="19035"></a> the
first computer, one could argue that the counting boards in use in 500 BC from<a id="18787"></a>
which the abacus was derived would qualify as a computer design.</li>
<li>False. Operating systems arrived on<a id="18854"></a> the scene quite late in the development of<a id="19036"></a>
computers. Before then, the computer ran one application that did all the work,
and<a id="18811"></a> this is still possible today.</li>
<li>False. The driver is just a pluggable operating<a id="19014"></a> system component.</li>
<li>True. For a computer to<a id="18920"></a> be useful, there has to<a id="18921"></a> be hardware to<a id="18922"></a> carry data<a id="18875"></a> to<a id="18923"></a> and<a id="18812"></a>
from<a id="18788"></a> the processor.</li>
<li>True.</li>
<li>False. A solution solves the whole problem by assembling solutions to<a id="18924"></a> manageable
subproblems. An algorithm<a id="18699"></a> is a series of<a id="19037"></a> steps to<a id="18925"></a> solve a small subproblem.</li></ol>
<h3>Answers to<a id="18926"></a> Fill in the Blanks</h3>
<ol><li>theoretical; practical</li>
<li>the Von<a id="18855"></a> Neumann architecture</li>
<li>virtual memory</li>
<li>utilities</li>
<li>application programs</li>
<li>logic<a id="18852"></a></li>
<li>solutions to<a id="18927"></a> subproblems</li>
<li>states; states</li></ol>
<h2>Chapter 2</h2>
<h3>Answers to<a id="18928"></a> True or False</h3>
<ol><li>True.</li>
<li>False. Written correctly, algorithms can be generalized to<a id="18929"></a> solve a range of<a id="19038"></a> subproblems.</li>
<li>True. Both functional and<a id="18813"></a> object-oriented<a id="19013"></a> programs require procedural components
to<a id="18930"></a> function<a id="18771"></a> on<a id="18856"></a> a processor.</li>
<li>True.</li>
<li>False. This is merely the assignment<a id="18726"></a> of<a id="19039"></a> the sum of<a id="19040"></a> x and<a id="18814"></a> y to<a id="18931"></a> z; you cannot make
any inference about the value<a id="19128"></a> of<a id="19041"></a> y from<a id="18789"></a> this expression.</li>
<li>False. Untyped languages merely leave the programmer free of<a id="19042"></a> needing to<a id="18932"></a> define the type of<a id="19043"></a> data<a id="18876"></a>. The CPU has to<a id="18933"></a> have information about the nature<a id="18803"></a> of<a id="19044"></a> each
data<a id="18877"></a> item in order to<a id="18934"></a> process it correctly.</li>
<li>True.</li>
<li>False. In general, especially in MATLAB<a id="18867"></a>, the class of<a id="19045"></a> an item refers to<a id="18935"></a> its data<a id="18878"></a>
type. The more restrictive definition combining the data<a id="18879"></a> type with<a id="18839"></a> the operations<a id="19018"></a>
performed on<a id="18857"></a> it is an OOP restriction.</li>
<li>False. You must use scripts<a id="19101"></a> for<a id="19154"></a> permanent command storage.</li>
<li>True.</li>
<li>True. Clicking the icon to<a id="18936"></a> the left brings up the Document window.</li>
<li>False. Double-clicking a fi le name opens the fi le in the editor.</li>
<li>True.</li>
<li>True.</li>
<li>False. The asterisk indicates that the fi le has been changed since it was saved.</li>
<li>False. Comments appear only in the text<a id="19122"></a> of<a id="19046"></a> the script for<a id="19155"></a> human understanding
of<a id="19047"></a> the logic<a id="18853"></a>.</li>
<li>False. Only the % hot key saves before executing.</li></ol>
<h3>Answers to<a id="18937"></a> Fill in the Blanks</h3>
<ol><li>Abstraction</li>
<li>An algorithm<a id="18700"></a></li>
<li>side effects</li>
<li>a numeric character<a id="18865"></a></li>
<li>name; type</li>
<li>class; object; class</li>
<li>perform calculations; perform calculations</li>
<li>double-click; repeat the execution<a id="18763"></a></li>
<li>name; current value<a id="19129"></a>; data<a id="18880"></a> type</li>
<li>double-click</li>
<li>double-click; variable<a id="19138"></a> name</li>
<li>automatically; MATLAB<a id="18868"></a> command</li>
<li>percent sign (%)</li>
<li>ignore; the end<a id="18757"></a> of<a id="19048"></a> the current line</li></ol>
<h2>Chapter 3</h2>
<h3>Answers to<a id="18938"></a> True or False</h3>
<ol><li>False. Homogeneous collections<a id="18741"></a> must consist of<a id="19049"></a> data<a id="18881"></a> of<a id="19050"></a> the same type. This
could be double, logical<a id="18722"></a>, char, or any of<a id="19051"></a> the types<a id="18809"></a> you saw in this text<a id="19123"></a>.</li>
<li>True.</li>
<li>False. Because a column vector<a id="18747"></a> has more columns than rows, it returns the
number of<a id="19052"></a> columns.</li>
<li>True. Regrettably, you can. This is the array<a id="18704"></a> linearization. Should you use this?
No.</li>
<li>False. Either array<a id="18705"></a> can be a scalar<a id="19097"></a> quantity (a 1 x 1 array<a id="18706"></a>).</li>
<li>True, as long as the indices in the index vector do not exceed the dimensions of<a id="19053"></a> A.</li>
<li>False. The position of<a id="19054"></a> the values in the logical<a id="18723"></a> index vector corresponds
to<a id="18939"></a> the position of<a id="19055"></a> values in the vector being indexed. Longer logical<a id="18724"></a> index
vectors are reaching beyond the end<a id="18758"></a> of<a id="19056"></a> the original vector.</li>
<li>True.</li></ol>
<h3>Answers to<a id="18940"></a> Fill in the Blanks</h3>
<ol><li>numerical<a id="19000"></a> value<a id="19130"></a>; position in the vector</li>
<li>starting value<a id="19131"></a>; increment; ending value<a id="19132"></a></li>
<li>elements<a id="19147"></a>; true<a id="18806"></a> values</li>
<li>parentheses</li>
<li>have the same dimensions; a scalar<a id="19098"></a></li>
<li>the empty<a id="18755"></a> vector, []; complete rows or columns</li>
<li>bad; logical<a id="18725"></a> difficulties; indexing<a id="19151"></a>; copy the rows and<a id="18815"></a> columns you want to<a id="18941"></a> keep</li></ol>
<h2>Chapter 4</h2>
<h3>Answers to<a id="18942"></a> True or False</h3>
<ol><li>False. Comments are colored green; keywords that control execution<a id="18764"></a> are colored
blue.</li>
<li>False. The MATLAB<a id="18869"></a> editor inserts indentation only to<a id="18943"></a> clarify for<a id="19156"></a> the reader the
flow of<a id="19057"></a> control in a script.</li>
<li>True. If the if statement has no else<a id="18754"></a> clause, or the switch<a id="19121"></a> statement has no
otherwise clause and<a id="18816"></a> the data<a id="18882"></a> provided matches none of<a id="19058"></a> the specified cases.</li>
<li>True.</li>
<li>False. The result that invalidates all other &<a id="19024"></a>&<a id="19025"></a> expressions is false<a id="18765"></a>.</li>
<li>True. But you can still use break to<a id="18944"></a> exit the loop early.</li>
<li>False. But it ought to<a id="18945"></a> be. This is really bad programming<a id="18905"></a> practice.</li>
<li>False. The expression specifi es the reason to<a id="18946"></a> stay in the loop.</li></ol>
<h3>Answers to<a id="18947"></a> Fill in the Blanks</h3>
<ol><li>key command words</li>
<li>all(<a id="18702"></a>...)</li>
<li>otherwise</li>
<li>true<a id="18807"></a></li>
<li>variable<a id="19139"></a>; values of<a id="19059"></a> data<a id="18883"></a></li>
<li>for<a id="19157"></a> or while<a id="19152"></a>; innermost containing</li></ol>
<h2>Chapter 5</h2>
<h3>Answers to<a id="18948"></a> True or False</h3>
<ol><li>False. Functions have access to<a id="18949"></a> all the system data<a id="18884"></a> and<a id="18817"></a> functions<a id="19114"></a> and<a id="18818"></a> can also
reach global<a id="18792"></a> data<a id="18885"></a> directly.</li>
<li>False. Although this ought to<a id="18950"></a> be True. MATLAB<a id="18870"></a> calls user<a id="18907"></a>-defined<a id="18799"></a> functions<a id="19115"></a> by
the name of<a id="19060"></a> the m-fi le, and<a id="18819"></a> ignores the name specified there.</li>
<li>True.</li>
<li>False. Functions can be defi ned with<a id="18840"></a> no parameters<a id="19136"></a> required.</li>
<li>False. Any result for<a id="19158"></a> which a variable<a id="19140"></a> is not provided by the caller is ignored.</li>
<li>False. This is merely a convention suggested to<a id="18951"></a> clarify the source of<a id="19061"></a> their
definition.</li></ol>
<h3>Answers to<a id="18952"></a> Fill in the Blanks</h3>
<ol><li>Procedural abstraction</li>
<li>actual; formal<a id="18770"></a></li>
<li>vector-like container of<a id="19062"></a> variable<a id="19141"></a> names<a id="19145"></a></li>
<li>Local<a id="18850"></a> Scope</li>
<li>first; first function<a id="18772"></a>; other auxiliary<a id="18727"></a> functions<a id="19116"></a> in the same file</li></ol>
<h2>Chapter 6</h2>
<h3>Answers to<a id="18953"></a> True or False</h3>
<ol><li>False. Casting changes the way the computer views a piece of<a id="19063"></a> data<a id="18886"></a> without
changing<a id="18915"></a> it.</li>
<li>True.</li>
<li>False. It can be represented within a string by inserting<a id="18720"></a> two successive quote
marks: (' ').</li>
<li>False. MATLAB<a id="18871"></a> will automatically cast the string to<a id="18954"></a> its ASCII<a id="18703"></a> values first.</li>
<li>True. But they have to<a id="18955"></a> be explicitly converted to<a id="18956"></a> characters and<a id="18820"></a> concatenated
into one string.</li>
<li>False. Unequal length strings are reported as not being equal<a id="18762"></a>.</li>
<li>True.</li></ol>
<h3>Answers to<a id="18957"></a> Fill in the Blanks</h3>
<ol><li>a special internal representation</li>
<li>characters; numbers<a id="18917"></a>; punctuation marks; 0–127</li>
<li>uint8(...); each letter</li>
<li>format<a id="18802"></a> control<a id="18738"></a> string; value<a id="19133"></a> parameters<a id="19137"></a></li>
<li>if; cannot</li>
<li>char(<a id="18737"></a>...); pads them with<a id="18841"></a> blanks</li></ol>
<h2>Chapter 7</h2>
<h3>Answers to<a id="18958"></a> True or False</h3>
<ol><li>False. None of<a id="19064"></a> the collective operations<a id="19019"></a> defined<a id="18800"></a> for<a id="19159"></a> numerical<a id="19001"></a> arrays can be
applied to<a id="18959"></a> cell<a id="<a id="18735"></a>18714"></a> arrays or structures<a id="18798"></a>.</li>
<li>True.</li>
<li>True.</li>
<li>True.</li>
<li>False. It returns a new structure<a id="19112"></a> with<a id="18842"></a> the fi eld and<a id="18821"></a> value<a id="19134"></a> removed.</li>
<li>True.</li>
<li>False. If stra is a structure<a id="19113"></a> array<a id="18707"></a> with<a id="18843"></a> the field<a id="18766"></a> data<a id="18887"></a>, the expression {stra.data<a id="18888"></a>}
will extract all the values into a cell<a id="18715"></a> array<a id="18708"></a>.</li></ol>
<h3>Answers to<a id="18960"></a> Fill in the Blanks</h3>
<ol><li>extracted one at a time; replaced</li>
<li>arrays; containers</li>
<li>cell<a id="18716"></a> containing 42</li>
<li>str.(field) = 42</li>
<li>struct(<a id="18797"></a>...); field<a id="18767"></a> name as a string; cell<a id="18717"></a> array<a id="18709"></a> of<a id="19065"></a> field<a id="18768"></a> contents</li></ol>
<h2>Chapter 8</h2>
<h3>Answers to<a id="18961"></a> True or False</h3>
<ol><li>True. Although the actual storage technique on<a id="18858"></a> a hard drive may have blocks
of<a id="19066"></a> characters distributed randomly on<a id="18859"></a> its surface<a id="19031"></a>, the software that reads and<a id="18822"></a>
writes the disk serializes the characters.</li>
<li>False. You save the variable<a id="19142"></a> names<a id="19146"></a> and<a id="18823"></a> their current values, not the programs
that generated the data<a id="18889"></a>.</li>
<li>False. While some applications permit delimited<a id="19125"></a> strings to<a id="18962"></a> be embedded in comma-
or tab-delimited<a id="19126"></a> fi les, MATLAB<a id="18872"></a>’s readers read only numerical<a id="19002"></a> data<a id="18890"></a> into arrays.</li>
<li>False. You can use the qualifi er 'a' to<a id="18963"></a> indicate that you will append to<a id="18964"></a> the end<a id="18759"></a>
of<a id="19067"></a> an existing file.</li>
<li>True. If you read past the end<a id="18760"></a> of<a id="19068"></a> a fi le, a numerical<a id="19003"></a> –1 is returned.</li></ol>
<h3>Answers to<a id="18965"></a> Fill in the Blanks</h3>
<ol><li>values; organization</li>
<li>numerical<a id="19004"></a> values; double array<a id="18710"></a>; text<a id="19124"></a> data<a id="18891"></a>; cell<a id="18718"></a> array<a id="18711"></a>; both string and<a id="18824"></a> numerical<a id="19005"></a>
data<a id="18892"></a>; cell<a id="18719"></a> array<a id="18712"></a></li>
<li>numerical<a id="19006"></a> array<a id="18713"></a>; filled with<a id="18844"></a> zero</li>
<li>system dependent (for example<a id="19102"></a>, in the standard version on<a id="18860"></a> a PC, this is indicated
by returning<a id="18795"></a> a file handle of<a id="19069"></a> –1)</li></ol>
<h2>Chapter 9</h2>
<h3>Answers to<a id="18966"></a> True or False</h3>
<ol><li>True.</li>
<li>False. If that function<a id="18773"></a> or any function<a id="18774"></a> it calls throws an exception, all the
frames down to<a id="18967"></a> the function<a id="18775"></a> containing a try ... catch<a id="18734"></a> block are popped off
the stack<a id="19111"></a>.</li>
<li>False. Tail recursive functions<a id="19117"></a> perform the math "on<a id="18861"></a> the way in."</li>
<li>True. But this is a bad practice.</li>
<li>False. MATLAB<a id="18873"></a> actually does not care what the name of<a id="19070"></a> the fi le is. When a function<a id="18776"></a>
is called, MATLAB<a id="18874"></a> finds the function<a id="18777"></a> by fi le name and<a id="18825"></a> starts the first function<a id="18778"></a>
in that file whatever it is called. Local<a id="18851"></a> functions<a id="19118"></a> in the file must be called
from<a id="18790"></a> that first function<a id="18779"></a>.</li></ol>
<h3>Answers to<a id="18968"></a> Fill in the Blanks</h3>
<ol><li>an alternative technique</li>
<li>wrapper<a id="19170"></a> function<a id="18780"></a>; check for<a id="19160"></a> erroneous data<a id="18893"></a></li>
<li>runtime<a id="19096"></a> errors; programming<a id="18906"></a> errors; bad data<a id="18894"></a></li>
<li>any tests or setup; as a helper<a id="18801"></a> to<a id="18969"></a> the main function<a id="18781"></a> call</li>
<li>compute; estimating the answer; recursive function<a id="18782"></a>.</li></ol>
<h2>Chapter 10</h2>
<h3>Answers to<a id="18970"></a> True or False</h3>
<ol><li>True.</li>
<li>False. All the elements<a id="19148"></a> might fail a test you apply to<a id="18971"></a> determine whether to<a id="18972"></a>
change them or not.</li>
<li>False. Filtering might remove elements<a id="19149"></a> from<a id="18791"></a> the collection, but those that remain
are not changed.</li>
<li>False. It really is folding<a id="18743"></a> because the two results are different attributes of<a id="19071"></a> the
same element of<a id="19072"></a> the collection.</li>
<li>True. The break statement<a id="18732"></a> allows you to<a id="18973"></a> exit a for<a id="19161"></a> loop<a id="18769"></a> early; the code is a little
obscure if written this way.</li>
<li>False. Sorting requires some criterion for<a id="19162"></a> deciding that one element must precede
another—alphabetical order is a good example<a id="19103"></a>.</li></ol>
<h3>Answers to<a id="18974"></a> Fill in the Blanks</h3>
<ol><li>character<a id="18866"></a> of<a id="19073"></a> the data<a id="18895"></a>; basic operation(s) we are asked to<a id="18975"></a> perform</li>
<li>beginning with<a id="18845"></a> an empty<a id="18756"></a> collection; inserting<a id="18721"></a> elements<a id="19150"></a> one at a time</li>
<li>two or more collections<a id="18742"></a></li>
<li>filter</li>
<li>folding<a id="18744"></a></li>
<li>finding what you seek; failing to<a id="18976"></a> find it</li>
<li>traverse; writing<a id="18810"></a></li></ol>
<h2>Chapter 11</h2>
<h3>Answers to<a id="18977"></a> True or False</h3>
<ol><li>True. If the x vector is omitted, 1:N is assumed for<a id="19163"></a> the independent parameter,
and<a id="18826"></a> if the str is omitted, a solid blue line is used.</li>
<li>False. To apply to<a id="18978"></a> a specific data<a id="18896"></a> plot, the enhancement<a id="19030"></a> functions<a id="19119"></a> must follow
the plotting function<a id="18783"></a>.</li>
<li>False. Any area not provided with<a id="18846"></a> a plot remains blank.</li>
<li>True.</li>
<li>False. Bodies of<a id="19074"></a> rotation<a id="18909"></a>, for<a id="19164"></a> example<a id="19104"></a>, use one of<a id="19075"></a> the axis directions as an independent
parameter.</li>
<li>False. It is the x and<a id="18827"></a> z axes (those axes not the axis of<a id="19076"></a> rotation<a id="18910"></a>).</li>
<li>False. The curve<a id="19007"></a> does not need to<a id="18979"></a> be continuous.</li>
<li>False. You can rotate the data<a id="18897"></a> to<a id="18980"></a> align an arbitrary axis with<a id="18847"></a> the x-axis, perform
the body of<a id="19077"></a> rotation<a id="18911"></a> there, and<a id="18828"></a> invert the rotation<a id="18912"></a>.</li></ol>
<h3>Answers to<a id="18981"></a> Fill in the Blanks</h3>
<ol><li>new figure; the next higher</li>
<li>clf<a id="18739"></a>; close<a id="18740"></a> all</li>
<li>dependent; separate; independent</li>
<li>z; an x-y plaid<a id="19028"></a></li>
<li>plaid<a id="19029"></a>; angles</li>
<li>linear<a id="18836"></a> curve<a id="19008"></a>; specified axis</li>
<h2>Chapter 12</h2>
<h3>Answers to<a id="18982"></a> True or False</h3>
<ol><li>True. Even the most primitive data<a id="18898"></a> members encapsulate their data<a id="18899"></a> and<a id="18829"></a> control
the operations<a id="19020"></a> that can be performed on<a id="18862"></a> the data<a id="18900"></a>.</li>
<li>False. It also works if one or both of<a id="19078"></a> the matrices<a id="18908"></a> are scalar<a id="19099"></a>.</li>
<li>True, only if one is a scalar<a id="19100"></a>; otherwise, False. If A and<a id="18830"></a> B are not square<a id="19109"></a>, one
will fail; even if they are square<a id="19110"></a>, they will have different answers.</li>
<li>True.</li>
<li>False. It is equivalent to<a id="18983"></a> back dividing: A \ B.</li>
<li>True.</li></ol>
<h3>Answers to<a id="18984"></a> Fill in the Blanks</h3>
<ol><li>data<a id="18901"></a>; procedural</li>
<li>column; row</li>
<li>translate the object; perform the rotation<a id="18913"></a>; translate the rotated object back to<a id="18985"></a> P</li>
<li>N independent; N unknown; N * (N + 1) constant</li></ol>
<h2>Chapter 13</h2>
<h3>Answers to<a id="18986"></a> True or False</h3>
<ol><li>False. 0 is the absence of<a id="19079"></a> light, which will give a black screen.</li>
<li>True. imread(<a id="18794"></a>...) can be adapted to<a id="18987"></a> read any supported image<a id="19033"></a> fi le, returning<a id="18796"></a>
different results for<a id="19165"></a> different image<a id="19034"></a> styles.</li>
<li>True.</li>
<li>False. For two reasons—it only works for<a id="19166"></a> 2-D<a id="19023"></a> arrays, and<a id="18831"></a> the rotation<a id="18914"></a> is counter-
clockwise.</li>
<li>True. Consider Figure<a id="19169"></a> 13.18 . The original number of<a id="19080"></a> 1600x1200x3 pixels<a id="19026"></a> has
been reduced to<a id="18988"></a> a smattering of<a id="19081"></a> pixels<a id="19027"></a> of<a id="19082"></a> interest.</li></ol>
<h3>Answers to<a id="18989"></a> Fill in the Blanks</h3>
<ol><li>three; uint8; 0–255</li>
<li>pixel; uint8</li>
<li>decoded; true<a id="18808"></a> color<a id="18745"></a>; three color<a id="18746"></a> layers.</li>
<li>figure window; image(<a id="18793"></a>...)</li>
<li>Cropping; shrinking<a id="18804"></a>; stretching<a id="18805"></a></li>
<li>transpose<a id="19127"></a>; major diagonal<a id="18752"></a></li></ol>
<h2>Chapter 14</h2>
<h3>Answers to<a id="18990"></a> True or False</h3>
<ol><li>True.</li>
<li>False. Removing samples raises the frequency<a id="19015"></a>.</li>
<li>False. The number of<a id="19083"></a> bits in the recording<a id="19032"></a> has no significant effect on<a id="18863"></a> an
untrained ear.</li>
<li>True.</li>
<li>True.</li></ol>
<h3>Answers to<a id="18991"></a> Fill in the Blanks</h3>
<ol><li>amplitude; frequency<a id="19016"></a></li>
<li>A/D<a id="18698"></a>; D/A; pressure</li>
<li>7; 5; 2; 12</li>
<li>sound<a id="19108"></a> energy; frequency<a id="19017"></a> band</li></ol>
<h2>Chapter 15</h2>
<h3>Answers to<a id="18992"></a> True or False</h3>
<ol><li>True. The provision is that while<a id="19153"></a> the linear<a id="18837"></a> interpolation<a id="18835"></a> does not give an error,
it returns NaN<a id="18916"></a> for<a id="19167"></a> data<a id="18902"></a> points that are out of<a id="19084"></a> range.</li>
<li> True. There is a unique cubic<a id="18748"></a> parametric<a id="19021"></a> curve<a id="19009"></a> between each pair of<a id="19085"></a> points. The
curve<a id="19010"></a> is parametric<a id="19022"></a> rather than a function<a id="18784"></a> of<a id="19086"></a> the independent variable<a id="19143"></a> in order
to<a id="18993"></a> permit the curve<a id="19011"></a> to<a id="18994"></a> "double back" if necessary for<a id="19168"></a> smoothness.</li>
<li>False. All curve<a id="19012"></a> fitting<a id="18750"></a> does is provide the coefficients of<a id="19087"></a> a polynomial<a id="18751"></a>. You can
insert any value<a id="19135"></a> of<a id="19088"></a> the independent variable<a id="19144"></a>.</li>
<li>True.</li>
<li>True. Simpson’s<a id="19105"></a> rule better captures fluctuations in the function<a id="18785"></a> being integrated.</li>
<li>False. The diff(<a id="18753"></a>...) function<a id="18786"></a> shortens the vector by one element.</li></ol>
<h3>Answers to<a id="18995"></a> Fill in the Blanks</h3>
<ol><li>Interpolation</li>
<li>coefficients of<a id="19089"></a> the equation; sum of<a id="19090"></a> the squared distances</li>
<li>central difference<a id="18736"></a> approximation; slope</li>
<li>cumsum(<a id="18749"></a>...); dot product; the data<a id="18903"></a> vector; a vector of<a id="19091"></a> time differences</li>
<li>critical point; differentiating</li></ol>
<h2>Chapter 16</h2>
<h3>Answers to<a id="18996"></a> True or False</h3>
<ol><li>True. First we perform all the algebra to<a id="18997"></a> reduce the compound<a id="19120"></a> expression to<a id="18998"></a> a
sequential series of<a id="19092"></a> O(…) values, and<a id="18832"></a> then we add them and<a id="18833"></a> remove any terms
that increase more slowly with<a id="18848"></a> N than other terms.</li>
<li>False. Linear search algorithms are O(N), but binary<a id="18731"></a> search is O(log N).</li>
<li>True. Mathematicians have proven that one cannot sort with<a id="18849"></a> a faster Big<a id="18728"></a> O.
However, better algorithms can provide a constant multiplier improvement.</li>
<li>False. Most of<a id="19093"></a> them have some kind of<a id="19094"></a> optimization that reduces the length of<a id="19095"></a>
the minor passes.</li>
<li>True. Since Big<a id="18729"></a> O should refl ect the worst case<a id="18733"></a> performance, and<a id="18834"></a> quick<a id="19106"></a> sort<a id="18701"></a> on<a id="18864"></a>
a sorted collection is O(N<sup>2</sup> ).</li></ol>
<h3>Answers to<a id="18999"></a> Fill in the Blanks</h3>
<ol><li>Big<a id="18730"></a> O; work; data<a id="18904"></a></li>
<li>N</li>
<li>Merge; quick<a id="19107"></a></li>
<li>Bubble; Quick</li>
<li>ad at the end<a id="18761"></a>; or string</li>
 </div>


</body>
</html>



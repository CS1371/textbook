<!DOCTYPE HTML>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
  <link rel="stylesheet" href="styles/styles.css" />
  <script async src="./javascript/index.js"></script>
<title>Appendix D</title>
</head>
<body>
<div>#top_nav#</div>
<div class="nav-obj">#nav_obj#</div>

<div class="content">
  <h1 align="center" id="1">Appendix D - Answers to Self-Test Questions</h1>
<h2>Chapter 1</h2>
<h3>Answers to True or False</h3>
<ol><li>True.</li>
<li>False. Although Charles Babbage is usually credited with the design of the
first computer<a id="7516">!</a>, one could argue that the counting boards in use in 500 BC from
which the abacus was derived would qualify as a computer<a id="7517">!</a> design.</li>
<li>False. Operating systems arrived on the scene quite late in the development of
computers. Before then, the computer<a id="7518">!</a> ran one application that did all the work,
and this is still possible today.</li>
<li>False. The driver is just a pluggable operating<a id="7622">!</a> system component.</li>
<li>True. For a computer<a id="7519">!</a> to be useful, there has to be hardware to carry data to and
from the processor.</li>
<li>True.</li>
<li>False. A solution solves the whole problem by assembling solutions to manageable
subproblems. An algorithm is a series of steps to solve a small subproblem.</li></ol>
<h3>Answers to Fill in the Blanks</h3>
<ol><li>theoretical; practical</li>
<li>the Von Neumann architecture</li>
<li>virtual memory</li>
<li>utilities</li>
<li>application programs</li>
<li>logic<a id="7597">!</a></li>
<li>solutions to subproblems</li>
<li>states; states</li></ol>
<h2>Chapter 2</h2>
<h3>Answers to True or False</h3>
<ol><li>True.</li>
<li>False. Written correctly, algorithms<a id="7468">!</a> can be generalized to solve a range of subproblems.</li>
<li>True. Both functional<a id="7586">!</a> and object-oriented<a id="7621">!</a> programs require procedural components
to function<a id="7570">!</a> on a processor.</li>
<li>True.</li>
<li>False. This is merely the assignment<a id="7483">!</a> of the sum of x and y to z; you cannot make
any inference about the value<a id="7662">!</a> of y from this expression.</li>
<li>False. Untyped languages merely leave the programmer free of needing to define the type of data. The CPU has to have information about the nature of each
data item in order to process it correctly.</li>
<li>True.</li>
<li>False. In general, especially in MATLAB<a id="7603">!</a>, the class of an item refers to its data
type. The more restrictive definition combining the data type with the operations<a id="7623">!</a>
performed on it is an OOP restriction.</li>
<li>False. You must use scripts<a id="7645">!</a> for<a id="7553">!</a> permanent command storage.</li>
<li>True.</li>
<li>True. Clicking the icon to the left brings up the Document window.</li>
<li>False. Double-clicking a fi le name opens the fi le in the editor.</li>
<li>True.</li>
<li>True.</li>
<li>False. The asterisk indicates that the fi le has been changed since it was saved.</li>
<li>False. Comments appear only in the text<a id="7659">!</a> of the script for<a id="7554">!</a> human understanding
of the logic<a id="7598">!</a>.</li>
<li>False. Only the % hot key saves before executing.</li></ol>
<h3>Answers to Fill in the Blanks</h3>
<ol><li>Abstraction</li>
<li>An algorithm</li>
<li>side effects</li>
<li>a numeric character<a id="7503">!</a></li>
<li>name; type</li>
<li>class; object; class</li>
<li>perform calculations; perform calculations</li>
<li>double-click; repeat the execution<a id="7545">!</a></li>
<li>name; current value<a id="7663">!</a>; data type</li>
<li>double-click</li>
<li>double-click; variable<a id="7670">!</a> name</li>
<li>automatically; MATLAB<a id="7604">!</a> command</li>
<li>percent sign (%)</li>
<li>ignore; the end<a id="7539">!</a> of the current line</li></ol>
<h2>Chapter 3</h2>
<h3>Answers to True or False</h3>
<ol><li>False. Homogeneous collections must consist of data of the same type. This
could be double, logical<a id="7599">!</a>, char, or any of the types you saw in this text<a id="7660">!</a>.</li>
<li>True.</li>
<li>False. Because a column<a id="7513">!</a> vector has more columns than rows, it returns the
number of columns.</li>
<li>True. Regrettably, you can. This is the array<a id="7473">!</a> linearization. Should you use this?
No.</li>
<li>False. Either array<a id="7474">!</a> can be a scalar<a id="7641">!</a> quantity (a 1 x 1 array<a id="7475">!</a>).</li>
<li>True, as long as the indices in the index vector do not exceed the dimensions of A.</li>
<li>False. The position of the values in the logical<a id="7600">!</a> index vector corresponds
to the position of values in the vector being indexed. Longer logical<a id="7601">!</a> index
vectors<a id="7677">!</a> are reaching beyond the end<a id="7540">!</a> of the original vector.</li>
<li>True.</li></ol>
<h3>Answers to Fill in the Blanks</h3>
<ol><li>numerical<a id="7614">!</a> value<a id="7664">!</a>; position in the vector</li>
<li>starting value<a id="7665">!</a>; increment; ending value<a id="7666">!</a></li>
<li>elements<a id="7532">!</a>; true values</li>
<li>parentheses</li>
<li>have the same dimensions; a scalar<a id="7642">!</a></li>
<li>the empty<a id="7537">!</a> vector, []; complete rows or columns</li>
<li>bad; logical<a id="7602">!</a> difficulties; indexing; copy the rows and columns you want to keep</li></ol>
<h2>Chapter 4</h2>
<h3>Answers to True or False</h3>
<ol><li>False. Comments are colored green; keywords that control execution<a id="7546">!</a> are colored
blue.</li>
<li>False. The MATLAB<a id="7605">!</a> editor inserts indentation only to clarify for<a id="7555">!</a> the reader the
flow of control in a script.</li>
<li>True. If the if statement has no else<a id="7536">!</a> clause, or the switch<a id="7658">!</a> statement has no
otherwise clause and the data provided matches none of the specified cases.</li>
<li>True.</li>
<li>False. The result that invalidates all other &<a id="7628">!</a>&<a id="7629">!</a> expressions is false<a id="7547">!</a>.</li>
<li>True. But you can still use break<a id="7491">!</a> to exit the loop early.</li>
<li>False. But it ought to be. This is really bad programming<a id="7635">!</a> practice.</li>
<li>False. The expression specifi es the reason to stay in the loop.</li></ol>
<h3>Answers to Fill in the Blanks</h3>
<ol><li>key command words</li>
<li>all(<a id="7471">!</a>...)</li>
<li>otherwise</li>
<li>true</li>
<li>variable<a id="7671">!</a>; values of data</li>
<li>for<a id="7556">!</a> or while<a id="7678">!</a>; innermost containing</li></ol>
<h2>Chapter 5</h2>
<h3>Answers to True or False</h3>
<ol><li>False. Functions have access to all the system data and functions and can also
reach global<a id="7587">!</a> data directly.</li>
<li>False. Although this ought to be True. MATLAB<a id="7606">!</a> calls user-defined functions by
the name of the m-fi le, and ignores the name specified there.</li>
<li>True.</li>
<li>False. Functions can be defi ned with no parameters required.</li>
<li>False. Any result for<a id="7557">!</a> which a variable<a id="7672">!</a> is not provided by the caller is ignored.</li>
<li>False. This is merely a convention suggested to clarify the source of their
definition.</li></ol>
<h3>Answers to Fill in the Blanks</h3>
<ol><li>Procedural abstraction</li>
<li>actual; formal<a id="7568">!</a></li>
<li>vector-like container of variable<a id="7673">!</a> names</li>
<li>Local<a id="7595">!</a> Scope</li>
<li>first; first function<a id="7571">!</a>; other auxiliary<a id="7484">!</a> functions in the same file</li></ol>
<h2>Chapter 6</h2>
<h3>Answers to True or False</h3>
<ol><li>False. Casting changes the way the computer<a id="7520">!</a> views a piece of data without
changing it.</li>
<li>True.</li>
<li>False. It can be represented within a string by inserting<a id="7590">!</a> two successive quote
marks: (' ').</li>
<li>False. MATLAB<a id="7607">!</a> will automatically cast the string to its ASCII<a id="7472">!</a> values first.</li>
<li>True. But they have to be explicitly converted to characters and concatenated
into one string.</li>
<li>False. Unequal length strings<a id="7653">!</a> are reported as not being equal<a id="7544">!</a>.</li>
<li>True.</li></ol>
<h3>Answers to Fill in the Blanks</h3>
<ol><li>a special internal representation</li>
<li>characters; numbers<a id="7613">!</a>; punctuation marks; 0â€“127</li>
<li>uint8(...); each letter</li>
<li>format<a id="7569">!</a> control string; value<a id="7667">!</a> parameters</li>
<li>if; cannot</li>
<li>char(<a id="7502">!</a>...); pads them with blanks</li></ol>
<h2>Chapter 7</h2>
<h3>Answers to True or False</h3>
<ol><li>False. None of the collective operations<a id="7624">!</a> defined for<a id="7558">!</a> numerical<a id="7615">!</a> arrays can be
applied to cell<a id="7495">!</a> arrays or structures.</li>
<li>True.</li>
<li>True.</li>
<li>True.</li>
<li>False. It returns a new structure<a id="7655">!</a> with the fi eld and value<a id="7668">!</a> removed.</li>
<li>True.</li>
<li>False. If stra is a structure<a id="7656">!</a> array<a id="7476">!</a> with the field<a id="7548">!</a> data, the expression {stra.data}
will extract all the values into a cell<a id="7496">!</a> array<a id="7477">!</a>.</li></ol>
<h3>Answers to Fill in the Blanks</h3>
<ol><li>extracted one at a time; replaced</li>
<li>arrays; containers</li>
<li>cell<a id="7497">!</a> containing 42</li>
<li>str.(field) = 42</li>
<li>struct(...); field<a id="7549">!</a> name as a string; cell<a id="7498">!</a> array<a id="7478">!</a> of field<a id="7550">!</a> contents</li></ol>
<h2>Chapter 8</h2>
<h3>Answers to True or False</h3>
<ol><li>True. Although the actual storage technique on a hard drive may have blocks
of characters distributed randomly on its surface<a id="7657">!</a>, the software that reads and
writes the disk serializes the characters.</li>
<li>False. You save the variable<a id="7674">!</a> names and their current values, not the programs
that generated the data.</li>
<li>False. While some applications permit delimited strings<a id="7654">!</a> to be embedded in comma-
or tab-delimited fi les, MATLAB<a id="7608">!</a>â€™s readers read only numerical<a id="7616">!</a> data into arrays.</li>
<li>False. You can use the qualifi er 'a' to indicate that you will append to the end<a id="7541">!</a>
of an existing file.</li>
<li>True. If you read past the end<a id="7542">!</a> of a fi le, a numerical<a id="7617">!</a> â€“1 is returned.</li></ol>
<h3>Answers to Fill in the Blanks</h3>
<ol><li>values; organization</li>
<li>numerical<a id="7618">!</a> values; double array<a id="7479">!</a>; text<a id="7661">!</a> data; cell<a id="7499">!</a> array<a id="7480">!</a>; both string and numerical<a id="7619">!</a>
data; cell<a id="7500">!</a> array<a id="7481">!</a></li>
<li>numerical<a id="7620">!</a> array<a id="7482">!</a>; filled with zero</li>
<li>system dependent (for example, in the standard version on a PC, this is indicated
by returning a file handle of â€“1)</li></ol>
<h2>Chapter 9</h2>
<h3>Answers to True or False</h3>
<ol><li>True.</li>
<li>False. If that function<a id="7572">!</a> or any function<a id="7573">!</a> it calls throws an exception, all the
frames down to the function<a id="7574">!</a> containing a try ... catch<a id="7494">!</a> block are popped off
the stack<a id="7651">!</a>.</li>
<li>False. Tail recursive functions perform the math "on the way in."</li>
<li>True. But this is a bad practice.</li>
<li>False. MATLAB<a id="7609">!</a> actually does not care what the name of the fi le is. When a function<a id="7575">!</a>
is called, MATLAB<a id="7610">!</a> finds the function<a id="7576">!</a> by fi le name and starts the first function<a id="7577">!</a>
in that file whatever it is called. Local<a id="7596">!</a> functions in the file must be called
from that first function<a id="7578">!</a>.</li></ol>
<h3>Answers to Fill in the Blanks</h3>
<ol><li>an alternative technique</li>
<li>wrapper<a id="7680">!</a> function<a id="7579">!</a>; check for<a id="7559">!</a> erroneous data</li>
<li>runtime<a id="7640">!</a> errors; programming<a id="7636">!</a> errors; bad data</li>
<li>any tests or setup; as a helper<a id="7588">!</a> to the main function<a id="7580">!</a> call</li>
<li>compute; estimating the answer; recursive function<a id="7581">!</a>.</li></ol>
<h2>Chapter 10</h2>
<h3>Answers to True or False</h3>
<ol><li>True.</li>
<li>False. All the elements<a id="7533">!</a> might fail a test you apply to determine whether to
change them or not.</li>
<li>False. Filtering might remove elements<a id="7534">!</a> from the collection<a id="7507">!</a>, but those that remain
are not changed.</li>
<li>False. It really is folding<a id="7551">!</a> because the two results are different attributes of the
same element of the collection<a id="7508">!</a>.</li>
<li>True. The break<a id="7492">!</a> statement allows you to exit a for<a id="7560">!</a> loop early; the code is a little
obscure if written this way.</li>
<li>False. Sorting requires some criterion for<a id="7561">!</a> deciding that one element must precede
anotherâ€”alphabetical order is a good example.</li></ol>
<h3>Answers to Fill in the Blanks</h3>
<ol><li>character<a id="7504">!</a> of the data; basic operation(s) we are asked to perform</li>
<li>beginning with an empty<a id="7538">!</a> collection<a id="7509">!</a>; inserting<a id="7591">!</a> elements<a id="7535">!</a> one at a time</li>
<li>two or more collections</li>
<li>filter</li>
<li>folding<a id="7552">!</a></li>
<li>finding what you seek; failing to find it</li>
<li>traverse; writing</li></ol>
<h2>Chapter 11</h2>
<h3>Answers to True or False</h3>
<ol><li>True. If the x vector is omitted, 1:N is assumed for<a id="7562">!</a> the independent parameter,
and if the str is omitted, a solid blue line is used.</li>
<li>False. To apply to a specific data plot, the enhancement functions must follow
the plotting function<a id="7582">!</a>.</li>
<li>False. Any area not provided with a plot remains blank.</li>
<li>True.</li>
<li>False. Bodies of rotation, for<a id="7563">!</a> example, use one of the axis directions as an independent
parameter.</li>
<li>False. It is the x and z axes (those axes not the axis of rotation).</li>
<li>False. The curve<a id="7523">!</a> does not need to be continuous.</li>
<li>False. You can rotate the data to align an arbitrary axis with the x-axis, perform
the body of rotation there, and invert the rotation.</li></ol>
<h3>Answers to Fill in the Blanks</h3>
<ol><li>new figure; the next higher</li>
<li>clf<a id="7505">!</a>; close<a id="7506">!</a> all</li>
<li>dependent; separate; independent</li>
<li>z; an x-y plaid<a id="7632">!</a></li>
<li>plaid<a id="7633">!</a>; angles</li>
<li>linear<a id="7593">!</a> curve<a id="7524">!</a>; specified axis</li>
<h2>Chapter 12</h2>
<h3>Answers to True or False</h3>
<ol><li>True. Even the most primitive data members encapsulate their data and control
the operations<a id="7625">!</a> that can be performed on the data.</li>
<li>False. It also works if one or both of the matrices<a id="7611">!</a> are scalar<a id="7643">!</a>.</li>
<li>True, only if one is a scalar<a id="7644">!</a>; otherwise, False. If A and B are not square<a id="7649">!</a>, one
will fail; even if they are square<a id="7650">!</a>, they will have different answers.</li>
<li>True.</li>
<li>False. It is equivalent to back dividing: A \ B.</li>
<li>True.</li></ol>
<h3>Answers to Fill in the Blanks</h3>
<ol><li>data; procedural</li>
<li>column<a id="7514">!</a>; row</li>
<li>translate the object; perform the rotation; translate the rotated object back to P</li>
<li>N independent; N unknown; N * (N + 1) constant</li></ol>
<h2>Chapter 13</h2>
<h3>Answers to True or False</h3>
<ol><li>False. 0 is the absence of light, which will give a black<a id="7490">!</a> screen.</li>
<li>True. imread(...) can be adapted to read any supported image fi le, returning
different results for<a id="7564">!</a> different image styles.</li>
<li>True.</li>
<li>False. For two reasonsâ€”it only works for<a id="7565">!</a> 2-D arrays, and the rotation is counter-
clockwise.</li>
<li>True. Consider Figure 13.18 . The original number of 1600x1200x3 pixels<a id="7630">!</a> has
been reduced to a smattering of pixels<a id="7631">!</a> of interest.</li></ol>
<h3>Answers to Fill in the Blanks</h3>
<ol><li>three; uint8; 0â€“255</li>
<li>pixel; uint8</li>
<li>decoded; true color<a id="7511">!</a>; three color<a id="7512">!</a> layers.</li>
<li>figure window; image(<a id="7589">!</a>...)</li>
<li>Cropping; shrinking<a id="7646">!</a>; stretching<a id="7652">!</a></li>
<li>transpose; major diagonal<a id="7529">!</a></li></ol>
<h2>Chapter 14</h2>
<h3>Answers to True or False</h3>
<ol><li>True.</li>
<li>False. Removing samples raises the frequency.</li>
<li>False. The number of bits<a id="7489">!</a> in the recording<a id="7639">!</a> has no significant effect on an
untrained ear.</li>
<li>True.</li>
<li>True.</li></ol>
<h3>Answers to Fill in the Blanks</h3>
<ol><li>amplitude; frequency</li>
<li>A/D<a id="7467">!</a>; D/A; pressure</li>
<li>7; 5; 2; 12</li>
<li>sound<a id="7648">!</a> energy; frequency band</li></ol>
<h2>Chapter 15</h2>
<h3>Answers to True or False</h3>
<ol><li>True. The provision is that while<a id="7679">!</a> the linear<a id="7594">!</a> interpolation<a id="7592">!</a> does not give an error,
it returns NaN<a id="7612">!</a> for<a id="7566">!</a> data points that are out of range.</li>
<li> True. There is a unique cubic<a id="7521">!</a> parametric<a id="7626">!</a> curve<a id="7525">!</a> between each pair of points. The
curve<a id="7526">!</a> is parametric<a id="7627">!</a> rather than a function<a id="7583">!</a> of the independent variable<a id="7675">!</a> in order
to permit the curve<a id="7527">!</a> to "double back" if necessary for<a id="7567">!</a> smoothness.</li>
<li>False. All curve<a id="7528">!</a> fitting does is provide the coefficients of a polynomial<a id="7634">!</a>. You can
insert any value<a id="7669">!</a> of the independent variable<a id="7676">!</a>.</li>
<li>True.</li>
<li>True. Simpsonâ€™s<a id="7647">!</a> rule better captures fluctuations in the function<a id="7584">!</a> being integrated.</li>
<li>False. The diff(<a id="7530">!</a>...) function<a id="7585">!</a> shortens the vector by one element.</li></ol>
<h3>Answers to Fill in the Blanks</h3>
<ol><li>Interpolation</li>
<li>coefficients of the equation; sum of the squared distances</li>
<li>central<a id="7501">!</a> difference approximation; slope</li>
<li>cumsum(<a id="7522">!</a>...); dot<a id="7531">!</a> product; the data vector; a vector of time differences</li>
<li>critical point; differentiating</li></ol>
<h2>Chapter 16</h2>
<h3>Answers to True or False</h3>
<ol><li>True. First we perform all the algebra to reduce the compound<a id="7515">!</a> expression to a
sequential series of O(â€¦) values, and then we add them and remove any terms
that increase more slowly with N than other terms.</li>
<li>False. Linear search algorithms<a id="7469">!</a> are O(N), but binary<a id="7488">!</a> search is O(log N).</li>
<li>True. Mathematicians have proven that one cannot sort with a faster Big<a id="7485">!</a> O.
However, better algorithms<a id="7470">!</a> can provide a constant multiplier improvement.</li>
<li>False. Most of them have some kind of optimization that reduces the length of
the minor passes.</li>
<li>True. Since Big<a id="7486">!</a> O should refl ect the worst case<a id="7493">!</a> performance, and quick<a id="7637">!</a> sort on
a sorted collection<a id="7510">!</a> is O(N<sup>2</sup> ).</li></ol>
<h3>Answers to Fill in the Blanks</h3>
<ol><li>Big<a id="7487">!</a> O; work; data</li>
<li>N</li>
<li>Merge; quick<a id="7638">!</a></li>
<li>Bubble; Quick</li>
<li>ad at the end<a id="7543">!</a>; or string</li>
 </div>


</body>
</html>



<h1>Symbols</h1>
 -  ./  array division: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 4_5">4.4.5  Operating on Arrays: 3_1">7.3.1	Constructing and Accessing One Structure: 4_2">13.4.2	Color Masking: 
 -  .^  array exponentiation: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 4_5">4.4.5  Operating on Arrays: 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: 
 -  .*  array multiplication: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 4_5">4.4.5  Operating on Arrays: 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: 
 -  =  assignment operator: >Programming Project: >Programming Project: Preface: Preface: Preface: 
 -  \  backslash: 2_1">1.2.1 Babbage's Difference Engine: 2_3">1.2.3 The von Neumann Architecture: 3_4">1.3.4 Running a Computer Program: 4_3">1.4.3 Problem-Solving Skills: ">2.1.2 Algorithms: 
 -  :  colon operator: Preface: Preface: Important Attributes that survive the Transition: 2. The overall philosophy: 3. Graphical illustrations: 
 -  .  dot: Preface: Preface: Text Books Past, Present and Future: Text Books Past, Present and Future: Text Books Past, Present and Future: 
 -  ...  ellipses: ">2.3.1 Command Window: Chapter Objectives: ">3.3.2	Function Definition: ">3.3.8	Encapsulation in MATLAB Functions: 2_1">4.2.1  Creating a Vector: 
 -  []  empty vector: 2_4">4.2.4  Shortening a Vector: 2_4">4.2.4  Shortening a Vector: 4_4">4.4.4   Removing Elements of an Array: 4_4">4.4.4   Removing Elements of an Array: 4_2">7.4.2	Accessing Structure Elements: 
 -  ==  equal to: 2_5">4.2.5  Operating on Vectors: 6_2">9.6.2	Fibonacci Series: 
 -  >  greater than: >Programming Project: >Programming Project: >Programming Project: Preface: Preface: 
 -  >=  greater than or equal to: 2_5">4.2.5  Operating on Vectors: 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: 
 -  <  less than: >Programming Project: >Programming Project: >Programming Project: Preface: Preface: 
 -  <=  less than or equal to: 2_5">4.2.5  Operating on Vectors: 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 
 -  -  minus sign: >Programming Project: Preface: Preface: Preface: Text Books Past, Present and Future: 
 -  ~=  not equal to: 2_5">4.2.5  Operating on Vectors: 
 -  |  element-wise OR: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 3_3">5.3.3	Important Ideas: 3_3">5.3.3	Important Ideas: 
 -  /  matrix division: >Programming Project: >Programming Project: Preface: Preface: Preface: 
 -  ^  matrix exponentiation: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 4_5">4.4.5  Operating on Arrays: 
 -  *  matrix multiplication: ">2.2.2 Assigning Values to Variables: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 4_5">4.4.5  Operating on Arrays: 
 -  %  percent sign: ">2.4.2 Creating Scripts: 1_1">4.1.1  Data Abstraction: 2_5">4.2.5  Operating on Vectors: 3_3">5.3.3	Important Ideas: 3_1">6.3.1 Conversion from Numbers to Strings: 
 -  ;  semicolon: Preface: Preface: Text Books Past, Present and Future: 3. Graphical illustrations: Features of the Text that have been Retained: 
 -  &&  short-circuit AND: 
 -  ||  short-circuit OR: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 3_3">5.3.3	Important Ideas: 3_3">5.3.3	Important Ideas: 3_3">5.3.3	Important Ideas: 
 -  ~  unary not: ">3.3.6	Returning Multiple Results: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 
 -  _  underscore character: >Programming Project: >Programming Project: Acknowledgments: Acknowledgments: 1">1.1 Background: 
<h1>A</h1>
A/D  analog-to-digital: 2">14.2	Recording and Playback: 
abstraction  : Chapter Overview: Chapter Objectives: >2.1 Programming Language Background: ">2.1.1 Abstraction: ">2.1.1 Abstraction: 
acosd(...) : 4_3">9.4.3	MATLAB Implementation: 
activation stack  : 1">9.1  Concept: The Activation Stack: 1_2">9.1.2	Activation Stack: 1_2">9.1.2	Activation Stack: 1_3">9.1.3 Function Instances: 2">9.2	Recursion Defined: 
actual parameters  : >3.2	Black Box View of a Function: ">3.3.4	Calling Functions: ">3.3.4	Calling Functions: ">3.3.4	Calling Functions: ">3.3.5	Variable Numbers of Parameters: 
adjacency matrix   : 
 -  creation of   : 4">13.4	Operating on Images: 
algorithms   : Chapter Overview: 3_3">1.3.3 Programming Languages: >2.1 Programming Language Background: ">2.1.2 Algorithms: 1">7.1	Concept: Collecting Dissimilar Objects: 
 -  Breadth-First Search   : 6_1">17.6.1	Depth-First Search (DFS): 6_1">17.6.1	Depth-First Search (DFS): 6_2">17.6.2	Breadth-First Search (BFS): 6_2">17.6.2	Breadth-First Search (BFS): 
 -  bubble sort   : 2_2">16.2.2 Bubble Sort: 2_2">16.2.2 Bubble Sort: 3">16.3 Performance Analysis: 3">16.3 Performance Analysis: 4_3">16.4.3	Bubble Sort: 
 -  complex, analyzing   : 
 -  Dijkstra’s  : 6_3">17.6.3	Dijkstra’s Algorithm: >Chapter Summary: 
 -  insertion sort  : 2_1">16.2.1 Insertion Sort: 2_1">16.2.1 Insertion Sort: 2_1">16.2.1 Insertion Sort: 2_2">16.2.2 Bubble Sort: 2_5">16.2.5	Radix Sort: 
 -  measuring cost of  : >Introduction: 
 -  merge sort  : 1_2">16.1.2	Analyzing Complex Algorithms: 2_4">16.2.4	Merge Sort: 2_4">16.2.4	Merge Sort: 2_4">16.2.4	Merge Sort: 3">16.3 Performance Analysis: 
 -  performance analysis of  : 4">16.4 Applications of Sorting Algorithms: 
 -  Prim’s  : 5">17.5 Minimum Spanning Trees: >Chapter Summary: 
 -  quick sort   : 2_3">16.2.3	Quick Sort: 2_3">16.2.3	Quick Sort: 2_3">16.2.3	Quick Sort: 3">16.3 Performance Analysis: 3">16.3 Performance Analysis: 
 -  radix sort   : 2_5">16.2.5	Radix Sort: 4_6">16.4.6	Radix Sort: 
all(...) : Preface: Preface: 2. The overall philosophy: 2. The overall philosophy: Features of the Text that have been Retained: 
alpha(...) : 2_2">1.2.2 Colossus: ">2.2.2 Assigning Values to Variables: 6">6.6 Engineering Example - Encryption: 6">6.6 Engineering Example - Encryption: 4_3">7.4.3	Manipulating Structures: 
ASCII  : Chapter Overview: >Introduction: 4_1">6.4.1 Simple Data Output: The <code>disp(. . .)</code> Function: >Introduction: 3">8.3 High-Level I/O Functions: 
ampersand  &: 
analog-to-digital  A/D: 2">14.2	Recording and Playback: 
AND : 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 3_1">5.3.1	General Template: 
 -  element-wise  &: 2_5">4.2.5  Operating on Vectors: 
 -  short-circuit  &&: 3_3">5.3.3	Important Ideas: 3_3">5.3.3	Important Ideas: 
any(...) : Preface: 3. Graphical illustrations: 3. Lecture slides: Chapter Overview: Paths through the Book: 
arithmetic operations  : ">2.2.3 Data Typing: >Chapter Objectives: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 
 -  with arrays  : Paths through the Book: >Chapter Objectives: 2">4.2   Vectors: 2_5">4.2.5  Operating on Vectors: 4">4.4  Arrays: 
 -  on character strings  : ">2.2.3 Data Typing: >Chapter Objectives: >Chapter Objectives: >Introduction: 2_2">6.2.2 Arithmetic and Logical Operations: 
 -  with vectors  : ">3.3.6	Returning Multiple Results: 2">4.2   Vectors: 2_1">4.2.1  Creating a Vector: 2_1">4.2.1  Creating a Vector: 2_1">4.2.1  Creating a Vector: 
array  : Chapter Overview: Paths through the Book: 2_3">1.2.3 The von Neumann Architecture: Introduction: ">2.3.3 Workspace Window: 
 -  division  ./: 3_4">1.3.4 Running a Computer Program: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 4">4.4  Arrays: 
 -  exponentiation  .^: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 4">4.4  Arrays: 4_5">4.4.5  Operating on Arrays: 2">12.2	Matrix Operations: 
 -  multiplication  .*: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 4">4.4  Arrays: 4_5">4.4.5  Operating on Arrays: 2">9.2	Recursion Defined: 
 -  arithmetic operations with   : >Chapter Objectives: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 
 -  cell : 6">6.6 Engineering Example - Encryption: >Chapter Objectives: >Introduction: >Introduction: 2">7.2	Cell Arrays: 
 -  character strings   : ">2.2.3 Data Typing: >Chapter Objectives: >Chapter Objectives: >Chapter Objectives: >Chapter Objectives: 
 -  concatenation   : 2_5">4.2.5  Operating on Vectors: 4_5">4.4.5  Operating on Arrays: 4_5">4.4.5  Operating on Arrays: >Chapter Summary: 4_1">6.4.1 Simple Data Output: The <code>disp(. . .)</code> Function: 
 -  creating  : Acknowledgments: 1">1.1 Background: 1">1.1 Background: >2.4 Scripts: ">2.4.2 Creating Scripts: 
 -  elements of   : 2">4.2   Vectors: 2_2">4.2.2  Size of a Vector: 2_3">4.2.3   Indexing a Vector: 2_4">4.2.4  Shortening a Vector: 2_5">4.2.5  Operating on Vectors: 
 -  inserting data into   : 3_4">10.3.4	Building a Collection: 
 -  linear   : 2">4.2   Vectors: 4_5">4.4.5  Operating on Arrays: 4_5">4.4.5  Operating on Arrays: 4_5">4.4.5  Operating on Arrays: 4_5">4.4.5  Operating on Arrays: 
 -  linearized   : 4_5">4.4.5  Operating on Arrays: 4_5">4.4.5  Operating on Arrays: 
 -  logical operations with   : >Chapter Objectives: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 
 -  matrices vs.  : 
 -  operations   : Chapter Overview: Paths through the Book: 2_1">1.2.1 Babbage's Difference Engine: ">2.1.3 Programming Paradigms: ">2.2.3 Data Typing: 
 -  properties of   : 4">7.4 Structure Arrays: 
 -  reshaping   : 4_5">4.4.5  Operating on Arrays: 
 -  slicing of   : 2_5">4.2.5  Operating on Vectors: 4_5">4.4.5  Operating on Arrays: 2">7.2	Cell Arrays: >Introduction: 4">13.4	Operating on Images: 
 -  structure   : 6_2">5.6.2	MATLAB Implementation: >Chapter Objectives: >Chapter Objectives: >Introduction: >Introduction: 
 -  transpose of   : 4_1">4.4.1  Properties of an Array: 4_1">4.4.1  Properties of an Array: 
assignment operator  =: ">2.2.2 Assigning Values to Variables: 
au files   : 3_1">1.3.1 Operating Systems: 3_1">1.3.1 Operating Systems: >2.3 MATLAB User Interface</a>: ">2.3.4 Current Folder Window: ">2.4.3 The Current Directory: 
auread(...) : 
auwrite(...) : 
auxiliary functions   : ">3.3.7	Auxiliary Local Functions: ">3.3.7	Auxiliary Local Functions: 
axis(...) : 3">4.3 Engineering Example - Forces  and  Moments: 3">4.3 Engineering Example - Forces  and  Moments: 3">4.3 Engineering Example - Forces  and  Moments: 6_3">9.6.3 Zeros of a Function: 7">9.7 Engineering Example—Robot Arm Motion: 
<h1>B</h1>
approximation   : 6_2">9.6.2	Fibonacci Series: 6_3">9.6.3 Zeros of a Function: 1_1">15.1.1 Linear Interpolation: 4_1">15.4.1	Difference Expressions: 6">15.6  Implementation: 
bar(...) : >2.3 MATLAB User Interface</a>: ">2.3.3 Workspace Window: ">2.3.4 Current Folder Window: ">2.3.4 Current Folder Window: ">2.4.2 Creating Scripts: 
bar3(...) : 3_3">11.3.3	Other 3-D Plot Capabilities: 3_3">11.3.3	Other 3-D Plot Capabilities: 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 
barh(...) : 2_4">11.2.4	Other 2-D Plot Capabilities: 3_3">11.3.3	Other 3-D Plot Capabilities: 3_3">11.3.3	Other 3-D Plot Capabilities: 
barh3(...) : 3_3">11.3.3	Other 3-D Plot Capabilities: 
before(...) : 1">1.1 Background: 3_4">1.3.4 Running a Computer Program: 4_2">1.4.2 Learning Programming Concepts: 4_3">1.4.3 Problem-Solving Skills: 4_3">1.4.3 Problem-Solving Skills: 
behavioral abstraction   : 1">12.1	Concept: Behavioral Abstraction: 
BFS : 6_2">17.6.2	Breadth-First Search (BFS): 6_2">17.6.2	Breadth-First Search (BFS): 6_2">17.6.2	Breadth-First Search (BFS): 6_2">17.6.2	Breadth-First Search (BFS): 6_2">17.6.2	Breadth-First Search (BFS): 
Big O algebra   : 1">16.1 Measuring Algorithm Cost: 
binary files   : >Chapter Objectives: >Introduction: 4">8.4 Lower-Level File I/O: 
binary search    : 1_1">16.1.1	Specific Big O Examples: 2">16.2 Algorithms for Sorting Data: 
bits   : >Introduction: 2">6.2 MATLAB Implementation: >Introduction: 6_2">9.6.2	Fibonacci Series: 6_2">9.6.2	Fibonacci Series: 
black box view, functions   : 
bodies of rotation   : 4_4">11.4.4	Bodies of Rotation: 
 -  continuous functions   : 4_4">11.4.4	Bodies of Rotation: 
 -  discrete functions   : 
boolean value   : 
Breadth-First Search  : 6_1">17.6.1	Depth-First Search (DFS): 6_1">17.6.1	Depth-First Search (DFS): 6_2">17.6.2	Breadth-First Search (BFS): 6_2">17.6.2	Breadth-First Search (BFS): 
break points  : ">2.4.6 Debugging Scripts: ">2.4.6 Debugging Scripts: ">2.4.6 Debugging Scripts: 
break statement  : 6_4">5.6.4	Breaking out of a for Loop: 6_4">5.6.4	Breaking out of a for Loop: 
bubble sort  : 2_2">16.2.2 Bubble Sort: 2_2">16.2.2 Bubble Sort: 3">16.3 Performance Analysis: 3">16.3 Performance Analysis: 4_3">16.4.3	Bubble Sort: 
building  : 2_1">1.2.1 Babbage's Difference Engine: ">2.3.2 Command History: >Introduction: 6">7.6 Engineering Example: Assembling a Physical Structure: 3_4">10.3.4	Building a Collection: 
<h1>C</h1>
case keyword  : 
casting  : 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 2">6.2 MATLAB Implementation: 2">6.2 MATLAB Implementation: 2">6.2 MATLAB Implementation: 2">6.2 MATLAB Implementation: 
catch keyword  : 
CAToString(...) : 
ceil(...) : 2_5">4.2.5  Operating on Vectors: 
cell arrays  : >Chapter Objectives: >Introduction: 2">7.2	Cell Arrays: 2">7.2	Cell Arrays: 2_1">7.2.1	Creating Cell Arrays: 
 -  using  : 1. Pedagogical Style: 2_2">1.2.2 Colossus: 3_4">1.3.4 Running a Computer Program: 4_3">1.4.3 Problem-Solving Skills: ">2.2.3 Data Typing: 
central difference  : 6">15.6  Implementation: 
char(...) : Chapter Overview: 2_2">1.2.2 Colossus: 3_2">1.3.2 Software Tools: ">2.1.3 Programming Paradigms: ">2.2.2 Assigning Values to Variables: 
character generators  : >Introduction: 
character mapping  : 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 2_2">6.2.2 Arithmetic and Logical Operations: 
character strings  : ">2.2.3 Data Typing: >Chapter Objectives: >Chapter Objectives: >Chapter Objectives: >Chapter Objectives: 
 -  conversion from numbers to  : >2.5 Engineering Example - Spacecraft Launch: 
 -  conversion to numbers  : >2.5 Engineering Example - Spacecraft Launch: 
 -  format control strings  : 4_2">6.4.2 Complex Output: 
 -  logical operation on  : Chapter Overview: >Chapter Objectives: >Chapter Objectives: 1_1">4.1.1  Data Abstraction: 2_5">4.2.5  Operating on Vectors: 
 -  mapping  : 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 
 -  as numerical values  : 2_3">1.2.3 The von Neumann Architecture: h3>Fill in the Blanks: Introduction: 2">4.2   Vectors: 2_1">7.2.1	Creating Cell Arrays: 
 -  operations  : Chapter Overview: Paths through the Book: 2_1">1.2.1 Babbage's Difference Engine: ">2.1.3 Programming Paradigms: ">2.2.3 Data Typing: 
 -  slicing of  : 2_5">4.2.5  Operating on Vectors: 4_5">4.4.5  Operating on Arrays: 2">7.2	Cell Arrays: >Introduction: 4">13.4	Operating on Images: 
 -  and token  : 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: 
class(...) : >Programming Project: >Programming Project: Preface: 1. Pedagogical Style: 3. Lecture slides: 
classes  : Preface: 3. Lecture slides: >2.1 Programming Language Background: 1">7.1	Concept: Collecting Dissimilar Objects: 
clc command  : ">2.3.2 Command History: 1_1">11.1.1	A Figure - The Plot Container: 
clear command  : 3_3">1.3.3 Programming Languages: ">2.3.2 Command History: 1_1">11.1.1	A Figure - The Plot Container: 
clf command  : 1_1">11.1.1	A Figure - The Plot Container: 
close all command  : 1_1">11.1.1	A Figure - The Plot Container: 
code blocks  : Chapter Overview: Chapter Overview: 4_5">4.4.5  Operating on Arrays: >Chapter Objectives: 1">5.1	Concept: Code Blocks: 
coef(...) : "14_6_2">14.6.2 Notes fading with time: 4_7">14.7 Engineering Example—Music Synthesizer: >Chapter Summary: >Introduction: 1_2">15.1.2	Cubic Spline Interpolation: 
collection operations  : Chapter Overview: >Chapter Objectives: 2_5">4.2.5  Operating on Vectors: 4">4.4  Arrays: >Introduction: 
 -  building  : 2_1">1.2.1 Babbage's Difference Engine: ">2.3.2 Command History: >Introduction: 6">7.6 Engineering Example: Assembling a Physical Structure: 3_4">10.3.4	Building a Collection: 
 -  filtering  : 3_6">10.3.6	Filtering a Collection: 3_6">10.3.6	Filtering a Collection: 3_8">10.3.8	Searching a Collection: 4">10.4 Solving Larger Problems: 
 -  inserting  : ">2.4.6 Debugging Scripts: 3_1">6.3.1 Conversion from Numbers to Strings: 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: >Chapter Summary: >Introduction: 
 -  mapping  : 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 
 -  searching  : 3_8">10.3.8	Searching a Collection: 3_8">10.3.8	Searching a Collection: 4">10.4 Solving Larger Problems: 2_2">12.2.2	Matrix Division: 1_1">16.1.1	Specific Big O Examples: 
 -  sorting  : 4_3">1.4.3 Problem-Solving Skills: 3_9">10.3.9	Sorting a Collection: 3_9">10.3.9	Sorting a Collection: 4">10.4 Solving Larger Problems: 6">14.6  Frequency Domain Operations: 
 -  summarizing  : 3">10.3	Summary of Operations: 3_7">10.3.7	Folding a Collection: 
 -  traversing  : 3">10.3	Summary of Operations: 3_3">10.3.3	Traversing a Collection: 3_3">10.3.3	Traversing a Collection: 3_8">10.3.8	Searching a Collection: 4">17.4 Graphs: 
colon operator  :: 2_1">4.2.1  Creating a Vector: 2_5">4.2.5  Operating on Vectors: 
color mapped images  : 2">13.2 Image Types: 2_3">13.2.3	Color Mapped Images: 2_3">13.2.3	Color Mapped Images: 4_2">13.4.2	Color Masking: 
color masking  : 
colormap(...) : 1_2">11.1.2	Simple Functions for Enhancing Plots: 
column vector  : 2_2">4.2.2  Size of a Vector: 4">4.4  Arrays: 4_1">4.4.1  Properties of an Array: 4_1">4.4.1  Properties of an Array: 4_4">4.4.4   Removing Elements of an Array: 
Command History window  : ">2.3.2 Command History: Chapter Summary: 
Command window  : ">2.2.1 Starting and Stopping MATLAB: >2.3 MATLAB User Interface</a>: ">2.3.1 Command Window: ">2.3.2 Command History: ">2.3.3 Workspace Window: 
comments  : ">2.4.2 Creating Scripts: ">3.3.1	General Template: ">3.3.2	Function Definition: ">3.3.2	Function Definition: 2_5">4.2.5  Operating on Vectors: 
compile-time errors  : 3_4">1.3.4 Running a Computer Program: 
compilers  : 3">1.3 Modern Computer Software: 
compound surfaces, assembling  : 
 -  internal details  : 3">8.3 High-Level I/O Functions: 
 -  internal organization of  : 3">8.3 High-Level I/O Functions: 
computer architectures, history of  : Chapter Overview: 
computer languages  : 1">1.1 Background: 1">1.1 Background: 3_3">1.3.3 Programming Languages: 3_3">1.3.3 Programming Languages: 3_3">1.3.3 Programming Languages: 
concatenation of arrays  : 4_5">4.4.5  Operating on Arrays: >Chapter Summary: 2">7.2	Cell Arrays: >Introduction: 4">13.4	Operating on Images: 
continue statement  : 6_4">5.6.4	Breaking out of a for Loop: 
contour(...) : 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 
cross(...) : 3_2">7.3.2	Constructor Functions: 4_2">7.4.2	Accessing Structure Elements: 4_3">7.4.3	Manipulating Structures: 6_3">9.6.3 Zeros of a Function: 6_3">9.6.3 Zeros of a Function: 
csvread(...) : 
csvwrite(...) : 
cubic spline interpolation  : 1">15.1  Interpolation: 1_1">15.1.1 Linear Interpolation: 1_1">15.1.1 Linear Interpolation: 
cumsum(...) : 3_2">15.3.2 Continuous Integration Problems: 3_2">15.3.2 Continuous Integration Problems: 3_2">15.3.2 Continuous Integration Problems: >Chapter Summary: 
cumtrapz(...) : 3_2">15.3.2 Continuous Integration Problems: >Chapter Summary: 
Current Directory window  : ">2.3.7 Editor Window: ">2.4.3 The Current Directory: Chapter Summary: 
curve fitting  : Chapter Overview: "14_6_2">14.6.2 Notes fading with time: 2">15.2 Curve Fitting: 2_3">15.2.3 Practical Application: >Chapter Summary: 
 -  example of  : 1. Pedagogical Style: Paths through the Book: Acknowledgments: 1">1.1 Background: 2_1">1.2.1 Babbage's Difference Engine: 
 -  linear regression  : 2_1">15.2.1 Linear Regression: 
 -  polynomial regression  : 2_2">15.2.2	Polynomial Regression: 
cycles, graphs  : 
cylinder, construction of  : 4_3">11.4.3	3-D Parametric Surfaces: 
cylinder(...) : ">2.3.4 Current Folder Window: ">3.3.2	Function Definition: ">3.3.2	Function Definition: ">3.3.2	Function Definition: ">3.3.3	Storing and Using Functions: 
<h1>D</h1>
data abstraction  : Chapter Objectives: >2.1 Programming Language Background: ">2.1.1 Abstraction: >3.1	Concepts: Abstraction and Encapsulation: 1">7.1	Concept: Collecting Dissimilar Objects: 
data typing  : >2.1 Programming Language Background: ">2.2.3 Data Typing: 
deal(...) : Paths through the Book: 3_5">1.3.5 Running an Interpreted Program: Chapter Objectives: ">3.3.5	Variable Numbers of Parameters: 3">4.3 Engineering Example - Forces  and  Moments: 
delimited text files  : 3_1">8.3.1	Exploration: >Chapter Summary: 6_1">11.6.1	Analyzing the Data: 
delimiter  : 1">5.1	Concept: Code Blocks: 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 2">6.2 MATLAB Implementation: 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: 
dequeue(...) : 1_1">17.1.1	The Nature of a Stack: 2_1">17.2.1	The Nature of a Queue: 2_2">17.2.2	Implementing Queues: 2_3">17.2.3 Priority Queues: 6_2">17.6.2	Breadth-First Search (BFS): 
derivative, of function  : 4">15.4  Numerical Differentiation: 4">15.4  Numerical Differentiation: 4_1">15.4.1	Difference Expressions: 
diag(...) : 3_3">1.3.3 Programming Languages: 4_1">4.4.1  Properties of an Array: 4_2">4.4.2  Creating an Array: 4_2">4.4.2  Creating an Array: 6_4">5.6.4	Breaking out of a for Loop: 
diagonal array  : 4_1">4.4.1  Properties of an Array: 4_2">4.4.2  Creating an Array: 
diff(...) : Features of the Text that have been Retained: Back to the Future: Chapter Overview: Paths through the Book: Paths through the Book: 
differentiation  : Chapter Overview: >Chapter Objectives: 4_1">15.4.1	Difference Expressions: 6">15.6  Implementation: 
Dijkstra’s algorithm  : >Chapter Summary: 
directional edges  : 4">17.4 Graphs: 4_1">17.4.1 Graph Examples: 
discrete functions, rotating  : 
disp(...) : 3_2">1.3.2 Software Tools: >2.3 MATLAB User Interface</a>: ">2.3.3 Workspace Window: ">2.3.4 Current Folder Window: ">2.3.5 Variable Editor: 
division matrix  : 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_1">12.2.1	Matrix Multiplication: 2_2">12.2.2	Matrix Division: 2_2">12.2.2	Matrix Division: 
dlmread(...) : 6_1">11.6.1	Analyzing the Data: 
dlmwrite(...) : 
documentation section  : ">3.3.1	General Template: 
dot notation  .: 3_1">7.3.1	Constructing and Accessing One Structure: 4_3">7.4.3	Manipulating Structures: 4_3">7.4.3	Manipulating Structures: 
dot operator  : 2_5">4.2.5  Operating on Vectors: 4_5">4.4.5  Operating on Arrays: >Chapter Summary: 
double(...) : ">2.2.3 Data Typing: ">2.2.4 Classes and Objects: ">2.2.4 Classes and Objects: ">2.3.7 Editor Window: ">2.4.3 The Current Directory: 
<h1>E</h1>
edges, graphs  : >Introduction: 4_1">17.4.1 Graph Examples: 
Editor window  : ">2.3.1 Command Window: ">2.3.5 Variable Editor: ">2.3.7 Editor Window: ">2.4.1 Text Files: ">2.4.3 The Current Directory: 
element-wise AND  &: 
element-wise OR  |: 
elements arrays  : 2">4.2   Vectors: 2_2">4.2.2  Size of a Vector: 4_4">4.4.4   Removing Elements of an Array: 4_5">4.4.5  Operating on Arrays: 2_2">7.2.2	Accessing Cell Arrays: 
ellipses  ...: ">2.4.5 Punctuating Scripts: 3_2">7.3.2	Constructor Functions: 
ellipsoid(...) : 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 
else keyword  : 2">5.2	Conditional Execution in General: 
elseif keyword  : 
empty vector  []: 2_4">4.2.4  Shortening a Vector: 2_2">7.2.2	Accessing Cell Arrays: 4_2">7.4.2	Accessing Structure Elements: 4_2">7.4.2	Accessing Structure Elements: 3_7">10.3.7	Folding a Collection: 
encapsulation  : >3.1	Concepts: Abstraction and Encapsulation: ">3.3.2	Function Definition: ">3.3.9	Global Variables: 1">12.1	Concept: Behavioral Abstraction: 
end keyword  : 2">5.2	Conditional Execution in General: 
end statement  : ">2.4.2 Creating Scripts: 2">5.2	Conditional Execution in General: 2">5.2	Conditional Execution in General: 3">5.3  if Statements: 3_1">5.3.1	General Template: 
engineering examples  : 1. Pedagogical Style: 6">9.6 Examples of Recursion: 7">15.7  Engineering Example - Shaping the Synthesizer Notes: 
 -  ceramic composition  : 6_1">12.6.1 Ceramic Composition: 
 -  detecting edges  : 
 -  electrical circuit analysis  : 
 -  encryption  : 6">6.6 Engineering Example - Encryption: 6">6.6 Engineering Example - Encryption: 6">6.6 Engineering Example - Encryption: 6">6.6 Engineering Example - Encryption: 
 -  forces and moments  : 
 -  geographic data, visualizing  : 
 -  geopolitical data, processing  : 
 -  graphs  : Chapter Overview: 3_2">1.3.2 Software Tools: 3_2">1.3.2 Software Tools: ">2.3.6 Figure Window: 4">7.4 Structure Arrays: 
 -  liquid levels, computation of  : 
 -  music synthesizer  : "14_6_2">14.6.2 Notes fading with time: 4_7">14.7 Engineering Example—Music Synthesizer: 7">15.7  Engineering Example - Shaping the Synthesizer Notes: 
 -  physical structure,assembling  : 
 -  robot arm motion  : 
 -  soil volume, computation of  : 
 -  solid object measurement  : 
 -  sorting  : 4_3">1.4.3 Problem-Solving Skills: 3_9">10.3.9	Sorting a Collection: 3_9">10.3.9	Sorting a Collection: 4">10.4 Solving Larger Problems: 6">14.6  Frequency Domain Operations: 
 -  spacecraft launch  : >2.5 Engineering Example - Spacecraft Launch: 
 -  spreadsheet data  : 3_2">1.3.2 Software Tools: >Introduction: 3_1">8.3.1	Exploration: 3_2">8.3.2 Spreadsheets: 3_2">8.3.2 Spreadsheets: 
 -  synthesizer notes, shaping  : 
enqueue(...) : 2_1">17.2.1	The Nature of a Queue: 2_2">17.2.2	Implementing Queues: 2_3">17.2.3 Priority Queues: 2_3">17.2.3 Priority Queues: 6_2">17.6.2	Breadth-First Search (BFS): 
equal to  ==: 2_5">4.2.5  Operating on Vectors: 4_5">4.4.5  Operating on Arrays: 6_2">5.6.2	MATLAB Implementation: 4_1">9.4.1	Historical Approaches: 7">9.7 Engineering Example—Robot Arm Motion: 
error(...) : 3_4">1.3.4 Running a Computer Program: 3_4">1.3.4 Running a Computer Program: 3_5">1.3.5 Running an Interpreted Program: 4_3">1.4.3 Problem-Solving Skills: 4_3">1.4.3 Problem-Solving Skills: 
Excel spreadsheets  : 3_2">8.3.2 Spreadsheets: 3_2">8.3.2 Spreadsheets: 
exceptions  : 2_5">4.2.5  Operating on Vectors: 4_5">4.4.5  Operating on Arrays: 4_2">9.4.2	Generic Exception Implementation: 4_3">9.4.3	MATLAB Implementation: 
 -  generic implementation for  : 
 -  historical approach  : 
 -  MATLAB implementation  : 1. Pedagogical Style: 2. The overall philosophy: 3. Graphical illustrations: 4_2">1.4.2 Learning Programming Concepts: ">2.2.1 Starting and Stopping MATLAB: 
execution errors  : 3_4">1.3.4 Running a Computer Program: 
exponential growth  O(2N: 
extrapolation  : 1_3">15.1.3	Extrapolation: 2_2">15.2.2	Polynomial Regression: 
eye(...) : 2_1">12.2.1	Matrix Multiplication: 1">13.1  Nature of an Image: 5">13.5  Engineering Example - Detecting Edges: 5">13.5  Engineering Example - Detecting Edges: 2_1">15.2.1 Linear Regression: 
<h1>F</h1>
fact(...) : Preface: 1. Solutions to selected Programming Projects: 2_1">1.2.1 Babbage's Difference Engine: 3_1">1.3.1 Operating Systems: 3_4">1.3.4 Running a Computer Program: 
false values  : 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 3_3">5.3.3	Important Ideas: 
Fast Fourier Transform  FFT: 4_3">14.4.3	Changing Sound Frequency: 4_3">14.4.3	Changing Sound Frequency: 5">14.5  The Fast Fourier Transform: 5_1">14.5.1 Background: >Chapter Summary: 
 -  implementation  : 1. Pedagogical Style: 2. The overall philosophy: 3. Graphical illustrations: 1. Solutions to selected Programming Projects: 2">1.2 History of Computer Architectures: 
 -  overview  : Chapter Overview: >Chapter Objectives: >Chapter Summary: >Chapter Objectives: 
 -  simple spectral analysis using  : 
fclose(...) : 4_1">8.4.1	Opening and Closing Files: 
fft(...) : 5_2">14.5.2	Implementation: 
fgetl(...) : 4_2">8.4.2	Reading Text Files: 4_2">8.4.2	Reading Text Files: 
fgets(...) : 4_2">8.4.2	Reading Text Files: 
fib(...) : 6_2">9.6.2	Fibonacci Series: 6_2">9.6.2	Fibonacci Series: 1_1">16.1.1	Specific Big O Examples: 
Fibonacci series  : 6">9.6 Examples of Recursion: 6_2">9.6.2	Fibonacci Series: 6_2">9.6.2	Fibonacci Series: 6_2">9.6.2	Fibonacci Series: 
field operator  : 4_2">7.4.2	Accessing Structure Elements: >Chapter Summary: 
fieldnames(...) : 3_1">7.3.1	Constructing and Accessing One Structure: 3_1">7.3.1	Constructing and Accessing One Structure: 4_2">7.4.2	Accessing Structure Elements: 4_2">7.4.2	Accessing Structure Elements: 4_3">7.4.3	Manipulating Structures: 
figure(...) : 2_1">1.2.1 Babbage's Difference Engine: 2_3">1.2.3 The von Neumann Architecture: 4_3">1.4.3 Problem-Solving Skills: ">2.1.2 Algorithms: >2.3 MATLAB User Interface</a>: 
Figure window  : ">2.3.1 Command Window: ">2.3.3 Workspace Window: ">2.3.6 Figure Window: Chapter Summary: >Introduction: 
files  : Text Books Past, Present and Future: Chapter Overview: Chapter Overview: 3_1">1.3.1 Operating Systems: 3_1">1.3.1 Operating Systems: 
 -  binary  : 2_3">1.2.3 The von Neumann Architecture: 3_3">1.3.3 Programming Languages: h3>Fill in the Blanks: >Introduction: >Chapter Objectives: 
 -  delimited text  : 3_1">8.3.1	Exploration: >Chapter Summary: 6_1">11.6.1	Analyzing the Data: 
 -  opening/closing  : 
 -  reading/writing  : 
fill(...) : 2_1">4.2.1  Creating a Vector: 2_5">4.2.5  Operating on Vectors: 4_2">4.4.2  Creating an Array: 4_2">4.4.2  Creating an Array: 4_2">4.4.2  Creating an Array: 
filtering  operation: 3_6">10.3.6	Filtering a Collection: 3_6">10.3.6	Filtering a Collection: 3_8">10.3.8	Searching a Collection: 4">10.4 Solving Larger Problems: 
find(...) : Chapter Overview: 1">1.1 Background: 1">1.1 Background: 3_5">1.3.5 Running an Interpreted Program: 4_3">1.4.3 Problem-Solving Skills: 
fix(...) : Text Books Past, Present and Future: 3. Lecture slides: 2_1">1.2.1 Babbage's Difference Engine: 2_3">1.2.3 The von Neumann Architecture: 4_3">1.4.3 Problem-Solving Skills: 
floor(...) : 2_5">4.2.5  Operating on Vectors: 
flowcharts  : 3">5.3  if Statements: 
folding  operation: 3_7">10.3.7	Folding a Collection: 3_7">10.3.7	Folding a Collection: 3_8">10.3.8	Searching a Collection: 4">10.4 Solving Larger Problems: 5">10.5  Engineering Example - Processing Geopolitical Data: 
fopen(...) : 4_1">8.4.1	Opening and Closing Files: 
for loop  : 5">5.5	Iteration in General: 5">5.5	Iteration in General: 5">5.5	Iteration in General: 6">5.6	for Loops: 6_1">5.6.1	General for Loop Template: 
 -  breaking out of  : 
 -  example of  : 1. Pedagogical Style: Paths through the Book: Acknowledgments: 1">1.1 Background: 2_1">1.2.1 Babbage's Difference Engine: 
 -  indexing implementation using  : 
 -  MATLAB implementation  : 1. Pedagogical Style: 2. The overall philosophy: 3. Graphical illustrations: 4_2">1.4.2 Learning Programming Concepts: ">2.2.1 Starting and Stopping MATLAB: 
 -  structure of  : 6_2">5.6.2	MATLAB Implementation: >Chapter Objectives: >Introduction: >Introduction: >Introduction: 
 -  template  : 3. Graphical illustrations: >3.3  MATLAB Implementation: ">3.3.1	General Template: 2_5">4.2.5  Operating on Vectors: 4_5">4.4.5  Operating on Arrays: 
formal parameters  : ">3.3.4	Calling Functions: ">3.3.4	Calling Functions: ">3.3.4	Calling Functions: ">3.3.8	Encapsulation in MATLAB Functions: Chapter Summary: 
format control strings  : 4_2">6.4.2 Complex Output: 
forward difference approximation  : 6">15.6  Implementation: 
fprintf(...) : 3_1">6.3.1 Conversion from Numbers to Strings: 3_1">6.3.1 Conversion from Numbers to Strings: 4_2">6.4.2 Complex Output: 4_3">8.4.3	Writing Text Files: 
frame, stack  : 1_2">9.1.2	Activation Stack: 1_3">9.1.3 Function Instances: 2">9.2	Recursion Defined: 4_2">9.4.2	Generic Exception Implementation: 
frequency, sound  : 1">14.1	The Physics of Sound: 1">14.1	The Physics of Sound: 2">14.2	Recording and Playback: 2">14.2	Recording and Playback: 3">14.3	Implementation: 
function name section  : ">3.3.1	General Template: 3_2">7.3.2	Constructor Functions: 
functional programming  : ">2.1.3 Programming Paradigms: 
function  : Chapter Overview: Paths through the Book: 2_1">1.2.1 Babbage's Difference Engine: 3_1">1.3.1 Operating Systems: 3_3">1.3.3 Programming Languages: 
 -  acosd(...) : 4_3">9.4.3	MATLAB Implementation: 
 -  all(...) : Preface: Preface: 2. The overall philosophy: 2. The overall philosophy: Features of the Text that have been Retained: 
 -  alpha(...) : 2_2">1.2.2 Colossus: ">2.2.2 Assigning Values to Variables: 6">6.6 Engineering Example - Encryption: 6">6.6 Engineering Example - Encryption: 4_3">7.4.3	Manipulating Structures: 
 -  any(...) : Preface: 3. Graphical illustrations: 3. Lecture slides: Chapter Overview: Paths through the Book: 
 -  auread(...) : 
 -  auxiliary  local: ">3.3.7	Auxiliary Local Functions: ">3.3.7	Auxiliary Local Functions: 
 -  axis(...) : 3">4.3 Engineering Example - Forces  and  Moments: 3">4.3 Engineering Example - Forces  and  Moments: 3">4.3 Engineering Example - Forces  and  Moments: 6_3">9.6.3 Zeros of a Function: 7">9.7 Engineering Example—Robot Arm Motion: 
 -  bar(...) : >2.3 MATLAB User Interface</a>: ">2.3.3 Workspace Window: ">2.3.4 Current Folder Window: ">2.3.4 Current Folder Window: ">2.4.2 Creating Scripts: 
 -  bar3(...) : 3_3">11.3.3	Other 3-D Plot Capabilities: 3_3">11.3.3	Other 3-D Plot Capabilities: 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 
 -  barh(...) : 2_4">11.2.4	Other 2-D Plot Capabilities: 3_3">11.3.3	Other 3-D Plot Capabilities: 3_3">11.3.3	Other 3-D Plot Capabilities: 
 -  barh3(...) : 3_3">11.3.3	Other 3-D Plot Capabilities: 
 -  before(...) : 1">1.1 Background: 3_4">1.3.4 Running a Computer Program: 4_2">1.4.2 Learning Programming Concepts: 4_3">1.4.3 Problem-Solving Skills: 4_3">1.4.3 Problem-Solving Skills: 
 -  black box view of  : 
 -  calling  : Chapter Objectives: >3.2	Black Box View of a Function: ">3.3.4	Calling Functions: ">3.3.4	Calling Functions: ">3.3.6	Returning Multiple Results: 
 -  CAToString(...) : 
 -  ceil(...) : 2_5">4.2.5  Operating on Vectors: 
 -  char(...) : Chapter Overview: 2_2">1.2.2 Colossus: 3_2">1.3.2 Software Tools: ">2.1.3 Programming Paradigms: ">2.2.2 Assigning Values to Variables: 
 -  class(...) : >Programming Project: >Programming Project: Preface: 1. Pedagogical Style: 3. Lecture slides: 
 -  coef(...) : "14_6_2">14.6.2 Notes fading with time: 4_7">14.7 Engineering Example—Music Synthesizer: >Chapter Summary: >Introduction: 1_2">15.1.2	Cubic Spline Interpolation: 
 -  colormap(...) : 1_2">11.1.2	Simple Functions for Enhancing Plots: 
 -  contour(...) : 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 
 -  cross(...) : 3_2">7.3.2	Constructor Functions: 4_2">7.4.2	Accessing Structure Elements: 4_3">7.4.3	Manipulating Structures: 6_3">9.6.3 Zeros of a Function: 6_3">9.6.3 Zeros of a Function: 
 -  csvread(...) : 
 -  csvwrite(...) : 
 -  cumsum(...) : 3_2">15.3.2 Continuous Integration Problems: 3_2">15.3.2 Continuous Integration Problems: 3_2">15.3.2 Continuous Integration Problems: >Chapter Summary: 
 -  cumtrapz(...) : 3_2">15.3.2 Continuous Integration Problems: >Chapter Summary: 
 -  cylinder(...) : ">2.3.4 Current Folder Window: ">3.3.2	Function Definition: ">3.3.2	Function Definition: ">3.3.2	Function Definition: ">3.3.3	Storing and Using Functions: 
 -  deal(...) : Paths through the Book: 3_5">1.3.5 Running an Interpreted Program: Chapter Objectives: ">3.3.5	Variable Numbers of Parameters: 3">4.3 Engineering Example - Forces  and  Moments: 
 -  definition  : ">2.2.4 Classes and Objects: >3.2	Black Box View of a Function: >3.2	Black Box View of a Function: ">3.3.1	General Template: ">3.3.2	Function Definition: 
 -  del2(...) : 
 -  dequeue(...) : 1_1">17.1.1	The Nature of a Stack: 2_1">17.2.1	The Nature of a Queue: 2_2">17.2.2	Implementing Queues: 2_3">17.2.3 Priority Queues: 6_2">17.6.2	Breadth-First Search (BFS): 
 -  derivative of  : 4">15.4  Numerical Differentiation: 4">15.4  Numerical Differentiation: 4_1">15.4.1	Difference Expressions: 4_1">15.4.1	Difference Expressions: 4_1">15.4.1	Difference Expressions: 
 -  diag(...) : 3_3">1.3.3 Programming Languages: 4_1">4.4.1  Properties of an Array: 4_2">4.4.2  Creating an Array: 4_2">4.4.2  Creating an Array: 6_4">5.6.4	Breaking out of a for Loop: 
 -  diff(...) : Features of the Text that have been Retained: Back to the Future: Chapter Overview: Paths through the Book: Paths through the Book: 
 -  disp(...) : 3_2">1.3.2 Software Tools: >2.3 MATLAB User Interface</a>: ">2.3.3 Workspace Window: ">2.3.4 Current Folder Window: ">2.3.5 Variable Editor: 
 -  dlmread(...) : 6_1">11.6.1	Analyzing the Data: 
 -  dlmwrite(...) : 
 -  double(...) : ">2.2.3 Data Typing: ">2.2.4 Classes and Objects: ">2.2.4 Classes and Objects: ">2.3.7 Editor Window: ">2.4.3 The Current Directory: 
 -  ellipsoid(...) : 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 
 -  encapsulation in  : >3.1	Concepts: Abstraction and Encapsulation: ">3.3.2	Function Definition: ">3.3.9	Global Variables: 1">12.1	Concept: Behavioral Abstraction: 
 -  enqueue(...) : 2_1">17.2.1	The Nature of a Queue: 2_2">17.2.2	Implementing Queues: 2_3">17.2.3 Priority Queues: 2_3">17.2.3 Priority Queues: 6_2">17.6.2	Breadth-First Search (BFS): 
 -  error(...) : 3_4">1.3.4 Running a Computer Program: 3_4">1.3.4 Running a Computer Program: 3_5">1.3.5 Running an Interpreted Program: 4_3">1.4.3 Problem-Solving Skills: 4_3">1.4.3 Problem-Solving Skills: 
 -  eye(...) : 2_1">12.2.1	Matrix Multiplication: 1">13.1  Nature of an Image: 5">13.5  Engineering Example - Detecting Edges: 5">13.5  Engineering Example - Detecting Edges: 2_1">15.2.1 Linear Regression: 
 -  fact(...) : Preface: 1. Solutions to selected Programming Projects: 2_1">1.2.1 Babbage's Difference Engine: 3_1">1.3.1 Operating Systems: 3_4">1.3.4 Running a Computer Program: 
 -  fclose(...) : 4_1">8.4.1	Opening and Closing Files: 
 -  fft(...) : 5_2">14.5.2	Implementation: 
 -  fgetl(...) : 4_2">8.4.2	Reading Text Files: 4_2">8.4.2	Reading Text Files: 
 -  fgets(...) : 4_2">8.4.2	Reading Text Files: 
 -  fib(...) : 6_2">9.6.2	Fibonacci Series: 6_2">9.6.2	Fibonacci Series: 1_1">16.1.1	Specific Big O Examples: 
 -  fieldnames(...) : 3_1">7.3.1	Constructing and Accessing One Structure: 3_1">7.3.1	Constructing and Accessing One Structure: 4_2">7.4.2	Accessing Structure Elements: 4_2">7.4.2	Accessing Structure Elements: 4_3">7.4.3	Manipulating Structures: 
 -  figure(...) : 2_1">1.2.1 Babbage's Difference Engine: 2_3">1.2.3 The von Neumann Architecture: 4_3">1.4.3 Problem-Solving Skills: ">2.1.2 Algorithms: >2.3 MATLAB User Interface</a>: 
 -  fill(...) : 2_1">4.2.1  Creating a Vector: 2_5">4.2.5  Operating on Vectors: 4_2">4.4.2  Creating an Array: 4_2">4.4.2  Creating an Array: 4_2">4.4.2  Creating an Array: 
 -  find(...) : Chapter Overview: 1">1.1 Background: 1">1.1 Background: 3_5">1.3.5 Running an Interpreted Program: 4_3">1.4.3 Problem-Solving Skills: 
 -  fix(...) : Text Books Past, Present and Future: 3. Lecture slides: 2_1">1.2.1 Babbage's Difference Engine: 2_3">1.2.3 The von Neumann Architecture: 4_3">1.4.3 Problem-Solving Skills: 
 -  floor(...) : 2_5">4.2.5  Operating on Vectors: 
 -  fopen(...) : 4_1">8.4.1	Opening and Closing Files: 
 -  fprintf(...) : 3_1">6.3.1 Conversion from Numbers to Strings: 3_1">6.3.1 Conversion from Numbers to Strings: 4_2">6.4.2 Complex Output: 4_3">8.4.3	Writing Text Files: 
 -  from  : Text Books Past, Present and Future: Text Books Past, Present and Future: Important Attributes that survive the Transition: 1. Pedagogical Style: Features of the Text that have been Retained: 
 -  getfield(...) : 4_3">7.4.3	Manipulating Structures: 4_3">7.4.3	Manipulating Structures: 
 -  global variables  : ">3.3.4	Calling Functions: ">3.3.9	Global Variables: 
 -  gplot(...) : 
 -  grAdjacency(...) : 
 -  grid off(...) : 1_2">11.1.2	Simple Functions for Enhancing Plots: 4_4">13.4.4 Images on a Surface: 
 -  grid on(...) : 3_2">1.3.2 Software Tools: 1_2">11.1.2	Simple Functions for Enhancing Plots: 4_1">11.4.1	Basic Capabilities: 4_2">11.4.2	Simple Exercises: 4_2">11.4.2	Simple Exercises: 
 -  gt(...) : 4_3">1.4.3 Problem-Solving Skills: >2.3 MATLAB User Interface</a>: ">2.3.7 Editor Window: ">2.4.2 Creating Scripts: ">2.4.4 Running Scripts: 
 -  hist(...) : Chapter Overview: Acknowledgments: >Chapter Objectives: 2_2">1.2.2 Colossus: 3_2">1.3.2 Software Tools: 
 -  hold off(...) : 1_2">11.1.2	Simple Functions for Enhancing Plots: 
 -  hold on(...) : ">2.2.4 Classes and Objects: > 3.4 Engineering Example: Measuring a Solid Object: 3">5.3  if Statements: 3_2">8.3.2 Spreadsheets: 4">8.4 Lower-Level File I/O: 
 -  ifft(...) : 5_2">14.5.2	Implementation: 
 -  image(...) : Text Books Past, Present and Future: 2_1">1.2.1 Babbage's Difference Engine: 2_3">1.2.3 The von Neumann Architecture: 4_3">1.4.3 Problem-Solving Skills: h3>Fill in the Blanks: 
 -  imread(...) : 3">8.3 High-Level I/O Functions: 2_2">13.2.2	Gray Scale Images: 3">13.3	Reading, Displaying, and Writing Images: 3">13.3	Reading, Displaying, and Writing Images: 
 -  imshow(...) : 3">13.3	Reading, Displaying, and Writing Images: 
 -  imwrite(...) : 3">8.3 High-Level I/O Functions: 3">13.3	Reading, Displaying, and Writing Images: 3">13.3	Reading, Displaying, and Writing Images: 
 -  input(...) : Chapter Objectives: >3.1	Concepts: Abstraction and Encapsulation: ">3.3.5	Variable Numbers of Parameters: ">3.3.8	Encapsulation in MATLAB Functions: ">3.3.8	Encapsulation in MATLAB Functions: 
 -  int2str(...) : 3_1">6.3.1 Conversion from Numbers to Strings: 
 -  integral of  : 3">15.3 Numerical Integration: 3">15.3 Numerical Integration: 3">15.3 Numerical Integration: 3">15.3 Numerical Integration: 3_1">15.3.1 Determination of the Complete Integral: 
 -  interp1(...) : 1_1">15.1.1 Linear Interpolation: 1_3">15.1.3	Extrapolation: >Chapter Summary: 
 -  interp2(...) : 1_1">15.1.1 Linear Interpolation: 
 -  interp3(...) : 1_1">15.1.1 Linear Interpolation: 
 -  inv(...) : 1">1.1 Background: 1">1.1 Background: 1">1.1 Background: 1">1.1 Background: 3_3">1.3.3 Programming Languages: 
 -  is_before(...) : 2_3">17.2.3 Priority Queues: 
 -  isa(...) : 3_5">1.3.5 Running an Interpreted Program: 2_4">7.2.4	Processing Cell Arrays: 6_2">9.6.2	Fibonacci Series: 3_8">10.3.8	Searching a Collection: 1">11.1  Plotting in General: 
 -  iscell(...) : 2_4">7.2.4	Processing Cell Arrays: 
 -  ischar(...) : 2_3">6.2.3 Useful Functions: 2_4">7.2.4	Processing Cell Arrays: 4_2">8.4.2	Reading Text Files: 
 -  isempty(...) : 1_1">17.1.1	The Nature of a Stack: 1_2">17.1.2	Implementing Stacks: 2_1">17.2.1	The Nature of a Queue: 2_2">17.2.2	Implementing Queues: 
 -  isfield(...) : 4_3">7.4.3	Manipulating Structures: 4_3">7.4.3	Manipulating Structures: 
 -  islogical(...) : 2_4">7.2.4	Processing Cell Arrays: 
 -  isnumeric(...) : 2_4">7.2.4	Processing Cell Arrays: 
 -  isPal(...) : 6_1">9.6.1	Detecting Palindromes: 6_1">9.6.1	Detecting Palindromes: 6_1">9.6.1	Detecting Palindromes: 6_1">9.6.1	Detecting Palindromes: 6_1">9.6.1	Detecting Palindromes: 
 -  isspace(...) : 2_3">6.2.3 Useful Functions: 
 -  isstruct(...) : 2_4">7.2.4	Processing Cell Arrays: 
 -  it(...) : Preface: Preface: Preface: Text Books Past, Present and Future: Text Books Past, Present and Future: 
 -  largest(...) : 2_5">4.2.5  Operating on Vectors: 7_2">5.7.2	MATLAB while Loop Implementation: 2_3">7.2.3	Using Cell Arrays: 3_7">10.3.7	Folding a Collection: 2_2">15.2.2	Polynomial Regression: 
 -  lasterror(...) : 4_3">9.4.3	MATLAB Implementation: 
 -  legend(...) : 1_2">11.1.2	Simple Functions for Enhancing Plots: 1_4">11.1.4	Manually Editing Plots: 
 -  length(...) : 4_3">1.4.3 Problem-Solving Skills: 2_1">4.2.1  Creating a Vector: 2_2">4.2.2  Size of a Vector: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 
 -  lightangle(...) : 
 -  linspace(...) : 2_1">4.2.1  Creating a Vector: 4_1">13.4.1	Stretching or Shrinking Images: 4_1">13.4.1	Stretching or Shrinking Images: 
 -  load(...) : 3_1">1.3.1 Operating Systems: 3_1">1.3.1 Operating Systems: 3_4">1.3.4 Running a Computer Program: 3_4">1.3.4 Running a Computer Program: 3_5">1.3.5 Running an Interpreted Program: 
 -  loglog(...) : 2_2">11.2.2	Plot Options: 
 -  magic(...) : 4_2">4.4.2  Creating an Array: 
 -  max(...) : 3_3">1.3.3 Programming Languages: >3.1	Concepts: Abstraction and Encapsulation: 1_1">4.1.1  Data Abstraction: 2_1">4.2.1  Creating a Vector: 2_2">4.2.2  Size of a Vector: 
 -  mean(...) : 3. Lecture slides: 1">1.1 Background: 1">1.1 Background: 3_3">1.3.3 Programming Languages: ">2.1.1 Abstraction: 
 -  mesh(...) : 4_1">11.4.1	Basic Capabilities: 4_1">11.4.1	Basic Capabilities: 4_2">11.4.2	Simple Exercises: 4_2">11.4.2	Simple Exercises: 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 
 -  meshc(...) : 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 
 -  meshgrid(...) : 4_1">11.4.1	Basic Capabilities: 4_2">11.4.2	Simple Exercises: 4_2">11.4.2	Simple Exercises: 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 
 -  meshz(...) : 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 
 -  min(...) : Preface: 2. The overall philosophy: Features of the Text that have been Retained: 1. Solutions to selected Programming Projects: 1. Solutions to selected Programming Projects: 
 -  nargin(...) : ">3.3.5	Variable Numbers of Parameters: 
 -  nargout(...) : ">3.3.5	Variable Numbers of Parameters: 
 -  num2str(...) : 3_1">6.3.1 Conversion from Numbers to Strings: 
 -  ones(...) : 2">1.2 History of Computer Architectures: 2_1">4.2.1  Creating a Vector: 4_2">4.4.2  Creating an Array: 3_2">7.3.2	Constructor Functions: 3_2">7.3.2	Constructor Functions: 
 -  peek(...) : 1_1">17.1.1	The Nature of a Stack: 1_2">17.1.2	Implementing Stacks: 2_1">17.2.1	The Nature of a Queue: 2_2">17.2.2	Implementing Queues: 
 -  pie(...) : 3_1">1.3.1 Operating Systems: ">2.1.2 Algorithms: ">2.3.3 Workspace Window: ">3.3.4	Calling Functions: ">3.3.8	Encapsulation in MATLAB Functions: 
 -  pie3(...) : 3_3">11.3.3	Other 3-D Plot Capabilities: 3_3">11.3.3	Other 3-D Plot Capabilities: 
 -  plot(...) : Chapter Overview: Paths through the Book: 3_2">1.3.2 Software Tools: ">2.3.6 Figure Window: Chapter Objectives: 
 -  plot3(...) : 3_1">11.3.1 Linear 3-D Plots: >Chapter Summary: 
 -  plotyy(...) : 2_2">11.2.2	Plot Options: 
 -  polar(...) : 2_4">11.2.4	Other 2-D Plot Capabilities: 4_4">11.4.4	Bodies of Rotation: 4_4">11.4.4	Bodies of Rotation: 4_4">11.4.4	Bodies of Rotation: 
 -  polyfit(...) : 2_2">15.2.2	Polynomial Regression: 2_2">15.2.2	Polynomial Regression: 2_2">15.2.2	Polynomial Regression: 5">16.5	Engineering Example - A Selection of Countries: 
 -  polyval(...) : 2_2">15.2.2	Polynomial Regression: 2_2">15.2.2	Polynomial Regression: 2_2">15.2.2	Polynomial Regression: 
 -  rand(...) : 3_3">1.3.3 Programming Languages: ">2.1.2 Algorithms: 2_1">4.2.1  Creating a Vector: 4_2">4.4.2  Creating an Array: 4_2">4.4.2  Creating an Array: 
 -  randn(...) : 2_1">4.2.1  Creating a Vector: 4_2">4.4.2  Creating an Array: 6">6.6 Engineering Example - Encryption: 
 -  read(...) : 2. Source code for all MATLAB listings: 3. Lecture slides: Chapter Overview: Paths through the Book: 3_2">1.3.2 Software Tools: 
 -  readcell(...) : 3">8.3 High-Level I/O Functions: 3">8.3 High-Level I/O Functions: 3">8.3 High-Level I/O Functions: 3_2">8.3.2 Spreadsheets: 3_3">8.3.3	Delimited Text Files: 
 -  readStruct(...) : 5">8.5	Engineering Example &mdash; Spreadsheet Data: 
 -  reshape(...) : 4_5">4.4.5  Operating on Arrays: 4_2">12.4.2	3-D Rotation: 5_1">14.5.1 Background: 
 -  returning multiple results  : 2_5">4.2.5  Operating on Vectors: 2_2">7.2.2	Accessing Cell Arrays: 
 -  rmfield(...) : 3_1">7.3.1	Constructing and Accessing One Structure: 3_1">7.3.1	Constructing and Accessing One Structure: 4_2">7.4.2	Accessing Structure Elements: 4_2">7.4.2	Accessing Structure Elements: 4_3">7.4.3	Manipulating Structures: 
 -  rot90(...) : 
 -  round(...) : Acknowledgments: >Chapter Objectives: >Chapter Objectives: >Chapter Objectives: 1">1.1 Background: 
 -  save(...) : 3_1">1.3.1 Operating Systems: 3_2">1.3.2 Software Tools: ">2.3.1 Command Window: ">2.3.4 Current Folder Window: ">2.3.7 Editor Window: 
 -  semilogx(...) : 2_2">11.2.2	Plot Options: 
 -  semilogy(...) : 2_2">11.2.2	Plot Options: 
 -  setfield(...) : 4_3">7.4.3	Manipulating Structures: 4_3">7.4.3	Manipulating Structures: 
 -  shading(...) : Chapter Overview: 1_2">11.1.2	Simple Functions for Enhancing Plots: 4_1">11.4.1	Basic Capabilities: 
 -  size(...) : Text Books Past, Present and Future: Chapter Overview: Acknowledgments: 2">1.2 History of Computer Architectures: ">2.2.3 Data Typing: 
 -  sort(...) : 4_3">1.4.3 Problem-Solving Skills: 6_3">5.6.3	Indexing Implementation: 4_3">7.4.3	Manipulating Structures: 4_3">7.4.3	Manipulating Structures: 3_9">10.3.9	Sorting a Collection: 
 -  sound(...) : Chapter Overview: >Introduction: >Chapter Objectives: 1">14.1	The Physics of Sound: 1">14.1	The Physics of Sound: 
 -  sphere(...) : 8">5.8	Engineering Example - Computing Liquid Levels: 8">5.8	Engineering Example - Computing Liquid Levels: 8">5.8	Engineering Example - Computing Liquid Levels: 4_3">11.4.3	3-D Parametric Surfaces: 4_3">11.4.3	3-D Parametric Surfaces: 
 -  spline(...) : 1">15.1  Interpolation: 1_1">15.1.1 Linear Interpolation: 1_1">15.1.1 Linear Interpolation: 1_2">15.1.2	Cubic Spline Interpolation: 1_2">15.1.2	Cubic Spline Interpolation: 
 -  sprintf(...) : 3_1">6.3.1 Conversion from Numbers to Strings: 3_1">6.3.1 Conversion from Numbers to Strings: 3_1">6.3.1 Conversion from Numbers to Strings: 3_1">6.3.1 Conversion from Numbers to Strings: 3_1">6.3.1 Conversion from Numbers to Strings: 
 -  sscanf(...) : 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: 4_2">8.4.2	Reading Text Files: 
 -  storing/using  : 
 -  str2num(...) : 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: 
 -  strcmp(...) : 4_3">6.4.3 Comparing Strings: 
 -  strcmpi(...) : 
 -  strtok(...) : 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: 4_2">8.4.2	Reading Text Files: 4_2">8.4.2	Reading Text Files: 
 -  struct(...) : 3. Lecture slides: Paths through the Book: Supplementary Materials: Acknowledgments: Acknowledgments: 
 -  structures  : >Chapter Objectives: >Chapter Objectives: >Introduction: 3">7.3 Structures: 3_1">7.3.1	Constructing and Accessing One Structure: 
 -  subplot(...) : 1">11.1  Plotting in General: 1_3">11.1.3	Multiple Plots on One Figure - Subplots: 4_4">11.4.4	Bodies of Rotation: 
 -  sum(...) : Chapter Overview: 3_4">1.3.4 Running a Computer Program: 4_3">1.4.3 Problem-Solving Skills: ">2.1.3 Programming Paradigms: ">2.2.2 Assigning Values to Variables: 
 -  surf(...) : >Chapter Objectives: >Chapter Objectives: 1_2">11.1.2	Simple Functions for Enhancing Plots: 2_3">11.2.3	Parametric Plots: 4">11.4 Surface Plots: 
 -  surfc(...) : 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 
 -  surfz(...) : 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 
 -  text(...) : Preface: Text Books Past, Present and Future: Text Books Past, Present and Future: Important Attributes that survive the Transition: 1. Pedagogical Style: 
 -  textscan(...) : 4_2">8.4.2	Reading Text Files: 
 -  title(...) : 2_1">1.2.1 Babbage's Difference Engine: 2_3">1.2.3 The von Neumann Architecture: 4_3">1.4.3 Problem-Solving Skills: ">2.1.2 Algorithms: ">2.2.3 Data Typing: 
 -  toString(...) : 
 -  tril(...) : 
 -  view(...) : Chapter Overview: Chapter Overview: Paths through the Book: >Chapter Objectives: 2">1.2 History of Computer Architectures: 
 -  waterfall(...) : 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 
 -  wavread(...) : 
 -  wavwrite(...) : 
 -  writecell(...) : 3">8.3 High-Level I/O Functions: 3">8.3 High-Level I/O Functions: 3">8.3 High-Level I/O Functions: 3_2">8.3.2 Spreadsheets: 3_3">8.3.3	Delimited Text Files: 
 -  xlabel(...) : 1_2">11.1.2	Simple Functions for Enhancing Plots: 
 -  xlsread(...) : 5">10.5  Engineering Example - Processing Geopolitical Data: 
 -  xlswrite(...) : 
 -  ylabel(...) : 1_2">11.1.2	Simple Functions for Enhancing Plots: 
 -  zeros of  : 4_5">4.4.5  Operating on Arrays: 6">9.6 Examples of Recursion: 6_3">9.6.3 Zeros of a Function: 6_3">9.6.3 Zeros of a Function: 6_3">9.6.3 Zeros of a Function: 
 -  zeros(...) : 2_1">4.2.1  Creating a Vector: 4_2">4.4.2  Creating an Array: 4_5">4.4.5  Operating on Arrays: 6">9.6 Examples of Recursion: 6_3">9.6.3 Zeros of a Function: 
 -  zlabel(...) : 1_2">11.1.2	Simple Functions for Enhancing Plots: 
<h1>G</h1>
getfield(...) : 4_3">7.4.3	Manipulating Structures: 4_3">7.4.3	Manipulating Structures: 
global keyword  : 
Global Scope  : ">3.3.8	Encapsulation in MATLAB Functions: 
global variables  : ">3.3.4	Calling Functions: ">3.3.9	Global Variables: 
gplot(...) : 
grAdjacency(...) : 
graphs  : Chapter Overview: 3_2">1.3.2 Software Tools: 3_2">1.3.2 Software Tools: ">2.3.6 Figure Window: 4">7.4 Structure Arrays: 
 -  Breadth-First Search  : 6_1">17.6.1	Depth-First Search (DFS): 6_1">17.6.1	Depth-First Search (DFS): 6_2">17.6.2	Breadth-First Search (BFS): 6_2">17.6.2	Breadth-First Search (BFS): 
 -  building  : 2_1">1.2.1 Babbage's Difference Engine: ">2.3.2 Command History: >Introduction: 6">7.6 Engineering Example: Assembling a Physical Structure: 3_4">10.3.4	Building a Collection: 
 -  creating  : Acknowledgments: 1">1.1 Background: 1">1.1 Background: >2.4 Scripts: ">2.4.2 Creating Scripts: 
 -  cycles  : 6_1">11.6.1	Analyzing the Data: 4">17.4 Graphs: 4_2">17.4.2	Processing Graphs: 6">17.6 Finding Paths through a Graph: 6_1">17.6.1	Depth-First Search (DFS): 
 -  defined  : 3_3">1.3.3 Programming Languages: 3_4">1.3.4 Running a Computer Program: ">2.1.2 Algorithms: ">2.2.3 Data Typing: ">2.2.4 Classes and Objects: 
 -  Dijkstra’s algorithm  : >Chapter Summary: 
 -  examples  : 1. Pedagogical Style: Acknowledgments: >3.1	Concepts: Abstraction and Encapsulation: 3_3">5.3.3	Important Ideas: 7_3">5.7.3	Loop-and-a-Half Implementation: 
 -  nodes  : Chapter Overview: >Introduction: 4">17.4 Graphs: 4_1">17.4.1 Graph Examples: 4_2">17.4.2	Processing Graphs: 
 -  paths on  : 6_2">11.6.2	Displaying the Data: 4_2">17.4.2	Processing Graphs: 6_1">17.6.1	Depth-First Search (DFS): 6_3">17.6.3	Dijkstra’s Algorithm: 6_3">17.6.3	Dijkstra’s Algorithm: 
 -  processing  : Chapter Overview: 2">1.2 History of Computer Architectures: 2_3">1.2.3 The von Neumann Architecture: Introduction: 2_4">4.2.4  Shortening a Vector: 
 -  short-circuit evaluation  : 
 -  template for  : 3. Graphical illustrations: >3.3  MATLAB Implementation: 2_5">4.2.5  Operating on Vectors: 4_5">4.4.5  Operating on Arrays: 3">5.3  if Statements: 
grid on(...) : 3_2">1.3.2 Software Tools: 1_2">11.1.2	Simple Functions for Enhancing Plots: 4_1">11.4.1	Basic Capabilities: 4_2">11.4.2	Simple Exercises: 4_2">11.4.2	Simple Exercises: 
gt(...) : 4_3">1.4.3 Problem-Solving Skills: >2.3 MATLAB User Interface</a>: ">2.3.7 Editor Window: ">2.4.2 Creating Scripts: ">2.4.4 Running Scripts: 
<h1>H</h1>
hardwiring  : 
heap  : 
help command  : ">2.4.1 Text Files: ">2.4.2 Creating Scripts: ">3.3.2	Function Definition: 4_1">8.4.1	Opening and Closing Files: 
helper functions  : Chapter Objectives: ">3.3.7	Auxiliary Local Functions: >Introduction: 3">17.3 Testing Stacks and Queues: 
heterogeneous collections  : Chapter Overview: >Chapter Objectives: >Introduction: 1">7.1	Concept: Collecting Dissimilar Objects: 1">7.1	Concept: Collecting Dissimilar Objects: 
high-level I/O functions  : 1">8.1 Concept: Serial Input and Output (I/O): 
 -  with delimited text files  : 3_1">8.3.1	Exploration: 6_1">11.6.1	Analyzing the Data: 
 -  with Excel spreadsheets  : 
 -  exploration  : 3">8.3 High-Level I/O Functions: 
hist(...) : Chapter Overview: Acknowledgments: >Chapter Objectives: 2_2">1.2.2 Colossus: 3_2">1.3.2 Software Tools: 
hold off(...) : 1_2">11.1.2	Simple Functions for Enhancing Plots: 
hold on(...) : ">2.2.4 Classes and Objects: > 3.4 Engineering Example: Measuring a Solid Object: 3">5.3  if Statements: 3_2">8.3.2 Spreadsheets: 4">8.4 Lower-Level File I/O: 
homogeneous collections  : Chapter Overview: 1_2">4.1.2  Homogeneous Collections: >Introduction: 1">7.1	Concept: Collecting Dissimilar Objects: 3">7.3 Structures: 
<h1>I</h1>
ifft(...) : 5_2">14.5.2	Implementation: 
image(...) : Text Books Past, Present and Future: 2_1">1.2.1 Babbage's Difference Engine: 2_3">1.2.3 The von Neumann Architecture: 4_3">1.4.3 Problem-Solving Skills: h3>Fill in the Blanks: 
images  : Text Books Past, Present and Future: Introduction: Chapter Summary: 4">11.4 Surface Plots: >Chapter Objectives: 
 -  color mapped  : 2">13.2 Image Types: 2_3">13.2.3	Color Mapped Images: 2_3">13.2.3	Color Mapped Images: 4_2">13.4.2	Color Masking: >Chapter Summary: 
 -  color masking with  : 
 -  displaying  : 3_2">1.3.2 Software Tools: ">2.4.5 Punctuating Scripts: 4_2">6.4.2 Complex Output: 
 -  format of  : 2_2">1.2.2 Colossus: 3_2">1.3.2 Software Tools: 3_2">1.3.2 Software Tools: 3_2">1.3.2 Software Tools: 4_3">1.4.3 Problem-Solving Skills: 
 -  gray scale  : 2">13.2 Image Types: 2_2">13.2.2	Gray Scale Images: >Chapter Summary: 
 -  kaleidoscope  : 4_3">13.4.3	Creating a Kaleidoscope: 4_3">13.4.3	Creating a Kaleidoscope: 4_3">13.4.3	Creating a Kaleidoscope: 4_3">13.4.3	Creating a Kaleidoscope: 
 -  nature of  : 1">1.1 Background: 3_2">1.3.2 Software Tools: 3_3">1.3.3 Programming Languages: 3_3">1.3.3 Programming Languages: ">2.2.1 Starting and Stopping MATLAB: 
 -  operation on  : Chapter Overview: Chapter Overview: Chapter Overview: Paths through the Book: 2_1">1.2.1 Babbage's Difference Engine: 
 -  reading  : ">2.1.1 Abstraction: 1_1">4.1.1  Data Abstraction: 2_4">4.2.4  Shortening a Vector: >Chapter Objectives: >Introduction: 
 -  resolution of  : 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: 1">13.1  Nature of an Image: 1">13.1  Nature of an Image: 2_3">13.2.3	Color Mapped Images: 4_4">13.4.4 Images on a Surface: 
 -  stretching/shrinking  : 
 -  on surface  : 1_2">11.1.2	Simple Functions for Enhancing Plots: 2_3">11.2.3	Parametric Plots: 4">11.4 Surface Plots: 4_1">11.4.1	Basic Capabilities: 4_1">11.4.1	Basic Capabilities: 
 -  true color  : 1">13.1  Nature of an Image: 2">13.2 Image Types: 2_1">13.2.1	True Color Images: 2_2">13.2.2	Gray Scale Images: 2_3">13.2.3	Color Mapped Images: 
 -  types  : Features of the Text that have been Removed: 3_3">1.3.3 Programming Languages: 3_3">1.3.3 Programming Languages: 3_3">1.3.3 Programming Languages: 3_4">1.3.4 Running a Computer Program: 
 -  writing  : Preface: Preface: Text Books Past, Present and Future: Features of the Text that have been Retained: Paths through the Book: 
Input/Output  I/O: 2_3">1.2.3 The von Neumann Architecture: >Introduction: 
 -  high-level see also high-level I/O functions: 3_3">1.3.3 Programming Languages: 3_4">1.3.4 Running a Computer Program: 3_5">1.3.5 Running an Interpreted Program: Introduction: >Chapter Objectives: 
 -  lower-level see also lower-level I/O functions: >Chapter Objectives: 4">8.4 Lower-Level File I/O: 
 -  and MATLAB workspace  : Chapter Overview: ">3.3.8	Encapsulation in MATLAB Functions: ">3.3.8	Encapsulation in MATLAB Functions: ">3.3.9	Global Variables: >Chapter Objectives: 
inserting data, in collection  : 3">10.3	Summary of Operations: 3_4">10.3.4	Building a Collection: 
insertion sort  : 2_1">16.2.1 Insertion Sort: 2_1">16.2.1 Insertion Sort: 2_1">16.2.1 Insertion Sort: 2_2">16.2.2 Bubble Sort: 2_5">16.2.5	Radix Sort: 
integration  : Chapter Overview: >Chapter Objectives: 3_1">15.3.1 Determination of the Complete Integral: 3_2">15.3.2 Continuous Integration Problems: 3_2">15.3.2 Continuous Integration Problems: 
interp1(...) : 1_1">15.1.1 Linear Interpolation: 1_3">15.1.3	Extrapolation: >Chapter Summary: 
interp2(...) : 1_1">15.1.1 Linear Interpolation: 
interp3(...) : 1_1">15.1.1 Linear Interpolation: 
interpolation  : Chapter Overview: >Introduction: 1">15.1  Interpolation: 1">15.1  Interpolation: 1_1">15.1.1 Linear Interpolation: 
 -  cubic spline  : 1">15.1  Interpolation: 1_1">15.1.1 Linear Interpolation: 1_1">15.1.1 Linear Interpolation: 1_2">15.1.2	Cubic Spline Interpolation: 1_2">15.1.2	Cubic Spline Interpolation: 
 -  extrapolation  : 1_3">15.1.3	Extrapolation: 2_2">15.2.2	Polynomial Regression: 
 -  linear  : 2">4.2   Vectors: 4_5">4.4.5  Operating on Arrays: 4_5">4.4.5  Operating on Arrays: 4_5">4.4.5  Operating on Arrays: 4_5">4.4.5  Operating on Arrays: 
interpreted code  : 3_5">1.3.5 Running an Interpreted Program: 3_5">1.3.5 Running an Interpreted Program: ">2.2.3 Data Typing: ">3.3.2	Function Definition: 
int2str(...) : 3_1">6.3.1 Conversion from Numbers to Strings: 
inv(...) : 1">1.1 Background: 1">1.1 Background: 1">1.1 Background: 1">1.1 Background: 3_3">1.3.3 Programming Languages: 
isa(...) : 3_5">1.3.5 Running an Interpreted Program: 2_4">7.2.4	Processing Cell Arrays: 6_2">9.6.2	Fibonacci Series: 3_8">10.3.8	Searching a Collection: 1">11.1  Plotting in General: 
is_before(...) : 2_3">17.2.3 Priority Queues: 
iscell(...) : 2_4">7.2.4	Processing Cell Arrays: 
ischar(...) : 2_3">6.2.3 Useful Functions: 2_4">7.2.4	Processing Cell Arrays: 4_2">8.4.2	Reading Text Files: 
isempty(...) : 1_1">17.1.1	The Nature of a Stack: 1_2">17.1.2	Implementing Stacks: 2_1">17.2.1	The Nature of a Queue: 2_2">17.2.2	Implementing Queues: 
isfield(...) : 4_3">7.4.3	Manipulating Structures: 4_3">7.4.3	Manipulating Structures: 
islogical(...) : 2_4">7.2.4	Processing Cell Arrays: 
isnumeric(...) : 2_4">7.2.4	Processing Cell Arrays: 
isPal(...) : 6_1">9.6.1	Detecting Palindromes: 6_1">9.6.1	Detecting Palindromes: 6_1">9.6.1	Detecting Palindromes: 6_1">9.6.1	Detecting Palindromes: 6_1">9.6.1	Detecting Palindromes: 
isspace(...) : 2_3">6.2.3 Useful Functions: 
isstruct(...) : 2_4">7.2.4	Processing Cell Arrays: 
it(...) : Preface: Preface: Preface: Text Books Past, Present and Future: Text Books Past, Present and Future: 
iteration  : Chapter Overview: Paths through the Book: 3_1">5.3.1	General Template: 4_1">5.4.1	General Template: 5">5.5	Iteration in General: 
<h1>J</h1>
Joint Photographic Experts Group  JPEG: 2_4">13.2.4	Preferred Image Format: 
<h1>K</h1>
kaleidoscope  : 4_3">13.4.3	Creating a Kaleidoscope: 4_3">13.4.3	Creating a Kaleidoscope: 4_3">13.4.3	Creating a Kaleidoscope: 4_3">13.4.3	Creating a Kaleidoscope: 
<h1>L</h1>
length(...) : 4_3">1.4.3 Problem-Solving Skills: 2_1">4.2.1  Creating a Vector: 2_2">4.2.2  Size of a Vector: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 
less than  <: Acknowledgments: 3_2">1.3.2 Software Tools: ">3.3.6	Returning Multiple Results: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 
less than or equal to  < = : 6_2">5.6.2	MATLAB Implementation: 
 -  with arrays  : Paths through the Book: >Chapter Objectives: 2">4.2   Vectors: 2_5">4.2.5  Operating on Vectors: 4">4.4  Arrays: 
 -  with vectors  : ">3.3.6	Returning Multiple Results: 2">4.2   Vectors: 2_1">4.2.1  Creating a Vector: 2_1">4.2.1  Creating a Vector: 2_1">4.2.1  Creating a Vector: 
lightangle(...) : 
linear arrays  : 2">4.2   Vectors: 4_5">4.4.5  Operating on Arrays: 4_5">4.4.5  Operating on Arrays: 4_5">4.4.5  Operating on Arrays: >Chapter Summary: 
linear equations simultaneous : 2_2">12.2.2	Matrix Division: 5">12.5 Solving Simultaneous Linear Equations: 5_1">12.5.1 Intersecting Lines: 
linear interpolation  : 1">15.1  Interpolation: 1_1">15.1.1 Linear Interpolation: 1_1">15.1.1 Linear Interpolation: 1_2">15.1.2	Cubic Spline Interpolation: >Chapter Summary: 
linear matrices  : 2">4.2   Vectors: 2_2">12.2.2	Matrix Division: 2_2">12.2.2	Matrix Division: 
linear regression  : 2_1">15.2.1 Linear Regression: 
linearized array  : 4_5">4.4.5  Operating on Arrays: 4_5">4.4.5  Operating on Arrays: 
intersecting  : 5_1">12.5.1 Intersecting Lines: 5_1">12.5.1 Intersecting Lines: 
rotating  : 6_2">9.6.2	Fibonacci Series: 4_3">11.4.3	3-D Parametric Surfaces: 4_4">11.4.4	Bodies of Rotation: 4">12.4  Rotating Coordinates: 4_1">12.4.1	2-D Rotation: 
linker  : 3_4">1.3.4 Running a Computer Program: 3_5">1.3.5 Running an Interpreted Program: 
linspace(...) : 2_1">4.2.1  Creating a Vector: 4_1">13.4.1	Stretching or Shrinking Images: 4_1">13.4.1	Stretching or Shrinking Images: 
load(...) : 3_1">1.3.1 Operating Systems: 3_1">1.3.1 Operating Systems: 3_4">1.3.4 Running a Computer Program: 3_4">1.3.4 Running a Computer Program: 3_5">1.3.5 Running an Interpreted Program: 
loader  : 3_4">1.3.4 Running a Computer Program: 
Local Scope  : ">3.3.8	Encapsulation in MATLAB Functions: 
logic errors  : 3_4">1.3.4 Running a Computer Program: 3_4">1.3.4 Running a Computer Program: 3_5">1.3.5 Running an Interpreted Program: 
logical expressions  : 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2">5.2	Conditional Execution in General: 3_3">5.3.3	Important Ideas: 3_3">5.3.3	Important Ideas: 
logical indexing  : 2_3">4.2.3   Indexing a Vector: 2_4">4.2.4  Shortening a Vector: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 
with arrays  : Paths through the Book: >Chapter Objectives: 2">4.2   Vectors: 2_5">4.2.5  Operating on Vectors: 4">4.4  Arrays: 
on character strings  : ">2.2.3 Data Typing: >Chapter Objectives: >Chapter Objectives: >Introduction: 2_2">6.2.2 Arithmetic and Logical Operations: 
with vectors  : ">3.3.6	Returning Multiple Results: 2">4.2   Vectors: 2_1">4.2.1  Creating a Vector: 2_1">4.2.1  Creating a Vector: 2_1">4.2.1  Creating a Vector: 
logical value  : >Chapter Objectives: 2">4.2   Vectors: 2_3">4.2.3   Indexing a Vector: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 
loglog(...) : 2_2">11.2.2	Plot Options: 
loop-and-a-half iteration style : 7_3">5.7.3	Loop-and-a-Half Implementation: 
lower-level I/O functions  : 4">8.4 Lower-Level File I/O: 
 -  opening files  : ">2.4.3 The Current Directory: 3_1">8.3.1	Exploration: 4_1">8.4.1	Opening and Closing Files: 6_1">11.6.1	Analyzing the Data: 
 -  closing files  : ">2.3.7 Editor Window: 
<h1>M</h1>
magic(...) : 4_2">4.4.2  Creating an Array: 
mapping  : 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 
 -  character  : Chapter Overview: 2_2">1.2.2 Colossus: ">2.1.3 Programming Paradigms: ">2.2.2 Assigning Values to Variables: ">2.2.3 Data Typing: 
 -  operation  : Chapter Overview: Chapter Overview: Chapter Overview: Paths through the Book: 2_1">1.2.1 Babbage's Difference Engine: 
MATLAB  : Preface: 1. Pedagogical Style: 2. The overall philosophy: 3. Graphical illustrations: Features of the Text that have been Retained: 
 -  data manipulation  : >2.2 Basic Data Manipulation: >Chapter Objectives: >Introduction: >Chapter Summary: 
 -  introduction to  : Preface: 4">1.4 Anticipated Outcomes: >2.5 Engineering Example - Spacecraft Launch: 
 -  problem-solving  : 4">1.4 Anticipated Outcomes: >Introduction: 
 -  programming concepts  : Paths through the Book: Acknowledgments: 4">1.4 Anticipated Outcomes: 4_1">1.4.1 Introduction to MATLAB: 4_2">1.4.2 Learning Programming Concepts: 
 -  user interface  : Chapter Overview: Chapter Objectives: Introduction: Chapter Summary: >3.2	Black Box View of a Function: 
matrices  : Introduction: 2">4.2   Vectors: 2_5">4.2.5  Operating on Vectors: 4">4.4  Arrays: >Chapter Objectives: 
matrix  : Chapter Overview: Introduction: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 
 -  2-D rotation  : 4_4">11.4.4	Bodies of Rotation: 4_2">12.4.2	3-D Rotation: >Chapter Summary: 
 -  3-D rotation  : 3_2">11.3.2	Linear Parametric 3-D Plots: 4_4">11.4.4	Bodies of Rotation: 4_2">12.4.2	3-D Rotation: >Chapter Summary: 
 -  adjacency  : 
 -  division  : 3_4">1.3.4 Running a Computer Program: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 4">4.4  Arrays: 
 -  exponentiation  : 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 4">4.4  Arrays: 4_5">4.4.5  Operating on Arrays: 2">12.2	Matrix Operations: 
 -  identity  : ">2.2.2 Assigning Values to Variables: ">2.2.2 Assigning Values to Variables: 2_1">12.2.1	Matrix Multiplication: 2_2">12.2.2	Matrix Division: 
 -  implementation  : 1. Pedagogical Style: 2. The overall philosophy: 3. Graphical illustrations: 1. Solutions to selected Programming Projects: 2">1.2 History of Computer Architectures: 
 -  linear  : 2">4.2   Vectors: 4_5">4.4.5  Operating on Arrays: 4_5">4.4.5  Operating on Arrays: 4_5">4.4.5  Operating on Arrays: 4_5">4.4.5  Operating on Arrays: 
 -  multiplication  : 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 4">4.4  Arrays: 4_5">4.4.5  Operating on Arrays: 2">9.2	Recursion Defined: 
 -  rotating coordinates  : 4">12.4  Rotating Coordinates: 4_1">12.4.1	2-D Rotation: 4_2">12.4.2	3-D Rotation: 4_2">12.4.2	3-D Rotation: 
 -  sparse  : 
max(...) : 3_3">1.3.3 Programming Languages: >3.1	Concepts: Abstraction and Encapsulation: 1_1">4.1.1  Data Abstraction: 2_1">4.2.1  Creating a Vector: 2_2">4.2.2  Size of a Vector: 
mean(...) : 3. Lecture slides: 1">1.1 Background: 1">1.1 Background: 3_3">1.3.3 Programming Languages: ">2.1.1 Abstraction: 
Mercator projection  : 4_4">13.4.4 Images on a Surface: 
merge sort  : 1_2">16.1.2	Analyzing Complex Algorithms: 2_4">16.2.4	Merge Sort: 2_4">16.2.4	Merge Sort: 2_4">16.2.4	Merge Sort: 3">16.3 Performance Analysis: 
mesh(...) : 4_1">11.4.1	Basic Capabilities: 4_1">11.4.1	Basic Capabilities: 4_2">11.4.2	Simple Exercises: 4_2">11.4.2	Simple Exercises: 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 
meshc(...) : 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 
meshgrid(...) : 4_1">11.4.1	Basic Capabilities: 4_2">11.4.2	Simple Exercises: 4_2">11.4.2	Simple Exercises: 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 
meshz(...) : 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 
min(...) : Preface: 2. The overall philosophy: Features of the Text that have been Retained: 1. Solutions to selected Programming Projects: 1. Solutions to selected Programming Projects: 
minimum spanning trees  : 4_2">17.4.2	Processing Graphs: 
minus, unary  2: 2_5">4.2.5  Operating on Vectors: 
multiplication array  : 4">4.4  Arrays: 4_5">4.4.5  Operating on Arrays: 2">12.2	Matrix Operations: 2_1">12.2.1	Matrix Multiplication: 2_1">12.2.1	Matrix Multiplication: 
music synthesizer  : "14_6_2">14.6.2 Notes fading with time: 4_7">14.7 Engineering Example—Music Synthesizer: 7">15.7  Engineering Example - Shaping the Synthesizer Notes: 
musical sounds  : 6_1">14.6.1 Details of the Spectral Data: 
 -  changing frequency of  : 4_3">14.4.3	Changing Sound Frequency: 4_3">14.4.3	Changing Sound Frequency: 
<h1>N</h1>
NaN  : 5">10.5  Engineering Example - Processing Geopolitical Data: 1_3">15.1.3	Extrapolation: 1_3">15.1.3	Extrapolation: 2_3">17.2.3 Priority Queues: 
nargin(...) : ">3.3.5	Variable Numbers of Parameters: 
nargout(...) : ">3.3.5	Variable Numbers of Parameters: 
Newton’s method  : 6_3">9.6.3 Zeros of a Function: 
nodes, graphs  : Chapter Overview: >Introduction: 4_1">17.4.1 Graph Examples: 
numbers : Chapter Overview: 2_1">1.2.1 Babbage's Difference Engine: ">2.2.2 Assigning Values to Variables: ">2.2.3 Data Typing: >2.5 Engineering Example - Spacecraft Launch: 
 -  to strings  : ">2.2.3 Data Typing: ">2.3.3 Workspace Window: >Chapter Objectives: >Chapter Objectives: >Introduction: 
 -  from strings to  : ">2.3.3 Workspace Window: 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: 3_2">8.3.2 Spreadsheets: 
numerical indexing  : 2_3">4.2.3   Indexing a Vector: 
numerical methods  : 
 -  analytical operations  : 
 -  curve fitting  : Chapter Overview: "14_6_2">14.6.2 Notes fading with time: 2">15.2 Curve Fitting: 2_3">15.2.3 Practical Application: >Chapter Summary: 
 -  differentiation  : Chapter Overview: >Chapter Objectives: 4_1">15.4.1	Difference Expressions: 6">15.6  Implementation: 
 -  integration  : Chapter Overview: >Chapter Objectives: 3_1">15.3.1 Determination of the Complete Integral: 3_2">15.3.2 Continuous Integration Problems: 3_2">15.3.2 Continuous Integration Problems: 
 -  interpolation  : Chapter Overview: >Introduction: 1">15.1  Interpolation: 1">15.1  Interpolation: 1_1">15.1.1 Linear Interpolation: 
num2str(...) : 3_1">6.3.1 Conversion from Numbers to Strings: 
<h1>O</h1>
object-oriented programming  OOP: ">2.1.3 Programming Paradigms: 
objects  : Chapter Overview: 3_2">1.3.2 Software Tools: >2.1 Programming Language Background: >Introduction: 1">7.1	Concept: Collecting Dissimilar Objects: 
ones(...) : 2">1.2 History of Computer Architectures: 2_1">4.2.1  Creating a Vector: 4_2">4.4.2  Creating an Array: 3_2">7.3.2	Constructor Functions: 3_2">7.3.2	Constructor Functions: 
operating systems  OS: 3">1.3 Modern Computer Software: 3_1">1.3.1 Operating Systems: 3_1">1.3.1 Operating Systems: 3_1">1.3.1 Operating Systems: >Chapter Summary: 
operation : Chapter Overview: Chapter Overview: Chapter Overview: Paths through the Book: 2_1">1.2.1 Babbage's Difference Engine: 
 -  analytical  : 7">9.7 Engineering Example—Robot Arm Motion: 3">15.3 Numerical Integration: 5">15.5 Analytical Operations: 5_1">15.5.1	Analytical  Integration: 
 -  on arrays  : Paths through the Book: Introduction: >Chapter Objectives: >Chapter Objectives: 1">4.1  Concept: Data Collections: 
 -  character string  : ">2.2.3 Data Typing: >Chapter Objectives: >Chapter Objectives: >Chapter Objectives: >Chapter Objectives: 
 -  frequency domain  : >Chapter Objectives: >Chapter Objectives: 4">14.4	Time Domain Operations: 5_2">14.5.2	Implementation: 5_3">14.5.3	Simple Spectral Analysis: 
 -  on graphs  : 3_2">1.3.2 Software Tools: 3_2">1.3.2 Software Tools: ">2.3.6 Figure Window: 4">7.4 Structure Arrays: 5_1">14.5.1 Background: 
 -  on queues  : >Chapter Objectives: >Introduction: 2_3">17.2.3 Priority Queues: 6_3">17.6.3	Dijkstra’s Algorithm: >Chapter Summary: 
 -  summary of  : Chapter Overview: 3_7">10.3.7	Folding a Collection: 
 -  on vectors  : ">3.3.6	Returning Multiple Results: 1">4.1  Concept: Data Collections: 2">4.2   Vectors: 2_1">4.2.1  Creating a Vector: 2_1">4.2.1  Creating a Vector: 
operations on collections  : Chapter Overview: >Chapter Objectives: 4">4.4  Arrays: >Introduction: 1">7.1	Concept: Collecting Dissimilar Objects: 
 -  building  : 2_1">1.2.1 Babbage's Difference Engine: ">2.3.2 Command History: >Introduction: 6">7.6 Engineering Example: Assembling a Physical Structure: 3_4">10.3.4	Building a Collection: 
 -  filtering  : 3_6">10.3.6	Filtering a Collection: 3_6">10.3.6	Filtering a Collection: 3_8">10.3.8	Searching a Collection: 4">10.4 Solving Larger Problems: 
 -  inserting  : ">2.4.6 Debugging Scripts: 3_1">6.3.1 Conversion from Numbers to Strings: 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: >Chapter Summary: >Introduction: 
 -  mapping  : 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 
 -  searching  : 3_8">10.3.8	Searching a Collection: 3_8">10.3.8	Searching a Collection: 4">10.4 Solving Larger Problems: 2_2">12.2.2	Matrix Division: 1_1">16.1.1	Specific Big O Examples: 
 -  sorting  : 4_3">1.4.3 Problem-Solving Skills: 3_9">10.3.9	Sorting a Collection: 3_9">10.3.9	Sorting a Collection: 4">10.4 Solving Larger Problems: 6">14.6  Frequency Domain Operations: 
 -  summarizing  : 3">10.3	Summary of Operations: 3_7">10.3.7	Folding a Collection: 
 -  traversing  : 3">10.3	Summary of Operations: 3_3">10.3.3	Traversing a Collection: 3_3">10.3.3	Traversing a Collection: 3_8">10.3.8	Searching a Collection: 4">17.4 Graphs: 
operators dot  : 2_5">4.2.5  Operating on Vectors: 
 -  field  : 3_2">1.3.2 Software Tools: 2_1">4.2.1  Creating a Vector: >Chapter Objectives: >Introduction: >Introduction: 
 -  logical  : Chapter Overview: Paths through the Book: 3_5">1.3.5 Running an Interpreted Program: 4_3">1.4.3 Problem-Solving Skills: 4_3">1.4.3 Problem-Solving Skills: 
 -  precedence  : 2_5">4.2.5  Operating on Vectors: 
OR : 3_3">1.3.3 Programming Languages: Introduction: ">2.1.3 Programming Paradigms: ">2.2.3 Data Typing: 2">4.2   Vectors: 
 -  element-wise  : 2_5">4.2.5  Operating on Vectors: 
 -  short-circuit  : 3_3">5.3.3	Important Ideas: 3_3">5.3.3	Important Ideas: 
<h1>P</h1>
palindromes  : 6">9.6 Examples of Recursion: 6_1">9.6.1	Detecting Palindromes: 
parabolic dish  : 
paradigms  : Chapter Objectives: >2.1 Programming Language Background: ">2.1.3 Programming Paradigms: ">2.1.3 Programming Paradigms: 
parameters : >3.2	Black Box View of a Function: >3.2	Black Box View of a Function: ">3.3.1	General Template: ">3.3.2	Function Definition: ">3.3.3	Storing and Using Functions: 
 -  cell arrays of  : >Introduction: 2">7.2	Cell Arrays: 2">7.2	Cell Arrays: 2_2">7.2.2	Accessing Cell Arrays: 2_2">7.2.2	Accessing Cell Arrays: 
 -  formal vs. actual  : 
 -  value  : 2_1">1.2.1 Babbage's Difference Engine: 2_3">1.2.3 The von Neumann Architecture: 3_4">1.3.4 Running a Computer Program: h3>Fill in the Blanks: Chapter Objectives: 
 -  variable numbers of  : ">2.2.2 Assigning Values to Variables: ">2.2.3 Data Typing: 4_2">7.4.2	Accessing Structure Elements: 
parametric plots : >Chapter Objectives: >Chapter Objectives: 3_2">11.3.2	Linear Parametric 3-D Plots: >Chapter Summary: >Chapter Summary: 
 -  2-D  : 4_1">4.4.1  Properties of an Array: 4_5">4.4.5  Operating on Arrays: >Chapter Objectives: >Chapter Objectives: 1_2">11.1.2	Simple Functions for Enhancing Plots: 
 -  3-D  : >Chapter Objectives: >Chapter Objectives: 1_2">11.1.2	Simple Functions for Enhancing Plots: 2_4">11.2.4	Other 2-D Plot Capabilities: 3">11.3 3-D Plotting: 
 -  passing by reference  : ">3.3.4	Calling Functions: 
  & passing by value  : 
paths  on graphs: 6_2">11.6.2	Displaying the Data: 4_2">17.4.2	Processing Graphs: 6_1">17.6.1	Depth-First Search (DFS): 6_3">17.6.3	Dijkstra’s Algorithm: 6_3">17.6.3	Dijkstra’s Algorithm: 
 -  greedy algorithm  : 6_4">17.6.4	An Approximation Algorithm: 6_5">17.6.5	Serious Path Finding Algorithms: 6_5">17.6.5	Serious Path Finding Algorithms: 7_1">17.7.1	Simple Applications: >Chapter Summary: 
 -  Breadth-First Search  : 6_1">17.6.1	Depth-First Search (DFS): 6_1">17.6.1	Depth-First Search (DFS): 6_2">17.6.2	Breadth-First Search (BFS): 6_2">17.6.2	Breadth-First Search (BFS): 
 -  Depth-First Search  : 6">17.6 Finding Paths through a Graph: 6">17.6 Finding Paths through a Graph: 6_1">17.6.1	Depth-First Search (DFS): 
 -  Dijkstra’s algorithm  : >Chapter Summary: 
pause(...) : 
peek(...) : 1_1">17.1.1	The Nature of a Stack: 1_2">17.1.2	Implementing Stacks: 2_1">17.2.1	The Nature of a Queue: 2_2">17.2.2	Implementing Queues: 
percent %: ">2.4.2 Creating Scripts: 
pie(...) : 3_1">1.3.1 Operating Systems: ">2.1.2 Algorithms: ">2.3.3 Workspace Window: ">3.3.4	Calling Functions: ">3.3.8	Encapsulation in MATLAB Functions: 
pie3(...) : 3_3">11.3.3	Other 3-D Plot Capabilities: 3_3">11.3.3	Other 3-D Plot Capabilities: 
pixels  : 1">13.1  Nature of an Image: 1">13.1  Nature of an Image: 4_2">13.4.2	Color Masking: 4_2">13.4.2	Color Masking: 5">13.5  Engineering Example - Detecting Edges: 
plaid surface  : 4">11.4 Surface Plots: 4_2">11.4.2	Simple Exercises: 4_5">11.4.5	Other 3-D Surface Plot Capabilities: >Chapter Summary: >Chapter Summary: 
playback  : 2">14.2	Recording and Playback: 2">14.2	Recording and Playback: 3">14.3	Implementation: 4">14.4	Time Domain Operations: 4_1">14.4.1 Slicing and Concatenating Sound: 
plot(...) : Chapter Overview: Paths through the Book: 3_2">1.3.2 Software Tools: ">2.3.6 Figure Window: Chapter Objectives: 
plot3(...) : 3_1">11.3.1 Linear 3-D Plots: >Chapter Summary: 
plots  : >Chapter Objectives: >Chapter Objectives: >Chapter Objectives: >Chapter Objectives: >Chapter Objectives: 
 -  data, manipulation of  : >Introduction: 
 -  enhancement tools  : 2_2">11.2.2	Plot Options: 
 -  figures as containers for  : 
 -  manually editing  : 
 -  subplots  : 1">11.1  Plotting in General: 
 -  surface  : >Chapter Objectives: >Chapter Objectives: 1_2">11.1.2	Simple Functions for Enhancing Plots: 2_3">11.2.3	Parametric Plots: 4">11.4 Surface Plots: 
plotyy(...) : 2_2">11.2.2	Plot Options: 
polar(...) : 2_4">11.2.4	Other 2-D Plot Capabilities: 4_4">11.4.4	Bodies of Rotation: 4_4">11.4.4	Bodies of Rotation: 4_4">11.4.4	Bodies of Rotation: 
polyfit(...) : 2_2">15.2.2	Polynomial Regression: 2_2">15.2.2	Polynomial Regression: 2_2">15.2.2	Polynomial Regression: 5">16.5	Engineering Example - A Selection of Countries: 
polynomial regression  : 2_2">15.2.2	Polynomial Regression: 
polyval(...) : 2_2">15.2.2	Polynomial Regression: 2_2">15.2.2	Polynomial Regression: 2_2">15.2.2	Polynomial Regression: 
Prim’s  : 5">17.5 Minimum Spanning Trees: >Chapter Summary: 
priority queues  : >Chapter Objectives: >Introduction: 2_3">17.2.3 Priority Queues: 6_3">17.6.3	Dijkstra’s Algorithm: >Chapter Summary: 
problem-solving  : 4">1.4 Anticipated Outcomes: >Introduction: 
procedural abstraction  : Chapter Overview: Chapter Objectives: ">2.1.1 Abstraction: >3.1	Concepts: Abstraction and Encapsulation: 1">12.1	Concept: Behavioral Abstraction: 
procedural programming  : ">2.1.3 Programming Paradigms: 
program bugs  : 3_4">1.3.4 Running a Computer Program: 
programming  : Preface: 2. The overall philosophy: 1. Solutions to selected Programming Projects: 2. Source code for all MATLAB listings: 3. Lecture slides: 
programming languages  : Preface: 1">1.1 Background: 3_3">1.3.3 Programming Languages: 3_3">1.3.3 Programming Languages: 3_3">1.3.3 Programming Languages: 
<h1>Q</h1>
queue  : >Chapter Objectives: >Introduction: 1_1">17.1.1	The Nature of a Stack: 2">17.2  Queues: 2_1">17.2.1	The Nature of a Queue: 
 -  implementation  : 1. Pedagogical Style: 2. The overall philosophy: 3. Graphical illustrations: 1. Solutions to selected Programming Projects: 2">1.2 History of Computer Architectures: 
 -  nature of  : 1">1.1 Background: 3_2">1.3.2 Software Tools: 3_3">1.3.3 Programming Languages: 3_3">1.3.3 Programming Languages: ">2.2.1 Starting and Stopping MATLAB: 
 -  operations on  : Chapter Overview: Paths through the Book: 2_1">1.2.1 Babbage's Difference Engine: ">2.1.3 Programming Paradigms: ">2.2.3 Data Typing: 
 -  overview  : Chapter Overview: >Chapter Objectives: >Chapter Summary: >Chapter Objectives: 
 -  priority  : >Chapter Objectives: >Introduction: 2_3">17.2.3 Priority Queues: 2_3">17.2.3 Priority Queues: 3">17.3 Testing Stacks and Queues: 
 -  testing  : ">3.3.2	Function Definition: 7_1">5.7.1 General while Template: 4_1">9.4.1	Historical Approaches: 2_2">16.2.2 Bubble Sort: 
quick sort  : 2_3">16.2.3	Quick Sort: 2_3">16.2.3	Quick Sort: 2_3">16.2.3	Quick Sort: 3">16.3 Performance Analysis: 3">16.3 Performance Analysis: 
<h1>R</h1>
radix sort  : 2_5">16.2.5	Radix Sort: 4_6">16.4.6	Radix Sort: 
 rand(...) : 3_3">1.3.3 Programming Languages: ">2.1.2 Algorithms: 2_1">4.2.1  Creating a Vector: 4_2">4.4.2  Creating an Array: 4_2">4.4.2  Creating an Array: 
randn(...) : 2_1">4.2.1  Creating a Vector: 4_2">4.4.2  Creating an Array: 6">6.6 Engineering Example - Encryption: 
read(...) : 2. Source code for all MATLAB listings: 3. Lecture slides: Chapter Overview: Paths through the Book: 3_2">1.3.2 Software Tools: 
readcell(...) : 3">8.3 High-Level I/O Functions: 3">8.3 High-Level I/O Functions: 3">8.3 High-Level I/O Functions: 3_2">8.3.2 Spreadsheets: 3_3">8.3.3	Delimited Text Files: 
readStruct(...) : 5">8.5	Engineering Example &mdash; Spreadsheet Data: 
recording  : 2">14.2	Recording and Playback: 2">14.2	Recording and Playback: 2">14.2	Recording and Playback: 2">14.2	Recording and Playback: 2">14.2	Recording and Playback: 
recursion  : ">2.1.3 Programming Paradigms: >Chapter Objectives: >Chapter Objectives: >Introduction: 2">9.2	Recursion Defined: 
 -  activation stack  : 1">9.1  Concept: The Activation Stack: 1_2">9.1.2	Activation Stack: 1_2">9.1.2	Activation Stack: 1_3">9.1.3 Function Instances: 2">9.2	Recursion Defined: 
 -  defined  : 3_3">1.3.3 Programming Languages: 3_4">1.3.4 Running a Computer Program: ">2.1.2 Algorithms: ">2.2.3 Data Typing: ">2.2.4 Classes and Objects: 
 -  endless  : 7_1">5.7.1 General while Template: 2">9.2	Recursion Defined: 
 -  examples  : 1. Pedagogical Style: Acknowledgments: >3.1	Concepts: Abstraction and Encapsulation: 3_3">5.3.3	Important Ideas: 7_3">5.7.3	Loop-and-a-Half Implementation: 
 -  implementation  : 1. Pedagogical Style: 2. The overall philosophy: 3. Graphical illustrations: 1. Solutions to selected Programming Projects: 2">1.2 History of Computer Architectures: 
reshape(...) : 4_5">4.4.5  Operating on Arrays: 4_2">12.4.2	3-D Rotation: 5_1">14.5.1 Background: 
resolution  : 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: 1">13.1  Nature of an Image: 1">13.1  Nature of an Image: 2_3">13.2.3	Color Mapped Images: 4_4">13.4.4 Images on a Surface: 
 -  image  : Text Books Past, Present and Future: 2_1">1.2.1 Babbage's Difference Engine: 2_3">1.2.3 The von Neumann Architecture: 4_3">1.4.3 Problem-Solving Skills: h3>Fill in the Blanks: 
 -  of recorded data  : 5">10.5  Engineering Example - Processing Geopolitical Data: 2">14.2	Recording and Playback: 3">14.3	Implementation: 
RGB  : 1">13.1  Nature of an Image: 2_3">13.2.3	Color Mapped Images: 
rmfield(...) : 3_1">7.3.1	Constructing and Accessing One Structure: 3_1">7.3.1	Constructing and Accessing One Structure: 4_2">7.4.2	Accessing Structure Elements: 4_2">7.4.2	Accessing Structure Elements: 4_3">7.4.3	Manipulating Structures: 
rot90(...) : 
rotations  : >Chapter Summary: 
 -  2-D  : 4_1">4.4.1  Properties of an Array: 4_5">4.4.5  Operating on Arrays: >Chapter Objectives: >Chapter Objectives: 1_2">11.1.2	Simple Functions for Enhancing Plots: 
 -  3-D  : >Chapter Objectives: >Chapter Objectives: 1_2">11.1.2	Simple Functions for Enhancing Plots: 2_4">11.2.4	Other 2-D Plot Capabilities: 3">11.3 3-D Plotting: 
round(...) : Acknowledgments: >Chapter Objectives: >Chapter Objectives: >Chapter Objectives: 1">1.1 Background: 
runtime errors  : 3_4">1.3.4 Running a Computer Program: ">2.2.3 Data Typing: 
<h1>S</h1>
save(...) : 3_1">1.3.1 Operating Systems: 3_2">1.3.2 Software Tools: ">2.3.1 Command Window: ">2.3.4 Current Folder Window: ">2.3.7 Editor Window: 
scalar vectors  : 2_1">4.2.1  Creating a Vector: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 
scale musical  : 4_2">14.4.2	Musical Background: 
scripts  : Chapter Overview: 3_5">1.3.5 Running an Interpreted Program: Chapter Objectives: ">2.3.2 Command History: ">2.3.3 Workspace Window: 
 -  creating  : Acknowledgments: 1">1.1 Background: 1">1.1 Background: >2.4 Scripts: ">2.4.2 Creating Scripts: 
 -  debugging  : 3_4">1.3.4 Running a Computer Program: ">2.4.6 Debugging Scripts: ">3.3.8	Encapsulation in MATLAB Functions: 
 -  example using  : 1. Pedagogical Style: 3_4">1.3.4 Running a Computer Program: 4_3">1.4.3 Problem-Solving Skills: ">2.2.3 Data Typing: ">3.3.9	Global Variables: 
 -  punctuating  : 
 -  running  : ">2.4.6 Debugging Scripts: ">3.3.8	Encapsulation in MATLAB Functions: ">3.3.8	Encapsulation in MATLAB Functions: 6_2">9.6.2	Fibonacci Series: 4_2">12.4.2	3-D Rotation: 
searching  : 3_8">10.3.8	Searching a Collection: 3_8">10.3.8	Searching a Collection: 4">10.4 Solving Larger Problems: 2_2">12.2.2	Matrix Division: 1_1">16.1.1	Specific Big O Examples: 
semicolon  : ">2.4.5 Punctuating Scripts: 4_2">4.4.2  Creating an Array: 
semilogx(...) : 2_2">11.2.2	Plot Options: 
semilogy(...) : 2_2">11.2.2	Plot Options: 
setfield(...) : 4_3">7.4.3	Manipulating Structures: 4_3">7.4.3	Manipulating Structures: 
shading(...) : Chapter Overview: 1_2">11.1.2	Simple Functions for Enhancing Plots: 4_1">11.4.1	Basic Capabilities: 
short-circuit  : 3_3">5.3.3	Important Ideas: 3_3">5.3.3	Important Ideas: 
 -  AND  &&: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 3_1">5.3.1	General Template: 
 -  OR  ||: 3_3">1.3.3 Programming Languages: Introduction: ">2.1.3 Programming Paradigms: ">2.2.3 Data Typing: 2">4.2   Vectors: 
shortening vector  : 
shrinking images  : 4_1">13.4.1	Stretching or Shrinking Images: 4_3">13.4.3	Creating a Kaleidoscope: >Chapter Summary: 
Simpson’s rule  : 
simultaneous linear equations  : 2_2">12.2.2	Matrix Division: 5">12.5 Solving Simultaneous Linear Equations: 5_1">12.5.1 Intersecting Lines: 
size(...) : Text Books Past, Present and Future: Chapter Overview: Acknowledgments: 2">1.2 History of Computer Architectures: ">2.2.3 Data Typing: 
 -  of arrays  : Paths through the Book: Introduction: >Chapter Objectives: >Chapter Objectives: 1">4.1  Concept: Data Collections: 
 -  of character strings  : ">2.2.3 Data Typing: >Chapter Objectives: >Chapter Objectives: >Introduction: 6_1">11.6.1	Analyzing the Data: 
 -  of sounds  : 1">14.1	The Physics of Sound: 3">14.3	Implementation: 6_1">14.6.1 Details of the Spectral Data: 4_7">14.7 Engineering Example—Music Synthesizer: >Chapter Summary: 
 -  of vectors  : ">3.3.6	Returning Multiple Results: 1">4.1  Concept: Data Collections: 2">4.2   Vectors: 2_1">4.2.1  Creating a Vector: 2_1">4.2.1  Creating a Vector: 
sort(...) : 4_3">1.4.3 Problem-Solving Skills: 6_3">5.6.3	Indexing Implementation: 4_3">7.4.3	Manipulating Structures: 4_3">7.4.3	Manipulating Structures: 3_9">10.3.9	Sorting a Collection: 
sorting  : 4_3">1.4.3 Problem-Solving Skills: 3_9">10.3.9	Sorting a Collection: 3_9">10.3.9	Sorting a Collection: 4">10.4 Solving Larger Problems: 6">14.6  Frequency Domain Operations: 
 -  algorithm for  : Chapter Overview: 2_2">1.2.2 Colossus: 3_3">1.3.3 Programming Languages: >2.1 Programming Language Background: ">2.1.2 Algorithms: 
 -  bubble  : 2_2">16.2.2 Bubble Sort: 2_2">16.2.2 Bubble Sort: 3">16.3 Performance Analysis: 3">16.3 Performance Analysis: 4_3">16.4.3	Bubble Sort: 
 -  example using  : 1. Pedagogical Style: 3_4">1.3.4 Running a Computer Program: 4_3">1.4.3 Problem-Solving Skills: ">2.2.3 Data Typing: ">3.3.9	Global Variables: 
 -  insertion  : 3_2">10.3.2	Inserting into a Collection: 3_2">10.3.2	Inserting into a Collection: 3_2">10.3.2	Inserting into a Collection: >Chapter Summary: 2_1">16.2.1 Insertion Sort: 
 -  measuring algorithm cost  : >Introduction: 
 -  merge  : 1_2">16.1.2	Analyzing Complex Algorithms: 1_2">16.1.2	Analyzing Complex Algorithms: 2_4">16.2.4	Merge Sort: 2_4">16.2.4	Merge Sort: 2_4">16.2.4	Merge Sort: 
 -  quick  : Features of the Text that have been Retained: 2_2">1.2.2 Colossus: 3_2">1.3.2 Software Tools: Introduction: Introduction: 
 -  radix  : 2_5">16.2.5	Radix Sort: 4_6">16.4.6	Radix Sort: 
sound(...) : Chapter Overview: >Introduction: >Chapter Objectives: 1">14.1	The Physics of Sound: 1">14.1	The Physics of Sound: 
sound  : Chapter Overview: >Introduction: >Chapter Objectives: 1">14.1	The Physics of Sound: 1">14.1	The Physics of Sound: 
 -  example using  : 1. Pedagogical Style: 3_4">1.3.4 Running a Computer Program: 4_3">1.4.3 Problem-Solving Skills: ">2.2.3 Data Typing: ">3.3.9	Global Variables: 
 -  Fast Fourier Transform  : 4_3">14.4.3	Changing Sound Frequency: 4_3">14.4.3	Changing Sound Frequency: 5">14.5  The Fast Fourier Transform: 5_1">14.5.1 Background: >Chapter Summary: 
 -  frequency domain operations  : 4">14.4	Time Domain Operations: 
 -  intensity  : 2_2">13.2.2	Gray Scale Images: 1">14.1	The Physics of Sound: 
 -  musical  : 4_2">14.4.2	Musical Background: 6">14.6  Frequency Domain Operations: 6_1">14.6.1 Details of the Spectral Data: 7">15.7  Engineering Example - Shaping the Synthesizer Notes: 
 -  physics of  : 3">4.3 Engineering Example - Forces  and  Moments: 2">15.2 Curve Fitting: 
 -  playback  : 2">14.2	Recording and Playback: 2">14.2	Recording and Playback: 3">14.3	Implementation: 4">14.4	Time Domain Operations: 4_1">14.4.1 Slicing and Concatenating Sound: 
 -  recording  : 2">14.2	Recording and Playback: 2">14.2	Recording and Playback: 2">14.2	Recording and Playback: 2">14.2	Recording and Playback: 2">14.2	Recording and Playback: 
 -  concatenating  : 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 4_5">4.4.5  Operating on Arrays: 2_1">7.2.1	Creating Cell Arrays: 2_1">7.2.1	Creating Cell Arrays: 
 -  slicing  : 2_5">4.2.5  Operating on Vectors: 4_5">4.4.5  Operating on Arrays: 2">7.2	Cell Arrays: >Introduction: 4">13.4	Operating on Images: 
sphere  : 8">5.8	Engineering Example - Computing Liquid Levels: 8">5.8	Engineering Example - Computing Liquid Levels: 8">5.8	Engineering Example - Computing Liquid Levels: 4_3">11.4.3	3-D Parametric Surfaces: 4_3">11.4.3	3-D Parametric Surfaces: 
sphere(...) : 8">5.8	Engineering Example - Computing Liquid Levels: 8">5.8	Engineering Example - Computing Liquid Levels: 8">5.8	Engineering Example - Computing Liquid Levels: 4_3">11.4.3	3-D Parametric Surfaces: 4_3">11.4.3	3-D Parametric Surfaces: 
spline(...) : 1">15.1  Interpolation: 1_1">15.1.1 Linear Interpolation: 1_1">15.1.1 Linear Interpolation: 1_2">15.1.2	Cubic Spline Interpolation: 1_2">15.1.2	Cubic Spline Interpolation: 
spreadsheets  : 3_2">1.3.2 Software Tools: 3_1">8.3.1	Exploration: 3_2">8.3.2 Spreadsheets: 3_2">8.3.2 Spreadsheets: 5">8.5	Engineering Example &mdash; Spreadsheet Data: 
sprintf(...) : 3_1">6.3.1 Conversion from Numbers to Strings: 3_1">6.3.1 Conversion from Numbers to Strings: 3_1">6.3.1 Conversion from Numbers to Strings: 3_1">6.3.1 Conversion from Numbers to Strings: 3_1">6.3.1 Conversion from Numbers to Strings: 
square array  : 4_2">4.4.2  Creating an Array: 4_2">11.4.2	Simple Exercises: 2_1">12.2.1	Matrix Multiplication: 4_3">13.4.3	Creating a Kaleidoscope: 5">13.5  Engineering Example - Detecting Edges: 
sscanf(...) : 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: 4_2">8.4.2	Reading Text Files: 
stack  : 4_3">1.4.3 Problem-Solving Skills: 4_3">1.4.3 Problem-Solving Skills: 4_3">1.4.3 Problem-Solving Skills: 4_3">1.4.3 Problem-Solving Skills: 4_3">1.4.3 Problem-Solving Skills: 
strcmp(...) : 4_3">6.4.3 Comparing Strings: 
strcmpi(...) : 
stretching images  : 4_1">13.4.1	Stretching or Shrinking Images: 4_3">13.4.3	Creating a Kaleidoscope: >Chapter Summary: 
strings : ">2.2.3 Data Typing: ">2.3.3 Workspace Window: 4_1">5.4.1	General Template: >Chapter Objectives: >Chapter Objectives: 
 -  conversion from numbers to  : >2.5 Engineering Example - Spacecraft Launch: 
structure arrays  : >Chapter Objectives: >Introduction: 3">7.3 Structures: 3_2">7.3.2	Constructor Functions: 4">7.4 Structure Arrays: 
 -  constructing  : 3_2">7.3.2	Constructor Functions: 4_2">9.4.2	Generic Exception Implementation: 4_6">11.4.6	Assembling Compound Surfaces: 4_1">14.4.1 Slicing and Concatenating Sound: 
 -  acessing elements  : 
 -  inserting data into  : 3_4">10.3.4	Building a Collection: 
 -  manipulation  : Paths through the Book: >2.2 Basic Data Manipulation: 4_5">4.4.5  Operating on Arrays: >Chapter Objectives: 7">9.7 Engineering Example—Robot Arm Motion: 
 -  functions  : Chapter Overview: Paths through the Book: 2_1">1.2.1 Babbage's Difference Engine: 3_1">1.3.1 Operating Systems: 3_3">1.3.3 Programming Languages: 
subplot(...) : 1">11.1  Plotting in General: 1_3">11.1.3	Multiple Plots on One Figure - Subplots: 4_4">11.4.4	Bodies of Rotation: 
sum(...) : Chapter Overview: 3_4">1.3.4 Running a Computer Program: 4_3">1.4.3 Problem-Solving Skills: ">2.1.3 Programming Paradigms: ">2.2.2 Assigning Values to Variables: 
surf(...) : >Chapter Objectives: >Chapter Objectives: 1_2">11.1.2	Simple Functions for Enhancing Plots: 2_3">11.2.3	Parametric Plots: 4">11.4 Surface Plots: 
surface : >Chapter Objectives: >Chapter Objectives: 1_2">11.1.2	Simple Functions for Enhancing Plots: 2_3">11.2.3	Parametric Plots: 4">11.4 Surface Plots: 
 -  images on  : Text Books Past, Present and Future: Introduction: 4">11.4 Surface Plots: >Chapter Objectives: >Chapter Objectives: 
 -  plots  : >Chapter Objectives: >Chapter Objectives: >Chapter Objectives: >Chapter Objectives: >Chapter Objectives: 
 -  3-D parametric  : >Chapter Objectives: 3_2">11.3.2	Linear Parametric 3-D Plots: >Chapter Summary: 
 -  bodies of rotation  : 4_4">11.4.4	Bodies of Rotation: 
 -  compound surfacesf  : 
 -  cube  : 4_2">11.4.2	Simple Exercises: 4_2">11.4.2	Simple Exercises: 4_2">11.4.2	Simple Exercises: 4_2">11.4.2	Simple Exercises: 4_2">12.4.2	3-D Rotation: 
 -  manipulation of  : Paths through the Book: >Chapter Objectives: >Introduction: 4">13.4	Operating on Images: 4_2">13.4.2	Color Masking: 
 -  parabolic dish  : 
surfc(...) : 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 
surfz(...) : 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 
switch statement  : 2">5.2	Conditional Execution in General: 3_1">5.3.1	General Template: 4">5.4 switch Statements: 4_1">5.4.1	General Template: 4_1">5.4.1	General Template: 
 -  template for  : 3. Graphical illustrations: >3.3  MATLAB Implementation: 2_5">4.2.5  Operating on Vectors: 4_5">4.4.5  Operating on Arrays: 3">5.3  if Statements: 
<h1>T</h1>
text files  : Text Books Past, Present and Future: 3_2">1.3.2 Software Tools: ">2.3.7 Editor Window: ">2.4.1 Text Files: ">2.4.2 Creating Scripts: 
 -  delimited  : 3_1">8.3.1	Exploration: 3_3">8.3.3	Delimited Text Files: >Chapter Summary: 6_1">11.6.1	Analyzing the Data: 
 -  reading  : ">2.1.1 Abstraction: 1_1">4.1.1  Data Abstraction: 2_4">4.2.4  Shortening a Vector: >Chapter Objectives: >Introduction: 
 -  writing  : Preface: Preface: Text Books Past, Present and Future: Features of the Text that have been Retained: Paths through the Book: 
textscan(...) : 4_2">8.4.2	Reading Text Files: 
title(...) : 2_1">1.2.1 Babbage's Difference Engine: 2_3">1.2.3 The von Neumann Architecture: 4_3">1.4.3 Problem-Solving Skills: ">2.1.2 Algorithms: ">2.2.3 Data Typing: 
token  : 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: 
toString(...) : 
trapezoidal rule  : 3_1">15.3.1 Determination of the Complete Integral: 
text files  : Text Books Past, Present and Future: 3_2">1.3.2 Software Tools: ">2.3.7 Editor Window: ">2.4.1 Text Files: ">2.4.2 Creating Scripts: 
 -  delimited  : 3_1">8.3.1	Exploration: 3_3">8.3.3	Delimited Text Files: >Chapter Summary: 6_1">11.6.1	Analyzing the Data: 
 -  reading  : ">2.1.1 Abstraction: 1_1">4.1.1  Data Abstraction: 2_4">4.2.4  Shortening a Vector: >Chapter Objectives: >Introduction: 
 -  writing  : Preface: Preface: Text Books Past, Present and Future: Features of the Text that have been Retained: Paths through the Book: 
text(...) : Preface: Text Books Past, Present and Future: Text Books Past, Present and Future: Important Attributes that survive the Transition: 1. Pedagogical Style: 
textscan(...) : 4_2">8.4.2	Reading Text Files: 
title(...) : 2_1">1.2.1 Babbage's Difference Engine: 2_3">1.2.3 The von Neumann Architecture: 4_3">1.4.3 Problem-Solving Skills: ">2.1.2 Algorithms: ">2.2.3 Data Typing: 
token  : 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting: 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: 3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff: 
toString(...) : 
trapezoidal rule  : 3_1">15.3.1 Determination of the Complete Integral: 
tril(...) : 
type, data  : 3_4">1.3.4 Running a Computer Program: >2.2 Basic Data Manipulation: ">2.2.3 Data Typing: ">2.2.3 Data Typing: ">2.2.3 Data Typing: 
typographical errors  : 3_5">1.3.5 Running an Interpreted Program: 3_2">7.3.2	Constructor Functions: 
<h1>U</h1>
uint8/16(...) : 
unary minus  : 2_5">4.2.5  Operating on Vectors: 
unary not  ~: 2_5">4.2.5  Operating on Vectors: 
underscore character  : ">2.2.2 Assigning Values to Variables: ">2.2.3 Data Typing: 
utilities, operating systems  : 3_1">1.3.1 Operating Systems: 3_1">1.3.1 Operating Systems: 
<h1>V</h1>
value parameters  : ">3.3.4	Calling Functions: ">3.3.4	Calling Functions: ">3.3.4	Calling Functions: ">3.3.4	Calling Functions: ">3.3.5	Variable Numbers of Parameters: 
value s: 2_1">1.2.1 Babbage's Difference Engine: 2_3">1.2.3 The von Neumann Architecture: 3_4">1.3.4 Running a Computer Program: h3>Fill in the Blanks: Chapter Objectives: 
 -  assigning, to variables  : >2.1 Programming Language Background: >2.2 Basic Data Manipulation: ">2.2.2 Assigning Values to Variables: 
 -  boolean/logical  : 
 -  parameters  : >3.2	Black Box View of a Function: >3.2	Black Box View of a Function: ">3.3.1	General Template: ">3.3.2	Function Definition: ">3.3.3	Storing and Using Functions: 
Variable Editor window  : ">2.3.5 Variable Editor: 
variable  : Chapter Overview: 3_4">1.3.4 Running a Computer Program: Chapter Objectives: Chapter Objectives: >2.1 Programming Language Background: 
 -  assigning values to  : >2.1 Programming Language Background: >2.2 Basic Data Manipulation: ">2.2.2 Assigning Values to Variables: ">2.2.2 Assigning Values to Variables: 2_1">7.2.1	Creating Cell Arrays: 
 -  global  : ">3.3.4	Calling Functions: ">3.3.9	Global Variables: ">3.3.9	Global Variables: ">3.3.9	Global Variables: Chapter Summary: 
 -  names  : 4_3">1.4.3 Problem-Solving Skills: 4_3">1.4.3 Problem-Solving Skills: 4_3">1.4.3 Problem-Solving Skills: h3>Fill in the Blanks: ">2.2.2 Assigning Values to Variables: 
 -  scoping  : ">3.3.8	Encapsulation in MATLAB Functions: ">3.3.8	Encapsulation in MATLAB Functions: 
vector s: Chapter Overview: >3.1	Concepts: Abstraction and Encapsulation: ">3.3.6	Returning Multiple Results: ">3.3.6	Returning Multiple Results: 1">4.1  Concept: Data Collections: 
 -  arithmetic operations with  : >Chapter Objectives: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 
 -  concatenation of  : 2_5">4.2.5  Operating on Vectors: 4_5">4.4.5  Operating on Arrays: 4_5">4.4.5  Operating on Arrays: >Chapter Summary: 2">7.2	Cell Arrays: 
 -  creating  : Acknowledgments: 1">1.1 Background: 1">1.1 Background: >2.4 Scripts: ">2.4.2 Creating Scripts: 
 -  elements  : >Chapter Objectives: 2">4.2   Vectors: 2_2">4.2.2  Size of a Vector: 2_3">4.2.3   Indexing a Vector: 2_4">4.2.4  Shortening a Vector: 
 -  extracting/sorting  : 
 -  indexing of  : 2_3">4.2.3   Indexing a Vector: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 
 -  inserting data into  : 3_4">10.3.4	Building a Collection: 
 -  logical operations with  : >Chapter Objectives: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 
 -  operating on  : 3">1.3 Modern Computer Software: 3_1">1.3.1 Operating Systems: 3_1">1.3.1 Operating Systems: 3_1">1.3.1 Operating Systems: 3_1">1.3.1 Operating Systems: 
 -  scalar  : 2_1">4.2.1  Creating a Vector: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 
 -  shortening  : 
 -  size of  : Text Books Past, Present and Future: Acknowledgments: 2">1.2 History of Computer Architectures: ">2.2.3 Data Typing: ">2.3.3 Workspace Window: 
 -  slicing  : 2_5">4.2.5  Operating on Vectors: 4_5">4.4.5  Operating on Arrays: 2">7.2	Cell Arrays: >Introduction: 4">13.4	Operating on Images: 
vectors of indices  : 2">4.2   Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 2_5">4.2.5  Operating on Vectors: 
view(...) : Chapter Overview: Chapter Overview: Paths through the Book: >Chapter Objectives: 2">1.2 History of Computer Architectures: 
von Neumann architecture  : 2">1.2 History of Computer Architectures: 2_3">1.2.3 The von Neumann Architecture: 
<h1>W</h1>
waterfall(...) : 4_5">11.4.5	Other 3-D Surface Plot Capabilities: 
wav files  : 3">14.3	Implementation: 4_2">14.4.2	Musical Background: 
wavread(...) : 
wavwrite(...) : 
weak typing  : ">2.2.3 Data Typing: 
weighted graph  : 4">17.4 Graphs: 4_1">17.4.1 Graph Examples: 
while loop  : 5">5.5	Iteration in General: 5">5.5	Iteration in General: 7">5.7 while Loops: 7_1">5.7.1 General while Template: 7_1">5.7.1 General while Template: 
 -  breaking  : 2_2">1.2.2 Colossus: 6">6.6 Engineering Example - Encryption: 1_2">16.1.2	Analyzing Complex Algorithms: 
 -  example  : 1. Pedagogical Style: Paths through the Book: Acknowledgments: 1">1.1 Background: 2_1">1.2.1 Babbage's Difference Engine: 
 -  loop-and-a-half  : 7_3">5.7.3	Loop-and-a-Half Implementation: 
 -  for loop vs. : 
 -  MATLAB implementation  : 1. Pedagogical Style: 2. The overall philosophy: 3. Graphical illustrations: 4_2">1.4.2 Learning Programming Concepts: ">2.2.1 Starting and Stopping MATLAB: 
 -  structure of  : 6_2">5.6.2	MATLAB Implementation: >Chapter Objectives: >Introduction: >Introduction: >Introduction: 
 -  template for  : 3. Graphical illustrations: >3.3  MATLAB Implementation: 2_5">4.2.5  Operating on Vectors: 4_5">4.4.5  Operating on Arrays: 3">5.3  if Statements: 
who command  : 
whos command  : 
windows  : 2. Source code for all MATLAB listings: Introduction: ">2.2.1 Starting and Stopping MATLAB: >2.3 MATLAB User Interface</a>: >2.3 MATLAB User Interface</a>: 
 -  Command History window : ">2.3.2 Command History: Chapter Summary: 
 -  Command window  : ">2.2.1 Starting and Stopping MATLAB: >2.3 MATLAB User Interface</a>: ">2.3.1 Command Window: ">2.3.2 Command History: ">2.3.3 Workspace Window: 
 -  Current Directory window : ">2.3.7 Editor Window: ">2.4.3 The Current Directory: Chapter Summary: 
 -  Editor window  : ">2.3.1 Command Window: ">2.3.5 Variable Editor: ">2.3.7 Editor Window: ">2.4.1 Text Files: ">2.4.3 The Current Directory: 
 -  Figure window  : ">2.3.1 Command Window: ">2.3.3 Workspace Window: ">2.3.6 Figure Window: Chapter Summary: >Introduction: 
 -  Variable Editor window  : ">2.3.5 Variable Editor: 
 -  Workspace window  : ">2.3.3 Workspace Window: ">2.3.4 Current Folder Window: ">2.3.5 Variable Editor: ">2.4.6 Debugging Scripts: Chapter Summary: 
workspace, saving  : Chapter Overview: 1">8.1 Concept: Serial Input and Output (I/O): 
Workspace window  : ">2.3.3 Workspace Window: ">2.3.4 Current Folder Window: ">2.3.5 Variable Editor: ">2.4.6 Debugging Scripts: Chapter Summary: 
wrapper function  : >3.1	Concepts: Abstraction and Encapsulation: >Chapter Objectives: >Introduction: 5">9.5 Wrapper Functions: 5">9.5 Wrapper Functions: 
 -  template for  : 3. Graphical illustrations: >3.3  MATLAB Implementation: 2_5">4.2.5  Operating on Vectors: 4_5">4.4.5  Operating on Arrays: 3">5.3  if Statements: 
writecell(...) : 3">8.3 High-Level I/O Functions: 3">8.3 High-Level I/O Functions: 3">8.3 High-Level I/O Functions: 3_2">8.3.2 Spreadsheets: 3_3">8.3.3	Delimited Text Files: 
<h1>X</h1>
xlabel(...) : 1_2">11.1.2	Simple Functions for Enhancing Plots: 
xlsread(...) : 5">10.5  Engineering Example - Processing Geopolitical Data: 
xlswrite(...) : 
<h1>Y</h1>
ylabel(...) : 1_2">11.1.2	Simple Functions for Enhancing Plots: 
<h1>Z</h1>
zeros(...) : 2_1">4.2.1  Creating a Vector: 4_2">4.4.2  Creating an Array: 4_5">4.4.5  Operating on Arrays: 6">9.6 Examples of Recursion: 6_3">9.6.3 Zeros of a Function: 
zlabel(...) : 1_2">11.1.2	Simple Functions for Enhancing Plots: 

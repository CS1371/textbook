<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<head>
    <title>06_Strings</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="styles/styles.css" />
    <script async src="./javascript/index.js"></script>
</head>
<body>
<div>#top_nav#</div>
<div class="nav-obj">#nav_obj#</div>
<div class="content">
  <h1 id="6" align="center">Chapter 6: Strings</h1>

  <!-- Chapter Objectives -->
  <h1>Chapter Objectives</h1>
  <div class="container">
    <p>This chapter discusses the nature, implementation, and behavior of
    character strings<a id="2042"></a> in the MATLAB<a id="2152"></a> language:</p>
    <ul>
      <li>The internal workings of character strings<a id="2043"></a> as vectors</li>
      <li>Operations on character strings<a id="2044"></a></li>
      <li>Converting between numeric and character string representations</li>
      <li>Input and output functions</li>
      <li>The construction and uses for arrays of strings</li>
    </ul>
    <p>To this point in the text<a id="2264"></a>, we have seen the use of character strings<a id="2045"></a> that we can store in variables and display in the Command window. In reality, we have already seen a significant amount of character manipulation that we have taken for granted. The m-files we use to store scripts<a id="2251"></a> and functions contain lines of legible characters separated by an invisible “new-line” character.</p>
  </div>

  <!-- Introduction -->
  <h1>Introduction</h1>
  <div class="container">
    <p>This chapter presents the underlying concept of character storage and the tools MATLAB<a id="2153"></a> provides for operating<a id="2226"></a> on character strings<a id="2046"></a>. We need to distinguish two different relationships between characters and
    numbers<a id="2185"></a>:</p>
    <ol>
      <li>Individual characters have an internal numerical<a id="2200"></a> representation: the visible character shapes we see in windows<a id="2337"></a> are created as a collection of white and black dots by special software called a character generator. Character generators allow us to take the underlying concept of a character - say, “w” - and “draw” that character on screen or paper in accordance with the rules defined by the current font. A complete study of fonts is beyond the scope of
      this discussion, but we need to understand how computers in general and the
      MATLAB<a id="2154"></a> language in particular represent that “underlying concept” of a character. This is achieved by representing each individual character by its
      numerical<a id="2201"></a> equivalent. Not long ago, there were many different representations.
      Today, the dominant representation is the one defined by the American
      Standard Code for Information Interchange (ASCII). In this representation, the
      most common uppercase and lowercase characters, numbers<a id="2186"></a>, and many
      punctuation marks are represented by numbers<a id="2187"></a> between 0 and 127. A
      complete listing of the first 255 values is included in Appendix B.</li>
      <li>Strings of characters represent numerical<a id="2202"></a> values to the user: numerical<a id="2203"></a> values
      are stored in a special, internal representation for efficient numerical<a id="2204"></a>
      computation as described in Appendix C . However, whenever we need to see
      the value<a id="2284"></a> of that number in the Command window, that internal
      representation is automatically converted by MATLAB<a id="2155"></a> into a character string
      representing its value<a id="2285"></a> in a form we can read. For example, if the variable<a id="2317"></a> a
      contained the integer value<a id="2286"></a> 124, internally that number could be stored in a
      single byte (8 bits) with a binary<a id="2024"></a> value<a id="2287"></a> of 011111100—not a very meaningful
      representation, but efficient internally for performing arithmetic<a id="2007"></a> and logical<a id="2138"></a>
      operations<a id="2230"></a>. For the user to understand that value<a id="2288"></a>, internal MATLAB<a id="2156"></a> logic<a id="2137"></a> must
      convert it to the three printable characters: '124' . Similarly, when we type in
      the Command window or use the input(...) function<a id="2081"></a>, the set of characters
      that we enter is automatically translated from a character string into the
      internal number representation.</li>
    </ol>
  </div>

  <div class="chp-section" data-sect-num="1" data-sect-name="Character String Concepts: Mapping, Casting, Tokens, and Delimiting">
    <!-- Character String Concepts -->
    <h2 id="6_1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting</h2>
    <div class="container">
      <p>Here we see the MATLAB<a id="2157"></a> language tools that deal with the first relationship
      between characters and numbers<a id="2188"></a>: the numerical<a id="2205"></a> representation of individual
      characters.</p>
      <p>The basic idea of <b>mapping<a id="2143"></a></b> is that it defines a relationship between two
      entities. The most obvious example of mapping<a id="2144"></a> is the idea that the function<a id="2082"></a><br><br>
      <code>f(x) = 2 &<a id="2244"></a>#215; x</code><br><br>
      defines the mapping<a id="2145"></a> between the value<a id="2289"></a> of <code>x</code> and the value<a id="2290"></a> of <code>f(x)</code> .
      We will apply that concept to the process of translating a character (like
      "A") from its graphical form to a numerical<a id="2206"></a> internal code. Character
      mapping<a id="2146"></a> allows each individual graphic character to be uniquely
      represented by a numerical<a id="2207"></a> value<a id="2291"></a>.</p>
      <p><b>Casting</b> is the process of changing the way a language views a piece of
      data without actually changing the data value<a id="2292"></a>. Under normal circumstances,
      a language like MATLAB<a id="2158"></a> automatically presents a set of data in the "right"
      form. However, there are times when we wish to force the language to
      treat a data item in a specific way. For example, if we create a variable<a id="2318"></a> containing a character string, MATLAB<a id="2159"></a> will consistently display it as a character string. However, we might want to view the underlying
      numerical<a id="2208"></a> representation as a number, in which case<a id="2025"></a> we have to cast the
      variable<a id="2319"></a> containing the characters to a numerical<a id="2209"></a> data type. MATLAB<a id="2160"></a>
      implements casting<a id="2028"></a> as a function<a id="2083"></a> with the name of the data type expected.
      In essence, these functions implement the mapping<a id="2147"></a> from one character
      representation to another. For example:<br><br>
      <code> &gt;&gt; str = 'ABCD'<br>
      str =
      &nbsp;&nbsp;&nbsp;&nbsp; ABCD<br>
      &gt;&gt; double(<a id="2060"></a>str)<br>
      ans =
      &nbsp;&nbsp;&nbsp;&nbsp; 65 66 67 68<br><br>
      </code>In your workspace window, <code>ans</code> will be of type <code>double</code>.</p>
      <p>A <b>token<a id="2274"></a></b> is a collection of characters to which we may wish to attach
      meaning. Obvious examples of tokens are the name of a MATLAB<a id="2161"></a> variable<a id="2320"></a>
      or the characters representing the values of a number to be used in an
      expression.</p>
      <p>A <b>delimiter<a id="2053"></a></b> is a character used to separate tokens. The space character,
      for example, can delimit words in a sentence; punctuation marks provide
      additional delimiters with specific meanings.</p>
    </div>
  </div>

  <div class="chp-section" data-sect-num="2" data-sect-name="MATLAB Implementation">
    <h2 id="6_2">6.2 MATLAB<a id="2162"></a> Implementation</h2>
    <div class="container">
      <p>When you enter a string in the Command window or the editor, MATLAB<a id="2163"></a>
      requires that you delimit the characters of a string with a single quote mark
      ( ' ). Note that you can include a single quote mark within the string by
      doubling the character. For example, if you entered the following in the
      Command window:<br><br>
      <code>>> refusal = 'I can''t do that!'</code><br><br>
      The result displayed would be<br><br>
      <code>refusal = <br>
        &nbsp;&nbsp;&nbsp;&nbsp;I can't do that</code><br><br></p>
      <p>Exercise 6.1 illustrates the concept of casting<a id="2029"></a> between data types <code>char</code> and
      <code>double</code>.</p>
      <div class="exercise">#exercise_6_1#</div>
      <p>In Exercise 6.1:</p>
      <ul>
        <li>the casting<a id="2030"></a> function<a id="2084"></a> <code>uint8(...)</code> takes a character or
        character string and changes its representation to a vector of the same
        length as the original string.</li>
        <li>Then the casting<a id="2031"></a> function<a id="2085"></a> <code>char(<a id="2036"></a>...)</code> takes a
        number or vector and causes it to be presented as a string. </li>
        <li>The casting<a id="2032"></a> function<a id="2086"></a> <code>double(<a id="2061"></a>...)</code> appears to act in the same way as <code>uint8(...)</code>, but it
        actually uses 64 bits to store the values. </li>
        <li>Single quotes delimit a string to be
        assigned to the variable<a id="2321"></a> <code>fred</code>. Notice that when a string is presented as a
        result, the delimiters are omitted.</li>
        <li>When you apply arithmetic<a id="2008"></a> operations<a id="2231"></a> to
        a string, the operation<a id="2228"></a> is illegal on characters; therefore, an implicit casting<a id="2033"></a>
        to the numerical<a id="2210"></a> equivalent occurs.</li>
        <li>You can perform any mathematical operation<a id="2229"></a> on the vector and use the
          cast, <code>char(<a id="2037"></a>...)</code>, to cast it back to a string.</li>
      </ul>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Slicing and Concatenating Strings">
      <!-- Slicing and Concatenating Strings -->
      <h3 id="6_2_1">6.2.1 Slicing and Concatenating Strings</h3>
      <div class="container">
        <p>Strings are internally represented as vectors; therefore, we can perform all
        the usual vector operations<a id="2232"></a> on strings. Try it in Exercise 6.2.</p>
        <div class="exercise">#exercise_6_2#</div>
        <ul>
          <li>First, we set the variable<a id="2322"></a> <code>first</code>.</li>
          <li>Then, the variable<a id="2323"></a> <code>last</code>.</li>
          <li>Then we concatenate the strings with a space separating them.</li>
          <li>Then we display every other character in the name.</li>
          <li>Then we display the letters of name in reverse order.</li>
        </ul>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Arithmetic and Logical Operations">
      <!-- Arithmetic and Logical Operations -->
      <h3 id="6_2_2">6.2.2 Arithmetic and Logical Operations</h3>
      <div class="container">
        <p>Exactly as operating<a id="2227"></a> on vectors, string operations<a id="2233"></a> may be either mathematical or logical<a id="2139"></a> operations<a id="2234"></a>.</p> 
		<p>Mathematical operations<a id="2235"></a> can be performed on the numerical<a id="2211"></a> mapping<a id="2148"></a> of a
        character string. If you do not explicitly perform that casting<a id="2034"></a> first, MATLAB<a id="2164"></a>
        will do the cast for you and create a result of type double (not usually
        suitable for character values). Note that <code>char(<a id="2038"></a>'a' + 1 )</code> returning <code>'b'</code> is an
        accident of the character type mapping<a id="2149"></a>.</p>
        <p>Logical operations<a id="2236"></a> on character strings<a id="2047"></a> are also exactly equivalent to
        logical<a id="2140"></a> operations<a id="2237"></a> on vectors, with the same automatic casting<a id="2035"></a>. Exercise 6.3
        gives you an opportunity to try it yourself.</p>
        <div class="exercise">#exercise_6_3#</div>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="Useful Functions">
      <!-- Userful Functions -->
      <h3 id="6_2_3">6.2.3 Useful Functions</h3>
      <div class="container">
        <p>The following functions are useful in analyzing character strings<a id="2048"></a>:</p>
        <ul>
          <li><code>ischar(<a id="2134"></a>a)</code> returns true if <code>a</code> is a character string</li>
          <li><code>isspace(<a id="2135"></a>ch)</code> returns true if the character <code>ch</code> is the space character</li>
        </ul>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="3" data-sect-name="Format Conversion Functions">
    <!-- Format Conversion Functions -->
    <h2 id="6_3">6.3 Format Conversion Functions</h2>
    <div class="container">
      <p>Now we turn to the second relationship between characters and numbers<a id="2189"></a>:
      using character strings<a id="2049"></a> to represent individual number values. To move seamlessly 
	  between their internal representation and the visual, external representation, we need string conversion. We actually need
      two separate capabilities: converting numbers<a id="2190"></a> from the efficient, internal
      form to legible strings and converting strings provided by users of MATLAB<a id="2165"></a>
      into the internal number representation. MATLAB<a id="2166"></a> provides a number of
      functions that transform data between string format and numerical<a id="2212"></a> format.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Conversion from Numbers to Strings">
      <!-- Conversion from Numbers to Strings -->
      <h3 id="6_3_1">6.3.1 Conversion from Numbers to Strings</h3>
      <div class="container">
        <p>Use the following built-in MATLAB<a id="2167"></a> functions for a simple conversion of a
        single number, <code>x</code>, to its string representation:</p>
        <ul>
          <li><code>int2str(<a id="2133"></a>x)</code> if you want it displayed as an integer value<a id="2293"></a></li>
          <li><code>num2str(<a id="2225"></a>x, n)</code> to see the decimal parts; the parameter <code>n</code> represents
          the number of decimal places required—if not specified, its default
          value<a id="2294"></a> is <code>3</code>.</li>
        </ul>
        <p>Frequently, however,  you need better control over the data conversion, and the
        function<a id="2087"></a> <code><b>sprintf(<a id="2253"></a>...)</b></code> provides fine-grained control. The MATLAB<a id="2168"></a> version
        of <code>sprintf(<a id="2254"></a>...)</code> is very similar to the C/C++ implementation of this
        capability. The first parameter to <code>sprintf</code> is a <b>format control<a id="2072"></a> string</b> that
        defines exactly how the resulting string should be formatted. A variable<a id="2324"></a>
        number of <b>value<a id="2295"></a> parameters</b> follow the format string, providing data items
        as necessary to satisfy the formatting.</p>
        <p>Basically, the format string contains characters to be copied to the
        string returned from <code>sprintf(<a id="2255"></a>...)</code>; however, it also contains two types of functionality introduced by
        the following two special characters:</p>
        <ul>
          <li>The <code>'%'</code> character introduces a conversion specification, indicating
          how one of the value<a id="2296"></a> parameters should be represented. The most
          common conversions are <code>%d</code> (integer), <code>%f</code> (real), <code>%g</code> (general), <code>%c</code>
          (character), and <code>%s</code> (string). A number may be placed immediately
          after the <code>%</code> character to specify the minimum<a id="2182"></a> number of characters
          in the conversion. If more characters than the specified minimum<a id="2183"></a>
          are required to represent the data, they will be added. In addition,
          the <code>%f</code> and <code>%g</code> conversions can include <code>'.n'</code> to indicate the number
          of decimal places required. If you actually want a <code>'%'</code> character, it
          must be doubled, for example, <code>'%%'</code>. MATLAB<a id="2169"></a> processes each of the
          value<a id="2297"></a> parameters in turn, inserting<a id="2131"></a> them in the result string
          according to the corresponding conversion specification. If there are
          more parameters than conversion specifications in the format
          control string, the format control<a id="2073"></a> string is repeated.</li>
          <li id="120">The '\' character introduces format control<a id="2074"></a> information, the most
          common of which are \n (new line) and \t (tab). If the '\' character
          is actually wanted in the result string, it should be doubled, for
          example, '\\'.</li>
        </ul>
        <p>For example, consider the following statements:<br><br>
        <code>&nbsp;&nbsp;&nbsp;&nbsp;A = [4.7 1321454.47 4.8];<br>
        &nbsp;&nbsp;&nbsp;&nbsp;index = 1;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;v = 'values';<br>
        &nbsp;&nbsp;&nbsp;&nbsp;str = sprintf(<a id="2256"></a>'%8s of A(%d) are \t%8.3f\t%12.4g\t%f\n'...<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v, index, A(index,1), A(index,2), A(index,3)) <br>
        &nbsp;&nbsp;&nbsp;&nbsp;str =<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;values of A(1) are 4.700 1.321e+006 4.800000</code></p>
        <p>
        <ul>
          <li>We first prepared the variables <code>A</code>, <code>index</code> and <code>v</code>, and then called for <code>sprintf(<a id="2257"></a>...)</code> to present their values.</li>
          <li>The first conversion, <code>%8s</code>, takes the value<a id="2298"></a> of the first parameter, <code>v</code>, allows
          eight spaces for its conversion, and copied its contents to the resulting string. Since this
          was a string conversion, the characters are merely copied.</li>
          <li>The characters <code>' of A('</code> are then appended to the output string.</li>
          <li>The second conversion, <code>%d</code>, takes the value<a id="2299"></a> of the second parameter, index, and converts it as an
          integer with the minimum<a id="2184"></a> space allocated.</li>
          <li>The characters <code>') are'</code> are then
          appended to the output string, followed by a tab character that inserts enough spaces to bring the next characters to a column that is an even multiple of eight.</li>
          <li>The following three conversions appended the next three
          value<a id="2300"></a> parameters with three decimal places, a general conversion
          with at least 12 spaces and 4 decimal places, and the default numerical<a id="2213"></a>
          conversion.</li>
          <li>Finally, a new line character was inserted into the string.</li>
        </ul>
        <p>We will formalize here the function<a id="2088"></a><br><br>
        <code>fprintf(<a id="2077"></a>&lt;control string&gt;, &lt;parameters&gt;)</code><br><br>
        where the <code>&lt;control string&gt;</code> is the format control<a id="2075"></a> string discussed above, and<br>
        <code>&lt;parameters&gt;</code> is a collection of 0 or more parameters whose values will be presented in each <code>'%'</code> entry in the control string.</p>
        <p>The function<a id="2089"></a> <code>fprintf(<a id="2078"></a>...)</code> works exactly as <code>sprintf(<a id="2258"></a>...)</code> except that instead of returning the resulting string, it writes that string directly to the command window. Notice its use at the bottom of Listing 6.1 below.</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Conversion from Strings to Numbers and Other Stuff">
      <!-- Conversion from Strings to Numbers and Other Stuff -->
      <h3 id="6_3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff</h3>
      <div class="container">
        <p>Conversion from strings to numbers<a id="2191"></a> is much messier. In order to understand the situation, let us emulate some of the Matlab behavior that you have already used, but probably not realized all the underlying complexity.</p>
        <p><b>First Try</b>: Suppose, for example, you have the string: <code>'area = 3.14159265 .* radius .^ 2'</code>. In paragraph 6.1, we mentioned the idea of a token<a id="2275"></a> as a string whose meaning is important and the delimiters that separate tokens. Our first guess might be to assume that <code>'area'</code>, <code>'='</code>, <code>'3.14159265'</code>, <code>'.*',</code> <code>'radius'</code>, <code>'.^'</code> and <code>'2'</code> were the tokens because they carry the meaning of the equation, and the space character is the delimiter<a id="2054"></a>.</p>
        <p>In order to separate this out into its individual tokens, we will repeatedly employ the function<a id="2090"></a> <code>strtok(...)</code>. This function<a id="2091"></a> consumes two inputs and produces two outputs:</p>
        <p><code>[token<a id="2276"></a>, rest] = strtok(str, delims)</code></p>
        <p>where <code>str</code> is the string to process, <br>
        <code>delims</code> is a string of delimiting characters, <br>
        <code>token<a id="2277"></a></code> is the first token<a id="2278"></a> returned, and<br>
        <code>rest</code> is what remains of the string when that token<a id="2279"></a> is removed.</p>
        <p>Look carefully through Listing 6.1 to see how we extract the meaning from the line of code.</p>
        <div class="listing">#listing_06_1#</div>
        <p>When you run this code, you see this in the Command Window<a id="2050"></a>:</p>
        <p><code>
        calculate area by doing .^ with radius and 2, then doing .* with the result and 3.1416<br>
        </code></p>
        <p>Notice that I deliberately changed the numerical<a id="2214"></a> resolution<a id="2250"></a> of <code>pi</code> to only 4 decimal places to assert that we really did convert the string <code>num_1</code> to the <code>double</code> value<a id="2301"></a> <code>n_1</code>.</p>
        <p><b>Second Thought</b>: now, what could possibly go wrong ... oh, wait a sec</p>
        <ul>
          <li>although we have been inserting<a id="2132"></a> spaces in the code for clarity, this line is quite legal: <code>'area=3.14159265.*radius.^2'</code>.  So we have to treat the '<code>=</code>' and even worse, the '<code>.*</code>' and '<code>.^</code>' as delimiters. </li>
          <li>Messier still, the simple parsing in Listing 6.1 had to assume that the first token<a id="2280"></a> was a variable<a id="2325"></a> name, the second was the '=' to make an assignment<a id="2023"></a> etc. We are certainly not intending to delve into the correct way to process this simple line of code.</li>
        </ul>
        <p>I did warn you at the top of this paragraph about messes to come ...</p>
        <p><b>Preferred Approach:</b> When possible, allow MATLAB<a id="2170"></a>’s built-in functions
        <code>str2num</code>, <code>str2double</code> or <code>input(...)</code> to do the work of conversion for you:</p>
        <ul>
          <li>The function<a id="2092"></a> <code>str2num(str)</code> consumes a string representing either a single
          numerical<a id="2215"></a> value<a id="2302"></a> or an arbitrarily complex array<a id="2009"></a> of numbers<a id="2192"></a> and returns the numerical<a id="2216"></a> equivalent.</li>
          <li>The function<a id="2093"></a> <code>str2double(<a id="2062"></a>str)</code> consumes a string representing only a single
          numerical<a id="2217"></a> value<a id="2303"></a> and returns the numerical<a id="2218"></a> equivalent with <code>double</code> precision.</li>
          <li>The function<a id="2094"></a> <code>input(prompt)</code> presents the prompt string to the user in the
          Command window and waits for the user to type some characters and the [Enter] key, all of which are echoed in the Command window. Then it parses the input string in exactly the same manner as if you had typed that string to the command window, according to the following rules:<br>
          <ol>
            <li>If the string begins with a numerical<a id="2219"></a> character, MATLAB<a id="2171"></a> converts
            the string to a number</li>
            <li>If it begins with a non-numeric character, MATLAB<a id="2172"></a> constructs a
            variable<a id="2326"></a> name and looks for its current value<a id="2304"></a></li>
            <li>If you actually want a string literal entered, it must be enclosed in the
            string delimiters.</li>
            <li>If it begins with an open bracket, <code>'['</code>, a vector is constructed</li>
            <li>If it begins with the single quote character, MATLAB<a id="2173"></a> creates a
            string</li>
            <li>If a format error occurs, MATLAB<a id="2174"></a> repeats the prompt and waits for another input</li>
          </ol>
          This behavior can be modified if <code>'s'</code> is provided as the second parameter,
          <code>input(prompt, 's')</code>, in which case<a id="2026"></a> the complete input character sequence is
          returned to the user as a string with no attempt to perform the above conversions. Exercise 6.4 demonstrates a number of capabilities of the <code>input(...)</code> function<a id="2095"></a>.
          </li>
        </ul>
        <div class="exercise">#exercise_6_4#</div>
        <p><b>Severe Warning: </b> Be careful to separate in your mind the use of the <code>input(...)</code> function<a id="2096"></a> and the process of passing parameters into a function<a id="2097"></a>. When values are passed to a function<a id="2098"></a>, we refer to this as the function<a id="2099"></a> <b><i>consuming</i></b> the incoming parameter(s), and this process happens automatically as part of the function<a id="2100"></a> call processing.  The <code>input(...)</code> function<a id="2101"></a> is a manual process whereby the user has to type data to be processed. The <code>input(...)</code> function<a id="2102"></a> should only be used in scripts<a id="2252"></a> that test functions and <b><i>never</i></b> in the body of a function<a id="2103"></a>.</p>
        <p><b>Hopeful footnote:</b> If you have to do some complex conversions
        yourself, the function<a id="2104"></a> <code>sscanf(<a id="2260"></a>...)</code> was designed to extract the values of variables
        from a string, but is really difficult to use. Instead,
        you can either split a string into tokens as we did above, and then convert each
        token<a id="2281"></a> with the str2num(str) function<a id="2105"></a> or, you might be better off putting that string into a text<a id="2265"></a> file and using the techniques in Chapter 8 to extract the meaning you need.</p>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="4" data-sect-name="Character String Operations">
    <!-- Character String Operations -->
    <h2 id="6_4">6.4 Character String Operations</h2>
    <div class="container">
      <p>As with the string-to-number conversions, input and output in the
      Command window can be accomplished with simple functions that have
      little flexibility or with complex functions that have better control.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Simple Data Output: The disp(...) Function">
      <!-- Simple Data Output -->
      <h3 id="6_4_1">6.4.1 Simple Data Output: The <code>disp(<a id="2057"></a>. . .)</code> Function</h3>
      <div class="container">
        <p>We have already seen the use of the <code>disp(<a id="2058"></a>...)</code> function<a id="2106"></a> to present data in
        readable form in the Command window. It can
        present the values of any variable<a id="2327"></a>, regardless of type,<a id="2283"></a> or of strings
        constructed by concatenation<a id="2051"></a>. Note, however, that an explicit number
        conversion is required to concatenate variables with strings. Note also that conversion
        from the ASCII<a id="2004"></a> code is not automatic; you need the <code>char(<a id="2039"></a>...)</code> cast function<a id="2107"></a>.</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Complex Output">
      <!-- Complex Output -->
      <h3 id="6_4_2">6.4.2 Complex Output</h3>
      <div class="container">
        <p>We discussed the functions fprintf(<a id="2079"></a>...) and sprintf(<a id="2259"></a>...) in Paragraph 6.3.1. While slightly messy to use, their flexibility makes them the functions of choice for displaying nicely formatted results.  Appendix A includes a complete discussion of the behavior of elements in the control strings of these functions.</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="Comparing Strings">
      <!-- Comparing Strings -->
      <h3 id="6_4_3">6.4.3 Comparing Strings</h3>
      <div class="container">
        <p>Since strings are readily translated into vectors of numbers<a id="2193"></a>, they may be
        compared in the obvious way with the logical<a id="2141"></a> operators<a id="2241"></a> we used on
        numbers<a id="2194"></a>. However, there is the restriction that either the strings must be of the same length or one of them must be of length 1 before it is legal to
        compare them with these operators<a id="2242"></a>. To avoid this restriction, MATLAB<a id="2175"></a>
        provides the function<a id="2108"></a> <code>strcmp(<a id="2261"></a>&lt;s1&gt;, &lt;s2&gt;)</code> that returns <code>true</code> if the
        strings are identical and <code>false<a id="2070"></a></code> if they are not.
        Unfortunately for C programmers, this is not quite the same behavior as the C version, which
        does a more rigorous comparison returning <code>−1</code>, <code>0</code>, or <code>1</code>. You can study character string comparison in Exercise 6.5.</p>
        <div class="exercise">#exercise_6_5#</div>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="5" data-sect-name="Arrays of Strings">
    <!-- Arrays of Strings -->
    <h2 id="6_5">6.5 Arrays of Strings</h2>
    <div class="container">
      <p>Since a single character string is stored as a vector, it seems natural to
      consider storing a collection of strings as an array<a id="2010"></a>. The most obvious way to
      do this, as shown in previous examples, has some limitations, for which
      there are nice, tidy cures built into the MATLAB<a id="2176"></a> language. Consider the
      example shown in Exercise 6.6. Character arrays can be constructed by
      either of the following:</p>
      <ul>
        <li>As a vertical vector of strings, all of which must be the same
        length</li>
        <li>By using a special version of
        the char(<a id="2040"></a>) cast function<a id="2109"></a> that
        accepts a variable<a id="2328"></a> number of
        strings with different lengths,
        pads them with blanks to
        make all rows the same length,
        and stores them in an array<a id="2011"></a> of
        characters</li>
      </ul>
      <div class="exercise">#exercise_6_6#</div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="6" data-sect-name="Engineering Example - Encryption">
    <!-- Engineering Example -->
    <h2 id="6_6">6.6 Engineering Example - Encryption</h2>
    <div class="container clearfix">
      <p><b>The Problem</b>  As public access to information becomes more pervasive, there is increasing
      interest in the use of encryption<a id="2065"></a> to protect intellectual property and private
      communications from unauthorized access. The following discussion is
      based on no direct knowledge of the latest encryption<a id="2066"></a> technology.
      However, it illustrates a very simple approach to developing an algorithm<a id="2000"></a>
      that is immune to all but the most obvious, brute-force code-breaking
      techniques.</p>
      <div class="float-sm-right card">
          <img src="..\Images\Fig_6_1.JPG" alt="Figure 6.1" class="fig fig-long card-image">
          <p class="figure-name card-title">Figure 6.1: An Enigma Machine</p>
      </div>
      <p><b>Background</b>  Historically, a simple encryption<a id="2067"></a> was accomplished using a Caesar cypher that used a single offset value<a id="2305"></a>,
      say N, to replace all characters with the character N spaces farther down the alphabet. If the entered
      value<a id="2306"></a> was 'A' and N was 4, the encrypted text<a id="2266"></a> would have 'E'. With strictly manual analysis, without
      knowing N, it was deemed impossible to decipher messages. In World War II, the German armed forces<a id="2071"></a>
      used a slight modification to this algorithm<a id="2001"></a> whereby each key in the alphabet had a different offset value<a id="2307"></a>.
      Figure 6.1 shows an actual Enigma machine that automatically applied the key offset values to messages
      typed on its keyboard. However, it was vulnerable for two reasons:</p>
      <ul>
        <li>there was still a constant mapping<a id="2150"></a> between plain text<a id="2267"></a> and encrypted charaacters leaving it open to "simple" letter frequency analysis, and</li>
        <li>since it was difficult to distribute fresh key maps, the maps were only changed once a day.</li>
      </ul>
      <p>A massive effort in England led by Alan Turing produced "Colossus" discussed in Paragraph 1.2.2 that was generally recognized as one of the first "general-purpose" computers. It was able to decode a large majority of the intercepted German message traffic, and was credited with contributing to the end<a id="2064"></a> of that terrible war.</p>
      <p><b>The Solution</b> We propose a simple algorithm<a id="2002"></a> whereby the key replacement map can be changed rapidly so that
       the same letter in the original message is only replaced by the same substitute for a short period of time.  Hnce, no simple language analysis will crack the code. The <code>rand(<a id="2245"></a>...)</code> function<a id="2110"></a> is an excellent source for an appropriate random sequence. If the encryption<a id="2068"></a> and decryption processes use the same value<a id="2308"></a> to seed the same random generator, the same sequence of apparently random (pseudo-random) values will be generated. Since the seed can take on <code>2<sup>31</sup> – 2</code> values, it is virtually impossible to determine the decryption without knowing the seed value<a id="2309"></a>. The seed (i.e., the decryption key) can be transmitted to anyone authorized to decrypt the message by any number of ways. Furthermore, since there are abundant different techniques for generating pseudo-random sequences, the specific generation technique must be known in addition to the seed value<a id="2310"></a> for successful decryption.</p>
       <p><b>Awkward Dilemma:</b> Unfortunately, earlier versions of Matlab had strange implementations of the ability to change the seed and generators of the rand(<a id="2246"></a>...) and randn(<a id="2249"></a>...) functions.  Rather than struggle with this deprecated implementation, we will take a short tour of the modern implementation for setting up rand(<a id="2247"></a>...).</p>
       <p>There are currently three number generators that consume the current state and generate the next state: 'twister', the default generator, and 'v4' and 'v5uniform' and 'v5normal' the legacy generators.  Each generator can be seeded with an integer value<a id="2311"></a>. So we have these implementations:</p>
      <ul>
        <li>to generate the next random state, <code>val = rand(<a id="2248"></a>)</code></li>
        <li>to set the seed value<a id="2312"></a> sd with the default generator:  <code>rnd(sd) </code></li>
        <li>to select another generator and seed it:  <code>rnd(sd, &lt;gen&gt;) </code> where <code>&lt;gen&gt;</code> is one of the generators above.</li>
      </ul>
      <p>Listing 6.2 shows the code for encrypting, the corresponding decryption by this technique and two attempts at decryption decrypt - one with the wrong key and one with the wrong generator.</p>
    </div>
    <div class="listing">#listing_06_2#</div>
    <div class="container">
      <p>This is the result when the code is run:</p>
      <p><code>
      original text<a id="2268"></a>: The quality of mercy is not strain'd<br>
      encrypted text<a id="2269"></a>: Xf% FmHH31$ {\ ove10 }M %~4 ]gB-~,yM<br>
      decrypted text<a id="2270"></a> with right values: The quality of mercy is not strain'd (matched)<br>
      decrypted text<a id="2271"></a> with bad seed: 2&gt;W 7Cr]lgq %@ ,N(nV ep [/x h4ac1n+a (not matched)<br>
      decrypted text<a id="2272"></a> with bad generator: 8v&gt; (zx^G'+ /N |Xb!U KC PcN b6I.6$Q~ (not matched)<br>
    </code></p>
    </div>
  </div>

  <!-- Chapter Summary -->
  <h3>Chapter Summary</h3>
  <div class="container">
    <p>This chapter discussed the nature, implementation, and behavior of character
    strings. We learned the following:</p>
    <ul>
      <li>Character strings are merely vectors of numbers<a id="2195"></a> that are presented
      to the user as single characters</li>
      <li>We can perform on strings the same operations<a id="2238"></a> that can be
      performed on vectors; if mathematical operations<a id="2239"></a> are
      performed, MATLAB<a id="2177"></a> first converts the characters to double
      values</li>
      <li>We can convert between string representations of numbers<a id="2196"></a> and the
      numbers<a id="2197"></a> themselves using built-in functions</li>
      <li>MATLAB<a id="2178"></a> provides functions that convert numbers<a id="2198"></a> to text<a id="2273"></a> strings
      for presentation in the Command window</li>
      <li>Arrays of strings can be assembled using the char(<a id="2041"></a>...) function<a id="2111"></a></li>
    </ul>
  </div>
<h2>Self Test</h2>
<div class="container">

Use the following questions to check your understanding of the material in this
chapter:
<h3>True or False</h3>
<ol>
<li>Casting changes the value<a id="2313"></a> of a piece of data.</li>
<li>The ASCII<a id="2005"></a> code maps individual characters to their internal
numerical<a id="2220"></a> representation.</li>
<li>Because the single quote mark ( ' ) delimits strings, you cannot use it
within a string.</li>
<li>If you attempt mathematical operations<a id="2240"></a> on a character string,
MATLAB<a id="2179"></a> will throw an error.</li>
<li>The function<a id="2112"></a> disp(<a id="2059"></a>...) can display multiple values to the
Command window.</li>
<li>The function<a id="2113"></a> strcmp(<a id="2262"></a>...) throws an error if the two strings are of
unequal length, unless one of them is a single character.</li>
<li>The switch<a id="2263"></a> statement will correctly compare strings of unequal
length in the case<a id="2027"></a> tests.</li>
</ol>
<h3>Fill in the Blanks</h3>
<ol>
<li>Numerical values are stored in MATLAB<a id="2180"></a> in _______________ for
efficient numerical<a id="2221"></a> computation.</li>
<li>Most common __________________, _______________, and many
_________________are represented in ASCII<a id="2006"></a> by the numbers<a id="2199"></a>
________________.</li>
<li>The function<a id="2114"></a> ____________ casts a string to a vector of the same
length as the string containing the numerical<a id="2222"></a> mapping<a id="2151"></a> of
_______________________.</li>
<li>The function<a id="2115"></a> fprintf(<a id="2080"></a>...) requires a(n) _____________ that defines
exactly how the resulting string should be formatted and a variable<a id="2329"></a>
number of ________________.</li>
<li>Since the _____________ statement tests a logical<a id="2142"></a> expression, it
_____________ test strings of unequal length.</li>
<li>A special version of the cast function<a id="2116"></a> accepts __________________
strings with different lengths, _____________, and stores them in an
array<a id="2012"></a> of characters.</li>
</ol>
<h3>Programming Projects</h3>
<ol>
<li>Solve the following introductory problems on strings.
<ul>
<li>Write a function<a id="2117"></a> dayName that consumes a parameter, day ,
containing the numerical<a id="2223"></a> value<a id="2314"></a> of a day in the month of
September 2008. Your function<a id="2118"></a> should return the name of that
day as a string. For example:
dayName( 8 ) should return 'Monday'</li>
<li>You are now given a variable<a id="2330"></a> named days, a vector that contains
the numeric values of days in the month of
September 2008. Write a script that will
convert each numeric value<a id="2315"></a> in the vector
days into a string named daysOfWeek with
the day names separated by a comma and a space. For example, if days = [8, 9, 10], daysOfWeek should
be 'Monday, Tuesday, Wednesday'
Notice that there is no separator before the first day name or after
the last one.'</li>
<li>
</ul>
<li>Consider the problem the MATLAB<a id="2181"></a> system has in parsing the string:<br>
'V=[1 2 3 4; 5,6, 7;8; 9 10]'<br>
Your task is to use strtok to parse this line and construct the array<a id="2013"></a> it
represents. You will write a function<a id="2119"></a> array<a id="2014"></a>Parse that consumes a
string and returns two variables: a string that is the variable<a id="2331"></a> name
and an array<a id="2015"></a>.
<ul><li>Tokenize the string first using ' = ' as the delimiter<a id="2055"></a> to isolate the
variable<a id="2332"></a> name and the expression to be evaluated. Return the
variable<a id="2333"></a> name to the user and save the rest of the line as the
variable<a id="2334"></a> str1 for further processing. You may assume that there
are no spaces outside the characters ' [. . .].</li>
<li>Tokenize str1 with ' [ ' and ' ] ' to remove the concatenation<a id="2052"></a>
operators<a id="2243"></a> and save the first token<a id="2282"></a> as str2.</li>
<li>Tokenize str2 using ' ; ' as the delimiter<a id="2056"></a>. This will produce 0 or
more strings that represent the rows of the array<a id="2016"></a>. Save each in the
variable<a id="2335"></a> rowString . You may assume for now that the first row is
the longest one.</li>
<li>Using nested while<a id="2336"></a> loops, tokenize each rowString with ' , ' and
' ' as delimiters and use str2num (. . .) to extract the numerical<a id="2224"></a>
value<a id="2316"></a> of each array<a id="2017"></a> entry. Save it as rowEntry .</li>
<li>Concatenate the rowEntry elements horizontally to produce each
row of the array<a id="2018"></a>. If the row is too short, pad it with zeros.</li>
<li>Concatenate each row vertically to produce the resulting array<a id="2019"></a>
and return that array<a id="2020"></a> to the caller.</li>
<li>Test the function<a id="2120"></a> with cases like:<br>
empty<a id="2063"></a>=[]<br>
row=[1 2 3 4]<br>
diag=[0 0 0 1; 0 0 1; 0 1; 1]<br>
</li></ul>

<li>Write a function<a id="2121"></a> called DNAcomplement that consumes a set of letters
as a character array<a id="2021"></a> that forms a DNA sequence such as 'gattaca' . The
function<a id="2122"></a> will produce the complement of the sequence so that a's
become t's , g's become c's , and vice versa. The string 'gattaca'
would therefore become 'ctaatgt' . You may assume that all the
letters in the sequence will be lowercase and that they will all be
either a, t, g, or c .<br>
Note: You may be tempted to use iteration<a id="2136"></a> for this problem, but you
don’t need it.</li>
<li>The function<a id="2123"></a> rot(s, n) is a simple Caesar cipher encryption<a id="2069"></a>
algorithm<a id="2003"></a> that replaces each English letter in places forward<a id="2076"></a> or
backward along the alphabet in the strings. For example, the result
of rot('Baz!',3) is 'Edc!' . An encrypted string can be deciphered
by simply performing the inverse rotation on it, that is,
rot('Edc!',3), which rotates each English letter in the strings three
places to the left. Numbers, symbols, and non-letters are not
transformed. Implement the following function<a id="2124"></a>:<br>
function<a id="2125"></a> rotatedText=rot(text,n)<br>
To assist you as you solve this problem, you could write several
functions as local functions in the rot.m file:<br>
isUppercaseLetter(letter), getUppercaseLetter(n),
getLowercaseLetter(n) , and getPosition(letter) .<br>You may also
wish to use the built-in functions isletter (. . .), find (. . .), and
mod (. . .).</li>
<li>You have a big problem. In one of your CS courses, your professor
decides that the only way you will pass the class is if you write a
function<a id="2126"></a> to get him out of a mess. All the grades in his class have
been accidentally stored into one long string of characters
containing only the letters A, B, C, D, F, and Y.
<ul>
<li>Your job is to write a function<a id="2127"></a> called CrazyGrade that will take in
the string and flip the grades according to the following
specifications:<br>
A becomes F<br>
B becomes D<br>
C remains unchanged<br>
D becomes B<br>
F becomes A<br>
Y becomes W<br>
Your function<a id="2128"></a> should take in a string and return an inverted string.
You may assume that the string will only consist of valid letter
grades. For example,<br>
CrazyGrade('BADDAD') should return 'DFBBFB'<br>
CrazyGrade('BAYBAY') should return 'DFWDFW'<br></li>
<li>To make matters worse, he wants you to organize this modified
grade set. Write a function<a id="2129"></a> called GradeDist to bunch together all
the similar grades (put all the A's next to each other, B's next to
each other, etc.) Then, calculate and return the professor's grade
distribution. Your function<a id="2130"></a> should take in a string and return a
string with all similar grades grouped together, along with an
array<a id="2022"></a> containing percentage values from A's all the way to F's. For
example, if there are 15% A's, 16% B's, 33% C's, 16% D's, 16% F's,
and 4% W's, GradeDist should return [15 16 33 16 16 4].</li>
</ol>
</div>
</div>


</body>
</html>


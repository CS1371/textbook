<!DOCTYPE HTML>
<html>
<head>
<title>17_Graphs</title>
<!-- include bootstrap -->
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
<!-- include stylesheets -->
<link rel="stylesheet" href="styles/styles.css" />
<script async src="./javascript/index.js"></script>
</head>
<body>
<div>#top_nav#</div>
<div class="nav-obj">#nav_obj#</div>

<div class="content">
  <h1 align="center">Chapter 17: Graphs</h1>

  <!-- Chapter Objectives -->
  <h1>Chapter Objectives</h1>
  <div class="container">
      <p>This chapter demonstrates two algorithms<a id="6725">!</a> that solve two problems that frequently occur in engineering<a id="6852">!</a>:</p>
      <ul>
          <li>finding the minimum<a id="6933">!</a> spanning tree for<a id="6859">!</a> a graph and</li>
          <li>finding the best path through a graph.</li>
      </ul>
      <p>However, before we can approach these algorithms<a id="6726">!</a>, we need to understand the following:</p>
      <ul>
          <li>How to construct and use three special forms of data collection<a id="6801">!</a>: stacks, queues and priority<a id="6976">!</a> queues<li>How to build a model of a graph, and</li>
          <li>How to traverse and search a graph.</li>
      </ul>
  </div>

  <!-- Introduction -->
  <h1>Introduction</h1>
  <div class="container clearfix">
      <div class="float-sm-right card">
        <img src="..\Images\Fig_17_1.JPG" alt="Figure 17.1" class="fig card-image">
        <p class="figure-name card-title">Figure 17.1: Street Map of Atlanta</p>
      </div>
      <p>We first consider the nature of a graph by considering Figure 17.1, a simplified street map of the city of Atlanta taken with permission from the OpenStreetMap project. The data storage tools we have considered so far - vectors<a id="7068">!</a>, arrays, structure<a id="7059">!</a> arrays, and cell<a id="6785">!</a> arrays - have essentially been collections whose elements<a id="6834">!</a> are linearly related to each other by being organized in rows and columns. However, practical engineering<a id="6853">!</a> frequently meets data that are not organized so easily. Graphs are one such data set. The ultimate goal of this chapter is to discuss this most general form of data structure<a id="7060">!</a>. We need first to resolve the semantic problem of the name "graph." We typically think of a graph as a plot. However, in computer<a id="6818">!</a> science, a graph is a collection<a id="6802">!</a> of nodes connected by edges. A street map might be a useful mental model of a graph where the streets are the edges and the intersections are the nodes. To process graphs<a id="6910">!</a> effectively, we must first consider three simpler concepts: stacks, queues in general and priority<a id="6977">!</a> queues in particular.</p>
  </div>

  <div class="chp-section" data-sect-num="1" data-sect-name="Stacks">
    <!-- Stacks -->
    <h2 id="17_1">17.1  Stacks</h2>
    <div class="container">
        <p>We briefly discussed the concept of stacks in Chapter 9 where a specific kind of stack<a id="7031">!</a>, the Activation Stack, is used to manage the workspace of each function<a id="6903">!</a> currently active in Matlab. We first consider the general nature and implementation of stacks as special collections that enable us to process graphs<a id="6911">!</a> efficiently. We experience the concept of a stack<a id="7032">!</a> every day of our lives. We reproduce here the illustration from Chapter 9 of the plates in the cafeteria.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="The Nature of a Stack">
      <!-- The Nature of a Stack -->
      <h3 id="17_1_1">17.1.1	The Nature of a Stack</h3>
      <div class="container clearfix">
          <div class="float-sm-right card">
            <img src="..\Images\Fig_9_1.JPG" alt="Figure 17.2" class="fig card-image">
            <p class="figure-name card-title">Figure 17.2: A Typical Stack</p>
          </div>
          <p>Formally, we refer to a stack<a id="7033">!</a> as a Last In/First Out (LIFO) collection<a id="6803">!</a>, as illustrated in Figure 17.2. The most general form of a stack<a id="7034">!</a> is permitted to contain any kind of object, that is, an instance of any data type or class. The plates in the illustration are surrogates for<a id="6860">!</a> literally anything that could be stored in a Matlab variable<a id="7067">!</a>. A cell<a id="6786">!</a> array<a id="6752">!</a>, therefore, would be a good underlying structure<a id="7061">!</a> upon which to build stack<a id="7035">!</a> behavior. Typically, operations<a id="6950">!</a> on a stack<a id="7036">!</a> are restricted to the following:</p>
          <ul>
              <li><b>push</b>: puts an object onto the top of the stack<a id="7037">!</a>,</li>
              <li><b>dequeue</b>: removes an object from the top of the stack<a id="7038">!</a></li>
              <li><b>peek</b>: copies the first object from the stacck without removing it, and</li>
              <li><b>isempty</b> determines whether the stack<a id="7039">!</a> is empty<a id="6835">!</a>.</li>
          </ul>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Implementing Stacks">
      <!-- Implementing Stacks -->
      <h3 id="17_1_2">17.1.2	Implementing Stacks</h3>
      <div class="container">
          <p>Although there are many ways to implement a stack<a id="7040">!</a>, a cell<a id="6787">!</a> array<a id="6753">!</a> is a good choice because it is a linear<a id="6924">!</a> collection<a id="6804">!</a> of objects<a id="6942">!</a> that may be of any type and can be extended or shortened without any apparent effort. If we establish a stack<a id="7041">!</a> using a cell<a id="6788">!</a> array<a id="6754">!</a>, the implementation of the above behavior is almost trivial. One rather strange characteristic is the need to return the modified stack<a id="7042">!</a> to the user. The Matlab tools are:</p>
          <ul>
              <li><code>stk = push(stk, item)</code> concatenates data at the end<a id="6839">!</a> of the cell<a id="6789">!</a> array<a id="6755">!</a> returning the new stack<a id="7043">!</a> to the user</li>
              <li><code>[stk, item] = pop(stk)</code>: removes the item from the end<a id="6840">!</a> of the cell<a id="6790">!</a> array<a id="6756">!</a> and returns that item and the modified stack<a id="7044">!</a> to the user</li>
              <li><code>item = peek(<a id="6974">!</a>stk)</code>: merely returns the end<a id="6841">!</a> item in the cell<a id="6791">!</a> array<a id="6757">!</a> not returning the stack<a id="7045">!</a> because it doesn't changed</li>
              <li><code>res = isempty(<a id="6920">!</a>stk)</code>: is the standard MATLAB<a id="6931">!</a> test for<a id="6861">!</a> the empty<a id="6836">!</a> vector.</li>
          </ul>
          <p>Clearly, because all the cell<a id="6792">!</a> array<a id="6758">!</a> operations<a id="6951">!</a> are also accessible to the programmer, nothing prevents an unscrupulous programmer from using other operations<a id="6952">!</a> on the stack<a id="7046">!</a> — for<a id="6862">!</a> example, adding an item elsewhere that the top of the stack<a id="7047">!</a>. There are computer<a id="6819">!</a> tools in Object-Oriented Programming that completely encapsulate the data and only permit the specified functions, but the author recommends that a computer<a id="6820">!</a> language other than Matlab would be more appropriate if you must have this kind of security in your data.</p>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="2" data-sect-name="Queues">
    <!-- Queues -->
    <h2 id="17_2">17.2  Queues</h2>
    <div class="container">
        <p>We first consider the nature and implementation of queue<a id="6991">!</a> that, like a stack<a id="7048">!</a>, provides special collections that enable us to process graphs<a id="6912">!</a> efficiently. We experience the concept of a queue<a id="6992">!</a> every day of our lives. A line of cars waiting for<a id="6863">!</a> the light to turn green is a queue<a id="6993">!</a>; when we stand in line at a store or send a print job to a printer, we experience typical queue<a id="6994">!</a> behavior. In general, the first object entering a queue<a id="6995">!</a> is the first one to exit the other end<a id="6842">!</a>.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="The Nature of a Queue">
      <!-- The Nature of a Queue -->
      <h3 id="17_2_1">17.2.1	The Nature of a Queue</h3>
      <div class="container clearfix">
          <div class="float-sm-right card">
            <img src="..\Images\Fig_17_3.JPG" alt="Figure 17.3" class="fig card-image">
            <p class="figure-name card-title">Figure 17.3: A Typical Queue - Rabbits at Starbucks</p>
          </div>
          <p>Formally, we refer to a queue<a id="6996">!</a> as a first in/first out (FIFO) collection<a id="6805">!</a>, as illustrated in Figure 17.3. As with stacks, the most general form of a queue<a id="6997">!</a> is permitted to contain any kind of object. Typically, operations<a id="6953">!</a> on a queue<a id="6998">!</a> are restricted to the following:</p>
          <ul>
              <li><b>enqueue</b> puts an object onto the queue<a id="6999">!</a></li>
              <li><b>dequeue</b> removes an object from the queue<a id="7000">!</a></li>
              <li><b>peek</b> copies the first object out of the queue<a id="7001">!</a> without removing it, and</li>
              <li><b>isempty</b> determine whether the queue<a id="7002">!</a> is empty<a id="6837">!</a>.</li>
          </ul>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Implementing Queues">
      <!-- Implementing Queues -->
      <h3 id="17_2_2">17.2.2	Implementing Queues</h3>
      <div class="container">
          <p>As with stacks, a cell<a id="6793">!</a> array<a id="6759">!</a> is a good choice upon which to build a queue<a id="7003">!</a> because it is a linear<a id="6925">!</a> collection<a id="6806">!</a> of objects<a id="6943">!</a> that may be of any type and can be extended or shortened without any apparent effort. If we establish a queue<a id="7004">!</a> using a cell<a id="6794">!</a> array<a id="6760">!</a>, the implementation of the above behavior is trivial:</p>
          </ul>
              <li><code>q = enqueue(<a id="6856">!</a>q, item)</code> concatenates data at the end<a id="6843">!</a> of the cell<a id="6795">!</a> array<a id="6761">!</a></li>
              <li><code>[q item] = dequeue(<a id="6822">!</a>q)</code> removes the item from the front of the cell<a id="6796">!</a> array<a id="6762">!</a> and returns that item to the user</li>
              <li><code> item = peek(<a id="6975">!</a>q)</code> merely accesses the first item in the cell<a id="6797">!</a> array<a id="6763">!</a></li>
              <li><code> res = isempty(<a id="6921">!</a>q)</code> is the standard MATLAB<a id="6932">!</a> test for<a id="6864">!</a> the empty<a id="6838">!</a> vector</li>
          </ul>
          <p>As with stacks, in a real application, you might want to implement your queue<a id="7005">!</a> with a tool set that protects the integrity of the data, and as with stacks, Matlab is physically incapable of providing this service.</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="Priority Queues">
      <!-- Priority Queues -->
      <h3 id="17_2_3">17.2.3 Priority Queues</h3>
      <div class="container clearfix">
          <div class="float-sm-right card">
            <img src="..\Images\Fig_17_4.JPG" alt="Figure 17.4" class="fig card-image">
            <p class="figure-name card-title">Figure 17.4: A Priority Queue</p>
          </div>
          <p>There are times when we wish ordinary queues were priority<a id="6978">!</a> queues. For example, at the printer where you wait an hour for<a id="6865">!</a> one page while<a id="7071">!</a> someone prints large sections of an encyclopedia and you wonder why the print queue<a id="7006">!</a> can’t put really small jobs ahead of really large jobs.  The only difference between an ordinary queue<a id="7007">!</a> and a priority<a id="6979">!</a> queue<a id="7008">!</a> is that the objects<a id="6944">!</a> on the queue<a id="7009">!</a> emerge in a specified order. The rabbits in Figure 14.4 are sorted  by the expected time to prepare the drink they want. This sorting<a id="7030">!</a> may be accomplished either as the items are enqueued as illustrated below, or by searching<a id="7029">!</a> for<a id="6866">!</a> the "best" item when performing a dequeue operation<a id="6949">!</a>.  The efficiency will be the same.</p>
          <p>In our mechanization of a priority<a id="6980">!</a> queue<a id="7010">!</a>, the enqueue function<a id="6904">!</a> involves adding the new item in order to the queue<a id="7011">!</a>. For this to happen, there must be a means of comparing two objects<a id="6945">!</a>. Here, we use the function<a id="6905">!</a> <code>is_before</code> that generally should be able to compare any two objects<a id="6946">!</a>.  In this implementation, it is sufficient to be able to compare numbers<a id="6940">!</a>, strings<a id="7058">!</a> or structures that contain either the <code>fields</code> key or NaN<a id="6936">!</a>. Clearly, this function<a id="6906">!</a> can be extended as necessary to compare any two objects<a id="6947">!</a>.</p>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="3" data-sect-name="Testing Stacks and Queues">
    <!-- Testing Stacks and Queues -->
    <h3 id="17_3">17.3 Testing Stacks and Queues</h3>
    <div class="container">
        <p>It is always advisable to test utility functions thoroughly before using them in complex algorithms<a id="6727">!</a>. Listing 17.1 shows a script that tests a stack<a id="7049">!</a>, a queue<a id="7012">!</a> and a priority<a id="6981">!</a> queue<a id="7013">!</a>.  Following that script as helper<a id="6916">!</a> functions are the simple functions that implement all the necessary tools.</p>
        <div class="listing">#listing_17_1#</div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="4" data-sect-name="Graphs">
    <!-- Graphs -->
    <h2 id="17_4">17.4 Graphs</h2>
    <div class="container">
        <p> This chapter focuses on processing a graph — the most general form of dynamic data structure<a id="7062">!</a>, an arbitrary collection<a id="6807">!</a> of nodes connected by edges. The edges may be directional<a id="6831">!</a> to indicate that the graph can be traversed along that edge in only one direction (like a one-way street). The edges may also have a value<a id="7066">!</a> associated with them to indicate, for<a id="6867">!</a> example, the cost of traversing that edge. We refer to this as a weighted<a id="7069">!</a> graph. For a street map, this cost could either be the distance, or in a more sophisticated system, the travel time—a function<a id="6907">!</a> of the distance, the speed limit, and the traffic congestion. Graphs are not required to be completely connected, and they may contain cycles - closed loops in which the unwary algorithm could become trapped. Graphs also have no obvious starting and stopping points. Finally, a path on a graph is a connected list of edges that is the result of traversing a graph.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Graph Examples">
      <!-- Graph Examples -->
      <h3 id="17_4_1">17.4.1 Graph Examples</h3>
      <div class="container clearfix">
          <div class="float-sm-right card">
              <img src="..\Images\Fig_17_5.JPG" alt="Figure 17.5" class="fig card-image">
              <p class="figure-name card-title">Figure 17.5: A Simple Graph</p>
          </div>
          <p>A simple graph is shown in Figure 17.5. In the figure, the connection points 0 ... 10 are the nodes and the edges are the interconnecting lines, which in this example are not directional<a id="6832">!</a> but are weighted<a id="7070">!</a>. Graphs occur frequently in everyday life, as illustrated by the street map shown in Figure 17.1. Street maps can be conveniently represented as graphs<a id="6913">!</a> where intersections are the nodes and streets are the edges. Streets can be directional<a id="6833">!</a> (one-way), and they may have weights associated with them - either the transit time (a function<a id="6908">!</a> of the length of the street and its speed limit) or, with access to real-time traffic information, a more complex estimate of the transit time.</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Processing Graphs">
      <!-- Processing Graphs -->
      <h3 id="17_4_2">17.4.2	Processing Graphs</h3>
      <div class="container">
        <p>In designing algorithms<a id="6728">!</a> that operate on graphs<a id="6914">!</a> in general, we need to consider the following constraints:</p>
        <ul>
            <li>With cycles permitted in the data, there is no natural starting point like the beginning of a cell<a id="6798">!</a> array<a id="6764">!</a>. Consequently, the user must always specify a place on the graph to start as well as the place to stop.</li>
            <li>There are no natural “leaf nodes” where a search might have to stop and back up. Consequently, an algorithm processing a graph must have a means of determining that being at a given node is the “end<a id="6844">!</a> of the line.” Typically, this is accomplished by maintaining a collection<a id="6808">!</a> of visited nodes as it progresses around the graph. Each time a node is considered, the algorithm must check to see whether that node is already in the visited collection<a id="6809">!</a>. If so, it refuses to return to that node. The algorithm must backtrack if it reaches a node from which there is no edge to a node that has not already been visited.</li>
            <li>Whereas on a cell<a id="6799">!</a> array<a id="6765">!</a> there is only one feasible path from one node to another, there may be many possible paths<a id="6956">!</a> between two nodes on a graph. The best algorithms<a id="6729">!</a> that search for<a id="6868">!</a> paths<a id="6957">!</a> must take into account a comparison between paths<a id="6958">!</a> to determine the best one.  For a simple, consistent example, consider the graph shown in Figure 17.5. We will use this simple example to demonstrate minimum<a id="6934">!</a> spanning trees (MSTs) and finding paths<a id="6959">!</a> through the graph.</li>
        </ul>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="5" data-sect-name="Minimum Spanning Trees">
    <!-- Minimum Spanning Trees -->
    <h2 id="17_5">17.5 Minimum Spanning Trees</h2>
    <div class="container clearfix">
        <p>A Spanning Tree (MST) is a set of edges identified for<a id="6869">!</a> a graph that touches all of the nodes of the graph. For example, on a circuit board, power must be distributed to all of the chips on the board. The routing of a power trace to all the power pins would be a spanning tree. More often that not, it is important to have a spanning tree whose length is as short as possible. Finding the shortest spanning tree is referred to as the Minimum Spanning Tree (MST) problem. There may well be multiple spanning trees with the same overall cost and any one of those would satisfy the requirement. There are two practical algorithms<a id="6730">!</a> commonly used to solve the MST problem:</p>
        <ul>
            <li> Kruscal’s algorithm
            <li> Prim's algorithm
        </ul>
        <div class="float-sm-right card">
          <video controls class="card-image"><source src="..\Images\MST.mp4" type="video/mp4">Fig 17.6 Animation of Prim's MST Algorithm</video>
          <p class="figure-name card-title">Fig 17.6: Animation of Prim's MST Algorithm</p>
        </div>
        <p>Since they are both very similar in concept and produce the correct answer, we will only consider one: Prim's algorithm.</p>
        <p>Prim’s algorithm finds the subset of the edges of the graph that connect every node exactly once whose total cost is not greater than that of any other spanning tree. The algorithm continuously increases the size of a tree, one edge at a time, starting with a tree consisting of a single node, until it spans all the nodes. Specifically, given a graph as defined in Figure 17.5, Prim’s algorithm proceeds as shown in Listing 17.2.</p>
        <p>Figure 17.6 is a pair of animations of Prim's algorithm applied to a small graph and then a larger, but still manageable graph.</p>
    </div>
    <div class="listing">#listing_17_2#</div>
</div>

  <div class="chp-section" data-sect-num="6" data-sect-name="Finding Paths through a Graph">
    <!-- Finding Paths through a Graph -->
    <h2 id="17_6">17.6 Finding Paths through a Graph</h2>
    <div class="container">
        <p>This section discusses four algorithms<a id="6731">!</a> for<a id="6870">!</a> finding a path from one node on the graph to another. The first three algorithms<a id="6732">!</a> exhaustively search the graph to find the absolute best path between node pairs by different criteria. These differences of behavior are created by selecting a stack<a id="7050">!</a>, a queue<a id="7014">!</a> or a priority<a id="6982">!</a> queue<a id="7015">!</a> as the dynamic container for<a id="6871">!</a> interim solutions.  The fourth is one of many approximation algorithms<a id="6733">!</a> typically used to compute a good enough route in circumstances where an exact solution is not feasible.</p>
        <p>Listing 17.3 shows a template for<a id="6872">!</a> the three exact algorithms<a id="6734">!</a>.</p>
        <div class="listing">#listing_17_3#</div>
        <p>In this listing, we will use a generic <code>&lt;collection<a id="6810">!</a>&gt;</code> to substitute for<a id="6873">!</a> the specific collections used in the detailed algorithms<a id="6735">!</a> to follow. We will also use the generic operations<a id="6954">!</a> <code>&lt;add(...)&gt;</code> and <code>&lt;remove(...)&gt;</code> as surrogates for<a id="6874">!</a> the actual operations<a id="6955">!</a> on the chosen <code>&lt;collection<a id="6811">!</a>&gt;</code>. Our objective will be to return a <code>&lt;path&gt;</code> consisting of a sequence of 1 or more nodes.  We will also need the concept of <code>&lt;children&gt;</code> which is a collection<a id="6812">!</a> of edges [u,v] where u is the end<a id="6845">!</a> of the path and v is not on the current path to prevent cycles in the path. When choosing which child node to process first, we need a consistent rule. Since our nodes are all numbered, it makes sense to process the child nodes in increasing numerical<a id="6941">!</a> order. This will be the rule for<a id="6875">!</a> all the specific examples to follow.</p>
        <p>For the following three algorithms<a id="6736">!</a>, we will see two artifacts:</p>
        <ul>
            <li> animations on two graphs<a id="6915">!</a> showing how the algorithm works.  The algorithms<a id="6737">!</a> on first, small graph will always start at node 1 and stop at node 7. On the larger graph, they start at node 121 and stop at node 1. Comparing these animations will illustrate the relative computational cost of each algorithm. However, as we will see in section 17.6.4, none of these algorithms<a id="6738">!</a> are fast enough to handle a graph of any serious size.</li>
            <li> the contents of the collection<a id="6813">!</a> at the end<a id="6846">!</a> of each of the algorithms<a id="6739">!</a> in the simple case<a id="6780">!</a>.</li>
        </ul>
        <p>A serious student will want to trace through the template in Listing 17.3 referring to the animations in order to construct the contents of each collection<a id="6814">!</a>.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Depth-First Search">
      <!-- Depth-First Search -->
      <h3 id="17_6_1">17.6.1	Depth-First Search (DFS)</h3>
      <div class="container">
          <p>The depth-first path search algorithm uses a stack<a id="7051">!</a> for<a id="6876">!</a> the <code>&lt;collection<a id="6815">!</a>&gt;</code> and <code>&lt;push(...)&gt;</code> and <code>&lt;pop(...)&gt;</code> as the functions to add and remove a path from the stack<a id="7052">!</a>. As we observe the behavior of the DFS algorithm, it is clearly the fastest of the three algorithms<a id="6740">!</a>, but makes no claim at all about the efficiency of the resulting path. As long as there is any connectivity between the starting and ending nodes,<a id="6937">!</a> this will find a path.</p>
          <p>As you study the small graph, you would be right to "ask why bother with the stack<a id="7053">!</a> at all?" since at every cycle through the template, the algorithm always takes the last element pushed onto the stack<a id="7054">!</a>. As you will see on a careful study of the DFS algorithm on the larger graph, the stack<a id="7055">!</a> is there to resolve the problem of cul-de-sacs. As in real streets that have no outlet, a cul-de-sac can be a physical constraint. However, there can also be logical<a id="6928">!</a> cul-de-sacs where a street closes a loop and has no other outlet. The rule to eliminate cycles will also see this geometry as a virtual cul-de-sac.  In either case<a id="6781">!</a>, the paths<a id="6960">!</a> on the stack<a id="7056">!</a> can be popped off until the algorithm reaches a node with an alternative path to proceed. The logic<a id="6927">!</a> of template in Listing 17.3 will exit from the while<a id="7072">!</a> loop if there are no more feasible paths<a id="6961">!</a> on the stack<a id="7057">!</a>.</p>
          <div class="card-deck">
              <div class="col-sm-7 card">
                  <video controls class="card-image"><source src="..\Images\DFS.mp4" type="video/mp4">Fig 17.7 Animation of DFS Algorithm</video>
                  <p class="figure-name card-title">Fig 17.7: Animation of the DFS Algorithm</p>
              </div>
              <div class="col-sm-5 card">
                  <div class="fig-long">
                      <img src="..\Images\DFS.jpg" alt="Figure 17.8" class="fig card-image">
                  </div>
                  <p class="figure-name card-title">Figure 17.8: Stack after the first DFS search</p>
              </div>
          </div>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Breadth-First Search">
      <!-- Breadth-First Search -->
      <h3 id="17_6_2">17.6.2	Breadth-First<a id="6778">!</a> Search (BFS)</h3>
      <div class="container clearfix">
          <p>Frequently, we actually need the path with the smallest number of nodes between the starting and ending nodes. For example, because changing trains involves walking and waiting, the best path on an urban transit system map is that with the fewest changes, even if the resulting path is longer. To search for<a id="6877">!</a> the path with the least nodes,<a id="6938">!</a> we need an algorithm that performs a Breadth-First<a id="6779">!</a> Search (BFS) on a graph. We will use the template in Listing 17.3 where the <code>&lt;collection<a id="6816">!</a>&gt;</code> is a <code>&lt;queue<a id="7016">!</a>&gt;</code>, the <code>&lt;add&gt;</code> method is <code>&lt;enqueue(<a id="6857">!</a>...)&gt;</code> and the &lt;remove(...)&gt; method is <code>&lt;dequeue(<a id="6823">!</a>...)&gt;</code>.</p>
          <p>As you observe the animations in Figure 17.9, especially the larger graph, you will see a characteristic rotating search mimicking the ripples on a pond when a pebble is dropped in. This behavior is caused by using the <code>&lt;queue(...)&gt;</code> and will result in the path with the least number of nodes although it may not be the shortest one.  In fact, on the small graph animation, while<a id="7073">!</a> there is a path with lower cost that uses one more node, the BFS<a id="6766">!</a> algorithm can't find it. Figure 17.9 shows animations of the same two problems using the BFS<a id="6767">!</a> algorithm - a better approach in that it computes the path with the least number of nodes,<a id="6939">!</a> but does not guarantee the best cost.  In fact, neither DFS nor BFS<a id="6768">!</a> take cost into account, but merely use it as an observer.  Figure 17.10 shows to state of the queue<a id="7017">!</a> at the end<a id="6847">!</a> of the first animation.</p>
          <div class="card-deck">
              <div class="col-sm-7 card">
                  <video controls class="card-image"><source src="..\Images\BFS.mp4" type="video/mp4">Fig 17.9: Animation of the BFS<a id="6769">!</a> Algorithm</video>
                  <p class="figure-name card-title">Fig 17.9: Animation of the BFS<a id="6770">!</a> Algorithm</p>
              </div>
              <div class="col-sm-5 card">
                  <div class="fig-long">
                      <img src="..\Images\BFS.JPG" alt="Figure 17.10" class="fig card-image">
                  </div>
                  <p class="figure-name card-title">Fig 17.10: Queue after the first BFS<a id="6771">!</a> search</p>
              </div>
          </div>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="Dijkstras Algorithm">
      <!-- Dijkstras Algorithm -->
      <h3 id="17_6_3">17.6.3	Dijkstras<a id="6824">!</a> Algorithm</h3>
      <div class="container">
          <p>Although the minimal number of nodes is sometimes the right answer, frequently there is a path that uses more nodes but has a smaller overall cost. This is evident from a quick<a id="7028">!</a> glance at Figure 17.5: the path 1-0-5-6-7 has a lower cost than the path 1-0-4-7 found by the BFS<a id="6772">!</a> algorithm, which actually ignores the edge weights. Many algorithms<a id="6741">!</a> exist for<a id="6878">!</a> finding the optimal path through a graph. Here we illustrate the algorithm attributed to the Dutch computer<a id="6821">!</a> scientist Dr. Edsger Dijkstra. Perhaps it is not the most efficient algorithm; but for<a id="6879">!</a> our purposes, this approach has the virtue of being a minor extension to the while<a id="7074">!</a> loop algorithm described in Listing 17.3.  The major differences arise from the use of a priority<a id="6983">!</a> queue<a id="7018">!</a> in place of the normal queue<a id="7019">!</a> used in the BFS<a id="6773">!</a> algorithm.</p>
          <ul>
              <li> As previously noted, priority<a id="6984">!</a> queues differ from basic queues only to the extent that the <code>&lt;enqueue(<a id="6858">!</a>...)&gt;</code> method puts the data in order, rather than at the tail of the queue<a id="7020">!</a>. The ordering criterion required by the algorithm is to place the paths<a id="6962">!</a> in increasing order of path cost. While we have not explicitly dealt with the Big<a id="6776">!</a> O of these algorithms<a id="6742">!</a>, it is clear<a id="6800">!</a> in the micro sense that inserting<a id="6917">!</a> at the end<a id="6848">!</a> of a queue<a id="7021">!</a> is O(1) while<a id="7075">!</a> inserting<a id="6918">!</a> in order in a priority<a id="6985">!</a> queue<a id="7022">!</a> is O(N) where N is the worst case<a id="6782">!</a> of queue<a id="7023">!</a> length.</li>
              <li>The objects<a id="6948">!</a> contained in the priority<a id="6986">!</a> queue<a id="7024">!</a> need to contain not only the path, but also the total path weight.</li>
              <li> we have to change the exit strategy in the template shown in Listing 17.2.  For DFS and BFS<a id="6774">!</a>, once a path has been added to their collections, there is no possibility of a "better" path being inserted ahead of that result. Hence, it is fine to perform the exit test when inserting<a id="6919">!</a> each child node.  However, this is not the case<a id="6783">!</a> for<a id="6880">!</a> Dijkstras<a id="6825">!</a> algorithm; better paths<a id="6963">!</a> can be inserted before any of the paths<a id="6964">!</a> entered. In a formal<a id="6902">!</a> sense, it is safe to perform the exit test when a path is dequeued. However, when preparing the somewhat intimidating view of the priority<a id="6987">!</a> view when the algorithm completed, we shortened that queue<a id="7025">!</a> by realizing that the algorithm may be stopped when a path of cost N to the end<a id="6849">!</a> is enqueued if it is logically impossible for<a id="6881">!</a> the next step on any of the surviving shorter paths<a id="6965">!</a> to reach the ending node with a cost less<a id="6922">!</a> than N.</li>
          </ul>
          <p>Figures 17.11 and 17.12 show the animations for<a id="6882">!</a> the same two problems and the resulting priority<a id="6988">!</a> queue<a id="7026">!</a> for<a id="6883">!</a> the smaller case<a id="6784">!</a>. While this algorithm does compute the path with the lowest cost, it does so at considerable extra computation cost, as is evident from the run time of the second animation, the increased Big<a id="6777">!</a> O if the enqueue method and the enormous amount of extra stuff packed into the priority<a id="6989">!</a> queue<a id="7027">!</a> in Figure 17.12.</p>
          <div class="card-deck">
              <div class="col-sm-7 card">
                  <video controls class="card-image"><source src="..\Images\Optimal.mp4" type="video/mp4">Fig 17.11: Animation of Dijkstras<a id="6826">!</a> Algorithm</video>
                  <p class="figure-name card-title">Fig 17.11: Animation of Dijkstras<a id="6827">!</a> Algorithm</p>
              </div>
              <div class="col-sm-5 card">
                  <div class="fig-long">
                      <img src="..\Images\Opt_p_q.jpg" alt="Figure 17.12" class="fig card-image">
                  </div>
                  <p class="figure-name card-title">Fig 17.12: Priority Queue after the first search</p>
              </div>
          </div>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="4" data-sub-name="An Approximation Algorithm">
      <!-- An Approximation Algorithm -->
      <h3 id="17_6_4">17.6.4	An Approximation Algorithm</h3>
      <div class="container clearfix">
          <p>As we progressed from DFS to BFS<a id="6775">!</a> to Dijkstras<a id="6828">!</a> algorithm, the answers became more precise, but the computational cost was increasing.  Even for<a id="6884">!</a> a really small proportion of the streets in the Atlanta metropolitan area, the solution became unpleasantly slow. Yet, the Satellite Navigation system on any car  can compute the route from somewhere in the Atlanta, Georgia area to the suburbs of Los Angeles, California in a second or less<a id="6923">!</a>. To understand how this can work, we need to look at a fundamental change in the path computation algorithm and then, in Section 17.6.5 examine some additions to that algorithm to improve the efficiency and remove some occasional strange behavior.</p>
          <div class="float-sm-right">
              <div class="card">
                  <video controls class="card-image"><source src="..\Images\Greedy.mp4" type="video/mp4">Fig 17.13: Animation of a Greedy Algorithm</video>
                  <p class="figure-name card-title">Fig 17.13: Animation of a Greedy Algorithm</p>
              </div>
              <div class="card">
                  <img src="..\Images\greedy.jpg" alt="Figure 17.14" class="fig card-image">
                  <p class="figure-name card-title">Figure 17.14: Greedy Algorithm at Work</p>
              </div>
          </div>
          <p>First, we change the fundamental algorithm - we will give up the desire for<a id="6885">!</a> an exact solution and settle for<a id="6886">!</a> a strategy that gives us a good enough answer most of the time.  There are many such algorithms<a id="6743">!</a> that are collectively referred to as "Greedy" algorithms<a id="6744">!</a>. A greedy algorithm will produce a solution as long as the graph has sufficient continuity, but is not guaranteed to produce the best. In addition to the cost of each edge, it also requires that each node be aware of its geographic<a id="6909">!</a> location. Figure 17.13 shows the usual animations using a crude greedy algorithm.  Don't blink - you might miss it all.</p>
          <p>The algorithm is quite simple:</p>
          <ol>
              <li>Beginning at the starting node, it evaluates the result of traveling along each of the feasible edges to a child node eliminating cyclic paths<a id="6966">!</a>. The evaluation takes the form of summing the cost of that edge and an estimate of the cost from that node to the destination. On a street map, for<a id="6887">!</a> example, the estimated cost of each step would be the length of the edge and the straight-line distance from the new node to the destination.</li>
              <li>It selects the step with the least cost, adds the node reached to the path, and repeats step 1 until the destination is reached, only back-tracking when it hits a physical or logical<a id="6929">!</a> cul-de-sac.</li>
              <li>Back-tracking is sometimes necessary if a node is reached from which there are no feasible paths<a id="6967">!</a>, such as driving into a physical or logical<a id="6930">!</a> cul-de-sac.</li>
              <li>Complete failure is possible, as it is for<a id="6888">!</a> the other algorithms<a id="6745">!</a>, if no physical path exists between the origin and destination nodes.</li>
              <li> it is also possible to produce a really silly answer. For example, consider the local street situation shown in Figure 17.14. This is a caricature of my first experiment on the first car I bought that had GPS. Suppose I were to ask for<a id="6889">!</a> a route from my home to some destination to the South. The path would start with A - D, and it would try and reject B and C when they reached their respective cul-de-sacs. To choose between the remaining children E and J, it would choose E because with any destination to the South, D - E plus E to the destination is shorter. But what about a destination to the North? D - J is then better than D - E, so on my first test of my new Nav system, the stupid thing wants me to go around the loop D - J - K - L - F ...!</li>
          </ol>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="5" data-sub-name="Serious Path Finding Algorithms">
      <!-- Serious Path Finding Algorithms -->
      <h3 id="17_6_5">17.6.5	Serious Path Finding Algorithms</h3>
      <div class="container">
          <p>We have seen earlier that theoretical algorithms<a id="6746">!</a> are OK for<a id="6890">!</a> small problems, but for<a id="6891">!</a> commercial algorithms<a id="6747">!</a> that process large quantities of data, much care must be taken to ensure that the algorithm is fast enough and covers the nasty cases that make algorithms<a id="6748">!</a> look foolish.</p>
          <ul>
              <li><b>"Layering" the problem</b>: Returning to the Sat Nav problem of finding a path from a house in Atlanta to a house in Los Angeles, if you were personally planning that route, you would not need to consider all the surface<a id="7064">!</a> streets across the country. Rather, you would probably use a greedy algorithm to compute the route from the starting place to the nearest expressway on ramp, and from the destination to the nearest off ramp. The remains of the trip would be taken care of with a greedy algorithm on expressways only from the selected on ramp to the selected off ramp, and then stitch the three paths<a id="6968">!</a> together.</li>
              <li><b>Informed Search</b>: A number of researchers have enhanced the basic greedy algorithm to avoid the silly solutions.  A* is one such algorithm. It uses heuristics to maintain a small number of competing paths<a id="6969">!</a> until they either became too costly or merged to a point where the best can be selected. One aspect of the algorithm design is choosing how many paths<a id="6970">!</a> to maintain. This becomes a trade-off between computational speed and the need to avoid ridiculous behavior.  A normal greedy algorithm is the fast end<a id="6850">!</a> of that spectrum and algorithms<a id="6749">!</a> like Dijkstras<a id="6829">!</a> is the slow end<a id="6851">!</a>.</li>
          </ul>
      </div>
    </div>
  </div>
Summary
  <div class="chp-section" data-sect-num="7" data-sect-name="Engineering Applications">
    <!-- Engineering Applications -->
    <h2 id="17_7">17.7	Engineering Applications</h2>
    <div class="container">
        <p>Many practical engineering<a id="6854">!</a> problems can be characterized as graph search problems.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Simple Applications">
       <!-- Simple Applications -->
      <h3 id="17_7_1">17.7.1	Simple Applications</h3>
      <div class="container">
          <p>MSTs are used by utility companies to find the least amount of cable that must be used to wire a subdivision.  Approximate path finding is used, for<a id="6892">!</a> example, in navigation systems that use GPS to find the current position of the vehicle and an approximate, greedy algorithm to determine the route to a destination.  Exact path finding is used to optimize the flight profile of commercial aircraft outside FAA-managed air space and can save as much as 10% of the fuel burned on every flight.</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Complex Extensions">
      <!-- Complex Extensions -->
      <h3 id="17_7_2">17.7.2	Complex Extensions</h3>
      <div class="container">
          <p>In addition to the obvious examples above, consider these examples:</p>
          <ul>
              <li>designing printed circuit boards is a complex extension of path finding</li>
              <li>stresses in a redundant structure<a id="7063">!</a> like an aircraft wing seek a path that is in some sense optimal, and</li>
              <li>the 'traveling salesperson problem" is an unpleasant extension of path finding in which the objective is to find the shorted linear<a id="6926">!</a> path that connects all of the nodes of a graph visiting each exactly once. For example, designing routes for<a id="6893">!</a> garbage collection<a id="6817">!</a> or school buses.</li>
          </ul>
          <p>Each of these belongs to a large class of problems called N-P Complete problems, a continued topic of research in many industrial engineering<a id="6855">!</a> communities.</p>
      </div>
    </div>
  </div>

  <!-- Chapter Summaries -->
  <h2>Chapter Summary</h2>
  <p>This chapter demonstrated effective algorithms<a id="6750">!</a> for<a id="6894">!</a> finding good paths<a id="6971">!</a> through a graph, and included the following:</p>
  <ul>
      <li>How to construct and use queues and priority<a id="6990">!</a> queues as the underlying mechanism for<a id="6895">!</a> graph traversal<a id="7065">!</a></li>
      <li>Prim's algorithm for<a id="6896">!</a> finding the minimum<a id="6935">!</a> spanning tree of a graph</li>
      <li>Depth-first, Breadth-first and Dijkstras<a id="6830">!</a> algorithms<a id="6751">!</a> for<a id="6897">!</a> finding exact paths<a id="6972">!</a>
      through a graph</li>
      <li>A greedy algorithm for<a id="6898">!</a> finding approximate paths<a id="6973">!</a> that are "good enough."</li>
  </ul>

  <!-- Programming Project -->
  <h2>Programming Project</h2>
  <p>Suppose that we would like to validate the assertion that the London Underground is designed to have at most two train changes between any pair of stations.</p>
  <ul>
      <li>Download the underground map from http://content.tfl.gov.uk/standard-tube-map.pdf.</li>
      <li>Then, construct a graph representing the major routes in that system. You will not need all the stations identified for<a id="6899">!</a> this exercise - only one station per track segment between transfer stations.</li>
      <li>Write some code that will determine the number of train changes to travel between any pair of stations using a breadth-first search to minimize the number of changes.</li>
      <li>Iterate across every pair of stations and find the station pair with the maximum number of train changes.</li>
      <li>Then, for<a id="6900">!</a> comparison, go to http://metromap.fr/en for<a id="6901">!</a> the equivalent map of the Paris metro.</li>
  </ul>
</div>

</body>
</html>


<!DOCTYPE HTML>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
  <link rel="stylesheet" href="styles/styles.css" />
  <script async src="./javascript/index.js"></script>
<title>Appendix A</title>
</head>
<body>
<div>#top_nav#</div>
<div class="nav-obj">#nav_obj#</div>

<div class="content">
  <h1 align="center" id="1">Appendix A - Special Characters and Reserved Words</h1>
<p>This appendix collects MATLAB<a id="5764"></a> special characters, reserved words and functions grouping them by function<a id="5710"></a>.</p>
<table>
<tr>
  <th style="width="250 pixels">Special Characters</th>
  <th>Description</th>
</r>
<tr><td ID="201">&lt;...&gt;</td><td>Used to indicate template parameters - data to be supplied</td></tr>
<tr><td ID="202">%</td><td>Indicates a comment in an m-file</td></tr>
<tr><td ID="203">{...}</td><td>Defines a cell array<a id="5610"></a></td></tr>
<tr><td ID="204">[ ]</td><td>The empty<a id="5662"></a> vector</td></tr>
<tr><td ID="205">[...]</td><td>Concatenates data, vectors, and arrays</td></tr>
<tr><td ID="206">( )</td><td>Used to override operator precedence</td></tr>
<tr><td ID="207">( )</td><td>Used to identify the formal<a id="5707"></a> and actual parameters<a id="5606"></a> of a function<a id="5711"></a></td></tr>
<tr><td ID="208">(...)</td><td>Used to index an array<a id="5611"></a></td></tr>
<tr><td ID="209">(&lt;variable<a id="5869"></a>&gt;)</td><td>Used to allow a variable<a id="5870"></a> to be used as a structure<a id="5820"></a> field<a id="5692"></a></td></tr>
<tr><td ID="210">'abc'</td><td>Encloses a literal character string</td></tr>
<tr><td>'</td><td>Transposes an array<a id="5612"></a></td></tr>
<tr><td ID="211">;</td><td>Suppresses output when after an assignment<a id="5629"></a> statement (explicit or implied) </td></tr>
<tr><td ID="212">;</td><td>Separates rows in an array<a id="5613"></a> definition</td></tr>
<tr><td ID="213">:</td><td>Specifies a vector in the form <from:incr:to></td></tr>
<tr><td ID="214">:</td><td>Used in slicing vectors and arrays</td></tr>
<tr><td ID="215">.</td><td>Used to access fields of a structure<a id="5821"></a></td></tr>
<tr><td ID="216">...</td><td>Used to continue<a id="5643"></a> a MATLAB<a id="5765"></a> command to the next line</td></tr>
<tr><th>Mathematical Operators</th><th>Description</th></r>
<tr><td>=</td><td>Assignment operator - assigns a value<a id="5856"></a> to a variable<a id="5871"></a> (memory location); not the same as an equality test</td></tr>
<tr><td>+</td><td>Scalar and array<a id="5614"></a> addition</td></tr>
<tr><td>−</td><td>Scalar and array<a id="5615"></a> subtraction</td></tr>
<tr><td>−</td><td>Unary negation</td></tr>
<tr><td>*</td><td>Matrix multiplication<a id="5781"></a></td></tr>
<tr><td>.*</td><td>Element-by-element multiplication<a id="5782"></a></td></tr>
<tr><td>/</td><td>Matrix division</td></tr>
<tr><td>./</td><td>Element-by-element division</td></tr>
<tr><td>^</td><td>Matrix exponentiation<a id="5680"></a></td></tr>
<tr><td>.^</td><td>Element-by-element   exponentiation<a id="5681"></a></td></tr>
<tr><th>Logical Operators</th><th>Description</th></r>
<tr><td><</td><td>Less than</td></tr>
<tr><td><=</td><td>Less than or equal to</td></tr>
<tr><td>></td><td>Greater than</td></tr>
<tr><td>>=</td><td>Greater than or equal<a id="5668"></a> to</td></tr>
<tr><td>==</td><td>Is equal<a id="5669"></a> to</td></tr>
<tr><td>&<a id="5793"></a>#126;=</td><td>Is not equal<a id="5670"></a> to</td></tr>
<tr><td>&<a id="5794"></a>#126;</td><td>Unary negation</td></tr>
<tr><td>&amp;</td><td>Element-by-element logical<a id="5752"></a> AND</td></tr>
<tr><td>&amp;&amp;</td><td>Short-circuit logical<a id="5753"></a> AND (scalar)</td></tr>
<tr><td>|</td><td>Element-by-element logical<a id="5754"></a> OR<a id="5791"></a></td></tr>
<tr><td>||</td><td>Short-circuit logical<a id="5755"></a> OR<a id="5792"></a> (scalar)</td></tr>
<tr><th>Logical Functions</th><th>Description</th></r>
<tr><td>all(<a id="5607"></a>a)</td><td>True if all the values in a (a logical<a id="5756"></a> vector) are true</td></tr>
<tr><td>and(<a id="5608"></a>a, b)</td><td>True if both a and b are true</td></tr>
<tr><td>any(<a id="5609"></a>a)</td><td>True if any of the values in a (a logical<a id="5757"></a> vector) are true</td></tr>
<tr><td>not(a)</td><td>True if a is false<a id="5683"></a>; false<a id="5684"></a> if a is true</td></tr>
<tr><td>or(a, b)</td><td>True if either a or b is true</td></tr>
</table>
<br>
<table>
<tr><th style="width="250 pixels">File Input and Output</th><th>Description</th></r>
<tr><td>csvread(<a id="5646"></a>&lt;file&gt;)</td><td>Read comma-separated text<a id="5842"></a> files</td></tr>
<tr><td>csvwrite(<a id="5647"></a>&lt;file&gt;,&lt;data&gt;)</td><td>Write comma-separated text<a id="5843"></a> files</td></tr>

<tr><td>dlmread (&lt;file&gt;,&lt;dlm&gt;)</td><td>Read text<a id="5844"></a> files separated by the given delimiting character(s)</td></tr>

<tr><td>dlmwrite(<a id="5658"></a>&lt;file&gt;,&lt;data&gt;,&lt;dlm&gt;)</td><td>Write text<a id="5845"></a> files separated by the given delimiting character(s)</td></tr>
<tr><td>fclose(<a id="5689"></a>&lt;handle&gt;)</td><td>Close a text<a id="5846"></a> file</td></tr>
<tr><td>fgetl(<a id="5690"></a>&lt;handle&gt;)</td><td>Read a line omitting the new-line character</td></tr>
<tr><td>fgets(<a id="5691"></a>&lt;handle&gt;)</td><td>Read a line including the new-line character</td></tr>
<tr><td>fh = fopen(<a id="5705"></a>&lt;name&gt;, &lt;why&gt;)</td><td>Open a text<a id="5847"></a> file</td></tr>
<tr><td>fprintf(<a id="5708"></a>&lt;handle&gt;,...)</td><td>Write to the console, or to plain text<a id="5848"></a> files (when <handle> is present</td></tr>
<tr><td>imread(&lt;&lt;file&gt;)</td><td>Read an image file</td></tr>
<tr><td>imwrite(&lt;&lt;data&gt;,&lt;file&gt;, &lt;format&gt;)</td><td>Write an image file</td></tr>

<tr><td>load &lt;file&gt;</td><td>Load the current workspace from a file</td></tr>
<tr><td>save &lt;file&gt;</td><td>Save workspace variables in a file</td></tr>
<tr><td>[tk rest] =	strtok(&lt;str&gt;,&lt;dlm&gt;)</td><td>Extract a token<a id="5855"></a> from a string and return the remainder of the string</td></tr>

<tr><td>ca = textscan(<a id="5853"></a>&lt;handle&gt;,&lt;format&gt;)</td><td>Acquire and scan a line of text<a id="5849"></a> according to a specific format and save the data in a cell array<a id="5616"></a></td></tr>
<tr><td>[data Fs nb] = wavread(<a id="5878"></a>&lt;file&gt;</td><td>Read a sound<a id="5810"></a> file in .wav<a id="5876"></a> format</td></tr>
<tr><td>wavwrite(<a id="5879"></a>&lt;data&gt;,&lt;Fs&gt;,&lt;nb&lt;file&gt;)</td><td>Write a sound<a id="5811"></a> file in .wav<a id="5877"></a> format</td></tr>
<tr><td>[nums, txt,raw] = readcell(<a id="5803"></a>&lt;file&gt;)</td><td>Read an Excel<a id="5674"></a> spreadsheet</td></tr>
<tr><td>writecell(<a id="5885"></a>&lt;file&gt;,&lt;data&gt;,&lt;sheet&gt;,&lt;range&gt;)</td><td>Write an Excel<a id="5675"></a> <tr><td>[nums, txt,raw] = xlsread(<a id="5887"></a>&lt;file&gt;)</td><td>Read an Excel<a id="5676"></a> spreadsheet</td></tr>
<tr><td>xlswrite(<a id="5888"></a>&lt;file&gt;,&lt;data&gt;,&lt;sheet&gt;,&lt;range&gt;)</td><td>Write an Excel<a id="5677"></a> spreadsheet in a specific row/column range</td></tr>
<tr><th>Format Control</th><th>Description</th></th>
<tr><td>%&lt;m&gt;.&lt;n&gt;e</td><td>	Exponential notation</td></tr>
<tr><td>%&lt;m&gt;.&lt;n&gt;f</td><td>	Fixed point or decimal notation</td></tr>
<tr><td>%&lt;m&gt;.&lt;n&gt;g</td><td>	Fixed point or exponential<a id="5679"></a> notation</td></tr>
<tr><td>%q</td><td>	A quoted string delimited by double quotes</td></tr>
<tr><td>%<n>s</td><td>	Character string</td></tr>
<tr><td>\b</td><td>	Backspace</td></tr>
<tr><td>\n</td><td>	New Line</td></tr>
<tr><td>\t</td><td>	Tab</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">User Interface
Management</th><th>Description</th></r>

<tr><td>ans</td><td>	Default variable<a id="5872"></a> name for results of calculations</td></tr>
<tr><td>clc<a id="5637"></a></td><td>Clear the interactions window</td></tr>
<tr><td>clear<a id="5638"></a> &lt;selection&gt;</td><td>Remove all (or selected) variables from the workspace</td></tr>
<tr><td>clf<a id="5639"></a></td><td>Clear the current figure</td></tr>
<tr><td>close<a id="5640"></a> all</td><td>Close all graphics windows<a id="5884"></a></td></tr>
<tr><td>exit</td><td>Terminate the user interface system</td></tr>
<tr><td>help<a id="5726"></a> &lt;topic	or function<a id="5712"></a>&gt;</td><td>Invoke the help<a id="5727"></a> utility</td></tr>

<tr><td>load &lt;file&gt;</td><td>Load the current workspace from a file</td></tr>
<tr><td>quit</td><td>Terminate the user interface system</td></tr>
<tr><td>save <file></td><td>Save workspace variables in a file</td></tr>
<tr><td>who<a id="5882"></a></td><td>List variables in the workspace</td></tr>
<tr><td>whos<a id="5883"></a></td><td>List variables and their sizes</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Special Constants</th><th>Description</th></r>
<tr><td>eps</td><td>	Smallest possible difference between two floating point numbers<a id="5784"></a></td></tr>
<tr><td>false<a id="5685"></a></td><td>	Logical false<a id="5686"></a></td></tr>
<tr><td>inf</td><td>	Infinity</td></tr>
<tr><td>NaN<a id="5783"></a></td><td>	Not a number</td></tr>
<tr><td>pi</td><td>	Ratio of the circumference of a circle to its diameter</td></tr>
<tr><td>true</td><td>	Logical true</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Basic Mathematical
Functions</th><th>Description</th></r>
<tr><td>abs(x)</td><td>Compute the absolute value<a id="5857"></a></td></tr>
<tr><td>ceil(<a id="5634"></a>x)</td><td>Round x to the nearest integer toward positive infinity</td></tr>
<tr><td>cross(<a id="5645"></a>a, b)</td><td>Vector cross product</td></tr>
<tr><td>exp(x)</td><td>Compute e to the power x</td></tr>
<tr><td>fix(<a id="5703"></a>x)</td><td>Round x to the nearest integer toward zero</td></tr>
<tr><td>floor(<a id="5704"></a>x)</td><td>Round x to the nearest integer toward minus infinity</td></tr>
<tr><td>log(x)</td><td>Compute the natural log of x</td></tr>
<tr><td>log10(x)</td><td>Compute the log base 10 of x</td></tr>
<tr><td>mod(x, a)</td><td>Compute the remainder when x is divided by a</td></tr>
<tr><td>rem(x, a)</td><td>Compute the remainder when x is divided by a</td></tr>
<tr><td>round(<a id="5806"></a>x)</td><td>Round x to the nearest integer</td></tr>
<tr><td>sqrt(x)</td><td>Calculate the square<a id="5815"></a> root of x</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Trigonometry Functions</th><th>Description</td></tr>
<tr><td>acos(x)</td><td>Compute the inverse cosine (arcsine) of x</td></tr>
<tr><td>asin(x)</td><td>Compute the inverse sine (arcsine) of x</td></tr>
<tr><td>atan(x)</td><td>Compute the inverse tangent (arctan) of x</td></tr>
<tr><td>atan2(y, x)</td><td>Compute the inverse tangent given the x and y values (4 quadrant
resolution<a id="5804"></a>)</td></tr>
<tr><td>cos(x)</td><td>Compute the cosine of x</td></tr>
<tr><td>sin(x)</td><td>Compute the sine of x</td></tr>
<tr><td>tan(x)</td><td>Compute the tangent of x</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Vector, Array, and Matrix
Functions</th><th>Description</td></tr>
<tr><td>cumsum(<a id="5651"></a>v)</td><td>Compute a cumulative sum of the values in v</td></tr>
<tr><td>deal(<a id="5652"></a>...)</td><td>Distribute cell array<a id="5617"></a> results among variables</td></tr>
<tr><td>det(a)</td><td>Compute the determinant of a matrix<a id="5766"></a></td></tr>
<tr><td>diag(<a id="5653"></a>a)</td><td>Extract the diagonal<a id="5654"></a> from a matrix<a id="5767"></a> or (if provided a is a vector) construct a matrix<a id="5768"></a> with a as the diagonal<a id="5655"></a></td></tr>
<tr><td>eye(<a id="5682"></a>n)</td><td>Generate the identity matrix<a id="5769"></a> of size n x n</td></tr>
<tr><td>find(<a id="5702"></a>&lt;logical<a id="5758"></a> a&gt;)</td><td>Compute a linear<a id="5747"></a> list of the locations of the true values in a logical<a id="5759"></a> array<a id="5618"></a></td></tr>
<tr><td>fliplr(a)</td><td>Flip a matrix<a id="5770"></a> from left to right</td></tr>
<tr><td>inv(<a id="5736"></a>a)</td><td>Compute the inverse of a matrix<a id="5771"></a></td></tr>
<tr><td>length(<a id="5746"></a>a)</td><td>Determine the largest dimension of an array<a id="5619"></a></td></tr>
<tr><td>linspace(<a id="5751"></a>from,to, n)</td><td>Define a linearly spaced vector</td></tr>
<tr><td>magic(<a id="5763"></a>n)</td><td>Generate a magic square<a id="5816"></a> of size n x n</td></tr> 
<tr><td>[v,in] = max(<a id="5775"></a>a)</td><td>Find the maximum value<a id="5858"></a> and its position in a </td></tr>
<tr><td>mean(<a id="5776"></a>a)</td><td>Compute the average of the elements in a </td></tr>
<tr><td>meshgrid(<a id="5777"></a>x, y)</td><td>Map each of two vectors into separate 2-D arrays</td></tr>
<tr><td>[v,in] = min(<a id="5779"></a>a)</td><td>Find the minimum<a id="5780"></a> value<a id="5859"></a> and its position in a </td></tr>
<tr><td>ones(<a id="5790"></a>r, c)</td><td>Generate an array<a id="5620"></a> filled with the value<a id="5860"></a> 1</td></tr>
<tr><td>prod(x)</td><td>Compute the product of all the items in x</td></tr>
<tr><td>rand(<a id="5801"></a>r, c)</td><td>Calculate an r x c array<a id="5621"></a> of evenly distributed random numbers<a id="5785"></a> in
the range 0 - 1</td></tr>
<tr><td>randi(IMAX,M,N)</td><td>Calculate an M x N array<a id="5622"></a> of evenly distributed random integers in the range 1..IMAX</td></tr>
<tr><td>randn(<a id="5802"></a>r, c)</td><td>Calculate an r x c array<a id="5623"></a> of normally distributed random numbers<a id="5786"></a> in the range 0 - 1</td></tr>
<tr><td>size(<a id="5808"></a>a)</td><td>Determine the dimensions of an array<a id="5624"></a></td></tr>
<tr><td>sparse</td><td>Define a sparse matrix<a id="5772"></a></td></tr>
<tr><td>[v,in] = sort(<a id="5809"></a>v)</td><td>Sort the vector v (a vector or a cell array<a id="5625"></a> of strings)</td></tr>
<tr><td>sum(<a id="5830"></a>a)</td><td>Find the sum of an array<a id="5626"></a></td></tr>
<tr><td>zeros(<a id="5890"></a>r, c)</td><td>Build an array<a id="5627"></a> filled with the value<a id="5861"></a> 0</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">2-D Plotting</th><th>Description</td></tr>
<tr><td>bar</td><td>Generate a bar graph</td></tr>
<tr><td>barh</td><td>Generate a horizontal bar graph</td></tr>
<tr><td>contour</td><td>Generate a contour plot</td></tr>
<tr><td>hist</td><td>Draw a histogram</td></tr>
<tr><td>loglog</td><td>Generate an x-y plot, with both axes scaled logarithmically</td></tr>
<tr><td>pie</td><td>Generate a pie chart</td></tr>
<tr><td>plot</td><td>Create an x-y plot</td></tr>
<tr><td>polar</td><td>Create a polar plot</td></tr>
<tr><td>semilogx</td><td>Generate an x-y plot, with the x-axis scaled logarithmically</td></tr>
<tr><td>semilogy</td><td>Generate an x-y plot, with the y-axis scaled logarithmically</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">3-D Plotting</th><th>Description</td></tr>
<tr><td>bar3</td><td>Generate a 3-D bar graph</td></tr>
<tr><td>barh3</td><td>Generate a horizontal 3-D bar graph</td></tr>
<tr><td>gplot</td><td>Plot a graph</td></tr>
<tr><td>mesh</td><td>Generate a mesh plot of a surface<a id="5831"></a></td></tr>
<tr><td>meshc</td><td>Generate a mesh plot of a surface<a id="5832"></a> with contours</td></tr>
<tr><td>meshz</td><td>Generate a mesh plot of a surface<a id="5833"></a> with a skirt</td></tr>
<tr><td>meshgrid(<a id="5778"></a>r, c)</td><td>Create a plaid<a id="5795"></a> for 3-D plots<a id="5796"></a></td></tr>
<tr><td>peaks</td><td>Create a sample matrix<a id="5773"></a> used to demonstrate graphing functions</td></tr>
<tr><td>pie3</td><td>Generate a 3-D pie chart</td></tr>
<tr><td>plot3</td><td>Generate a 3-D line plot</td></tr>
<tr><td>sphere<a id="5812"></a></td><td>Example function<a id="5713"></a> used to demonstrate graphing</td></tr>
<tr><td>surf</td><td>Generate a surface<a id="5834"></a> plot</td></tr>
<tr><td>surfc</td><td>Generate a combination surface<a id="5835"></a> and contour plot</td></tr>
<tr><td>waterfall</td><td>Generate a mesh plot of a surface<a id="5836"></a> with one skirt edge</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Plot Appearance Line
Type Control</th><th>Description</td></tr>
<tr><td>-</td><td>Solid</td></tr>
<tr><td>:</td><td>Dotted</td></tr>
<tr><td>-.</td><td>Dash-dot</td></tr>
<tr><td>--</td><td>Dashed</td></tr>
<tr><td>.</td><td>Point</td></tr>
<tr><td>o</td><td>Circle</td></tr>
<tr><td>x</td><td>x-mark</td></tr>
<tr><td>+</td><td>Plus</td></tr>
<tr><td>*</td><td>Star</td></tr>
<tr><td>s</td><td>Square</td></tr>
<tr><td>d</td><td>Diamond</td></tr>
<tr><td>v</td><td>Triangle down</td></tr>
<tr><td>^</td><td>Triangle up</td></tr>
<tr><td>&lt;</td><td>Triangle left</td></tr>
<tr><td>&gt;</td><td>Triangle right</td></tr>
<tr><td>p</td><td>Pentagram</td></tr>
<tr><td>h</td><td>Hexagram</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Color Control Character</th><th>Description</td></tr>
<tr><td>b</td><td>Blue</td></tr>
<tr><td>c</td><td>Cyan</td></tr>
<tr><td>g</td><td>Green</td></tr>
<tr><td>k</td><td>Black</td></tr>
<tr><td>m</td><td>Magenta</td></tr>
<tr><td>r</td><td>Red</td></tr>
<tr><td>w</td><td>White</td></tr>
<tr><td>y</td><td>Yellow</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Figure Control</th><th>Description</td></tr>
<tr><td>axis</td><td>Freezes the current axis scaling for the current plot or specifies the axis dimensions</td></tr>
<tr><td>figure <n></td><td>Open a new figure window. If present, <n> specifies a figure number</td></tr>
<tr><td>grid<a id="5723"></a> off/on</td><td>Turn the grid<a id="5724"></a> off or on</td></tr>
<tr><td>hold<a id="5729"></a> off/on</td><td>If hold<a id="5730"></a> is not set, erase figure contents before the next plotting instruction</td></tr>
<tr><td>legend(ca)</td><td>Add a legend to a graph</td></tr>
<tr><td>shading <value></td><td>Shade a surface<a id="5837"></a> plot with one color<a id="5641"></a> per grid<a id="5725"></a> section </td></tr>
<tr><td>subplot(<a id="5829"></a>plts, n)</td><td>Divide the graphics window up into sections available for plotting</td></tr>
<tr><td>text(x,y,str)</td><td>Add text<a id="5850"></a> to a plot</td></tr>
<tr><td>title(<a id="5854"></a>str)</td><td>Add a title to a plot</td></tr>
<tr><td>xlabel(<a id="5886"></a>str)</td><td>Add a label to the x-axis</td></tr>
<tr><td>ylabel(<a id="5889"></a>str)</td><td>Add a label to the y-axis</td></tr>
<tr><td>zlabel(<a id="5891"></a>str)</td><td>Add a label to the z-axis</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Color Map Values</th><th>Description</td></tr>
<tr><td>autumn</td><td>yellow, orange, and red colors</td></tr>
<tr><td>bone</td><td>shades of gray</td></tr>
<tr><td>colorcube</td><td>multiple multi-color<a id="5642"></a> bands</td></tr>
<tr><td>cool</td><td>light blue to purple</td></tr>
<tr><td>copper</td><td>shades of red-brown</td></tr>
<tr><td>flag</td><td>multiple red, white, and blue bands</td></tr>
<tr><td>hot</td><td>deep red through orange to white</td></tr>
<tr><td>hsv</td><td>single spectrum from red to purple</td></tr>
<tr><td>jet</td><td>default) rainbow from blue to red</td></tr>
<tr><td>pink</td><td>from dark to light pink</td></tr>
<tr><td>prism</td><td>multiple bands of spectrum colors</td></tr>
<tr><td>spring</td><td>from purple to yellow</td></tr>
<tr><td>summer</td><td>from dark green to yellow</td></tr>
<tr><td>white</td><td>all white</td></tr>
<tr><td>winter</td><td>from dark blue to light green</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">String Operations</th><th>Description</td></tr>
<tr><td>disp(<a id="5657"></a>...)</td><td>Display matrix<a id="5774"></a> or text<a id="5851"></a></td></tr>
<tr><td>fprintf(<a id="5709"></a>...)</td><td>Print formatted information</td></tr>
<tr><td>input(...)</td><td>Prompt the user to enter a value<a id="5862"></a> and parse the result</td></tr>
<tr><td>int2str(<a id="5735"></a>a)</td><td>Convert an integer to its numerical<a id="5787"></a> representation</td></tr>
<tr><td>num2str(<a id="5789"></a>a,n)</td><td>Convert a number to its numerical<a id="5788"></a> representation with n
decimal places</td></tr>
<tr><td>sprintf(<a id="5814"></a>...)</td><td>Format a string result</td></tr>
<tr><td>sscanf(<a id="5817"></a>...)</td><td>Formatted input conversion</td></tr>
<tr><td>strcmp(<a id="5818"></a>s1, s2)</td><td>Compare two strings - returns true if equal<a id="5671"></a></td></tr>
<tr><td>strcmpi(<a id="5819"></a>s1, s2)</td><td>Compare two strings without regard to case<a id="5630"></a> - returns true if equal<a id="5672"></a></td></tr>
<tr><td>textscan</td><td>Scan a text<a id="5852"></a> string</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Time-Related Functions</th><th>Description</td></tr>
<tr><td>clock</td><td>Determine the current time on the CPU clock</td></tr>
<tr><td>etime</td><td>Find elapsed time</td></tr>
<tr><td>pause</td><td>Pause the execution<a id="5678"></a> of a program, either until any key is hit or for a specified number of seconds</td></tr>
<tr><td>tic</td><td>Start a timing sequence</td></tr>
<tr><td>toc</td><td>Stop a timing sequence and return the elapsed time</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Numerical Methods</th><th>Description</td></tr>
<tr><td>diff(<a id="5656"></a>v)</td><td>Compute the differences between adjacent values in a vector</td></tr>
<tr><td>interp1</td><td>Compute linear<a id="5748"></a> and cubic<a id="5648"></a> interpolation<a id="5731"></a></td></tr>
<tr><td>interp2</td><td>Compute linear<a id="5749"></a> and cubic<a id="5649"></a> interpolation<a id="5732"></a></td></tr>
<tr><td>interp3</td><td>Compute linear<a id="5750"></a> and cubic<a id="5650"></a> interpolation<a id="5733"></a> </td></tr>
<tr><td>polyfit(<a id="5797"></a>x, y, n)</td><td>Compute a least-squares polynomial<a id="5798"></a> </td></tr>
<tr><td>polyval(<a id="5800"></a>c, x)</td><td>Evaluate a polynomial<a id="5799"></a></td></tr>
<tr><td>spline(<a id="5813"></a>x, y)</td><td>Spline interpolation<a id="5734"></a></td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Program Control</th><th>Description</td></tr>
<tr><td>break</td><td>A command within a loop module that forces<a id="5706"></a> control to the statement following the innermost loop</td></tr>
<tr><td>case<a id="5631"></a></td><td>A specific value<a id="5863"></a> alternative within a switch<a id="5838"></a> statement</td></tr>
<tr><td>catch<a id="5632"></a></td><td>End of a suspect code block where the exception is trapped</td></tr>
<tr><td>continue<a id="5644"></a></td><td>Skip to the end<a id="5664"></a> of the innermost loop, but remains inside it</td></tr>
<tr><td>else<a id="5660"></a></td><td>Within an if statement, begin the code block executed when the condition is false<a id="5687"></a></td></tr>
<tr><td>elseif<a id="5661"></a></td><td>Within an if statement, begin a subsequent test when the result of
&lt;expression&gt;	the previous test is false<a id="5688"></a></td></tr>
<tr><td>end<a id="5665"></a></td><td>Terminate a function<a id="5714"></a> specification or an if, switch<a id="5839"></a>, for, while<a id="5880"></a>, or catch<a id="5633"></a> block.</td></tr>
<tr><td>end<a id="5666"></a></td><td>When indexing, the value<a id="5864"></a> of the last element in an index vector</td></tr>
<tr><td>for var = v</td><td>A code block repeated as many times as there are elements in the
vector v</td></tr>
<tr><td>function<a id="5715"></a></td><td>Identify an m-file as a function<a id="5716"></a> or begin a helper<a id="5728"></a> function<a id="5717"></a> within a
function<a id="5718"></a> file</td></tr>
<tr><td>error(<a id="5673"></a>str)</td><td>Throw an exception to announce an error with the string provided</td></tr>
<tr><td>global<a id="5722"></a> var</td><td>Define a variable<a id="5873"></a> as globally accessible</td></tr>
<tr><td>if &lt;expression&gt;</td><td>Begin a conditional module—the following code block is executed if the logical<a id="5760"></a> expression is true</td></tr>
<tr><td>lasterror</td><td>Provide a structure<a id="5822"></a> describing the environment from which an
exception was thrown</td></tr>
<tr><td>nargin</td><td>Determine the number of input parameters actually supplied by a function<a id="5719"></a>'s caller</td></tr>
<tr><td>nargout</td><td>Determine the number of output parameters actually requested by a function<a id="5720"></a>'s caller</td></tr>
<tr><td>otherwise</td><td>Catch-all code block at the end<a id="5667"></a> of a switch<a id="5840"></a> statement</td></tr>
<tr><td>switch<a id="5841"></a> &lt;variable<a id="5874"></a>&gt;</td><td>Begin a code module selecting specific values of the variable<a id="5875"></a>>(must be countable)</td></tr>
<tr><td>try</td><td>Begin a block of suspect code from which an exception might be thrown
<tr><td>while<a id="5881"></a> &lt;expression&gt;</td><td>A code module repeated as long as the logical<a id="5761"></a> expression is true</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Data Class Operations</th><th>Description</td></tr>
<tr><td>char(<a id="5635"></a>...)</td><td>Cast to a character type </td></tr>
<tr><td>class(<a id="5636"></a>&lt;object&gt;)</td><td>Determine the data type of an <tr><td>object </td></tr>
<tr><td>double(<a id="5659"></a>a)</td><td>Cast a to type double</td></tr>
<tr><td>int8/16/32/64(a)</td><td>Cast a to integer type with the specified number of bits </td></tr>
<tr><td>uint8/16/32/64(a)</td><td>Cast a to unsigned integer type with the specified number of bits </td></tr>
<tr><td>isa(<a id="5737"></a>obj, str)</td><td>Test for a given data type</td></tr>
<tr><td>ischar(<a id="5739"></a>ch)</td><td>Determine whether the given object is of type char iscell(<a id="5738"></a>...)	Determine whether the given object is a cell </td></tr>
<tr><td>isempty(<a id="5740"></a>a)</td><td>Test for the empty<a id="5663"></a> vector [ ]</td></tr>
<tr><td>islogical(<a id="5742"></a>a)</td><td>Determine whether the given object is of type logical<a id="5762"></a> </td></tr>
<tr><td>isnumeric(<a id="5743"></a>a)</td><td>Determine whether the given object is of type double </td></tr>
<tr><td>isspace(<a id="5744"></a>a)</td><td>Test for the space character</td></tr>
<tr><td>isstruct(<a id="5745"></a>a)</td><td>Determine whether the given object is a structure<a id="5823"></a></td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Structure Operations</th><th>Description</td></tr>
<tr><td>fieldnames(<a id="5701"></a>str)</td><td>Return a cell array<a id="5628"></a> containing strings that are the names of the fields in the structure<a id="5824"></a></td></tr>
<tr><td>getfield(<a id="5721"></a>str,field<a id="5693"></a>)</td><td>Extract the value<a id="5865"></a> of the field<a id="5694"></a></td></tr>

<tr><td>isfield(<a id="5741"></a>str, field<a id="5695"></a>)</td><td>Return true if the string is a field<a id="5696"></a> in the specified structure<a id="5825"></a></td></tr>
<tr><td>str = rmfield(<a id="5805"></a>str, field<a id="5697"></a>)</td><td>Return a copy of the given structure<a id="5826"></a> with the given field<a id="5698"></a> removed</td></tr>

<tr><td>str = setfield(<a id="5807"></a>str, field<a id="5699"></a>,value<a id="5866"></a>)</td><td>Construct a structure<a id="5827"></a> in which the value<a id="5867"></a> of the field<a id="5700"></a> has been changed to the given value<a id="5868"></a></td></tr>

<tr><td>struct(...)</td><td>Construct a structure<a id="5828"></a> from <fieldname> <value> pairs of
parameters</td></tr>
</table>

 </div>


</body>
</html>



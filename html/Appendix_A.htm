<!DOCTYPE HTML>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
  <link rel="stylesheet" href="styles/styles.css" />
  <script async src="./javascript/index.js"></script>
<title>Appendix A</title>
</head>
<body>
<div>#top_nav#</div>
<div class="nav-obj">#nav_obj#</div>

<div class="content">
  <h1 align="center" id="1">Appendix A - Special Characters and<a id="18211"></a> Reserved Words</h1>
<p>This appendix collects MATLAB<a id="18268"></a> special characters, reserved words and<a id="18212"></a> functions<a id="18461"></a> grouping them by function<a id="18098"></a>.</p>
<table>
<tr>
  <th style="width="250 pixels">Special Characters</th>
  <th>Description</th>
</r>
<tr><td ID="201">&lt;...&gt;</td><td>Used to<a id="18301"></a> indicate template<a id="18187"></a> parameters<a id="18492"></a> - data<a id="18270"></a> to<a id="18302"></a> be supplied</td></tr>
<tr><td ID="202">%</td><td>Indicates a comment in an m-file</td></tr>
<tr><td ID="203">{...}</td><td>Defines a cell<a id="17990"></a> array<a id="17971"></a></td></tr>
<tr><td ID="204">[ ]</td><td>The empty<a id="18047"></a> vector</td></tr>
<tr><td ID="205">[...]</td><td>Concatenates data<a id="18271"></a>, vectors, and<a id="18213"></a> arrays</td></tr>
<tr><td ID="206">( )</td><td>Used to<a id="18303"></a> override operator precedence<a id="18357"></a></td></tr>
<tr><td ID="207">( )</td><td>Used to<a id="18304"></a> identify the formal<a id="18095"></a> and<a id="18214"></a> actual parameters<a id="17967"></a> of<a id="18381"></a> a function<a id="18099"></a></td></tr>
<tr><td ID="208">(...)</td><td>Used to<a id="18305"></a> index an array<a id="17972"></a></td></tr>
<tr><td ID="209">(&lt;variable<a id="18496"></a>&gt;)</td><td>Used to<a id="18306"></a> allow a variable<a id="18497"></a> to<a id="18307"></a> be used as a structure<a id="18452"></a> field<a id="18081"></a></td></tr>
<tr><td ID="210">'abc'</td><td>Encloses a literal character<a id="18263"></a> string</td></tr>
<tr><td>'</td><td>Transposes an array<a id="17973"></a></td></tr>
<tr><td ID="211">;</td><td>Suppresses output when after an assignment<a id="18011"></a> statement (explicit or implied) </td></tr>
<tr><td ID="212">;</td><td>Separates rows in an array<a id="17974"></a> definition</td></tr>
<tr><td ID="213">:</td><td>Specifies a vector in the form <from:incr:to></td></tr>
<tr><td ID="214">:</td><td>Used in slicing<a id="18448"></a> vectors and<a id="18215"></a> arrays</td></tr>
<tr><td ID="215">.</td><td>Used to<a id="18308"></a> access fields of<a id="18382"></a> a structure<a id="18453"></a></td></tr>
<tr><td ID="216">...</td><td>Used to<a id="18309"></a> continue<a id="18026"></a> a MATLAB<a id="18269"></a> command to<a id="18310"></a> the next line</td></tr>
<tr><th>Mathematical Operators</th><th>Description</th></r>
<tr><td>=</td><td>Assignment operator - assigns a value<a id="18479"></a> to<a id="18311"></a> a variable<a id="18498"></a> (memory location); not the same as an equality test</td></tr>
<tr><td>+</td><td>Scalar and<a id="18216"></a> array<a id="17975"></a> addition</td></tr>
<tr><td>−</td><td>Scalar and<a id="18217"></a> array<a id="17976"></a> subtraction</td></tr>
<tr><td>−</td><td>Unary negation</td></tr>
<tr><td>*</td><td>Matrix multiplication<a id="18009"></a></td></tr>
<tr><td>.*</td><td>Element-by-element multiplication<a id="18010"></a></td></tr>
<tr><td>/</td><td>Matrix division<a id="17996"></a></td></tr>
<tr><td>./</td><td>Element-by-element division<a id="17997"></a></td></tr>
<tr><td>^</td><td>Matrix exponentiation<a id="18069"></a></td></tr>
<tr><td>.^</td><td>Element-by-element   exponentiation<a id="18070"></a></td></tr>
<tr><th>Logical Operators</th><th>Description</th></r>
<tr><td><</td><td>Less than</td></tr>
<tr><td><=</td><td>Less than or equal to</td></tr>
<tr><td>></td><td>Greater than</td></tr>
<tr><td>>=</td><td>Greater than or equal<a id="18057"></a> to<a id="18312"></a></td></tr>
<tr><td>==</td><td>Is equal<a id="18058"></a> to<a id="18313"></a></td></tr>
<tr><td>&<a id="18368"></a>#126;=</td><td>Is not equal<a id="18059"></a> to<a id="18314"></a></td></tr>
<tr><td>&<a id="18369"></a>#126;</td><td>Unary negation</td></tr>
<tr><td>&amp;</td><td>Element-by-element logical<a id="17998"></a> AND<a id="18444"></a></td></tr>
<tr><td>&amp;&amp;</td><td>Short-circuit logical<a id="17999"></a> AND<a id="18445"></a> (scalar)</td></tr>
<tr><td>|</td><td>Element-by-element logical<a id="18000"></a> OR<a id="18358"></a></td></tr>
<tr><td>||</td><td>Short-circuit logical<a id="18001"></a> OR<a id="18359"></a> (scalar)</td></tr>
<tr><th>Logical Functions</th><th>Description</th></r>
<tr><td>all(<a id="17968"></a>a)</td><td>True if all the values in a (a logical<a id="18002"></a> vector) are true<a id="18198"></a></td></tr>
<tr><td>and(<a id="17969"></a>a, b)</td><td>True if both a and<a id="18218"></a> b are true<a id="18199"></a></td></tr>
<tr><td>any(<a id="17970"></a>a)</td><td>True if any of<a id="18383"></a> the values in a (a logical<a id="18003"></a> vector) are true<a id="18200"></a></td></tr>
<tr><td>not(a)</td><td>True if a is false<a id="18072"></a>; false<a id="18073"></a> if a is true<a id="18201"></a></td></tr>
<tr><td>or(a, b)</td><td>True if either a or b is true<a id="18202"></a></td></tr>
</table>
<br>
<table>
<tr><th style="width="250 pixels">File Input and<a id="18219"></a> Output</th><th>Description</th></r>
<tr><td>csvread(<a id="18029"></a>&lt;file&gt;)</td><td>Read comma-separated text<a id="18467"></a> files</td></tr>
<tr><td>csvwrite(<a id="18030"></a>&lt;file&gt;,&lt;data<a id="18272"></a>&gt;)</td><td>Write comma-separated text<a id="18468"></a> files</td></tr>

<tr><td>dlmread (&lt;file&gt;,&lt;dlm&gt;)</td><td>Read text<a id="18469"></a> files separated by the given delimiting character(s)</td></tr>

<tr><td>dlmwrite(<a id="18043"></a>&lt;file&gt;,&lt;data<a id="18273"></a>&gt;,&lt;dlm&gt;)</td><td>Write text<a id="18470"></a> files separated by the given delimiting character(s)</td></tr>
<tr><td>fclose(<a id="18078"></a>&lt;handle&gt;)</td><td>Close a text<a id="18471"></a> file</td></tr>
<tr><td>fgetl(<a id="18079"></a>&lt;handle&gt;)</td><td>Read a line omitting the new-line character<a id="18264"></a></td></tr>
<tr><td>fgets(<a id="18080"></a>&lt;handle&gt;)</td><td>Read a line including the new-line character<a id="18265"></a></td></tr>
<tr><td>fh = fopen(<a id="18094"></a>&lt;name&gt;, &lt;why&gt;)</td><td>Open a text<a id="18472"></a> file</td></tr>
<tr><td>fprintf(<a id="18096"></a>&lt;handle&gt;,...)</td><td>Write to<a id="18315"></a> the console, or to<a id="18316"></a> plain text<a id="18473"></a> files (when <handle> is present</td></tr>
<tr><td>imread(<a id="18131"></a>&lt;&lt;file&gt;)</td><td>Read an image<a id="18379"></a> file</td></tr>
<tr><td>imwrite(<a id="18132"></a>&lt;&lt;data<a id="18274"></a>&gt;,&lt;file&gt;, &lt;format<a id="18191"></a>&gt;)</td><td>Write an image<a id="18380"></a> file</td></tr>

<tr><td>load &lt;file&gt;</td><td>Load the current workspace from<a id="18109"></a> a file</td></tr>
<tr><td>save &lt;file&gt;</td><td>Save workspace variables in a file</td></tr>
<tr><td>[tk rest] =	strtok(<a id="18171"></a>&lt;str&gt;,&lt;dlm&gt;)</td><td>Extract a token<a id="18018"></a> from<a id="18110"></a> a string and<a id="18220"></a> return the remainder of<a id="18384"></a> the string</td></tr>

<tr><td>ca = textscan(<a id="18176"></a>&lt;handle&gt;,&lt;format<a id="18192"></a>&gt;)</td><td>Acquire and<a id="18221"></a> scan a line of<a id="18385"></a> text<a id="18474"></a> according to<a id="18317"></a> a specific format<a id="18193"></a> and<a id="18222"></a> save the data<a id="18275"></a> in a cell<a id="17991"></a> array<a id="17977"></a></td></tr>
<tr><td>[data<a id="18276"></a> Fs nb] = wavread(<a id="18178"></a>&lt;file&gt;</td><td>Read a sound<a id="18446"></a> file in .wav<a id="18509"></a> format<a id="18194"></a></td></tr>
<tr><td>wavwrite(<a id="18179"></a>&lt;data<a id="18277"></a>&gt;,&lt;Fs&gt;,&lt;nb&lt;file&gt;)</td><td>Write a sound<a id="18447"></a> file in .wav<a id="18510"></a> format<a id="18195"></a></td></tr>
<tr><td>[nums, txt,raw] = readcell(<a id="18160"></a>&lt;file&gt;)</td><td>Read an Excel<a id="18063"></a> spreadsheet<a id="18054"></a></td></tr>
<tr><td>writecell(<a id="18180"></a>&lt;file&gt;,&lt;data<a id="18278"></a>&gt;,&lt;sheet&gt;,&lt;range&gt;)</td><td>Write an Excel<a id="18064"></a> <tr><td>[nums, txt,raw] = xlsread(<a id="18182"></a>&lt;file&gt;)</td><td>Read an Excel<a id="18065"></a> spreadsheet<a id="18055"></a></td></tr>
<tr><td>xlswrite(<a id="18183"></a>&lt;file&gt;,&lt;data<a id="18279"></a>&gt;,&lt;sheet&gt;,&lt;range&gt;)</td><td>Write an Excel<a id="18066"></a> spreadsheet<a id="18056"></a> in a specific row/column range</td></tr>
<tr><th>Format Control</th><th>Description</th></th>
<tr><td>%&lt;m&gt;.&lt;n&gt;e</td><td>	Exponential notation</td></tr>
<tr><td>%&lt;m&gt;.&lt;n&gt;f</td><td>	Fixed point or decimal notation</td></tr>
<tr><td>%&lt;m&gt;.&lt;n&gt;g</td><td>	Fixed point or exponential<a id="18068"></a> notation</td></tr>
<tr><td>%q</td><td>	A quoted string delimited<a id="18478"></a> by double quotes</td></tr>
<tr><td>%<n>s</td><td>	Character string</td></tr>
<tr><td>\b</td><td>	Backspace</td></tr>
<tr><td>\n</td><td>	New Line</td></tr>
<tr><td>\t</td><td>	Tab</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">User Interface
Management</th><th>Description</th></r>

<tr><td>ans</td><td>	Default variable<a id="18499"></a> name for<a id="18513"></a> results of<a id="18386"></a> calculations</td></tr>
<tr><td>clc<a id="18020"></a></td><td>Clear the interactions window</td></tr>
<tr><td>clear<a id="18021"></a> &lt;selection&gt;</td><td>Remove all (or selected) variables from<a id="18111"></a> the workspace</td></tr>
<tr><td>clf<a id="18022"></a></td><td>Clear the current figure</td></tr>
<tr><td>close<a id="18023"></a> all</td><td>Close all graphics windows<a id="18525"></a></td></tr>
<tr><td>exit</td><td>Terminate the user<a id="18282"></a> interface system</td></tr>
<tr><td>help<a id="18188"></a> &lt;topic	or function<a id="18100"></a>&gt;</td><td>Invoke the help<a id="18189"></a> utility</td></tr>

<tr><td>load &lt;file&gt;</td><td>Load the current workspace from<a id="18112"></a> a file</td></tr>
<tr><td>quit</td><td>Terminate the user<a id="18283"></a> interface system</td></tr>
<tr><td>save <file></td><td>Save workspace variables in a file</td></tr>
<tr><td>who<a id="18523"></a></td><td>List variables in the workspace</td></tr>
<tr><td>whos<a id="18524"></a></td><td>List variables and<a id="18223"></a> their sizes</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Special Constants</th><th>Description</th></r>
<tr><td>eps</td><td>	Smallest possible difference between two floating point numbers<a id="18298"></a></td></tr>
<tr><td>false<a id="18074"></a></td><td>	Logical false<a id="18075"></a></td></tr>
<tr><td>inf</td><td>	Infinity</td></tr>
<tr><td>NaN<a id="18297"></a></td><td>	Not a number</td></tr>
<tr><td>pi</td><td>	Ratio of<a id="18387"></a> the circumference of<a id="18388"></a> a circle to<a id="18318"></a> its diameter</td></tr>
<tr><td>true<a id="18203"></a></td><td>	Logical true<a id="18204"></a></td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Basic Mathematical
Functions</th><th>Description</th></r>
<tr><td>abs(x)</td><td>Compute the absolute value<a id="18480"></a></td></tr>
<tr><td>ceil(<a id="18016"></a>x)</td><td>Round x to<a id="18319"></a> the nearest integer toward positive infinity</td></tr>
<tr><td>cross(<a id="18028"></a>a, b)</td><td>Vector cross product</td></tr>
<tr><td>exp(x)</td><td>Compute e to<a id="18320"></a> the power x</td></tr>
<tr><td>fix(<a id="18092"></a>x)</td><td>Round x to<a id="18321"></a> the nearest integer toward zero</td></tr>
<tr><td>floor(<a id="18093"></a>x)</td><td>Round x to<a id="18322"></a> the nearest integer toward minus infinity</td></tr>
<tr><td>log(x)</td><td>Compute the natural log of<a id="18389"></a> x</td></tr>
<tr><td>log10(x)</td><td>Compute the log base 10 of<a id="18390"></a> x</td></tr>
<tr><td>mod(x, a)</td><td>Compute the remainder when x is divided by a</td></tr>
<tr><td>rem(x, a)</td><td>Compute the remainder when x is divided by a</td></tr>
<tr><td>round(<a id="18162"></a>x)</td><td>Round x to<a id="18323"></a> the nearest integer</td></tr>
<tr><td>sqrt(x)</td><td>Calculate the square<a id="18450"></a> root of<a id="18391"></a> x</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Trigonometry Functions</th><th>Description</td></tr>
<tr><td>acos(x)</td><td>Compute the inverse cosine (arcsine) of<a id="18392"></a> x</td></tr>
<tr><td>asin(x)</td><td>Compute the inverse sine (arcsine) of<a id="18393"></a> x</td></tr>
<tr><td>atan(x)</td><td>Compute the inverse tangent (arctan) of<a id="18394"></a> x</td></tr>
<tr><td>atan2(y, x)</td><td>Compute the inverse tangent given the x and<a id="18224"></a> y values (4 quadrant
resolution<a id="18197"></a>)</td></tr>
<tr><td>cos(x)</td><td>Compute the cosine of<a id="18395"></a> x</td></tr>
<tr><td>sin(x)</td><td>Compute the sine of<a id="18396"></a> x</td></tr>
<tr><td>tan(x)</td><td>Compute the tangent of<a id="18397"></a> x</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Vector, Array, and<a id="18225"></a> Matrix
Functions</th><th>Description</td></tr>
<tr><td>cumsum(<a id="18034"></a>v)</td><td>Compute a cumulative sum of<a id="18398"></a> the values in v</td></tr>
<tr><td>deal(<a id="18037"></a>...)</td><td>Distribute cell<a id="17992"></a> array<a id="17978"></a> results among variables</td></tr>
<tr><td>det(a)</td><td>Compute the determinant of<a id="18399"></a> a matrix<a id="18285"></a></td></tr>
<tr><td>diag(<a id="18038"></a>a)</td><td>Extract the diagonal<a id="18039"></a> from<a id="18113"></a> a matrix<a id="18286"></a> or (if provided a is a vector) construct a matrix<a id="18287"></a> with<a id="18244"></a> a as the diagonal<a id="18040"></a></td></tr>
<tr><td>eye(<a id="18071"></a>n)</td><td>Generate the identity matrix<a id="18288"></a> of<a id="18400"></a> size<a id="18507"></a> n x n</td></tr>
<tr><td>find(<a id="18091"></a>&lt;logical<a id="18004"></a> a&gt;)</td><td>Compute a linear<a id="18240"></a> list of<a id="18401"></a> the locations of<a id="18402"></a> the true<a id="18205"></a> values in a logical<a id="18005"></a> array<a id="17979"></a></td></tr>
<tr><td>fliplr(a)</td><td>Flip a matrix<a id="18289"></a> from<a id="18114"></a> left to<a id="18324"></a> right</td></tr>
<tr><td>inv(<a id="18135"></a>a)</td><td>Compute the inverse of<a id="18403"></a> a matrix<a id="18290"></a></td></tr>
<tr><td>length(<a id="18146"></a>a)</td><td>Determine the largest dimension of<a id="18404"></a> an array<a id="17980"></a></td></tr>
<tr><td>linspace(<a id="18147"></a>from<a id="18354"></a>,to<a id="18325"></a>, n)</td><td>Define a linearly spaced vector</td></tr>
<tr><td>magic(<a id="18148"></a>n)</td><td>Generate a magic square<a id="18451"></a> of<a id="18405"></a> size<a id="18508"></a> n x n</td></tr> 
<tr><td>[v,in] = max(<a id="18149"></a>a)</td><td>Find the maximum value<a id="18481"></a> and<a id="18226"></a> its position in a </td></tr>
<tr><td>mean(<a id="18150"></a>a)</td><td>Compute the average of<a id="18406"></a> the elements<a id="18504"></a> in a </td></tr>
<tr><td>meshgrid(<a id="18151"></a>x, y)</td><td>Map each of<a id="18407"></a> two vectors into separate 2-D<a id="18360"></a> arrays</td></tr>
<tr><td>[v,in] = min(<a id="18153"></a>a)</td><td>Find the minimum<a id="18296"></a> value<a id="18482"></a> and<a id="18227"></a> its position in a </td></tr>
<tr><td>ones(<a id="18155"></a>r, c)</td><td>Generate an array<a id="17981"></a> filled with<a id="18245"></a> the value<a id="18483"></a> 1</td></tr>
<tr><td>prod(x)</td><td>Compute the product of<a id="18408"></a> all the items in x</td></tr>
<tr><td>rand(<a id="18158"></a>r, c)</td><td>Calculate an r x c array<a id="17982"></a> of<a id="18409"></a> evenly distributed random numbers<a id="18299"></a> in
the range 0 - 1</td></tr>
<tr><td>randi(IMAX,M,N)</td><td>Calculate an M x N array<a id="17983"></a> of<a id="18410"></a> evenly distributed random integers in the range 1..IMAX</td></tr>
<tr><td>randn(<a id="18159"></a>r, c)</td><td>Calculate an r x c array<a id="17984"></a> of<a id="18411"></a> normally distributed random numbers<a id="18300"></a> in the range 0 - 1</td></tr>
<tr><td>size(<a id="18164"></a>a)</td><td>Determine the dimensions of<a id="18412"></a> an array<a id="17985"></a></td></tr>
<tr><td>sparse<a id="18294"></a></td><td>Define a sparse<a id="18295"></a> matrix<a id="18291"></a></td></tr>
<tr><td>[v,in] = sort(<a id="18165"></a>v)</td><td>Sort the vector v (a vector or a cell<a id="17993"></a> array<a id="17986"></a> of<a id="18413"></a> strings)</td></tr>
<tr><td>sum(<a id="18174"></a>a)</td><td>Find the sum of<a id="18414"></a> an array<a id="17987"></a></td></tr>
<tr><td>zeros(<a id="18185"></a>r, c)</td><td>Build an array<a id="17988"></a> filled with<a id="18246"></a> the value<a id="18484"></a> 0</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">2-D<a id="18361"></a> Plotting</th><th>Description</td></tr>
<tr><td>bar</td><td>Generate a bar graph</td></tr>
<tr><td>barh</td><td>Generate a horizontal bar graph</td></tr>
<tr><td>contour</td><td>Generate a contour plot</td></tr>
<tr><td>hist</td><td>Draw a histogram</td></tr>
<tr><td>loglog</td><td>Generate an x-y plot, with<a id="18247"></a> both axes scaled logarithmically</td></tr>
<tr><td>pie</td><td>Generate a pie chart</td></tr>
<tr><td>plot</td><td>Create an x-y plot</td></tr>
<tr><td>polar</td><td>Create a polar plot</td></tr>
<tr><td>semilogx</td><td>Generate an x-y plot, with<a id="18248"></a> the x-axis scaled logarithmically</td></tr>
<tr><td>semilogy</td><td>Generate an x-y plot, with<a id="18249"></a> the y-axis scaled logarithmically</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">3-D<a id="18362"></a> Plotting</th><th>Description</td></tr>
<tr><td>bar3</td><td>Generate a 3-D<a id="18363"></a> bar graph</td></tr>
<tr><td>barh3</td><td>Generate a horizontal 3-D<a id="18364"></a> bar graph</td></tr>
<tr><td>gplot</td><td>Plot a graph</td></tr>
<tr><td>mesh</td><td>Generate a mesh plot of<a id="18415"></a> a surface<a id="18372"></a></td></tr>
<tr><td>meshc</td><td>Generate a mesh plot of<a id="18416"></a> a surface<a id="18373"></a> with<a id="18250"></a> contours</td></tr>
<tr><td>meshz</td><td>Generate a mesh plot of<a id="18417"></a> a surface<a id="18374"></a> with<a id="18251"></a> a skirt</td></tr>
<tr><td>meshgrid(<a id="18152"></a>r, c)</td><td>Create a plaid<a id="18370"></a> for<a id="18514"></a> 3-D<a id="18365"></a> plots<a id="18371"></a></td></tr>
<tr><td>peaks</td><td>Create a sample matrix<a id="18292"></a> used to<a id="18326"></a> demonstrate graphing functions<a id="18462"></a></td></tr>
<tr><td>pie3</td><td>Generate a 3-D<a id="18366"></a> pie chart</td></tr>
<tr><td>plot3</td><td>Generate a 3-D<a id="18367"></a> line plot</td></tr>
<tr><td>sphere<a id="18449"></a></td><td>Example function<a id="18101"></a> used to<a id="18327"></a> demonstrate graphing</td></tr>
<tr><td>surf</td><td>Generate a surface<a id="18375"></a> plot</td></tr>
<tr><td>surfc</td><td>Generate a combination surface<a id="18376"></a> and<a id="18228"></a> contour plot</td></tr>
<tr><td>waterfall</td><td>Generate a mesh plot of<a id="18418"></a> a surface<a id="18377"></a> with<a id="18252"></a> one skirt edge</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Plot Appearance Line
Type Control</th><th>Description</td></tr>
<tr><td>-</td><td>Solid</td></tr>
<tr><td>:</td><td>Dotted</td></tr>
<tr><td>-.</td><td>Dash-dot</td></tr>
<tr><td>--</td><td>Dashed</td></tr>
<tr><td>.</td><td>Point</td></tr>
<tr><td>o</td><td>Circle</td></tr>
<tr><td>x</td><td>x-mark</td></tr>
<tr><td>+</td><td>Plus</td></tr>
<tr><td>*</td><td>Star</td></tr>
<tr><td>s</td><td>Square</td></tr>
<tr><td>d</td><td>Diamond</td></tr>
<tr><td>v</td><td>Triangle down</td></tr>
<tr><td>^</td><td>Triangle up</td></tr>
<tr><td>&lt;</td><td>Triangle left</td></tr>
<tr><td>&gt;</td><td>Triangle right</td></tr>
<tr><td>p</td><td>Pentagram</td></tr>
<tr><td>h</td><td>Hexagram</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Color Control Character</th><th>Description</td></tr>
<tr><td>b</td><td>Blue</td></tr>
<tr><td>c</td><td>Cyan</td></tr>
<tr><td>g</td><td>Green</td></tr>
<tr><td>k</td><td>Black</td></tr>
<tr><td>m</td><td>Magenta</td></tr>
<tr><td>r</td><td>Red</td></tr>
<tr><td>w</td><td>White</td></tr>
<tr><td>y</td><td>Yellow</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Figure<a id="18526"></a> Control</th><th>Description</td></tr>
<tr><td>axis</td><td>Freezes the current axis scaling for<a id="18515"></a> the current plot or specifies the axis dimensions</td></tr>
<tr><td>figure <n></td><td>Open a new figure window. If present, <n> specifies a figure number</td></tr>
<tr><td>grid<a id="18126"></a> off/on<a id="18259"></a></td><td>Turn the grid<a id="18127"></a> off or on<a id="18260"></a></td></tr>
<tr><td>hold<a id="18129"></a> off/on<a id="18261"></a></td><td>If hold<a id="18130"></a> is not set, erase figure contents before the next plotting instruction</td></tr>
<tr><td>legend(<a id="18145"></a>ca)</td><td>Add a legend to<a id="18328"></a> a graph</td></tr>
<tr><td>shading <value></td><td>Shade a surface<a id="18378"></a> plot with<a id="18253"></a> one color<a id="18024"></a> per grid<a id="18128"></a> section </td></tr>
<tr><td>subplot(<a id="18173"></a>plts, n)</td><td>Divide the graphics window up into sections available for<a id="18516"></a> plotting</td></tr>
<tr><td>text(<a id="18175"></a>x,y,str)</td><td>Add text<a id="18475"></a> to<a id="18329"></a> a plot</td></tr>
<tr><td>title(<a id="18177"></a>str)</td><td>Add a title to<a id="18330"></a> a plot</td></tr>
<tr><td>xlabel(<a id="18181"></a>str)</td><td>Add a label to<a id="18331"></a> the x-axis</td></tr>
<tr><td>ylabel(<a id="18184"></a>str)</td><td>Add a label to<a id="18332"></a> the y-axis</td></tr>
<tr><td>zlabel(<a id="18186"></a>str)</td><td>Add a label to<a id="18333"></a> the z-axis</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Color Map Values</th><th>Description</td></tr>
<tr><td>autumn</td><td>yellow, orange, and<a id="18229"></a> red colors</td></tr>
<tr><td>bone</td><td>shades of<a id="18419"></a> gray<a id="18196"></a></td></tr>
<tr><td>colorcube</td><td>multiple multi-color<a id="18025"></a> bands</td></tr>
<tr><td>cool</td><td>light blue to<a id="18334"></a> purple</td></tr>
<tr><td>copper</td><td>shades of<a id="18420"></a> red-brown</td></tr>
<tr><td>flag</td><td>multiple red, white, and<a id="18230"></a> blue bands</td></tr>
<tr><td>hot</td><td>deep red through orange to<a id="18335"></a> white</td></tr>
<tr><td>hsv</td><td>single spectrum from<a id="18115"></a> red to<a id="18336"></a> purple</td></tr>
<tr><td>jet</td><td>default) rainbow from<a id="18116"></a> blue to<a id="18337"></a> red</td></tr>
<tr><td>pink</td><td>from<a id="18117"></a> dark to<a id="18338"></a> light pink</td></tr>
<tr><td>prism</td><td>multiple bands of<a id="18421"></a> spectrum colors</td></tr>
<tr><td>spring</td><td>from<a id="18118"></a> purple to<a id="18339"></a> yellow</td></tr>
<tr><td>summer</td><td>from<a id="18119"></a> dark green to<a id="18340"></a> yellow</td></tr>
<tr><td>white</td><td>all white</td></tr>
<tr><td>winter</td><td>from<a id="18120"></a> dark blue to<a id="18341"></a> light green</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">String Operations</th><th>Description</td></tr>
<tr><td>disp(<a id="18042"></a>...)</td><td>Display matrix<a id="18293"></a> or text<a id="18476"></a></td></tr>
<tr><td>fprintf(<a id="18097"></a>...)</td><td>Print formatted information</td></tr>
<tr><td>input(<a id="18133"></a>...)</td><td>Prompt the user<a id="18284"></a> to<a id="18342"></a> enter a value<a id="18485"></a> and<a id="18231"></a> parse the result</td></tr>
<tr><td>int2str(<a id="18134"></a>a)</td><td>Convert an integer to<a id="18343"></a> its numerical<a id="18355"></a> representation</td></tr>
<tr><td>num2str(<a id="18154"></a>a,n)</td><td>Convert a number to<a id="18344"></a> its numerical<a id="18356"></a> representation with<a id="18254"></a> n
decimal places</td></tr>
<tr><td>sprintf(<a id="18167"></a>...)</td><td>Format a string result</td></tr>
<tr><td>sscanf(<a id="18168"></a>...)</td><td>Formatted input conversion</td></tr>
<tr><td>strcmp(<a id="18169"></a>s1, s2)</td><td>Compare two strings - returns true<a id="18206"></a> if equal<a id="18060"></a></td></tr>
<tr><td>strcmpi(<a id="18170"></a>s1, s2)</td><td>Compare two strings without regard to<a id="18345"></a> case<a id="18012"></a> - returns true<a id="18207"></a> if equal<a id="18061"></a></td></tr>
<tr><td>textscan</td><td>Scan a text<a id="18477"></a> string</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Time-Related Functions</th><th>Description</td></tr>
<tr><td>clock</td><td>Determine the current time on<a id="18262"></a> the CPU clock</td></tr>
<tr><td>etime</td><td>Find elapsed time</td></tr>
<tr><td>pause</td><td>Pause the execution<a id="18067"></a> of<a id="18422"></a> a program, either until any key is hit or for<a id="18517"></a> a specified number of<a id="18423"></a> seconds</td></tr>
<tr><td>tic</td><td>Start a timing sequence</td></tr>
<tr><td>toc</td><td>Stop a timing sequence and<a id="18232"></a> return the elapsed time</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Numerical Methods</th><th>Description</td></tr>
<tr><td>diff(<a id="18041"></a>v)</td><td>Compute the differences between adjacent values in a vector</td></tr>
<tr><td>interp1</td><td>Compute linear<a id="18241"></a> and<a id="18233"></a> cubic<a id="18031"></a> interpolation<a id="18236"></a></td></tr>
<tr><td>interp2</td><td>Compute linear<a id="18242"></a> and<a id="18234"></a> cubic<a id="18032"></a> interpolation<a id="18237"></a></td></tr>
<tr><td>interp3</td><td>Compute linear<a id="18243"></a> and<a id="18235"></a> cubic<a id="18033"></a> interpolation<a id="18238"></a> </td></tr>
<tr><td>polyfit(<a id="18156"></a>x, y, n)</td><td>Compute a least-squares polynomial<a id="18035"></a> </td></tr>
<tr><td>polyval(<a id="18157"></a>c, x)</td><td>Evaluate a polynomial<a id="18036"></a></td></tr>
<tr><td>spline(<a id="18166"></a>x, y)</td><td>Spline interpolation<a id="18239"></a></td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Program Control</th><th>Description</td></tr>
<tr><td>break</td><td>A command within a loop module that forces<a id="18053"></a> control to<a id="18346"></a> the statement following the innermost loop</td></tr>
<tr><td>case<a id="18013"></a></td><td>A specific value<a id="18486"></a> alternative within a switch<a id="18463"></a> statement</td></tr>
<tr><td>catch<a id="18014"></a></td><td>End of<a id="18424"></a> a suspect code block where the exception is trapped</td></tr>
<tr><td>continue<a id="18027"></a></td><td>Skip to<a id="18347"></a> the end<a id="18049"></a> of<a id="18425"></a> the innermost loop, but remains inside it</td></tr>
<tr><td>else<a id="18045"></a></td><td>Within an if statement, begin the code block executed when the condition is false<a id="18076"></a></td></tr>
<tr><td>elseif<a id="18046"></a></td><td>Within an if statement, begin a subsequent test when the result of<a id="18426"></a>
&lt;expression&gt;	the previous test is false<a id="18077"></a></td></tr>
<tr><td>end<a id="18050"></a></td><td>Terminate a function<a id="18102"></a> specification or an if, switch<a id="18464"></a>, for<a id="18518"></a>, while<a id="18511"></a>, or catch<a id="18015"></a> block.</td></tr>
<tr><td>end<a id="18051"></a></td><td>When indexing<a id="18506"></a>, the value<a id="18487"></a> of<a id="18427"></a> the last element in an index vector</td></tr>
<tr><td>for<a id="18519"></a> var = v</td><td>A code block repeated as many times as there are elements<a id="18505"></a> in the
vector v</td></tr>
<tr><td>function<a id="18103"></a></td><td>Identify an m-file as a function<a id="18104"></a> or begin a helper<a id="18190"></a> function<a id="18105"></a> within a
function<a id="18106"></a> file</td></tr>
<tr><td>error(<a id="18062"></a>str)</td><td>Throw an exception to<a id="18348"></a> announce an error with<a id="18255"></a> the string provided</td></tr>
<tr><td>global<a id="18125"></a> var</td><td>Define a variable<a id="18500"></a> as globally accessible</td></tr>
<tr><td>if &lt;expression&gt;</td><td>Begin a conditional module—the following code block is executed if the logical<a id="18006"></a> expression is true<a id="18208"></a></td></tr>
<tr><td>lasterror</td><td>Provide a structure<a id="18454"></a> describing the environment from<a id="18121"></a> which an
exception was thrown</td></tr>
<tr><td>nargin</td><td>Determine the number of<a id="18428"></a> input parameters<a id="18493"></a> actually supplied by a function<a id="18107"></a>'s caller</td></tr>
<tr><td>nargout</td><td>Determine the number of<a id="18429"></a> output parameters<a id="18494"></a> actually requested by a function<a id="18108"></a>'s caller</td></tr>
<tr><td>otherwise</td><td>Catch-all code block at the end<a id="18052"></a> of<a id="18430"></a> a switch<a id="18465"></a> statement</td></tr>
<tr><td>switch<a id="18466"></a> &lt;variable<a id="18501"></a>&gt;</td><td>Begin a code module selecting specific values of<a id="18431"></a> the variable<a id="18502"></a>>(must be countable)</td></tr>
<tr><td>try</td><td>Begin a block of<a id="18432"></a> suspect code from<a id="18122"></a> which an exception might be thrown
<tr><td>while<a id="18512"></a> &lt;expression&gt;</td><td>A code module repeated as long as the logical<a id="18007"></a> expression is true<a id="18209"></a></td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Data Class Operations</th><th>Description</td></tr>
<tr><td>char(<a id="18017"></a>...)</td><td>Cast to<a id="18349"></a> a character<a id="18266"></a> type </td></tr>
<tr><td>class(<a id="18019"></a>&lt;object&gt;)</td><td>Determine the data<a id="18280"></a> type of<a id="18433"></a> an <tr><td>object </td></tr>
<tr><td>double(<a id="18044"></a>a)</td><td>Cast a to<a id="18350"></a> type double</td></tr>
<tr><td>int8/16/32/64(a)</td><td>Cast a to<a id="18351"></a> integer type with<a id="18256"></a> the specified number of<a id="18434"></a> bits </td></tr>
<tr><td>uint8/16/32/64(a)</td><td>Cast a to<a id="18352"></a> unsigned integer type with<a id="18257"></a> the specified number of<a id="18435"></a> bits </td></tr>
<tr><td>isa(<a id="18136"></a>obj, str)</td><td>Test for<a id="18520"></a> a given data<a id="18281"></a> type</td></tr>
<tr><td>ischar(<a id="18138"></a>ch)</td><td>Determine whether the given object is of<a id="18436"></a> type char iscell(<a id="18137"></a>...)	Determine whether the given object is a cell<a id="17994"></a> </td></tr>
<tr><td>isempty(<a id="18139"></a>a)</td><td>Test for<a id="18521"></a> the empty<a id="18048"></a> vector [ ]</td></tr>
<tr><td>islogical(<a id="18141"></a>a)</td><td>Determine whether the given object is of<a id="18437"></a> type logical<a id="18008"></a> </td></tr>
<tr><td>isnumeric(<a id="18142"></a>a)</td><td>Determine whether the given object is of<a id="18438"></a> type double </td></tr>
<tr><td>isspace(<a id="18143"></a>a)</td><td>Test for<a id="18522"></a> the space character<a id="18267"></a></td></tr>
<tr><td>isstruct(<a id="18144"></a>a)</td><td>Determine whether the given object is a structure<a id="18455"></a></td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Structure Operations</th><th>Description</td></tr>
<tr><td>fieldnames(<a id="18090"></a>str)</td><td>Return a cell<a id="17995"></a> array<a id="17989"></a> containing strings that are the names<a id="18503"></a> of<a id="18439"></a> the fields in the structure<a id="18456"></a></td></tr>
<tr><td>getfield(<a id="18124"></a>str,field<a id="18082"></a>)</td><td>Extract the value<a id="18488"></a> of<a id="18440"></a> the field<a id="18083"></a></td></tr>

<tr><td>isfield(<a id="18140"></a>str, field<a id="18084"></a>)</td><td>Return true<a id="18210"></a> if the string is a field<a id="18085"></a> in the specified structure<a id="18457"></a></td></tr>
<tr><td>str = rmfield(<a id="18161"></a>str, field<a id="18086"></a>)</td><td>Return a copy of<a id="18441"></a> the given structure<a id="18458"></a> with<a id="18258"></a> the given field<a id="18087"></a> removed</td></tr>

<tr><td>str = setfield(<a id="18163"></a>str, field<a id="18088"></a>,value<a id="18489"></a>)</td><td>Construct a structure<a id="18459"></a> in which the value<a id="18490"></a> of<a id="18442"></a> the field<a id="18089"></a> has been changed to<a id="18353"></a> the given value<a id="18491"></a></td></tr>

<tr><td>struct(<a id="18172"></a>...)</td><td>Construct a structure<a id="18460"></a> from<a id="18123"></a> <fieldname> <value> pairs of<a id="18443"></a>
parameters<a id="18495"></a></td></tr>
</table>

 </div>


</body>
</html>



<!DOCTYPE HTML>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
  <link rel="stylesheet" href="styles/styles.css" />
  <script async src="./javascript/index.js"></script>
<title>Appendix A</title>
</head>
<body>
<div>#top_nav#</div>
<div class="nav-obj">#nav_obj#</div>

<div class="content">
  <h1 align="center" id="1">Appendix A - Special Characters and Reserved Words</h1>
<p>This appendix collects MATLAB<a id="8357">!</a> special characters, reserved words and functions grouping them by function<a id="8303">!</a>.</p>
<table>
<tr>
  <th style="width="250 pixels">Special Characters</th>
  <th>Description</th>
</r>
<tr><td ID="201">&lt;...&gt;</td><td>Used to indicate template parameters<a id="8386">!</a> - data<a id="8210">!</a> to be supplied</td></tr>
<tr><td ID="202">%</td><td>Indicates a comment in an m-file</td></tr>
<tr><td ID="203">{...}</td><td>Defines a cell<a id="8173">!</a> array<a id="8145">!</a></td></tr>
<tr><td ID="204">[ ]</td><td>The empty<a id="8238">!</a> vector</td></tr>
<tr><td ID="205">[...]</td><td>Concatenates data<a id="8211">!</a>, vectors<a id="8479">!</a>, and arrays</td></tr>
<tr><td ID="206">( )</td><td>Used to override operator precedence</td></tr>
<tr><td ID="207">( )</td><td>Used to identify the formal<a id="8295">!</a> and actual<a id="8140">!</a> parameters<a id="8387">!</a> of a function<a id="8304">!</a></td></tr>
<tr><td ID="208">(...)</td><td>Used to index an array<a id="8146">!</a></td></tr>
<tr><td ID="209">(&lt;variable<a id="8472">!</a>&gt;)</td><td>Used to allow a variable<a id="8473">!</a> to be used as a structure<a id="8423">!</a> field<a id="8266">!</a></td></tr>
<tr><td ID="210">'abc'</td><td>Encloses a literal character<a id="8180">!</a> string</td></tr>
<tr><td>'</td><td>Transposes an array<a id="8147">!</a></td></tr>
<tr><td ID="211">;</td><td>Suppresses output when after an assignment<a id="8164">!</a> statement (explicit or implied) </td></tr>
<tr><td ID="212">;</td><td>Separates rows in an array<a id="8148">!</a> definition</td></tr>
<tr><td ID="213">:</td><td>Specifies a vector in the form <from:incr:to></td></tr>
<tr><td ID="214">:</td><td>Used in slicing vectors<a id="8480">!</a> and arrays</td></tr>
<tr><td ID="215">.</td><td>Used to access fields of a structure<a id="8424">!</a></td></tr>
<tr><td ID="216">...</td><td>Used to continue<a id="8201">!</a> a MATLAB<a id="8358">!</a> command to the next line</td></tr>
<tr><th>Mathematical Operators</th><th>Description</th></r>
<tr><td>=</td><td>Assignment operator - assigns a value<a id="8459">!</a> to a variable<a id="8474">!</a> (memory location); not the same as an equality test</td></tr>
<tr><td>+</td><td>Scalar and array<a id="8149">!</a> addition</td></tr>
<tr><td>−</td><td>Scalar and array<a id="8150">!</a> subtraction</td></tr>
<tr><td>−</td><td>Unary negation</td></tr>
<tr><td>*</td><td>Matrix multiplication<a id="8374">!</a></td></tr>
<tr><td>.*</td><td>Element-by-element multiplication<a id="8375">!</a></td></tr>
<tr><td>/</td><td>Matrix division<a id="8229">!</a></td></tr>
<tr><td>./</td><td>Element-by-element division<a id="8230">!</a></td></tr>
<tr><td>^</td><td>Matrix exponentiation</td></tr>
<tr><td>.^</td><td>Element-by-element   exponentiation</td></tr>
<tr><th>Logical Operators</th><th>Description</th></r>
<tr><td><</td><td>Less than</td></tr>
<tr><td><=</td><td>Less than or equal to</td></tr>
<tr><td>></td><td>Greater than</td></tr>
<tr><td>>=</td><td>Greater than or equal<a id="8244">!</a> to</td></tr>
<tr><td>==</td><td>Is equal<a id="8245">!</a> to</td></tr>
<tr><td>&<a id="8391">!</a>#126;=</td><td>Is not equal<a id="8246">!</a> to</td></tr>
<tr><td>&<a id="8392">!</a>#126;</td><td>Unary negation</td></tr>
<tr><td>&amp;</td><td>Element-by-element logical<a id="8345">!</a> AND<a id="8142">!</a></td></tr>
<tr><td>&amp;&amp;</td><td>Short-circuit logical<a id="8346">!</a> AND<a id="8143">!</a> (scalar)</td></tr>
<tr><td>|</td><td>Element-by-element logical<a id="8347">!</a> OR<a id="8384">!</a></td></tr>
<tr><td>||</td><td>Short-circuit logical<a id="8348">!</a> OR<a id="8385">!</a> (scalar)</td></tr>
<tr><th>Logical Functions</th><th>Description</th></r>
<tr><td>all(<a id="8141">!</a>a)</td><td>True if all the values in a (a logical<a id="8349">!</a> vector) are true</td></tr>
<tr><td>and(a, b)</td><td>True if both a and b are true</td></tr>
<tr><td>any(<a id="8144">!</a>a)</td><td>True if any of the values in a (a logical<a id="8350">!</a> vector) are true</td></tr>
<tr><td>not(a)</td><td>True if a is false<a id="8257">!</a>; false<a id="8258">!</a> if a is true</td></tr>
<tr><td>or(a, b)</td><td>True if either a or b is true</td></tr>
</table>
<br>
<table>
<tr><th style="width="250 pixels">File Input and Output</th><th>Description</th></r>
<tr><td>csvread(<a id="8204">!</a>&lt;file&gt;)</td><td>Read comma-separated text<a id="8445">!</a> files<a id="8276">!</a></td></tr>
<tr><td>csvwrite(<a id="8205">!</a>&lt;file&gt;,&lt;data<a id="8212">!</a>&gt;)</td><td>Write comma-separated text<a id="8446">!</a> files<a id="8277">!</a></td></tr>

<tr><td>dlmread (&lt;file&gt;,&lt;dlm&gt;)</td><td>Read text<a id="8447">!</a> files<a id="8278">!</a> separated by the given delimiting character(s)</td></tr>

<tr><td>dlmwrite(<a id="8231">!</a>&lt;file&gt;,&lt;data<a id="8213">!</a>&gt;,&lt;dlm&gt;)</td><td>Write text<a id="8448">!</a> files<a id="8279">!</a> separated by the given delimiting character(s)</td></tr>
<tr><td>fclose(<a id="8263">!</a>&lt;handle&gt;)</td><td>Close a text<a id="8449">!</a> file</td></tr>
<tr><td>fgetl(<a id="8264">!</a>&lt;handle&gt;)</td><td>Read a line omitting the new-line character<a id="8181">!</a></td></tr>
<tr><td>fgets(<a id="8265">!</a>&lt;handle&gt;)</td><td>Read a line including the new-line character<a id="8182">!</a></td></tr>
<tr><td>fh = fopen(<a id="8284">!</a>&lt;name&gt;, &lt;why&gt;)</td><td>Open a text<a id="8450">!</a> file</td></tr>
<tr><td>fprintf(<a id="8301">!</a>&lt;handle&gt;,...)</td><td>Write to the console, or to plain text<a id="8451">!</a> files<a id="8280">!</a> (when <handle> is present</td></tr>
<tr><td>imread(&lt;&lt;file&gt;)</td><td>Read an image file</td></tr>
<tr><td>imwrite(&lt;&lt;data<a id="8214">!</a>&gt;,&lt;file&gt;, &lt;format<a id="8296">!</a>&gt;)</td><td>Write an image file</td></tr>

<tr><td>load &lt;file&gt;</td><td>Load the current workspace from a file</td></tr>
<tr><td>save &lt;file&gt;</td><td>Save workspace variables in a file</td></tr>
<tr><td>[tk rest] =	strtok(&lt;str&gt;,&lt;dlm&gt;)</td><td>Extract a token<a id="8458">!</a> from a string and return the remainder of the string</td></tr>

<tr><td>ca = textscan(<a id="8456">!</a>&lt;handle&gt;,&lt;format<a id="8297">!</a>&gt;)</td><td>Acquire and scan a line of text<a id="8452">!</a> according to a specific format<a id="8298">!</a> and save the data<a id="8215">!</a> in a cell<a id="8174">!</a> array<a id="8151">!</a></td></tr>
<tr><td>[data<a id="8216">!</a> Fs nb] = wavread(<a id="8484">!</a>&lt;file&gt;</td><td>Read a sound<a id="8409">!</a> file in .wav<a id="8482">!</a> format<a id="8299">!</a></td></tr>
<tr><td>wavwrite(<a id="8485">!</a>&lt;data<a id="8217">!</a>&gt;,&lt;Fs&gt;,&lt;nb&lt;file&gt;)</td><td>Write a sound<a id="8410">!</a> file in .wav<a id="8483">!</a> format<a id="8300">!</a></td></tr>
<tr><td>[nums, txt,raw] = readcell(<a id="8402">!</a>&lt;file&gt;)</td><td>Read an Excel<a id="8250">!</a> spreadsheet</td></tr>
<tr><td>writecell(<a id="8491">!</a>&lt;file&gt;,&lt;data<a id="8218">!</a>&gt;,&lt;sheet&gt;,&lt;range&gt;)</td><td>Write an Excel<a id="8251">!</a> <tr><td>[nums, txt,raw] = xlsread(<a id="8493">!</a>&lt;file&gt;)</td><td>Read an Excel<a id="8252">!</a> spreadsheet</td></tr>
<tr><td>xlswrite(<a id="8494">!</a>&lt;file&gt;,&lt;data<a id="8219">!</a>&gt;,&lt;sheet&gt;,&lt;range&gt;)</td><td>Write an Excel<a id="8253">!</a> spreadsheet in a specific row/column<a id="8200">!</a> range</td></tr>
<tr><th>Format Control</th><th>Description</th></th>
<tr><td>%&lt;m&gt;.&lt;n&gt;e</td><td>	Exponential notation</td></tr>
<tr><td>%&lt;m&gt;.&lt;n&gt;f</td><td>	Fixed point or decimal notation</td></tr>
<tr><td>%&lt;m&gt;.&lt;n&gt;g</td><td>	Fixed point or exponential<a id="8255">!</a> notation</td></tr>
<tr><td>%q</td><td>	A quoted string delimited<a id="8223">!</a> by double quotes</td></tr>
<tr><td>%<n>s</td><td>	Character string</td></tr>
<tr><td>\b</td><td>	Backspace</td></tr>
<tr><td>\n</td><td>	New Line</td></tr>
<tr><td>\t</td><td>	Tab</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">User Interface
Management</th><th>Description</th></r>

<tr><td>ans</td><td>	Default variable<a id="8475">!</a> name for<a id="8285">!</a> results of calculations</td></tr>
<tr><td>clc<a id="8186">!</a></td><td>Clear the interactions window</td></tr>
<tr><td>clear<a id="8187">!</a> &lt;selection&gt;</td><td>Remove all (or selected) variables from the workspace</td></tr>
<tr><td>clf<a id="8188">!</a></td><td>Clear the current figure</td></tr>
<tr><td>close<a id="8189">!</a> all</td><td>Close all graphics windows<a id="8490">!</a></td></tr>
<tr><td>exit</td><td>Terminate the user interface system</td></tr>
<tr><td>help<a id="8319">!</a> &lt;topic	or function<a id="8305">!</a>&gt;</td><td>Invoke the help<a id="8320">!</a> utility</td></tr>

<tr><td>load &lt;file&gt;</td><td>Load the current workspace from a file</td></tr>
<tr><td>quit</td><td>Terminate the user interface system</td></tr>
<tr><td>save <file></td><td>Save workspace variables in a file</td></tr>
<tr><td>who<a id="8488">!</a></td><td>List variables in the workspace</td></tr>
<tr><td>whos<a id="8489">!</a></td><td>List variables and their sizes</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Special Constants</th><th>Description</th></r>
<tr><td>eps</td><td>	Smallest possible difference between two floating point numbers<a id="8377">!</a></td></tr>
<tr><td>false<a id="8259">!</a></td><td>	Logical false<a id="8260">!</a></td></tr>
<tr><td>inf</td><td>	Infinity</td></tr>
<tr><td>NaN<a id="8376">!</a></td><td>	Not a number</td></tr>
<tr><td>pi</td><td>	Ratio of the circumference of a circle to its diameter</td></tr>
<tr><td>true</td><td>	Logical true</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Basic Mathematical
Functions</th><th>Description</th></r>
<tr><td>abs(x)</td><td>Compute the absolute value<a id="8460">!</a></td></tr>
<tr><td>ceil(<a id="8172">!</a>x)</td><td>Round x to the nearest integer toward positive infinity</td></tr>
<tr><td>cross(<a id="8203">!</a>a, b)</td><td>Vector cross product</td></tr>
<tr><td>exp(x)</td><td>Compute e to the power x</td></tr>
<tr><td>fix(<a id="8282">!</a>x)</td><td>Round x to the nearest integer toward zero</td></tr>
<tr><td>floor(<a id="8283">!</a>x)</td><td>Round x to the nearest integer toward minus infinity</td></tr>
<tr><td>log(x)</td><td>Compute the natural log of x</td></tr>
<tr><td>log10(x)</td><td>Compute the log base 10 of x</td></tr>
<tr><td>mod(x, a)</td><td>Compute the remainder when x is divided by a</td></tr>
<tr><td>rem(x, a)</td><td>Compute the remainder when x is divided by a</td></tr>
<tr><td>round(<a id="8405">!</a>x)</td><td>Round x to the nearest integer</td></tr>
<tr><td>sqrt(x)</td><td>Calculate the square<a id="8414">!</a> root of x</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Trigonometry Functions</th><th>Description</td></tr>
<tr><td>acos(x)</td><td>Compute the inverse cosine (arcsine) of x</td></tr>
<tr><td>asin(x)</td><td>Compute the inverse sine (arcsine) of x</td></tr>
<tr><td>atan(x)</td><td>Compute the inverse tangent (arctan) of x</td></tr>
<tr><td>atan2(y, x)</td><td>Compute the inverse tangent given the x and y values (4 quadrant
resolution<a id="8403">!</a>)</td></tr>
<tr><td>cos(x)</td><td>Compute the cosine of x</td></tr>
<tr><td>sin(x)</td><td>Compute the sine of x</td></tr>
<tr><td>tan(x)</td><td>Compute the tangent of x</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Vector, Array, and Matrix
Functions</th><th>Description</td></tr>
<tr><td>cumsum(<a id="8209">!</a>v)</td><td>Compute a cumulative sum of the values in v</td></tr>
<tr><td>deal(<a id="8222">!</a>...)</td><td>Distribute cell<a id="8175">!</a> array<a id="8152">!</a> results among variables</td></tr>
<tr><td>det(a)</td><td>Compute the determinant of a matrix<a id="8359">!</a></td></tr>
<tr><td>diag(<a id="8224">!</a>a)</td><td>Extract the diagonal<a id="8225">!</a> from a matrix<a id="8360">!</a> or (if provided a is a vector) construct a matrix<a id="8361">!</a> with a as the diagonal<a id="8226">!</a></td></tr>
<tr><td>eye(<a id="8256">!</a>n)</td><td>Generate the identity matrix<a id="8362">!</a> of size n x n</td></tr>
<tr><td>find(<a id="8281">!</a>&lt;logical<a id="8351">!</a> a&gt;)</td><td>Compute a linear<a id="8340">!</a> list of the locations of the true values in a logical<a id="8352">!</a> array<a id="8153">!</a></td></tr>
<tr><td>fliplr(a)</td><td>Flip a matrix<a id="8363">!</a> from left to right</td></tr>
<tr><td>inv(<a id="8329">!</a>a)</td><td>Compute the inverse of a matrix<a id="8364">!</a></td></tr>
<tr><td>length(<a id="8339">!</a>a)</td><td>Determine the largest dimension of an array<a id="8154">!</a></td></tr>
<tr><td>linspace(<a id="8344">!</a>from,to, n)</td><td>Define a linearly spaced vector</td></tr>
<tr><td>magic(<a id="8356">!</a>n)</td><td>Generate a magic square<a id="8415">!</a> of size n x n</td></tr> 
<tr><td>[v,in] = max(<a id="8368">!</a>a)</td><td>Find the maximum value<a id="8461">!</a> and its position in a </td></tr>
<tr><td>mean(<a id="8369">!</a>a)</td><td>Compute the average of the elements<a id="8234">!</a> in a </td></tr>
<tr><td>meshgrid(<a id="8370">!</a>x, y)</td><td>Map each of two vectors<a id="8481">!</a> into separate 2-D arrays</td></tr>
<tr><td>[v,in] = min(<a id="8372">!</a>a)</td><td>Find the minimum<a id="8373">!</a> value<a id="8462">!</a> and its position in a </td></tr>
<tr><td>ones(<a id="8383">!</a>r, c)</td><td>Generate an array<a id="8155">!</a> filled with the value<a id="8463">!</a> 1</td></tr>
<tr><td>prod(x)</td><td>Compute the product of all the items in x</td></tr>
<tr><td>rand(<a id="8400">!</a>r, c)</td><td>Calculate an r x c array<a id="8156">!</a> of evenly distributed random numbers<a id="8378">!</a> in
the range 0 - 1</td></tr>
<tr><td>randi(IMAX,M,N)</td><td>Calculate an M x N array<a id="8157">!</a> of evenly distributed random integers in the range 1..IMAX</td></tr>
<tr><td>randn(<a id="8401">!</a>r, c)</td><td>Calculate an r x c array<a id="8158">!</a> of normally distributed random numbers<a id="8379">!</a> in the range 0 - 1</td></tr>
<tr><td>size(<a id="8407">!</a>a)</td><td>Determine the dimensions of an array<a id="8159">!</a></td></tr>
<tr><td>sparse</td><td>Define a sparse matrix<a id="8365">!</a></td></tr>
<tr><td>[v,in] = sort(<a id="8408">!</a>v)</td><td>Sort the vector v (a vector or a cell<a id="8176">!</a> array<a id="8160">!</a> of strings<a id="8419">!</a>)</td></tr>
<tr><td>sum(<a id="8433">!</a>a)</td><td>Find the sum of an array<a id="8161">!</a></td></tr>
<tr><td>zeros(<a id="8496">!</a>r, c)</td><td>Build an array<a id="8162">!</a> filled with the value<a id="8464">!</a> 0</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">2-D Plotting</th><th>Description</td></tr>
<tr><td>bar</td><td>Generate a bar graph</td></tr>
<tr><td>barh</td><td>Generate a horizontal bar graph</td></tr>
<tr><td>contour</td><td>Generate a contour plot</td></tr>
<tr><td>hist</td><td>Draw a histogram</td></tr>
<tr><td>loglog</td><td>Generate an x-y plot, with both axes scaled logarithmically</td></tr>
<tr><td>pie</td><td>Generate a pie chart</td></tr>
<tr><td>plot</td><td>Create an x-y plot</td></tr>
<tr><td>polar</td><td>Create a polar plot</td></tr>
<tr><td>semilogx</td><td>Generate an x-y plot, with the x-axis scaled logarithmically</td></tr>
<tr><td>semilogy</td><td>Generate an x-y plot, with the y-axis scaled logarithmically</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">3-D Plotting</th><th>Description</td></tr>
<tr><td>bar3</td><td>Generate a 3-D bar graph</td></tr>
<tr><td>barh3</td><td>Generate a horizontal 3-D bar graph</td></tr>
<tr><td>gplot</td><td>Plot a graph</td></tr>
<tr><td>mesh</td><td>Generate a mesh plot of a surface<a id="8434">!</a></td></tr>
<tr><td>meshc</td><td>Generate a mesh plot of a surface<a id="8435">!</a> with contours</td></tr>
<tr><td>meshz</td><td>Generate a mesh plot of a surface<a id="8436">!</a> with a skirt</td></tr>
<tr><td>meshgrid(<a id="8371">!</a>r, c)</td><td>Create a plaid<a id="8393">!</a> for<a id="8286">!</a> 3-D plots<a id="8394">!</a></td></tr>
<tr><td>peaks</td><td>Create a sample matrix<a id="8366">!</a> used to demonstrate graphing functions</td></tr>
<tr><td>pie3</td><td>Generate a 3-D pie chart</td></tr>
<tr><td>plot3</td><td>Generate a 3-D line plot</td></tr>
<tr><td>sphere<a id="8411">!</a></td><td>Example function<a id="8306">!</a> used to demonstrate graphing</td></tr>
<tr><td>surf</td><td>Generate a surface<a id="8437">!</a> plot</td></tr>
<tr><td>surfc</td><td>Generate a combination surface<a id="8438">!</a> and contour plot</td></tr>
<tr><td>waterfall</td><td>Generate a mesh plot of a surface<a id="8439">!</a> with one skirt edge</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Plot Appearance Line
Type Control</th><th>Description</td></tr>
<tr><td>-</td><td>Solid</td></tr>
<tr><td>:</td><td>Dotted</td></tr>
<tr><td>-.</td><td>Dash-dot<a id="8232">!</a></td></tr>
<tr><td>--</td><td>Dashed</td></tr>
<tr><td>.</td><td>Point</td></tr>
<tr><td>o</td><td>Circle</td></tr>
<tr><td>x</td><td>x-mark</td></tr>
<tr><td>+</td><td>Plus</td></tr>
<tr><td>*</td><td>Star</td></tr>
<tr><td>s</td><td>Square</td></tr>
<tr><td>d</td><td>Diamond</td></tr>
<tr><td>v</td><td>Triangle down</td></tr>
<tr><td>^</td><td>Triangle up</td></tr>
<tr><td>&lt;</td><td>Triangle left</td></tr>
<tr><td>&gt;</td><td>Triangle right</td></tr>
<tr><td>p</td><td>Pentagram</td></tr>
<tr><td>h</td><td>Hexagram</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Color Control Character</th><th>Description</td></tr>
<tr><td>b</td><td>Blue</td></tr>
<tr><td>c</td><td>Cyan</td></tr>
<tr><td>g</td><td>Green</td></tr>
<tr><td>k</td><td>Black</td></tr>
<tr><td>m</td><td>Magenta</td></tr>
<tr><td>r</td><td>Red</td></tr>
<tr><td>w</td><td>White</td></tr>
<tr><td>y</td><td>Yellow</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Figure Control</th><th>Description</td></tr>
<tr><td>axis</td><td>Freezes the current axis scaling for<a id="8287">!</a> the current plot or specifies the axis dimensions</td></tr>
<tr><td>figure <n></td><td>Open a new figure window. If present, <n> specifies a figure number</td></tr>
<tr><td>grid<a id="8316">!</a> off/on</td><td>Turn the grid<a id="8317">!</a> off or on</td></tr>
<tr><td>hold<a id="8322">!</a> off/on</td><td>If hold<a id="8323">!</a> is not set, erase figure contents before the next plotting instruction</td></tr>
<tr><td>legend(ca)</td><td>Add a legend to a graph</td></tr>
<tr><td>shading <value></td><td>Shade a surface<a id="8440">!</a> plot with one color<a id="8198">!</a> per grid<a id="8318">!</a> section </td></tr>
<tr><td>subplot(<a id="8432">!</a>plts, n)</td><td>Divide the graphics window up into sections available for<a id="8288">!</a> plotting</td></tr>
<tr><td>text(x,y,str)</td><td>Add text<a id="8453">!</a> to a plot</td></tr>
<tr><td>title(<a id="8457">!</a>str)</td><td>Add a title to a plot</td></tr>
<tr><td>xlabel(<a id="8492">!</a>str)</td><td>Add a label to the x-axis</td></tr>
<tr><td>ylabel(<a id="8495">!</a>str)</td><td>Add a label to the y-axis</td></tr>
<tr><td>zlabel(<a id="8497">!</a>str)</td><td>Add a label to the z-axis</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Color Map Values</th><th>Description</td></tr>
<tr><td>autumn</td><td>yellow, orange, and red colors</td></tr>
<tr><td>bone</td><td>shades of gray</td></tr>
<tr><td>colorcube</td><td>multiple multi-color<a id="8199">!</a> bands</td></tr>
<tr><td>cool</td><td>light blue to purple</td></tr>
<tr><td>copper</td><td>shades of red-brown</td></tr>
<tr><td>flag</td><td>multiple red, white, and blue bands</td></tr>
<tr><td>hot</td><td>deep red through orange to white</td></tr>
<tr><td>hsv</td><td>single spectrum from red to purple</td></tr>
<tr><td>jet</td><td>default) rainbow from blue to red</td></tr>
<tr><td>pink</td><td>from dark to light pink</td></tr>
<tr><td>prism</td><td>multiple bands of spectrum colors</td></tr>
<tr><td>spring</td><td>from purple to yellow</td></tr>
<tr><td>summer</td><td>from dark green to yellow</td></tr>
<tr><td>white</td><td>all white</td></tr>
<tr><td>winter</td><td>from dark blue to light green</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">String Operations</th><th>Description</td></tr>
<tr><td>disp(<a id="8228">!</a>...)</td><td>Display matrix<a id="8367">!</a> or text<a id="8454">!</a></td></tr>
<tr><td>fprintf(<a id="8302">!</a>...)</td><td>Print formatted information</td></tr>
<tr><td>input(...)</td><td>Prompt the user to enter a value<a id="8465">!</a> and parse the result</td></tr>
<tr><td>int2str(<a id="8328">!</a>a)</td><td>Convert an integer to its numerical<a id="8380">!</a> representation</td></tr>
<tr><td>num2str(<a id="8382">!</a>a,n)</td><td>Convert a number to its numerical<a id="8381">!</a> representation with n
decimal places</td></tr>
<tr><td>sprintf(<a id="8413">!</a>...)</td><td>Format a string result</td></tr>
<tr><td>sscanf(<a id="8416">!</a>...)</td><td>Formatted input conversion</td></tr>
<tr><td>strcmp(<a id="8417">!</a>s1, s2)</td><td>Compare two strings<a id="8420">!</a> - returns true if equal<a id="8247">!</a></td></tr>
<tr><td>strcmpi(<a id="8418">!</a>s1, s2)</td><td>Compare two strings<a id="8421">!</a> without regard to case<a id="8168">!</a> - returns true if equal<a id="8248">!</a></td></tr>
<tr><td>textscan</td><td>Scan a text<a id="8455">!</a> string</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Time-Related Functions</th><th>Description</td></tr>
<tr><td>clock</td><td>Determine the current time on the CPU clock</td></tr>
<tr><td>etime</td><td>Find elapsed time</td></tr>
<tr><td>pause</td><td>Pause the execution<a id="8254">!</a> of a program<a id="8399">!</a>, either until any key is hit or for<a id="8289">!</a> a specified number of seconds</td></tr>
<tr><td>tic</td><td>Start a timing sequence</td></tr>
<tr><td>toc</td><td>Stop a timing sequence and return the elapsed time</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Numerical Methods</th><th>Description</td></tr>
<tr><td>diff(<a id="8227">!</a>v)</td><td>Compute the differences between adjacent values in a vector</td></tr>
<tr><td>interp1</td><td>Compute linear<a id="8341">!</a> and cubic<a id="8206">!</a> interpolation<a id="8324">!</a></td></tr>
<tr><td>interp2</td><td>Compute linear<a id="8342">!</a> and cubic<a id="8207">!</a> interpolation<a id="8325">!</a></td></tr>
<tr><td>interp3</td><td>Compute linear<a id="8343">!</a> and cubic<a id="8208">!</a> interpolation<a id="8326">!</a> </td></tr>
<tr><td>polyfit(<a id="8395">!</a>x, y, n)</td><td>Compute a least-squares polynomial<a id="8396">!</a> </td></tr>
<tr><td>polyval(<a id="8398">!</a>c, x)</td><td>Evaluate a polynomial<a id="8397">!</a></td></tr>
<tr><td>spline(<a id="8412">!</a>x, y)</td><td>Spline interpolation<a id="8327">!</a></td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Program Control</th><th>Description</td></tr>
<tr><td>break<a id="8167">!</a></td><td>A command within a loop module that forces control to the statement following the innermost loop</td></tr>
<tr><td>case<a id="8169">!</a></td><td>A specific value<a id="8466">!</a> alternative within a switch<a id="8441">!</a> statement</td></tr>
<tr><td>catch<a id="8170">!</a></td><td>End of a suspect code<a id="8190">!</a> block where the exception is trapped</td></tr>
<tr><td>continue<a id="8202">!</a></td><td>Skip to the end<a id="8240">!</a> of the innermost loop, but remains inside it</td></tr>
<tr><td>else<a id="8236">!</a></td><td>Within an if statement, begin the code<a id="8191">!</a> block executed when the condition is false<a id="8261">!</a></td></tr>
<tr><td>elseif<a id="8237">!</a></td><td>Within an if statement, begin a subsequent test when the result of
&lt;expression&gt;	the previous test is false<a id="8262">!</a></td></tr>
<tr><td>end<a id="8241">!</a></td><td>Terminate a function<a id="8307">!</a> specification or an if, switch<a id="8442">!</a>, for<a id="8290">!</a>, while<a id="8486">!</a>, or catch<a id="8171">!</a> block.</td></tr>
<tr><td>end<a id="8242">!</a></td><td>When indexing, the value<a id="8467">!</a> of the last element in an index vector</td></tr>
<tr><td>for<a id="8291">!</a> var = v</td><td>A code<a id="8192">!</a> block repeated as many times as there are elements<a id="8235">!</a> in the
vector v</td></tr>
<tr><td>function<a id="8308">!</a></td><td>Identify an m-file as a function<a id="8309">!</a> or begin a helper<a id="8321">!</a> function<a id="8310">!</a> within a
function<a id="8311">!</a> file</td></tr>
<tr><td>error(<a id="8249">!</a>str)</td><td>Throw an exception to announce an error with the string provided</td></tr>
<tr><td>global<a id="8315">!</a> var</td><td>Define a variable<a id="8476">!</a> as globally accessible</td></tr>
<tr><td>if &lt;expression&gt;</td><td>Begin a conditional module—the following code<a id="8193">!</a> block is executed if the logical<a id="8353">!</a> expression is true</td></tr>
<tr><td>lasterror</td><td>Provide a structure<a id="8425">!</a> describing the environment from which an
exception was thrown</td></tr>
<tr><td>nargin</td><td>Determine the number of input parameters<a id="8388">!</a> actually supplied by a function<a id="8312">!</a>'s caller</td></tr>
<tr><td>nargout</td><td>Determine the number of output parameters<a id="8389">!</a> actually requested by a function<a id="8313">!</a>'s caller</td></tr>
<tr><td>otherwise</td><td>Catch-all code<a id="8194">!</a> block at the end<a id="8243">!</a> of a switch<a id="8443">!</a> statement</td></tr>
<tr><td>switch<a id="8444">!</a> &lt;variable<a id="8477">!</a>&gt;</td><td>Begin a code<a id="8195">!</a> module selecting specific values of the variable<a id="8478">!</a>>(must be countable)</td></tr>
<tr><td>try</td><td>Begin a block of suspect code<a id="8196">!</a> from which an exception might be thrown
<tr><td>while<a id="8487">!</a> &lt;expression&gt;</td><td>A code<a id="8197">!</a> module repeated as long as the logical<a id="8354">!</a> expression is true</td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Data Class Operations</th><th>Description</td></tr>
<tr><td>char(<a id="8179">!</a>...)</td><td>Cast to a character<a id="8183">!</a> type </td></tr>
<tr><td>class(<a id="8185">!</a>&lt;object&gt;)</td><td>Determine the data<a id="8220">!</a> type of an <tr><td>object </td></tr>
<tr><td>double(<a id="8233">!</a>a)</td><td>Cast a to type double</td></tr>
<tr><td>int8/16/32/64(a)</td><td>Cast a to integer type with the specified number of bits<a id="8165">!</a> </td></tr>
<tr><td>uint8/16/32/64(a)</td><td>Cast a to unsigned integer type with the specified number of bits<a id="8166">!</a> </td></tr>
<tr><td>isa(<a id="8330">!</a>obj, str)</td><td>Test for<a id="8292">!</a> a given data<a id="8221">!</a> type</td></tr>
<tr><td>ischar(<a id="8332">!</a>ch)</td><td>Determine whether the given object is of type char iscell(<a id="8331">!</a>...)	Determine whether the given object is a cell<a id="8177">!</a> </td></tr>
<tr><td>isempty(<a id="8333">!</a>a)</td><td>Test for<a id="8293">!</a> the empty<a id="8239">!</a> vector [ ]</td></tr>
<tr><td>islogical(<a id="8335">!</a>a)</td><td>Determine whether the given object is of type logical<a id="8355">!</a> </td></tr>
<tr><td>isnumeric(<a id="8336">!</a>a)</td><td>Determine whether the given object is of type double </td></tr>
<tr><td>isspace(<a id="8337">!</a>a)</td><td>Test for<a id="8294">!</a> the space character<a id="8184">!</a></td></tr>
<tr><td>isstruct(<a id="8338">!</a>a)</td><td>Determine whether the given object is a structure<a id="8426">!</a></td></tr>
</table>
<table>
<tr><th style="width="250 pixels">Structure Operations</th><th>Description</td></tr>
<tr><td>fieldnames(<a id="8275">!</a>str)</td><td>Return a cell<a id="8178">!</a> array<a id="8163">!</a> containing strings<a id="8422">!</a> that are the names of the fields in the structure<a id="8427">!</a></td></tr>
<tr><td>getfield(<a id="8314">!</a>str,field<a id="8267">!</a>)</td><td>Extract the value<a id="8468">!</a> of the field<a id="8268">!</a></td></tr>

<tr><td>isfield(<a id="8334">!</a>str, field<a id="8269">!</a>)</td><td>Return true if the string is a field<a id="8270">!</a> in the specified structure<a id="8428">!</a></td></tr>
<tr><td>str = rmfield(<a id="8404">!</a>str, field<a id="8271">!</a>)</td><td>Return a copy of the given structure<a id="8429">!</a> with the given field<a id="8272">!</a> removed</td></tr>

<tr><td>str = setfield(<a id="8406">!</a>str, field<a id="8273">!</a>,value<a id="8469">!</a>)</td><td>Construct a structure<a id="8430">!</a> in which the value<a id="8470">!</a> of the field<a id="8274">!</a> has been changed to the given value<a id="8471">!</a></td></tr>

<tr><td>struct(...)</td><td>Construct a structure<a id="8431">!</a> from <fieldname> <value> pairs of
parameters<a id="8390">!</a></td></tr>
</table>

 </div>


</body>
</html>



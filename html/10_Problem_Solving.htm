<!DOCTYPE HTML>
<html>
<head>
<title>10_Problem_Solving</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
<link rel="stylesheet" href="styles/styles.css" />
<script async src="./javascript/index.js"></script>
</style>
</head>
<body>
  <div>#top_nav#</div>
  <div class="nav-obj">#nav_obj#</div>


<div class="content">
  <h1 id="10" align="center">Chapter 10: Problem Solving</h1>

  <!-- Chapter Objectives -->
  <h1>Chapter Objectives</h1>
  <div class="container">
    <p>This chapter presents an overview<a id="10927"></a> of<a id="10928"></a> framing the solutions to<a id="10795"></a> problems:</p>
    <ul>
      <li>We begin with<a id="10704"></a> simple problems that can be solved in a single step</li>
      <li>We continue<a id="10571"></a> to<a id="10796"></a> strategies for<a id="11118"></a> solving more complex problems involving data<a id="10741"></a> collections<a id="10544"></a> by dividing the solution into the following fundamental operations<a id="10908"></a> that can be performed on<a id="10727"></a> any collection of<a id="10929"></a> data<a id="10742"></a>:<ol>
      <li>Basic Computations</li>
      <li>Inserting</li>
      <li>Traversing</li>
      <li>Building </li>
      <li>Mapping</li>
      <li>Filtering</li>
      <li>Folding</li>
      <li>Searching</li>
      <li>Sorting</li>
    </ul>
    <p>Then we will briefly discuss how to<a id="10797"></a> combine these fundamental tools to<a id="10798"></a> solve more complex data<a id="10743"></a> manipulation<a id="11078"></a> problems.</p>
  </div>

  <!-- Introduction -->
  <h1>Introduction</h1>
  <div class="container">
    <p>Programming is really all about applying the computer as a tool to<a id="10799"></a> solve problems. One of<a id="10930"></a> the most difficult tasks facing novice programmers is the blank sheet of<a id="10931"></a> paper. Faced with<a id="10705"></a> a problem you have never seen before, how do you start to<a id="10800"></a> solve it? The problem-solving<a id="10785"></a> style recommended in this text<a id="11086"></a> is first to<a id="10801"></a> identify the basic character<a id="10738"></a> of<a id="10932"></a> the data<a id="10744"></a> and<a id="10637"></a> the basic operation(s) we are asked to<a id="10802"></a> perform. If these two ideas are clear<a id="10543"></a>, we can create a template<a id="10629"></a> or outline of<a id="10933"></a> the solution and<a id="10638"></a> begin to<a id="10803"></a> fill in the blanks.  As we gain more experience with<a id="10706"></a> the language, we have more computing tools to<a id="10804"></a> apply, and<a id="10639"></a> we can attack larger, more complex problems. We now have sufficient tools available to<a id="10805"></a> consider a more principled approach to<a id="10806"></a> data<a id="10745"></a> manipulation<a id="11079"></a> and<a id="10640"></a> problem solving. We will begin with<a id="10707"></a> the typical plan for<a id="11119"></a> solving simple problems in one step and<a id="10641"></a> then continue<a id="10572"></a> to<a id="10807"></a> consider assembling multiple steps to<a id="10808"></a> solve more complex problems.</p>
  </div>

  <div class="chp-section" data-sect-num="1" data-sect-name="Solving Simple Problems">
    <!-- Solving Simple Problems -->
    <h2 id="10_1">10.1	Solving Simple Problems</h2>
    <div class="container clearfix">
      <div class="float-sm-right card style-points">
        <p class="card-title">Style Points 10.1</p>
        <p class="card-text">You might question the necessity of<a id="10934"></a> putting a "simple" bit of<a id="10935"></a> code through a rigorous analysis. However, the time when you first write a module and<a id="10642"></a> start using it is the time of<a id="10936"></a> closest scrutiny of<a id="10937"></a> that module.  It is amazing how quickly three things happen:
          <ol>
            <li>You trust that module implicitly to<a id="10809"></a> do the right thing</li>
            <li>You use it in circumstances for<a id="11120"></a> which it was not intended</li>
            <li>You wish you had paid more attention to<a id="10810"></a> defining error conditions in it.
            </li>
          </ol>
        </p>
      </div>

      <p>In Chapter 2 we saw the basic plan for<a id="11121"></a> solving simple problems:</p>
      <ul>
        <li>Define the input data<a id="10746"></a></li>
        <li>Define the output data<a id="10747"></a></li>
        <li>Discover the underlying equations to<a id="10811"></a> solve the problem</li>
        <li>Implement the solution</li>
        <li>Test the results</li>
        <li>Repair the code until it conforms to<a id="10812"></a> the specifications</li>
      </ul>
      <p>This plan works whenever the problem is simple enough to<a id="10813"></a> be able to<a id="10814"></a> visualize the complete solution. Typically, however, problems are more complex and<a id="10643"></a> require a number of<a id="10938"></a> steps to<a id="10815"></a> be assembled.</p>
    </div>
  </div>

  <div class="chp-section" data-sect-num="2" data-sect-name="Assembling Solution Steps">
    <!-- Assembling Solution Steps -->
    <h2 id="10_2">10.2	Assembling Solution Steps</h2>
    <div class="container">
      <p>Problem complexity frequently comes in the form of<a id="10939"></a> data<a id="10748"></a> collections<a id="10545"></a> that need to<a id="10816"></a> be transformed into other collections<a id="10546"></a> or summarized as intermediate results. Identifying the operation(s) that will create the output from<a id="10603"></a> the input requires some experience. The rest of<a id="10940"></a> this chapter provides some guidelines for<a id="11122"></a> identifying elementary steps whose solutions can be combined to<a id="10817"></a> create solutions to<a id="10818"></a> many complex problems.</p>
    </div>
  </div>

  <div class="chp-section" data-sect-num="3" data-sect-name="Summary of Operations">
    <!-- Summary of Operations -->
    <h2 id="10_3">10.3	Summary of<a id="10941"></a> Operations</h2>
    <div class="container">
      <p>First, we document the operations<a id="10909"></a> we expect to<a id="10819"></a> be able to<a id="10820"></a> perform on<a id="10728"></a> collections<a id="10547"></a>. Table 10.1 lists the generic operations<a id="10910"></a>, a brief description of<a id="10942"></a> each, and<a id="10644"></a> a discussion of<a id="10943"></a> the consequences.</p>
      <table class="table">
        <thead class="thead-light">
          <tr>Table 10.1: Summary of<a id="10944"></a> Operations</tr>
          <tr>
            <th>Operation</th>
            <th>Description</th>
            <th>Consequence</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Basic Step</td>
            <td>Perform elementary operation(s)</td>
            <td>Resulting value(<a id="11095"></a>s)</td>
          </tr>
          <tr>
            <td>Insert</td>
            <td>Inserts one item into a collection</td>
            <td>Collection with<a id="10708"></a> one more item</td>
          </tr>
          <tr>
            <td>Build</td>
            <td>Creates a collection from<a id="10604"></a> a data<a id="10749"></a> source (external file or traversing<a id="10924"></a> another collection); usually accomplished by starting with<a id="10709"></a> an empty<a id="10573"></a> collection and<a id="10645"></a> inserting<a id="10521"></a> one item at a time</td>
            <td>A new collection of<a id="10945"></a> data<a id="10750"></a></td>
          </tr>
          <tr>
            <td>Traverse</td>
            <td>Touches each item of<a id="10946"></a> data<a id="10751"></a> in the collection - frequently used to<a id="10821"></a> display or copy a collection</td>
            <td>The collection is unchanged</td>
          </tr>
          <tr>
            <td>Map</td>
            <td>Changes the content of<a id="10947"></a> some or all of<a id="10948"></a> the items in the collection</td>
            <td>A new collection of<a id="10949"></a> the same length, but the content of<a id="10950"></a> some or all items is changed</td>
          </tr>
          <tr>
            <td>Filter</td>
            <td>Removes some items from<a id="10605"></a> the collection</td>
            <td>A new collection with<a id="10710"></a> reduced length, but the content of<a id="10951"></a> the items remains unchanged</td>
          </tr>
          <tr>
            <td>Fold</td>
            <td> Traverses the collection, summarizing<a id="10921"></a> the contents with<a id="10711"></a> a single result (e.g., sum, max, or mean)</td><td>A single result summarizing<a id="10922"></a> the collection in some way; the collection is unchanged</td>
          </tr>
          <tr>
            <td>Search</td>
            <td>Traverses the collection until an item matches a given search criterion and<a id="10646"></a> then stops, returning<a id="10619"></a> the result</td>
            <td>A single result or the indication that the desired match was not achieved; the collection is unchanged</td>
          </tr>
          <tr>
            <td>Sort</td>
            <td>Puts the collection in order by some specific criterion</td>
            <td>A new collection of<a id="10952"></a> the same length</td>
          </tr>
        </tbody>
      </table>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Basic Arithmetic Operations">
      <!-- Arithmetic Operations -->
      <h3 id="10_3_1">10.3.1	Basic Arithmetic Operations</h3>
      <div class="container">
        <p>The simple problem solution described in Section 10.1 frequently needs to<a id="10822"></a> be used as part of<a id="10953"></a> a larger problem solution. We include that activity in this list for<a id="11123"></a> completeness.</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Inserting into a Collection">
       <!-- Inserting into a Collection -->
      <h3 id="10_3_2">10.3.2	Inserting into a Collection</h3>
      <div class="container clearfix">
        <p>Inserting an item into a collection is a process usually used to<a id="10823"></a> build or maintain a collection of<a id="10954"></a> information. In this text<a id="11087"></a>, we have seen four basic data<a id="10752"></a> collection types<a id="10634"></a> to<a id="10824"></a> which insertion<a id="11055"></a> applies: vectors, arrays, cell<a id="<a id="10534"></a>10517"></a> arrays, and<a id="10647"></a> structure<a id="11063"></a> arrays. We will discuss the peculiarities of<a id="10955"></a> each collection and<a id="10648"></a> then the common processing<a id="10626"></a> algorithm<a id="10498"></a> that can be used to<a id="10825"></a> insert a new entry into the collection.</p>
        <ul>
          <li>Vectors and<a id="10649"></a> arrays are very flexible collections<a id="10548"></a> in the MATLAB<a id="10739"></a> language, and<a id="10650"></a> suffer only from<a id="10606"></a> the obvious limitations that one can add only numbers<a id="10793"></a> to<a id="10826"></a> a vector data<a id="10753"></a>, that data<a id="10754"></a> must be inserted a row or column at a time, and<a id="10651"></a> that the size<a id="11112"></a> of<a id="10956"></a> the item inserted must match the existing array<a id="10505"></a> rows or columns</li>
          <li>Cell arrays can be indexed like numerical<a id="10901"></a> arrays and<a id="10652"></a> can contain any object; however, to<a id="10827"></a> compare one element to<a id="10828"></a> another usually requires a special-purpose comparison function<a id="10588"></a></li>
          <li>Structure arrays as a collection behave like cell<a id="<a id="10535"></a>10518"></a> arrays, except that any structure<a id="11064"></a> inserted must have the same fields as those in the existing structure<a id="11065"></a></li>
        </ul>
        <p>In general, inserting<a id="10522"></a> into any of<a id="10957"></a> these collections<a id="10549"></a> involves insertion<a id="11056"></a> into the front of<a id="10958"></a> the collection, the back of<a id="10959"></a> the collection, or at some position in the middle in order to<a id="10829"></a> keep the collection in order by a specific comparison method.</p>
        <p><b>Inserting at the front</b> is accomplished by concatenating<a id="11060"></a> the new element before the existing collection.</p>
        <p><b>Inserting at the back</b> is accomplished by concatenating<a id="11061"></a> the new element after the existing collection.</p>
        <p><b>Inserting in order</b> is usually accomplished using a while<a id="11115"></a> loop. If we are inserting<a id="10523"></a> item into a collection <code>C</code>, we will use a while<a id="11116"></a> loop to<a id="10830"></a> find the index of<a id="10960"></a> the insertion<a id="11057"></a> point, <code>ins</code>, and<a id="10653"></a> then concatenate the three parts of<a id="10961"></a> the new collection. Figure<a id="11146"></a> 10.1 shows the flowchart that applies here.</p>
        <div class="card-deck">
          <div class="col-sm-8">
            <div class="exercise">#exercise_10_1#</div>
          </div>
          <div class="col-sm-4 card">
            <img src="..\Images\Fig_10_1.JPG" alt="Figure 10.1" class="fig card-img">
            <p class="figure-name card-title">Figure<a id="11147"></a> 10.1: Insert in Order</p>
          </div>
        </div>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="Traversing a Collection">
      <!-- Traversing a Collection -->
      <h3 id="10_3_3">10.3.3	Traversing a Collection</h3>
      <div class="container clearfix">
        <p>Traversal involves moving across all elements<a id="11102"></a> of<a id="10962"></a> a collection and<a id="10654"></a> performing some step (not necessarily the same step) on<a id="10729"></a> each element without changing<a id="10787"></a> that element. Figure<a id="11148"></a> 10.2 illustrate the flowchart for<a id="11124"></a> traversing<a id="10925"></a> a collection. They assume that you are doing something like writing<a id="10635"></a> a file that needs to<a id="10831"></a> be initialized and<a id="10655"></a> finalized. These two steps may not always be required.</p>
        <div class="card-deck">
          <div class="col-sm-8">
            <div class="exercise">#exercise_10_2#</div>
          </div>
          <div class="col-sm-4 card">
              <img src="..\Images\Fig_10_2.JPG" alt="Figure 10.2" class="fig-long card-img">
              <p class="figure-name card-title">Figure<a id="11149"></a> 10.2: Traversing a Collection</p>
          </div>
        </div>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="4" data-sub-name="Building a Collection">
      <!-- Building a Collection -->
      <h3 id="10_3_4">10.3.4	Building a Collection</h3>
      <div class="container clearfix">
        <p>In practice, frequently we combine traversal<a id="10566"></a> of<a id="10963"></a> one collection and<a id="10656"></a> building<a id="10528"></a> of<a id="10964"></a> another to<a id="10832"></a> copy data<a id="10755"></a> from<a id="10607"></a> one collection into another. Building a collection is the process of<a id="10965"></a> beginning with<a id="10712"></a> an empty<a id="10574"></a> collection and<a id="10657"></a> assembling data<a id="10756"></a> elements<a id="11103"></a> by inserting<a id="10524"></a> them one at a time into the new collection. The size<a id="11113"></a> of<a id="10966"></a> the collection increases continually until the process is finished. Figure<a id="11150"></a> 10.3 illustrates the algorithm<a id="10499"></a> for<a id="11125"></a> building<a id="10529"></a> a collection.</p>
        <div class="card-deck">
          <div class="col-sm-8">
            <div class="exercise">#exercise_10_3#</div>
          </div>
          <div class="col-sm-4 card">
              <img src="..\Images\Fig_10_3.JPG" alt="Figure 10.3" class="fig-long card-img">
              <p class="figure-name card-title">Figure<a id="11151"></a> 10.3: Building a Collection</p>
          </div>
        </div>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="5" data-sub-name="Mapping a Collection">
      <!-- Mapping a Collection -->
      <h3 id="10_3_5">10.3.5	Mapping a Collection</h3>
      <div class="container clearfix">
        <p>The purpose of<a id="10967"></a> mapping<a id="10536"></a> is to<a id="10833"></a> transform a collection by changing<a id="10788"></a> the data<a id="10757"></a> in some or all of<a id="10968"></a> its elements<a id="11104"></a> according to<a id="10834"></a> some functional description without changing<a id="10789"></a> its length. It is distinct from<a id="10608"></a> traversal<a id="10567"></a> because its intent is to<a id="10835"></a> change the data<a id="10758"></a> elements<a id="11105"></a>. While many languages permit collections<a id="10550"></a> to<a id="10836"></a> be modified in place, the MATLAB<a id="10740"></a> language usually requires you to<a id="10837"></a> create a new collection. However, this is still considered mapping<a id="10537"></a>. The scalar<a id="11052"></a> mathematical and<a id="10658"></a> logical<a id="10525"></a> operations<a id="10911"></a> on<a id="10730"></a> vectors are good examples<a id="10623"></a> of<a id="10969"></a> mapping<a id="10538"></a>. Figure<a id="11152"></a> 10.4illustrates the basic algorithm<a id="10500"></a> for<a id="11126"></a> mapping<a id="10539"></a>.</p>
        <div class="card-deck">
          <div class="col-sm-8">
            <div class="exercise">#exercise_10_4#</div>
          </div>
          <div class="col-sm-4 card">
              <img src="..\Images\Fig_10_4.JPG" alt="Figure 10.4" class="fig-long card-img">
              <p class="figure-name card-title">Figure<a id="11153"></a> 10.4: Mapping a Collection</p>
          </div>
        </div>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="6" data-sub-name="Filtering a Collection">
      <!-- Filtering a Collection -->
      <h3 id="10_3_6">10.3.6	Filtering a Collection</h3>
      <div class="container clearfix">
        <p>Filtering involves removing items from<a id="10609"></a> a collection according to<a id="10838"></a> specified selection criteria. The data<a id="10759"></a> contents of<a id="10970"></a> the remaining items in the collection should not be changed, and<a id="10659"></a> the collection will usually be shorter than before.  Filtering always requires that a new collection be built on<a id="10731"></a> the filtered items. Figure<a id="11154"></a> 10.5 illustrates the general algorithm<a id="10501"></a> for<a id="11127"></a> filtering<a id="10551"></a> a collection.</p>
        <div class="card-deck">
          <div class="col-sm-8">
            <div class="exercise">#exercise_10_5#</div>
          </div>
          <div class="col-sm-4 card">
              <img src="..\Images\Fig_10_5.JPG" alt="Figure 10.5" class="fig-long card-img">
              <p class="figure-name card-title">Figure<a id="11155"></a> 10.5: Filtering a Collection</p>
          </div>
        </div>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="7" data-sub-name="Folding a Collection">
      <!-- Folding a Collection -->
      <h3 id="10_3_7">10.3.7	Folding a Collection</h3>
      <div class="container clearfix">
        <p>Folding is the name given to<a id="10839"></a> summarizing<a id="10923"></a> a collection. It is a special case<a id="10530"></a> of<a id="10971"></a> traversal<a id="10568"></a> where all of<a id="10972"></a> the items in the collection are summarized as a single result. The collection is not altered in size<a id="11114"></a> or values by the operation<a id="10631"></a>. Totaling, averaging, and<a id="10660"></a> finding the largest element in a vector are typical examples<a id="10624"></a> of<a id="10973"></a> folding<a id="10559"></a>.Figure<a id="11156"></a> 10.6 shows the basic algorithm<a id="10502"></a> for<a id="11128"></a> folding<a id="10560"></a> a collection. The general form of<a id="10974"></a> a fold should be to<a id="10840"></a> initialize the summary<a id="10906"></a> value<a id="11090"></a> and<a id="10661"></a> then traverse the whole collection, updating the summary<a id="10907"></a> when necessary. There is an interesting problem in determining the starting value<a id="11091"></a> for<a id="11129"></a> a fold. If that value<a id="11092"></a> is not chosen well, there may be no relevant results in the collection.  A good approach is to<a id="10841"></a> initialize the state with<a id="10713"></a> the value<a id="11093"></a> of<a id="10975"></a> the first entry in the collection. This raises another issue to<a id="10842"></a> make sure that you deal with<a id="10714"></a> an empty<a id="10575"></a> input collection.</p>
        <div class="card-deck">
          <div class="col-sm-8">
            <div class="exercise">#exercise_10_6#</div>
          </div>
          <div class="col-sm-4 card">
              <img src="..\Images\Fig_10_6.JPG" alt="Figure 10.6" class="fig-long card-img">
              <p class="figure-name card-title">Figure<a id="11157"></a> 10.6: Folding a Collection</p>
          </div>
        </div>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="8" data-sub-name="Searching a Collection">
      <h3 id="10_3_8">10.3.8	Searching a Collection</h3>
      <div class="container clearfix">
        <p>Searching is the process of<a id="10976"></a> traversing<a id="10926"></a> the collection and<a id="10662"></a> applying a specified test to<a id="10843"></a> each element in turn, terminating the process as soon as the test is satisfied. This is superficially similar to<a id="10844"></a> filtering<a id="10552"></a>, except that it is not necessary to<a id="10845"></a> touch all the elements<a id="11106"></a> of<a id="10977"></a> the collection; the search stops as soon as one element of<a id="10978"></a> the collection matches the search criteria. If the criteria are extremely complex, it is sometimes advisable to<a id="10846"></a> perform a mapping<a id="10540"></a> or folding<a id="10561"></a> before the search is performed. Figure<a id="11158"></a> 10.7 illustrates one way to<a id="10847"></a> implement searching<a id="10554"></a> a collection using a for<a id="11130"></a> loop<a id="10586"></a> with<a id="10715"></a> a break exit. There are always two exit criteria from<a id="10610"></a> a search — finding what you seek and<a id="10663"></a> failing to<a id="10848"></a> find it. Searching can also be implemented with<a id="10716"></a> a while<a id="11117"></a> loop, but the multiple exit criteria make the code generally more complex.</p>
        <div class="card-deck">
          <div class="col-sm-8">
            <div class="exercise">#exercise_10_7#</div>
          </div>
          <div class="col-sm-4 card">
              <img src="..\Images\Fig_10_7.JPG" alt="Figure 10.7" class="fig-long card-img">
              <p class="figure-name card-title">Figure<a id="11159"></a> 10.7: Searching a Collection</p>
          </div>
        </div>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="9" data-sub-name="Sorting a Collection">
      <h3 id="10_3_9">10.3.9	Sorting a Collection</h3>
      <div class="container">
        <p>Sorting involves reordering the elements<a id="11107"></a> in a collection according to<a id="10849"></a> a specified ranking function<a id="10589"></a> that defines which item “comes before” another. Sorting is computationally expensive. However, if a large collection of<a id="10979"></a> data<a id="10760"></a> is stable—items are added or removed infrequently—but is frequently searched for<a id="11131"></a> specific items, keeping the data<a id="10761"></a> sorted can greatly improve the efficiency of<a id="10980"></a> the searches. Chapter 16 is devoted to<a id="10850"></a> the details of<a id="10981"></a> sorting<a id="10556"></a> algorithms, but the concept is included here to<a id="10851"></a> complete the list of<a id="10982"></a> operations<a id="10912"></a> we can perform on<a id="10732"></a> a collection.  In general, the built-in sort function<a id="10590"></a> can sort either a vector (of numbers<a id="10794"></a>, of<a id="10983"></a> course) or a cell<a id="10519"></a> array<a id="10506"></a> with<a id="10717"></a> either one row or one column containing strings.  Cell arrays are sorted alphabetically.  In either case<a id="10531"></a>, it returns not only the sorted values but also the order in which the original data<a id="10762"></a> were used to<a id="10852"></a> produce the sort.</p>
        <div class="exercise">#exercise_10_8#</div>
        <p><b>Notes:</b></p>
        <ul>
          <li>Since the sort was sensitive to<a id="10853"></a> case<a id="10532"></a>, 'In' was ranked before 'a'.</li>
          <li>Repeated words were retained, indicating that the word 'a' was the 10th and<a id="10664"></a> 17th words in the original sentence</li>
        </ul>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="4" data-sect-name="Solving Larger Problems">
    <!-- Solving Larger Problems -->
    <h2 id="10_4">10.4 Solving Larger Problems</h2>
    <div class="container clearfix">
      <div class="float-sm-right">
        <div class="card">
            <img src="..\Images\Fig_10_8a.JPG" alt="Figure 10.8a" class="fig card-img">
            <p class="figure-name card-title">Fig 10.8a: Baseball Player Problem</p>
        </div>
        <div class="card">
            <img src="..\Images\Fig_10_8b.JPG" alt="Figure 10.8b" class="fig card-img">
            <p class="figure-name card-title">Fig 10.8b: The Last Step</p>
        </div>
        <div class="card">
            <img src="..\Images\Fig_10_8c.JPG" alt="Figure 10.8c" class="fig card-img">
            <p class="figure-name card-title">Fig 10.8c: The Last But One Step</p>
        </div>
        <div class="card">
            <img src="..\Images\Fig_10_8d.JPG" alt="Figure 10.8d" class="fig card-img">
            <p class="figure-name card-title">Fig 10.8d: The First Step</p>
        </div>
      </div>
      <p>Problem statements are rarely simple enough to<a id="10854"></a> be able to<a id="10855"></a> seize one of<a id="10984"></a> the above steps and<a id="10665"></a> solve the whole problem. Usually, the solution involves choosing a number of<a id="10985"></a> known operations<a id="10913"></a> and<a id="10666"></a> performing those operations<a id="10914"></a> in order to<a id="10856"></a> solve the complete problem. Solution steps are combined in one of<a id="10986"></a> two ways—in sequence or nested. When considering the overall strategy for<a id="11132"></a> solving a problem, one might identify steps A and<a id="10667"></a> B as contributing to<a id="10857"></a> the solution. Your logical<a id="10526"></a> statement might say either “do A and<a id="10668"></a> then B” sequential steps—or “for<a id="11133"></a> each part of<a id="10987"></a> A, do B”—nested steps.  For example<a id="11053"></a>, consider the baseball card problem originally proposed in Chapter 1. You have collected over the years a huge number of<a id="10988"></a> baseball cards, and<a id="10669"></a> you wish to<a id="10858"></a> find the names<a id="11098"></a> of<a id="10989"></a> the 10 “qualified” players with<a id="10718"></a> the highest lifetime batting average.</p>
      <p>To qualify, the players must have been in the league at least five years, had at least 100 plate appearances per year, and<a id="10670"></a> made less<a id="10703"></a> than 10 errors per year.  The first step is to<a id="10859"></a> build a collection containing the relevant information on<a id="10733"></a> the cards for<a id="11134"></a> each player, and<a id="10671"></a> the use of<a id="10990"></a> a structure<a id="11066"></a> array<a id="10507"></a> seems a good choice. Next, we need to<a id="10860"></a> operate on<a id="10734"></a> this collection to<a id="10861"></a> solve the problem. Consider again the overall problem situation, as shown in Figure<a id="11160"></a> 10.8a. The original data<a id="10763"></a> are the structure<a id="11067"></a> array<a id="10508"></a> containing all the player data<a id="10764"></a>. The final result is a list of<a id="10991"></a> 10 names<a id="11099"></a> of<a id="10992"></a> the qualified players with<a id="10719"></a> the highest batting averages. There may be more than one sequence of<a id="10993"></a> operations<a id="10915"></a> to<a id="10862"></a> solve this problem, and<a id="10672"></a> some may be more efficient than others.  First, we consider the operations<a id="10916"></a> that could be performed on<a id="10735"></a> the original data<a id="10765"></a>. Since the end<a id="10576"></a> result is a collection, it is unlikely that the first step would reduce the collection to<a id="10863"></a> one answer. This eliminates folding<a id="10562"></a> and<a id="10673"></a> searching<a id="10555"></a>. Since the collection is already built, we do not need to<a id="10864"></a> insert or build, leaving four possible operations<a id="10917"></a> to<a id="10865"></a> consider—traversal<a id="10569"></a>, mapping<a id="10541"></a>, filtering<a id="10553"></a>, and<a id="10674"></a> sorting<a id="10557"></a>.  Now, consider the last operation<a id="10632"></a>—it seems reasonable that the last thing to<a id="10866"></a> do is a mapping<a id="10542"></a>—taking the 10 selected structures<a id="10620"></a> and<a id="10675"></a> extracting the names<a id="11100"></a>.  Now, we must think about how to<a id="10867"></a> find these 10 structures<a id="10621"></a>. If we had a collection of<a id="10994"></a> qualified players sorted by their batting average, we could accomplish this with<a id="10720"></a> a special filter taking the first 10 from<a id="10611"></a> these sorted, qualified players (Fig 10.8b).</p>
      <p>Backing up one more step, we can see that the sorted collection we need is just a sort of<a id="10995"></a> the qualified players, and<a id="10676"></a> we can chain these steps together to<a id="10868"></a> solve the whole problem. (Figures 10.8c and<a id="10677"></a> 10.8d)</p>
    </div>
  </div>

  <div class="chp-section" data-sect-num="5" data-sect-name="Engineering Example - Processing Geopolitical Data">
    <!-- Engineering Example -->
    <h2 id="10_5">10.5  Engineering Example - Processing Geopolitical Data</h2>
    <div class="container clearfix">
      <p>Imagine that you have decided to<a id="10869"></a> move your prosperous business overseas to<a id="10870"></a> the country with<a id="10721"></a> the most business-friendly environment. After considerable study, you decide that the best measure of<a id="10996"></a> friendliness would be to<a id="10871"></a> compute the rate of<a id="10997"></a> growth of<a id="10998"></a> the gross domestic product for<a id="11135"></a> candidate countries, subtract their rate of<a id="10999"></a> population growth, and<a id="10678"></a> use this measure to<a id="10872"></a> choose the best country. An Internet search provides an interesting source of<a id="11000"></a> data<a id="10766"></a>. Figure<a id="11161"></a> 10.9 shows an excerpt from<a id="10612"></a> a spreadsheet<a id="10579"></a> containing historical data<a id="10767"></a> for<a id="11136"></a> 154 countries from<a id="10613"></a> Penn World Table Version 9.1. described in detail in this paper: Feenstra, Robert C., Robert Inklaar and<a id="10679"></a> Marcel P. Timmer (2015), "The Next Generation of<a id="11001"></a> the Penn World Table" American Economic Review, 105(10), 3150-3182, found at <a style="color:black;" href="https://www.rug.nl/ggdc/">www.ggdc.net</a></p>
      <div class="card">
          <img src="..\Images\Fig_10_9.JPG" alt="Figure 10.9" class="fig fig-wide card-img">
          <p class="figure-name card-title">Fig 10.9: World Data Example</p>
      </div>
      <p>The data<a id="10768"></a> columns of<a id="11002"></a> interest to<a id="10873"></a> us contain the following information:
      <ul>
        <li><code>contrycode</code>: a TLA for<a id="11137"></a> each country (col A)</li>
        <li><code>country</code>: name of<a id="11003"></a> the country (col B)</li>
        <li><code>year</code>: year for<a id="11138"></a> which values are quoted (col C)</li>
        <li><code>rgdpe</code>: Expenditure-side real GDP at chained PPPs (in mil. 2011US$) (col E)</li>
        <li><code>pop</code>: Population in millions (col G)</li>
      </ul>
      <p>Figure<a id="11162"></a> 10.9 also illustrates one of<a id="11004"></a> the weaknesses of<a id="11005"></a> spreadsheets<a id="11062"></a>: they are inherently two dimensional, and<a id="10680"></a> the data<a id="10769"></a> in this case<a id="10533"></a> are three dimensional; each country has several sets of<a id="11006"></a> data<a id="10770"></a> as functions<a id="11081"></a> of<a id="11007"></a> the year when the information was recorded. Therefore, the data<a id="10771"></a> must be massaged into a  form more useful to<a id="10874"></a> us. A careful examination of<a id="11008"></a> the data<a id="10772"></a> also reveals the following challenges:</p>
      <ul>
        <li>The years in which the data<a id="10773"></a> were available vary from<a id="10614"></a> country to<a id="10875"></a> country—most have data<a id="10774"></a> from<a id="10615"></a> 1950 to<a id="10876"></a> 2017</li>
        <li>There are some places within the numerical<a id="10902"></a> data<a id="10775"></a> where the values are not available, signified by the blank cells at those locations.</li>
      </ul>
      <p>Our algorithm<a id="10503"></a> must take into account the variable<a id="11097"></a> number of<a id="11009"></a> years and<a id="10681"></a> the potential presence of<a id="11010"></a> strings within the data<a id="10776"></a>. Fortunately, the Matlab <code>xlsread(<a id="10622"></a>...)</code> function<a id="10591"></a> discussed earlier recognizes this situation and<a id="10682"></a> inserts <code>NaN<a id="10792"></a></code> in the numerical<a id="10903"></a> data<a id="10777"></a> fields. To ensure clarity and<a id="10683"></a> reliability in our solution, we need a careful design for<a id="11139"></a> this data<a id="10778"></a> processing<a id="10627"></a> task as follows.</p>
      <ul>
        <li>Looking at the end<a id="10577"></a> result desired, eventually we need to<a id="10877"></a> fold a collection of<a id="11011"></a> data<a id="10779"></a> about each country and<a id="10684"></a> choose the friendliest one.</li>
        <li>The information describing each country must include not only its name, but also vectors of<a id="11012"></a> the population and<a id="10685"></a> CGDP as a function<a id="10592"></a> of<a id="11013"></a> the year. It seems that a structure<a id="11068"></a> array<a id="10509"></a> by country would be an appropriate form for<a id="11140"></a> the data<a id="10780"></a>.</li>
        <li>Therefore, before actually solving the problem, we have to<a id="10878"></a> build this structure<a id="11069"></a>.</li>
        <li>Having built the structure<a id="11070"></a>, the folding<a id="10563"></a> operation<a id="10633"></a> to<a id="10879"></a> find the friendliest country follows the folding<a id="10564"></a> template<a id="10630"></a> shown in Section 10.3.7.</li>
      </ul>
      <p>Listing 10.1 shows the script that accomplishes this analysis, although most of<a id="11014"></a> the work is actually done in the following functions<a id="11082"></a>. When we run this program, we see the following result:</p>
      <div class="listing">#listing_10_1#</div>
      <p><code>>>best country is Bosnia and<a id="10686"></a> Herzegovina</code></p>
      <p>This may not be exactly the result we were hoping for<a id="11141"></a>. In Chapter 16 we will revisit this example<a id="11054"></a> with<a id="10722"></a> some better tools that will allow us to<a id="10880"></a> apply additional criteria to<a id="10881"></a> selecting countries.</p>
    </div>
  </div>

  <!-- Chapter Summary -->
  <h2>Chapter Summary</h2>
  <div class="container">
    <p>This chapter presented the fundamental operations<a id="10918"></a> that can be applied to<a id="10882"></a> problem solving:</p>
    <ul>
      <li>Using normal arithmetic<a id="10504"></a> operations<a id="10919"></a> with<a id="10723"></a> specific input and<a id="10687"></a> output values</li>
      <li>Inserting new elements<a id="11108"></a> in a collection</li>
      <li>Traversing a collection</li>
      <li>Building a collection by repetitive insertion<a id="11058"></a></li>
      <li>Mapping a collection - changing<a id="10790"></a> the values of<a id="11015"></a> the data<a id="10781"></a> items in the
      collection, but not the number of<a id="11016"></a> them</li>
      <li>Filtering a collection - reducing the number of<a id="11017"></a> entries, but not
      changing<a id="10791"></a> the data<a id="10782"></a> contents of<a id="11018"></a> the collection</li>
      <li>Folding the values in a collection into a single quantity</li>
      <li>Searching for<a id="11142"></a> a specific match in a collection</li>
      <li>Sorting a collection</li>
    </ul>
    <p>Then we briefly discussed how to<a id="10883"></a> combine these fundamental tools to<a id="10884"></a> solve more complex data<a id="10783"></a> manipulation<a id="11080"></a> problems.</p>
  </div>
<h2>Self Test</h2>
<div class="container">

Use the following questions to<a id="10885"></a> check your understanding of<a id="11019"></a> the material in this
chapter:
<h3>True or False</h3>
<ol>
<li>Copying the elements<a id="11109"></a> of<a id="11020"></a> a structure<a id="11071"></a> array<a id="10510"></a> into a cell<a id="10520"></a> array<a id="10511"></a> is a
combination of<a id="11021"></a> traversal<a id="10570"></a> and<a id="10688"></a> insertion<a id="11059"></a>.</li>
      <li>If you map a collection, you must change at least one of<a id="11022"></a> its elements<a id="11110"></a>.</li>
      <li>When you filter a collection, at least one data<a id="10784"></a> element is changed.</li>
      <li>The function<a id="10593"></a> max(<a id="10617"></a>...) is not folding<a id="10565"></a> because it returns two values.</li>
      <li>You can use a for<a id="11143"></a> loop<a id="10587"></a> to<a id="10886"></a> search a collection even if you need to<a id="10887"></a>
stop the search when you find the answer.</li>
      <li>Sorting must involve putting the items in a collection in numerical<a id="10904"></a>
order (ascending or descending).</li>
</ol>
<h3>Fill in the Blanks</h3>
<ol>
<li>The problem-solving<a id="10786"></a> style recommended in this text<a id="11088"></a> is to<a id="10888"></a> identify
the ___________and<a id="10689"></a> the _____________.</li>
      <li>Building is usually the process of<a id="11023"></a> ____________ and<a id="10690"></a> ___________
_______________.</li>
      <li>Mapping may involve combining _____________ of<a id="11024"></a> the same length.</li>
      <li>We _______________ vectors by applying built-in logical<a id="10527"></a> operations<a id="10920"></a>
and<a id="10691"></a> then indexing<a id="11111"></a> with<a id="10724"></a> the results to<a id="10889"></a> produce new, shorter arrays.</li>
      <li>Totaling, averaging, and<a id="10692"></a> finding the smallest element in a vector are
typical examples<a id="10625"></a> of<a id="11025"></a> _____________.</li>
      <li>There are almost always two exit criteria for<a id="11144"></a> a search: ___________
_______________ or ________________.</li>
      <li>To save a collection to<a id="10890"></a> a text<a id="11089"></a> file, you ____________ the collection
____________ it to<a id="10891"></a> the file.</li>
</ol>

<h3>Programming Projects</h3>
<ol><p>
<li>The purpose of<a id="11026"></a> this problem is to<a id="10892"></a> write a set of<a id="11027"></a> functions<a id="11083"></a> that
calculate the volume of<a id="11028"></a> a slant cylinder with<a id="10725"></a> an irregular pentagonal
cross section shown in Figure<a id="11163"></a> 10.10. </p>
      <div class="card">
          <img src="..\Images\Fig_10_10.JPG" alt="Figure 10.10" class="fig card-img">
          <p class="figure-name card-title">Fig 10.10: The Problem</p>
      </div>
<p>You will be given two vectors, x and<a id="10693"></a> y, containing the coordinates of<a id="11029"></a>
the corners of<a id="11030"></a> the pentagon, and<a id="10694"></a> the value<a id="11094"></a> h , the vertical height of<a id="11031"></a>
the cylinder. We will need to<a id="10893"></a> break this problem apart, writing<a id="10636"></a>
functions<a id="11084"></a> to<a id="10894"></a> solve each part:
<ul>
<li>The volume of<a id="11032"></a> the cylinder is the area of<a id="11033"></a> the pentagon multiplied by
the vertical height; write a function<a id="10594"></a> polyval(<a id="10618"></a>x, y, h) to<a id="10895"></a> solve this.</li>
      <li>The area of<a id="11034"></a> the pentagon is the sum of<a id="11035"></a> the areas of<a id="11036"></a> three
triangles shown in Figure<a id="11164"></a> 10.11. </p>
      <div class="card">
          <img src="..\Images\Fig_10_11.JPG" alt="Figure 10.11" class="fig card-img">
          <p class="figure-name card-title">Fig 10.11: The Base</p>
      </div>
<p>So we need to<a id="10896"></a> write a function<a id="10595"></a>
pent_area(x, y) that asks for<a id="11145"></a> the area of<a id="11037"></a> the three triangles and<a id="10695"></a>
adds them together.</li>
      <li>Given the coordinates of<a id="11038"></a> the corners of<a id="11039"></a> a triangle, we need a
function<a id="10596"></a> tri_area(x, y) to<a id="10897"></a> calculate the area of<a id="11040"></a> the triangle—see
Figure<a id="11165"></a> 10.12. </p>
      <div class="card">
          <img src="..\Images\Fig_10_12.JPG" alt="Figure 10.12" class="fig card-img">
          <p class="figure-name card-title">Fig 10.12: Area of<a id="11041"></a> a Triangle</p>
      </div>
<p>To compute the area of<a id="11042"></a> the triangle, we need the
values of<a id="11043"></a> a, b, and<a id="10696"></a> c . So if we had the lengths of<a id="11044"></a> the lines, the area
of<a id="11045"></a> the triangle is given by Heron's formula:<br>
A = ( s(s-a)(s-b)(s-c) )<br>
where s is half the sum of<a id="11046"></a> a, b, and<a id="10697"></a> c.</li>
      <li>So we need a function<a id="10597"></a> tri_side(x, y) that computes the length
of<a id="11047"></a> a line when given its end<a id="10578"></a> points.</li>
      <li>Then, we can put the pieces back together by calling the functions<a id="11085"></a>
with<a id="10726"></a> the right parameters<a id="11096"></a>, and<a id="10698"></a> then build and<a id="10699"></a> test polyvol using
the test cases provided.</li>
</ul>
      <li>This problem is about processing<a id="10628"></a> structure<a id="11072"></a> arrays. Write a function<a id="10598"></a>
named structSort that sorts a structure<a id="11073"></a> array<a id="10512"></a> based on<a id="10736"></a> a given field<a id="10581"></a>
that contains numerical<a id="10905"></a> values. Your function<a id="10599"></a> should take in a
structure<a id="11074"></a> array<a id="10513"></a> and<a id="10700"></a> a string that should correspond to<a id="10898"></a> one of<a id="11048"></a> the
field<a id="10582"></a> names<a id="11101"></a> of<a id="11049"></a> the structure<a id="11075"></a> array<a id="10514"></a> and<a id="10701"></a> return the original structure<a id="11076"></a> array<a id="10515"></a>
sorted on<a id="10737"></a> the given field<a id="10583"></a>. It should check to<a id="10899"></a> be sure that the
specified field<a id="10584"></a> name is in fact one of<a id="11050"></a> the fields of<a id="11051"></a> the structure<a id="11077"></a> array<a id="10516"></a>,
and<a id="10702"></a> call the error(<a id="10580"></a>...) function<a id="10600"></a> if it is not.
Test your function<a id="10601"></a> by using the buildCDs script from<a id="10616"></a> Chapter 7,
using the input function<a id="10602"></a> to<a id="10900"></a> specify the sorting<a id="10558"></a> field<a id="10585"></a>.</li>
 
</ol>
</div>
</div>


</body>
</html>


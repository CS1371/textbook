<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<head>
	<title>03_Functions</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
	<link rel="stylesheet" href="styles/styles.css" />
	<script async src="./javascript/index.js"></script>
</head>
<body>
<div>#top_nav#</div>
<div class="nav-obj">#nav_obj#</div>
<div class="content">
	<h1 align="center" id="3">Chapter 3: Functions</h1>

	<!-- Chapter Objectives -->
	<h2>Chapter Objectives</h2>
	<div class="container">
		<p>This chapter discusses the nature, implementation, and behavior of user-defined functions in MATLAB<a id="1355">!</a>:</p>
		<ul>
			<li>How to define a function<a id="1207">!</a></li>
			<li>How data are passed into a function<a id="1208">!</a></li>
			<li>How to return data, including multiple results</li>
			<li>How to include other functions not needed except as helpers to your own function<a id="1209">!</a></li>
		</ul>
		<p>Writing a user-defined function<a id="1210">!</a> allows you to isolate and package together a code block, so that you can apply that code block to different sets of input data. We have already made use of some built-in functions like <code>sin(...)</code> and <code>plot(<a id="1397">!</a>...)</code> by calling them; this chapter will deal with creating and using your own functions.</p>
	</div>

  <div class="chp-section" data-sect-num="1" data-sect-name="Concepts: Abstraction and Encapsulation">
		<!-- Abstraction and Encapsulation -->
		<h2 id="3_1">3.1	Concepts: Abstraction and Encapsulation</h2>
		<div class="container">
			<p>A function<a id="1211">!</a> is an implementation of procedural abstraction<a id="1398">!</a> and encapsulation<a id="1165">!</a>. Procedural abstraction is the concept that permits a code block that solves a particular sub-problem to be packaged and applied to different data inputs. This is exactly analogous to the concept of data abstraction<a id="1160">!</a> we discussed in Chapter 3 where individual data items are gathered to form a collection<a id="1138">!</a>. We have already used a number of built-in procedural abstractions in the form of functions. All the mathematical functions that compute, for<a id="1175">!</a> example, the sine of a collection<a id="1139">!</a> of angles or the maximum value<a id="1409">!</a> of a vector are examples of procedural abstraction<a id="1399">!</a>. They allow us to apply a code block about which we know nothing to data sets that we provide. To make use of a built-in function<a id="1212">!</a>, all we have to do is provide data in the form the function<a id="1213">!</a> expects and interpret the results according to the function<a id="1214">!</a>'s specification.</p>
			<p>Encapsulation is the concept of putting a wrapper<a id="1445">!</a> around a collection<a id="1140">!</a> that you wish to protect from outside influence. Functions encapsulate the code they contain in two ways: the variables declared within the function<a id="1215">!</a> are not visible from elsewhere, and the function<a id="1216">!</a>'s ability to change the values of variables (otherwise known as causing side effects) is restricted to its own code body.</p>
		</div>
	</div>

  <div class="chp-section" data-sect-num="2" data-sect-name="Black Box View of a Function">
		<!-- Black Box -->
		<h2 id="3_2">3.2	Black Box View of a Function</h2>
		<div class="container clearfix">
			<div class="float-sm-right card">
					 <img src="..\Images\Fig_3_1.JPG" alt="Figure 3.1" class="fig card-img">
					 <p class="figure-name card-title">Fig 3.1 Black Box View of a Function</p>
			</div>
			<p>The most abstract view of a function<a id="1217">!</a> can be seen in Figure 3.1. It consists of two parts: the definition of the interface by which the user passes data items to and from the function<a id="1218">!</a>, and the code block that produces the results required by that interface. A function<a id="1219">!</a> definition consists of the following components:</p>
			<ul>
				<li>A name that follows the same syntactic rules as a variable<a id="1422">!</a> name</li>
				<li>A set of 0 or more parameters provided to the function<a id="1220">!</a></li>
				<li>Zero or more results to be returned to the caller of the function<a id="1221">!</a></li>
			</ul>
			<p>The basic operation<a id="1391">!</a> of a function<a id="1222">!</a> begins before execution<a id="1168">!</a> of the function<a id="1223">!</a> actually starts. If the function<a id="1224">!</a> definition requires n parameters, the calling instructions first prepare n items of data from its workspace to be provided to the function<a id="1225">!</a>. These data are then passed to the function<a id="1226">!</a>, the code body is executed, and the results are returned to the caller.</p>
		</div>
	</div>

  <div class="chp-section" data-sect-num="3" data-sect-name="MATLAB Implementation">
		<!-- MATLAB Implementation -->
		<h2 id="3_3">3.3  MATLAB<a id="1356">!</a> Implementation</h2>
		<div class="container">
			<p>In this section, first we consider the general template for<a id="1176">!</a> implementing functions and then the MATLAB<a id="1357">!</a> implementation of that template.</p>
		</div>

		<div class="chp-subsection" data-sub-num="1" data-sub-name="General Template">
			<!-- General Template -->
			<h3 id="3_3_1">3.3.1	General Template</h3>
			<div class="container">
				<p>The general layout of a function<a id="1227">!</a> definition is shown in Template 3.1.<p>
				<div class="template">#template_3_1#</div>
				<p>The <code>&lt;return info&gt;</code> section for<a id="1177">!</a> most functions involves providing the name(s) of the results returned followed by an = sign. If more than one result is to be returned, they are defined in a bracketed container. If nothing is to be returned from this function<a id="1228">!</a>, both the result list and the = sign are omitted. The <code>&lt;function<a id="1229">!</a> name&gt;</code> is a name with the same syntactic rules as a variable<a id="1423">!</a> name and will be used to invoke the code body. The <code>&lt;parameters&gt;</code> section is a comma-separated list of the names of the items to be provided to the function<a id="1230">!</a>. The <code>&lt;documentation<a id="1162">!</a>&gt;</code> section is one or more lines of comments<a id="1152">!</a> that describe what the function<a id="1231">!</a> does and how to call it. These lines will appear in two situations:</p>
				<ul>
					<li>All the documentation<a id="1163">!</a> lines up to the first non-document line are printed in the Command<a id="1145">!</a> window when you type the following:<br>
					<code>>> help<a id="1338">!</a> &lt;function<a id="1232">!</a>_name&gt;</code></li>
					<li>The first line can be displayed in the Current<a id="1155">!</a> Directory Window</li>
				</ul>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="1" data-sub-name="Function Definition">
			<!-- Function Definition -->
			<h3 id="3_3_2">3.3.2	Function Definition</h3>
			<div class="container">
				<p>In the MATLAB<a id="1358">!</a> language, functions must be stored in a separate file located in a directory accessible to any script or function<a id="1233">!</a> that calls it. The definition of a function<a id="1234">!</a> named, for<a id="1178">!</a> example, <code>function<a id="1235">!</a>_name</code> <b>must</b> be
				stored in a file called <code>function<a id="1236">!</a>_name.m</code>. For the general user, the Current<a id="1156">!</a> Directory is the normal place to store it. Listing 3.1 illustrates a typical MATLAB<a id="1359">!</a> function<a id="1237">!</a> called <code>my_cylinder</code> that consumes two parameters, the <code>height</code> and <code>radius</code> of a cylinder,<a id="1159">!</a> and produces the return variable<a id="1424">!</a> <code>volume</code>.</p>
				<div class="listing">#listing_03_1#</div>
				<p><b>Important Notes</b>:
				<ol>
					<li>It is a good idea to include in the comments<a id="1153">!</a> a usage statement showing a copy of the function<a id="1238">!</a> header line, sometimes referred to as the Application Programmer Interface (API), to remind a user exactly how to use this function<a id="1239">!</a>.</li>
					<li>Although encapsulation<a id="1166">!</a> rules forbid external access to the caller's variables, the code body still has access to all built-in MATLAB<a id="1360">!</a> variables and functions (e.g., pi, as used here).</li>
					<li>You probably noticed the apparently weird affectation that called the function<a id="1240">!</a> <code>my_cylinder</code> and not just <code>cylinder</code>.  This is perhaps the most annoying feature of interpreted<a id="1346">!</a> languages: the library functions and system variables are defined and used in the same "name space" as your scripts<a id="1401">!</a> and functions.  For example, we have already seen the function<a id="1241">!</a> <code>cos(...)</code> and the value<a id="1410">!</a> <code>pi</code> in the previous chapter - some of the many trigonometry features of Matlab.  If you were unwise enough to write and run your own <code>cos(...)</code> function<a id="1242">!</a>, it would replace the library <code>cos(...)</code> function<a id="1243">!</a> for<a id="1179">!</a> any commands, scripts<a id="1402">!</a> or functions that you use with your <code>cos(...)</code> function<a id="1244">!</a> in the current directory!</li>
				</ol></p>
				<p><b>Moral of the story</b>: when choosing function<a id="1245">!</a> names, check to see if that name already exists in Matlab by typing:<code>&gt;&gt; help<a id="1339">!</a> &lt;whatever&gt;</code> in the command window.</p>
				<p>In general, when you ask for<a id="1180">!</a> help<a id="1340">!</a> on a function<a id="1246">!</a> you wrote, Matlab shows you all the comments<a id="1154">!</a> after the function<a id="1247">!</a> header, and shows you just the first line if requested in the Current<a id="1157">!</a> Directory (see Fig 2.4)</p>
				<p>Try saving and testing the cylinder function<a id="1248">!</a> in Exercise 3.1</p>
				<div class="exercise">#exercise_3_1#</div>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="3" data-sub-name="Storing and Using Functions">
		<!-- Storing and Using Functions -->
			<h3 id="3_3_3">3.3.3	Storing and Using Functions</h3>
			<div class="container">
				<p>All user-defined MATLAB<a id="1361">!</a> functions must be created like scripts<a id="1403">!</a> in an m-file. When the file is first created, it must be saved in an m-file with the same file name as the function<a id="1249">!</a>. For example, the function<a id="1250">!</a> in Listing 3.1 named <code>my_cylinder</code> must be saved in a file named <code>my_cylinder.m</code>. Once the file has been saved, you may invoke the function<a id="1251">!</a> by entering its name and parameters of the right type and number in the Command<a id="1146">!</a> window, in a script, or in other function<a id="1252">!</a> definitions. If you do not specify an assignment<a id="1128">!</a> for<a id="1181">!</a> the result of the function<a id="1253">!</a> call, it will be assigned to the variable<a id="1425">!</a> <code>ans</code>.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="4" data-sub-name="Calling Functions">
			<!-- Calling Functions -->
			<h3 id="3_3_4">3.3.4	Calling Functions</h3>
			<div class="container clearfix">
				<p>When a function<a id="1254">!</a> is defined, the user provides a list of the names of each data item expected to be provided by the caller. These are called the <strong>formal<a id="1202">!</a> parameters</strong>. When this function<a id="1255">!</a> is called, the caller must provide the same number of data values expected by the function<a id="1256">!</a> definition. These are the <strong>actual parameters<a id="1118">!</a></strong> and can be generated in the following ways:</p>
				<ul>
					<li>Constants</li>
					<li>Variables that have been defined</li>
					<li>The result of some mathematical operation(s)</li>
					<li>The result returned from other functions</li>
				</ul>
				<div class="card float-sm-right style-points">
						<p class="card-title">Style Points 3.1: Parameter Passing</p>
						<p class="card-text">
								Some languages provide an alternative technique, <b>passing by reference</b>, whereby the memory location for<a id="1182">!</a> the parameters is passed to the function<a id="1257">!</a> while<a id="1440">!</a> the values remain in the caller's workspace. Syntactically, this is usually a bad thing, allowing deliberate or accidental assignments to reach back into the scope of the calling code and thereby perhaps causing undesirable side effects. However, restricting parameter access to passing by value<a id="1411">!</a> can result in poor program performance. When a function<a id="1258">!</a> needs access to large sets of data, consider improving the efficiency by using global<a id="1330">!</a> variables.
						</p>
				</div>
				<p>When the actual parameters<a id="1119">!</a> have been computed, copies of their values are assigned as the values of the formal<a id="1203">!</a> parameters the function<a id="1259">!</a> is expecting.</p>
				<p>Values are assigned to parameters by position in the calling statement and function<a id="1260">!</a> definition. The process of copying the actual parameters<a id="1120">!</a> into the formal<a id="1204">!</a> parameters is referred to as <b>passing by value<a id="1412">!</a></b>, the only technique defined in the MATLAB<a id="1362">!</a> language for<a id="1183">!</a> passing data into a function<a id="1261">!</a>.</p>
				<p>Once the parameter names have been defined in the function<a id="1262">!</a>'s workspace,<a id="1441">!</a> the function<a id="1263">!</a>'s code body is executed, beginning with the first instruction. If return variables have been defined for<a id="1184">!</a> the function<a id="1264">!</a>, every exit from the code body must assign valid values for<a id="1185">!</a> the results.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="5" data-sub-name="Variable Number of Parameters">
			<!-- Variable Number of Parameters -->
			<h3 id="3_3_5">3.3.5	Variable<a id="1420">!</a> Numbers of Parameters</h3>
			<div class-"container">
				<p>Although the number of parameters is usually fixed, most languages, including MATLAB<a id="1363">!</a>, provide the ability to deal with a variable<a id="1426">!</a> number of parameters, both incoming and returning. The built-in function<a id="1265">!</a> <code>nargin</code> computes the actual number of parameters provided by the user in the current function<a id="1266">!</a> call. If the function<a id="1267">!</a> is designed to make use of <code>nargin</code>, the parameter <code>varargin</code> must be the last parameter.  It collects all subsequent input parameters as a Cell Array of values.</p>
				<p>Similarly, the function<a id="1268">!</a> <code>nargout</code> computes the number of storage variables actually provided by the user. So if one or more of the results requires extensive computation or user interaction and the caller has not asked for<a id="1186">!</a> that data, that computation can be omitted.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="6" data-sub-name="Returning Multiple Results">
			<!-- Returning Multiple Results -->
			<h3 id="3_3_6">3.3.6	Returning Multiple Results</h3>
			<div class="container">
				<p>The MATLAB<a id="1364">!</a> language is unique among programming<a id="1400">!</a> languages in providing the ability to return more than one result from a function<a id="1269">!</a> by name. The multiple results are specified as a "vector" (see the next chapter for<a id="1187">!</a> details) of variable<a id="1427">!</a> names, for<a id="1188">!</a> example, [area, volume], as shown in Listing 3.2. Assignments must be made to each of the result variables. However, the calling program is not required to make use of all the return values.</p>
				<div class="listing">#listing_03_2#</div>
				<p>Exercise 3.2 shows how to invoke a function<a id="1270">!</a> that can return multiple results. Notice that the normal method to access the multiple answers is to put the names of the variable<a id="1428">!</a> to receive the results in a vector. The names may be any legal variable<a id="1429">!</a> name, and the values are returned in the order of the results defined. If you choose less<a id="1348">!</a> than the full number of results (or none at all), the answers that are specified are allocated from left to right from the available results. As with parameter assignment<a id="1129">!</a>, the results are allocated by position in these vectors<a id="1439">!</a>. Although we called the variable<a id="1430">!</a> <code>v</code> in the last test, it still receives the value<a id="1413">!</a> of the first result, <code>area</code>. If you really only want the second result value<a id="1414">!</a>, you must put either a <code>'~'</code> marker or a dummy variable<a id="1431">!</a> name like <code>'junk'</code> in the place of any variable<a id="1432">!</a> you wish to ignore.</p>
				<div class="exercise">#exercise_3_2#</div>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="7" data-sub-name="Auxiliary Local Functions">
			<!-- Auxiliary Local Functions -->
			<h3 id="3_3_7">3.3.7	Auxiliary Local<a id="1350">!</a> Functions</h3>
			<div class="container">
				<p>Since the MATLAB<a id="1365">!</a> language uses the name of the file to identify a function<a id="1271">!</a>, every function<a id="1272">!</a> should normally be saved in its own m-file. However, there are times when auxiliary<a id="1130">!</a> functions (sometimes called <b>helper<a id="1344">!</a> functions</b>) are needed to implement the algorithm contained in the main function<a id="1273">!</a> in a file. If this auxiliary<a id="1131">!</a> function<a id="1274">!</a> is only used in the main function<a id="1275">!</a> or its helpers, it can be written in the same file as its calling function<a id="1276">!</a> after the definition of the main function<a id="1277">!</a>. By convention, some people append the word local_ to the name of local functions.</p>
				<p>Scripts or functions that use the code in an m-file can reach only the first function<a id="1278">!</a>. Other functions in the m-file, the auxiliary<a id="1132">!</a> functions, can only be called from the first function<a id="1279">!</a> or other auxiliary<a id="1133">!</a> functions in the same file.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="8" data-sub-name="Encapsulation in MATLAB Functions">
			<!-- Encapsulation -->
			<h3 id="3_3_8">3.3.8	Encapsulation in MATLAB<a id="1366">!</a> Functions</h3>
			<div class="container clearfix">
				<div class="card float-sm-right style-points">
						<p class="card-title">Style Points 3.2</p>
						<p class="card-text">
							<ol>
								<li>Before you include a function<a id="1280">!</a> in a complex algorithm, you should always test its behavior in isolation in a script. This test script should validate not only the normal operation<a id="1392">!</a> of the function<a id="1281">!</a>, but also its response to erroneous input data it might receive.</li>
								<li>Although any legal MATLAB<a id="1367">!</a> instruction is permitted within the code body of a function<a id="1282">!</a>, it is considered bad form (except temporarily for<a id="1189">!</a> debugging purposes) to display values in the Command<a id="1147">!</a> window.</li>
								<li>We also actively discourage the use of the input(...) function<a id="1283">!</a> within the code body. If you need to input some values to test a function<a id="1284">!</a>, do so from the Command<a id="1148">!</a> window or a test script.</li>
							</ol>
						</p>
				</div>
				<p>Encapsulation is accomplished in most modern languages, including MATLAB<a id="1368">!</a>, by implementing the concept of variable<a id="1433">!</a> scoping. In practice, this is achieved by allocating a separate workspace to each function<a id="1285">!</a>. When MATLAB<a id="1369">!</a> is first started, a default workspace is created in which variables created in the Command<a id="1149">!</a> window or by running scripts<a id="1404">!</a> are stored. When a function<a id="1286">!</a> is called, a fresh workspace is created (see Section 9.1.2 for<a id="1190">!</a> details), and the actual parameter values are copied into the formal<a id="1205">!</a> parameter names in that new workspace. When the function<a id="1287">!</a> finishes, this operation<a id="1393">!</a> is reversed. The returning parameters are copied into the variables provided by the caller in the previous workspace,<a id="1442">!</a> and the function<a id="1288">!</a>'s workspace is released. The Variables window always shows you the contents of the current workspace.</p>
				<p>Variable<a id="1421">!</a> scoping defines the places within your Command<a id="1150">!</a> window, MATLAB<a id="1370">!</a> system, and m-files to which instructions have access. It is related to the Variables window, which shows you your current workspace. When using the Command<a id="1151">!</a> window or running a script and you access the value<a id="1415">!</a> of a variable<a id="1434">!</a>, the system will reach into your current workspace and then into the MATLAB<a id="1371">!</a> system libraries to find its current value<a id="1416">!</a>. This is referred to as Global Scope. When you run a function<a id="1289">!</a>, its local variables, including the internal names of its parameters, are not included in your current workspace,<a id="1443">!</a> and it does not look into your current workspace for<a id="1191">!</a> values of variables it needs. This is referred to as Local<a id="1351">!</a> Scope, wherein the variables within a function<a id="1290">!</a> are not visible from outside and the function<a id="1291">!</a> is unable to cause side effects by making assignments to variables in other workspaces except by returning results. To illustrate variable<a id="1435">!</a> scoping, do Exercise 3.3.</p>
			</div>
			<div class="exercise">#exercise_3_3#</div>
		</div>

		<div class="chp-subsection" data-sub-num="9" data-sub-name="Global Variables">
			<!-- Global Variables -->
			<h3 id="3_3_9">3.3.9	Global Variables</h3>
			<div class="container">
				<p>Because MATLAB<a id="1372">!</a> always copies the input data into the function<a id="1292">!</a>'s workspace,<a id="1444">!</a> there are occasions when it is very inefficient to pass large data sets into and out of a function<a id="1293">!</a>. To avoid passing large amounts of data, we can use global<a id="1331">!</a> variables. Global variables must be defined in both the calling script and the function<a id="1294">!</a> using the key word global<a id="1332">!</a>. For example, suppose we collect a large volume of data in a variable<a id="1436">!</a> buffer and do not want to copy the whole buffer into and out of a function<a id="1295">!</a> that processes that data. In this case<a id="1136">!</a>, we declare the variable<a id="1437">!</a> to be global<a id="1333">!</a> in both the calling space and the called function<a id="1296">!</a> by placing the following line of code before the variable<a id="1438">!</a> is first used in both places:</p>
				<p><code>global<a id="1334">!</a> buffer</code></p>
				<p>The function<a id="1297">!</a> will then be able to access and modify the values in buffer without having to pass it in and out as a parameter. This feature must be used with caution, however, because any function<a id="1298">!</a> with global<a id="1335">!</a> access to data is empowered to change that data. In other words, the use of global<a id="1336">!</a> data circumvents the natural MATLAB<a id="1373">!</a> language's encapsulation<a id="1167">!</a> mechanisms.</p>
			</div>
		</div>
	</div>

  <div class="chp-section" data-sect-num="4" data-sect-name="Engineering Example: Measuring a Solid Object">
		<!-- Engineering Example -->
		<h2 id="3_4"> 3.4 Engineering Example: Measuring a Solid Object</h2>
		<div class="container clearfix">
			<div class="card float-sm-right">
				<img src="..\Images\Fig_3_2.JPG" alt="Figure 3.2" class="fig card-img">
				<p class="figure-name card-title">Figure 3.2: A Flange</p>
			</div>
			<p><b>Problem:</b></p>
			<p>Consider the disk shown in Figure 3.2 commonly referred to as a "flange". Flanges are used in many systems where a pipe must be separated for<a id="1192">!</a> ease of assembly or maintenance. A flange is welded to each part of the pipe and nuts and bolts then hold<a id="1345">!</a> the two parts of the pipe securely. For example, pipes carry fuel through the body from one wing to the other of an aircraft.  Since the wings are manufactured individually and then attached to the body of the aircraft, all pipes between the wing and body need flanges.</p>
			<p>Our flange has a radius <code>R</code>, height <code>h</code>, one central<a id="1137">!</a> hole with radius <code>cr</code> and eight cylindrical holes each of radius <code>hr</code> bored in it. During the process of designing an aircraft, we need to know the weight of this flange including the amount of paint required to finish it. The weight and the amount of paint for<a id="1193">!</a> the machine is the sum of the values for<a id="1194">!</a> each component. Since the weight of our disk is proportional to its volume and the amount of paint is proportional to its "wetted area", we need the volume and area of this flange.</p>
			<p>Write a script to compute the volume of the flange and its wetted area.</p>
			<p><b>Solution:</b></p>
		</div>
		<div class="listing">#listing_03_3#</div>
		<div class="container">
			<p>The results displayed should be:<br>
			<code>
			Volume =<br>
			&nbsp;&nbsp;&nbsp;&nbsp;64.4026<br>
			Area =<br>
			&nbsp;&nbsp;&nbsp;&nbsp;185.3540<br>
			</code></p>
		</div>
	</div>

	<!-- Chapter Summary -->
	<h3>Chapter Summary</h3>
	<div class="container">
		<p>This chapter showed you how to encapsulate a code block to allow it to be reused:</p>
		<ul>
			<li>Functions are defined in a file of the same name using the key word
			function<a id="1299">!</a> to distinguish them from scripts<a id="1405">!</a></li>
			<li>Parameters are copied in sequence into the function<a id="1300">!</a> and given the
			names of the formal<a id="1206">!</a> parameters</li>
			<li>Results are returned to the caller by assigning value(<a id="1419">!</a>s) to the return
			variable(s)</li>
			<li>Variables within the function<a id="1301">!</a> can be accessed only in the function<a id="1302">!</a>'s
			code block unless they are declared global<a id="1337">!</a></li>
			<li>Helper functions accessible only to functions within the same file
			may be added below the main function<a id="1303">!</a> and otherwise obey the
			same rules as the main function<a id="1304">!</a></li>
		</ul>
	</div>
<h2>Self Test</h2>
<div class="container">

Use the following questions to check your understanding of the material in this
chapter:
<h3>True or False</h3>
<ol>
<li>All data used by a function<a id="1305">!</a> must be passed in as parameters to the function<a id="1306">!</a>.</li>
<li>The name of the first function<a id="1307">!</a> in an m-file must match the name of the file containing its definition.</li>
<li>The first documentation<a id="1164">!</a> line appears in the Current<a id="1158">!</a> Directory listing.</li>
<li>Functions must consume at least one parameter.</li>
<li>The calling code must provide assignments for<a id="1195">!</a> every result returned from a function<a id="1308">!</a>.</li>
<li>The names of auxiliary<a id="1134">!</a> functions must begin with local_.</li>
</ol>
<h3>Fill in the Blanks</h3>
<ol>
<li> _________permits a code block to be packaged and referred to collectively rather than individually.</li>
<li>Values of the ___________ parameters are copied to define the ____________________
 	 parameters inside the function<a id="1309">!</a>.</li>
<li>If more than one result is to be returned from a function<a id="1310">!</a>, they are defined in a(n) _____________.</li>
<li> ___________ describes the situation where the variables within a function<a id="1311">!</a> are not visible from outside, and the function<a id="1312">!</a> is unable to cause side effects by making assignments to outside variables.</li>
<li>Calling code can only reach the	__________________ function<a id="1313">!</a> in an m-file.
Other functions in the m-file can only be called from the __________________ or	__________________.</li>
</ol>

<h3>Programming Projects</h3>
<ol>
<li>Write a function<a id="1314">!</a> called checkFactor that takes in two numbers<a id="1380">!</a> and checks if they are divisible, that is, if the first is divisible by the second. You may assume that both numbers<a id="1381">!</a> are positive. Your function<a id="1315">!</a> should return a logical<a id="1352">!</a> value<a id="1417">!</a>, true or false<a id="1169">!</a>.<br>
For example:<br>
 
checkFactor(25,6) should return false<a id="1170">!</a><br>
checkFactor (9,3) should return true.<br>
 checkFactor (3,9) should return false<a id="1171">!</a>.</li>
<li>Write and test the code for<a id="1196">!</a> the function<a id="1316">!</a> mysteryFunction that consumes a vector, V, and produces a new vector, W, of the same length where each element of W is the sum of the corresponding element in V and the previous element of V. Consider the previous element of V(1) to be 0.<br>
For example:<br>

mysteryFunction( 1:8 ) should return [1 3 5 7 9 11 13 15]<br>
mysteryFunction([1:6].^2) should return [1 5 13 25 41 61]</li>
<li>Coming off a respectable 7–6 record last year, your football team is looking to improve on that this season. They have contacted you and asked for<a id="1197">!</a> your help<a id="1341">!</a> projecting some of the scenarios for<a id="1198">!</a> their
win–loss record. They want you to write a function<a id="1317">!</a> called teamRecord that takes in two parameters—wins, and losses, and returns two values—season and wPercentage. Season should be a logical<a id="1353">!</a> result that is true for<a id="1199">!</a> a winning season. wPercentage is the percentage of games won (ranging from 0 to 100).<br>
For example:<br>
[season wPercentage] = teamRecord(3, 9) should return season = false<a id="1172">!</a>, wPercentage = 25<br>
[season wPercentage] = teamRecord(10, 2) should return season = true, wPercentage = 83.3</li>
<li>Write a function<a id="1318">!</a> called classAverage that takes in an array<a id="1122">!</a> of numbers<a id="1382">!</a> and, after normalizing the grades in such a way that the highest corresponds to 100, returns the letter grade of the class average. The grade ranges are as follows:<br>
average>90 => A<br>
80<=average<90 => B<br>
70<=average<80 => C<br>
60<=average<70 => D<br>
average<60	=> F<br>
For example:<br>
classAverage( [70 87 95 80 80 78 85 90 66
89 89 100] ) should return B<br>
classAverage( [50 90 61 82 75 92 81 76 87 41
31 98] ) should return C<br>
classAverage( [10 10 11 32 53 12 34 74 31 30
26 22] ) should return F</li>
<li>Write a function<a id="1319">!</a> called myMin4 that will take in four numbers<a id="1383">!</a> and returns the minimum<a id="1379">!</a> value<a id="1418">!</a> and an index showing which parameter it was. You may not use the built-in min(<a id="1378">!</a>) function<a id="1320">!</a>.<br>
For example:<br>
myMin4(1,3,5,7) should return 1 and 1<br>
myMin4(8,9,2,4) should return 2 and 3</li>
<li>Write the function<a id="1321">!</a> meansAndMedian that takes in a vector of numbers<a id="1384">!</a> and returns the arithmetic<a id="1121">!</a> and geometric means, as well as the median.<br>
You may not use the built-in functions mean(<a id="1375">!</a>), median(), or geomean().<br>
 
Hints: The built-in function<a id="1322">!</a> sort(<a id="1406">!</a>) might help<a id="1342">!</a> to compute the median of the vector.<br>
You could type "help<a id="1343">!</a> geomean" to familiarize yourself with computing the geometric mean of a group of numbers<a id="1385">!</a>.</li>
<li>Given an array<a id="1123">!</a> of numbers<a id="1386">!</a> that could be negative, write a function<a id="1323">!</a> posavg(a) to calculate and return the average (mean) of the non- negative numbers<a id="1387">!</a> in the single dimensional array<a id="1124">!</a>, a. One such solution is mean(<a id="1376">!</a>a(find(a>0))). In order to test your understanding
of class concepts, re-implement the posavg(a) function<a id="1324">!</a> using iteration<a id="1347">!</a>.<br>
You may not use the built-in functions sum(<a id="1407">!</a>...), find(<a id="1174">!</a>...), or mean(<a id="1377">!</a>...) in your solution.</li>
<li>Write a function<a id="1325">!</a> called sumAndAverage. It should take in an array<a id="1125">!</a> of numbers<a id="1388">!</a> and return the sum and average of the array<a id="1126">!</a> in that order.<br>
For example:<br>

sumAndAverage([3 2 3 2]) should return 10 and 2.5<br>
sumAndAverage([5 -5 2 8 0]) should return 10 and 2<br>
sumAndAverage([]) should return 0 and 0</li>
<li>You are already familiar with the logical<a id="1354">!</a> operators<a id="1394">!</a> &<a id="1395">!</a>&<a id="1396">!</a> (and) and || (or), as well as the unary<a id="1408">!</a> negation operator ~(not). In a
weakly typed language such as MATLAB<a id="1374">!</a>, the binary<a id="1135">!</a> states true and false<a id="1173">!</a> could be equivalently expressed as a 1 or a 0, respectively. Let us now consider a ternary number system, consisting of the states true(1), maybe(2), and false(0). The truth table for<a id="1200">!</a> such a system is shown below. Implement the truth table by writing the functions f=tnot(x), f=tand(x,y), and f=tor(x,y). You may not assume that only valid input numbers<a id="1389">!</a> will be entered.<br>
<table>
<tr><th>  x  </th><th>  y  </th><th>tnot(x)</th><th>tand(x,y)</th><th>tor(x,y)</th></tr>
<tr><td>1</td><td>1</td><td>0</td><td>1</td><td>1</td></tr>
<tr><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td></tr>
<tr><td>1</td><td>2</td><td>0</td><td>2</td><td>1</td></tr>
<tr><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td></tr>
<tr><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td></tr>
<tr><td>0</td><td>2</td><td>1</td><td>2</td><td>0</td></tr>
<tr><td>2</td><td>1</td><td>2</td><td>2</td><td>1</td></tr>
<tr><td>2</td><td>0</td><td>2</td><td>2</td><td>0</td></tr>
<tr><td>2</td><td>2</td><td>2</td><td>2</td><td>2</td></tr>
</table>
</li>
<li>Write a function<a id="1326">!</a> called multiSum(A). This particular function<a id="1327">!</a> should take in a N x M array<a id="1127">!</a>, A, and return four results:<br>
A 1 x M vector with the sum of the columns, A N x 1 vector with the sum of the rows, and
Two numbers<a id="1390">!</a> containing the sums of the two diagonals, the major diagonal<a id="1161">!</a> first.<br>
For example:<br>

column<a id="1141">!</a>Sum([1 2 3; 4 5 6; 7 8 9]) should return
[12 15 18], [6 15 24]', 15 and 15<br>
column<a id="1142">!</a>Sum([0 2 3; 4 0 6; 7 8 0]) should return
[11 10 9], [5 10 15]', 0 and 10<br>
column<a id="1143">!</a>Sum(eye[5,5]) should return [1 1 1 1 1], [1 1 1 1 1]', 5 and 1<br>
column<a id="1144">!</a>Sum([]) should return [], [], 0 and 0</li>
<li>You are playing a game where you roll a die 10 times. If you roll a 5 or 6 seven or more times, you win 2 dollars; four or more times, you win 1 dollar; and if you roll a 5 or 6 three or less<a id="1349">!</a> times, you win no money. Write a function<a id="1328">!</a> called diceGame that takes in a vector representing the die values and returns the amount of money won.<br>
For example:<br>
diceGame([5 1 4 6 5 5 6 6 5 2]) should return 2<br>
diceGame([2 4 1 3 6 6 6 4 5 3]) should return 1<br>
diceGame([1 4 3 2 5 3 4 2 6 5]) should return 0<br>
Note: This function<a id="1329">!</a> should work for<a id="1201">!</a> any length vector.</li>
 
</ol>
</div>
</div>

</body>
</html>


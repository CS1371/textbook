<!DOCTYPE HTML>
<html>
    <head>
        <title>15_Numerical_Methods</title>
        <!-- include bootstrap -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
        <!-- include stylesheets -->
        <link rel="stylesheet" href="styles/styles.css" />
        <link rel="stylesheet" href="styles/num-methods-styles.css" />
        <!-- include math -->
        <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
        <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    </head>

<body>
<div>#top_nav#</div>
<div class="nav-obj">#nav_obj#</div>

<div class="content">
  <h1 id="15" align="center">Chapter 15: Numerical Methods</h1>

  <!-- Chapter Objectives -->
  <h1>Chapter Objectives</h1>
  <div class="container">
      <p>This chapter discusses the implementations of four common numerical<a id="6290">!</a> techniques:</p>
      <ul>
          <li>Interpolating data</li>
          <li>Fitting polynomial<a id="6304">!</a> curves to data</li>
          <li>Numerical integration<a id="6223">!</a></li>
          <li>Numerical differentiation<a id="6125">!</a></li>
      </ul>
  </div>

  <!-- Introduction -->
  <h1>Introduction</h1>
  <div class="container">
      <p>Real-world data are rarely in such a form that you can use it immediately. Frequently, the data must be manipulated according to the user's actual needs:</p>
      <ul>
          <li>If the data samples have correct values but are not close<a id="6070">!</a> enough together to be used directly, we can use interpolation<a id="6229">!</a> to compute data points between the samples provided.</li>
          <li>There are occasions where the data-gathering facilities add some amount of noise to the data. To minimize the effects of the noise, we can compute the coefficients of a polynomial<a id="6305">!</a> function<a id="6175">!</a> that best matches the data.</li>
          <li>There are also times when the data must be integrated or differentiated to derive the quantities of interest.</li>
      </ul>
  </div>

  <div class="chp-section" data-sect-num="1" data-sect-name="Interpolation">
    <!-- Interpolation -->
    <h2 id="15_1">15.1  Interpolation</h2>
    <div class="container clearfix">
      <div class="float-sm-right card">
          <img src="..\Images\Fig_15_1.JPG" alt="Figure 15.1" class="fig card-image">
          <p class="figure-name card-title">Figure 15.1: The Interpolation Problem</p>
      </div>
      <p>If our data samples have correct values but are not close<a id="6071">!</a> enough to be used directly, we can use either linear<a id="6253">!</a> or cubic<a id="6075">!</a> interpolation<a id="6230">!</a> to compute data points between the samples provided. For example, plotting functions use linear<a id="6254">!</a> interpolation<a id="6231">!</a> to draw the lines between data points. In general, interpolation<a id="6232">!</a> is a technique by which we estimate a variable<a id="6375">!</a>'s value<a id="6347">!</a> between known values. In this section, we present the two most common types of interpolation<a id="6233">!</a>: <b>linear<a id="6255">!</a> interpolation<a id="6234">!</a></b> and <b>cubic<a id="6076">!</a> spline interpolation<a id="6235">!</a></b>. In both techniques, we assume that we have a set of data points that represents x-y coordinates for<a id="6144">!</a> which \(y\) is a function<a id="6176">!</a> of \(x\); that is,</p>
      $$ y = f(x) $$
      <p>We then have a value<a id="6348">!</a> of \(x\) that is not part of the data set for<a id="6145">!</a> which we want to find the \(y\) value<a id="6349">!</a>. Figure 15.1 illustrates the definition of the interpolation<a id="6236">!</a> problem.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Linear Interpolation">
      <!-- Linear Interpolation -->
      <h3 id="15_1_1">15.1.1 Linear Interpolation</h3>
      <div class="container">
          <p>Linear interpolation<a id="6237">!</a> is one of the most common techniques for<a id="6146">!</a> estimating data values between two given data points. With this technique, we assume that the function<a id="6177">!</a> between the points can be represented by a straight line drawn between the points, as shown in Figure 15.2.</p>
          <p>Since we can find the equation of a straight line defined by the two known points, we can find \(y\) for<a id="6147">!</a> any value<a id="6350">!</a> of \(x\). The closer the points are to each other, the more accurate our approximation is likely to be. Of course, we could use this equation to extrapolate points past our collected data. This is rarely wise, however, and often leads to significant errors. The function<a id="6178">!</a> that performs linear<a id="6256">!</a> interpolation<a id="6238">!</a> is as follows:</p>
          <p><code>new_y = interpl(x, y, new_x)</code></p>
          <p>where the vectors<a id="6380">!</a> <code>x</code> and <code>y</code> contain the original data values and the vector <code>new_x</code> contains the point(s) for<a id="6148">!</a> which we want to compute interpolated <code>new_y</code> values. The <code>x</code> values should be in ascending order, and the <code>new_x</code> values should be within the range of the original <code>x</code> values. Note that the last character<a id="6068">!</a> in the name <code>interpl</code> is the numeric 1 (one), not a lowercase L.</p>
          <div class="card-deck">
              <div class="card">
                  <img src="..\Images\Fig_15_2.JPG" alt="Figure 15.2" class="fig card-image">
                  <p class="figure-name card-title">Figure 15.2: Interpolation Raw Data</p>
              </div>
              <div class="card">
                  <img src="..\Images\Fig_15_3.JPG" alt="Figure 15.3" class="fig card-image">
                  <p class = "figure-name card-title">Figure 15.3: Linear Interpolation</p>
              </div>
          </div>
          <p>The use of <code>interpl(...)</code> is demonstrated in Listing 15.1.</p>
          <div id="listing_15_1" class="listing">#listing_15_1#</div>
          <p>The MATLAB<a id="6273">!</a> language allows us to provide a fourth parameter to the interp1 function<a id="6179">!</a> that must be a string that modifies its behavior. The choices are as follows:</p>
          <ul style="list-style-type:none">
              <li><code>'nearest'</code> nearest neighbor interpolation<a id="6239">!</a> </li>
              <li><code>'1inear'</code> linear<a id="6257">!</a> interpolation<a id="6240">!</a>â€”the default</li>
              <li><code>'spline'</code> piecewise cubic<a id="6077">!</a> spline interpolation<a id="6241">!</a> (see Section 15.1.2)</li>
              <li><code>'pchip'</code> shape-preserving piecewise cubic<a id="6078">!</a> interpolation<a id="6242">!</a></li>
              <li><code>'cubic<a id="6079">!</a>'</code> same as <code>'pchip'</code></li>
              <li><code>'v5cubic<a id="6080">!</a>'</code> cubic<a id="6081">!</a> interpolation<a id="6243">!</a> that does not extrapolate, and uses <code>'spline'</code> if <code>x</code> is not equally spaced </li>
          </ul>
          <p>The MATLAB<a id="6274">!</a> language also provides for<a id="6149">!</a> two-dimensional (<code>interp2</code>) and three-dimensional (<code>interp3</code>) interpolation<a id="6244">!</a> functions, which are not discussed here.</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Cubic Spline Interpolation">
      <!-- Cubic Spline Interpolation -->
      <h3 id="15_1_2">15.1.2	Cubic Spline Interpolation</h3>
      <div class="container clearfix">
          <p>A <b>cubic<a id="6082">!</a> spline</b> is a smooth curve<a id="6093">!</a> constructed to go through a set of points. The curve<a id="6094">!</a> between each pair of  points is a third-degree polynomial<a id="6306">!</a> that has the general form:</p>
          $$ {x = a_{x0}{t^3} + a_{x1}{t^2} + a_{x2}{t} + a_{x3}} and {y = a_{y0}{t^3} + a_{y1}{t^2} + a_{y2}{t} + a_{y3}} $$
          <p>where <code>t</code> is a parameter ranging from 0 to 1 between each pair of points. The coefficients are computed so that this provides a smooth curve<a id="6095">!</a> between pairs of points and a smooth transition between the adjacent curves. Figure 15.4 shows a cubic<a id="6083">!</a> spline smoothly connecting six points using a total of five different cubic<a id="6084">!</a> equations.</p>
          <p>The function<a id="6180">!</a> that performs linear<a id="6258">!</a> interpolation<a id="6245">!</a> is as follows:</p>
          <p><code>new_y = spline(<a id="6338">!</a>x, y, new_x);</code></p>
          <p>where the vectors<a id="6381">!</a> <code>x</code> and <code>y</code> contain the original data values, and the vector <code>x_new</code> contains the point(s) for<a id="6150">!</a> which we want to compute interpolated <code>y_new</code> values. The <code>x</code> values should be in ascending order, and while<a id="6389">!</a> the <code>x_new</code> values should be within the range of the <code>x</code> values, this function<a id="6181">!</a> will attempt to extrapolate outside that range.</p>
          <p>The curve<a id="6096">!</a> in Figure 15.4 was created using the code shown in Listing 15.2.</p>
          <div class="card-deck">
              <div class="card col-sm-6">
                  <img src="..\Images\Fig_15_4.PNG" alt="Figure 15.4" class="fig card-image">
                  <p class="figure-name card-title">Figure 15.4: Cubic Spline Interpolation</p>
              </div>
                <!-- Style Points -->
                <div class="card col-sm-6 style-points style-points-col">
                  <p class="card-title">Style Points 15.1</p>
                  <p class="card-text">
                      <p>A good convention to adopt is shown in Figure 15.4:</p>
                      <ul>
                          <li>Use symbols to plot data points that are real values with no associated information connecting them.</li>
                          <li>Draw lines between data points only when there is an analytic relationship that connects the data points.</li>
                      </ul>
                      <p>Here, we use a circle symbol for<a id="6151">!</a> the raw data to emphasize the original source of the information, and a smooth line for<a id="6152">!</a> the spline curve<a id="6097">!</a> to indicate that we are assuming a possibly erroneous but continous relationship between data points.</p>
                  </p>
              </div>
          </div>
          <div id="listing_15_2" class="listing">#listing_15_2#</div>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="Extrapolation">
      <!-- Extrapolation -->
      <h3 id="15_1_3">15.1.3	Extrapolation</h3>
      <div class="container">
        <p>A note of caution about extrapolation<a id="6141">!</a> - attempting to infer the values of data points outside the range of data provided is problematic at best and usually gives misleading results. Although logically your code may allow you to, you should never do it. The interp1 and spline functions behave differently in this respect. As we saw previously, the interp1 function<a id="6182">!</a> refuses to supply results outside the range of the original <code>x</code> data. If you try, for<a id="6153">!</a> every <code>new_x</code> value<a id="6351">!</a> outside the range of the original <code>x</code> values, it will return <code>NaN<a id="6287">!</a></code> - not a number.</p>
        <p>This is actually quite nice because if you accidentally request interpolated data like this, the plot programs ignore <code>NaN<a id="6288">!</a></code> values. The spline function<a id="6183">!</a>, however, has no such scruples and allows you to request any <code>x</code> values you want, using the equation of the closest line segment. So considering Figure 15.4, if you asked for<a id="6154">!</a> the value<a id="6352">!</a> at <code>x = -3</code>, it would use the segment between 0 and 1, which has a violent upswing at the lower end<a id="6130">!</a> (see Exercise 15.1).</p>
        <p>This might be what you want, but it looks odd! Chances are the data are not as accurate as you thought, and you probably need to fit a curve<a id="6098">!</a> to the data, as explained in the following section.</p>
        <div class="exercise">#exercise_15_1#</div>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="2" data-sect-name="Curve Fitting">
    <!-- Curve Fitting -->
    <h2 id="15_2">15.2 Curve Fitting</h2>
    <div class="container">
        <p>There are occasions where the data acquisition facilities add some amount of noise to the data. To minimize the effects of the noise, we can smooth the data by computing the coefficients of a polynomial<a id="6307">!</a> function<a id="6184">!</a> that best match the data. The choice of the order of the polynomial<a id="6308">!</a> must be made by the users, depending upon their understanding of the underlying physics that generated the data.</p>
        <p>For example, assume that we have a set of data points collected from an experiment. After plotting the data points, we find that they generally fall in a straight line. However, if we were to try to draw a straight line through the points, probably only a couple of the points would fall exactly on the line. A least squares curve<a id="6099">!</a> fitting method could be used to find the straight line that is the closest to the points, by minimizing the distance from each point to the straight line. Although this line can be considered a "best fit" to the data points, it is possible that none of the points would actually fall on the line of best fit. (Note that this method is different from interpolation<a id="6246">!</a>, because the lines used in interpolation<a id="6247">!</a> actually fall on all of the original data points.)</p>
        <p>In the following section, we will discuss fitting a straight line to a set of data points, and then we will discuss fitting a polynomial<a id="6309">!</a> of higher order.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Linear Regression">
      <!-- Linear Regression -->
      <h3 id="15_2_1">15.2.1 Linear Regression</h3>
      <div class="container clearfix">
          <div class="float-sm-right">
              <div class="card">
                  <img src="..\Images\Fig_15_5.PNG" alt="Figure 15.5" class="fig card-image">
                  <p class="figure-name card-title">Figure 15.5: An eyeball estimate of a linear<a id="6259">!</a> fit</p>
              </div>
              <div class="card">
                  <img src="..\Images\Fig_15_6.PNG" alt="Figure 15.6" class="fig card-image">
                  <p class="figure-name card-title">Figure 15.6: Linear Curve Fit</p>
              </div>
          </div>
          <p>Linear regression is the process that determines the linear<a id="6260">!</a> equation that is the best fit to a set of data points in terms of minimizing the sum of the squared distances between the line and the data points. To understand this process, first we consider the same set of data values used previously and attempt to "eyeball" a straight line through the data. Assume, for<a id="6155">!</a> example, that \(y = 20x\) is a good estimate of the curve<a id="6100">!</a>. Listing 15.3 shows the code to plot the points and this estimate.</p>
          <p>Looking at the results in Figure 15.5, it appears that \(y = 20x\) is a reasonable estimate of a line through the points.</p>
          <p>We really need the ability to compare the quality of the fit of this line to other possible estimates, so we compute the difference between the actual y value<a id="6353">!</a> and the value<a id="6354">!</a> calculated from the estimate:</p>
          <p><code>>> dy = [0, 0, 20, 8, -3, 10]</code></p>
          <p>It turns out that the best way to make this comparison is by the <b>least squares technique</b>, whereby the measure of the quality of the fit is the sum of the squared differences between the actual data points and the linear<a id="6261">!</a> estimates. This sum can be computed with the following command:</p>
          <p><code>>> sum_sq = sum(<a id="6340">!</a>dy.^2)</code></p>
          <p>For the above set of data, the value<a id="6355">!</a> of <code>sum_sq</code> is <code>573</code>. As we will see, MATLAB<a id="6275">!</a> can automatically produce the best linear<a id="6262">!</a> fit shown in Figure 15.6 whose sum of squares is <code>356.82</code>, a significant improvement over our original guess. This result was achieved by running Exercise 15.2.</p>
        </div>
        <div id="listing_15_3" class="listing">#listing_15_3#</div>
        <div class="exercise">#exercise_15_2#</div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Polynomial Regression">
      <!-- Polynomial Regression -->
      <h3 id="15_2_2">15.2.2	Polynomial Regression</h3>
      <div class="container">
          <p>Linear regression is a special case<a id="6065">!</a> of the polynomial<a id="6310">!</a> regression technique. Recall that a polynomial<a id="6311">!</a> with one variable<a id="6376">!</a> can be written by using the following formula:</p>
          $$ f(x) = a_0{x^n} + a_1{x^{n-1}} + a_2{x^{n-2}} + a_3{x^{n-3}} + ... a_{n-1}x + a_n $$
          <p>The degree of a polynomial<a id="6312">!</a> is equal<a id="6136">!</a> to the largest value<a id="6356">!</a> used as an exponent. MATLAB<a id="6276">!</a> provides a pair of functions to compute the coefficients of the best fit to a set of data and then interpolate on those coefficients to produce the data to plot:</p>
          <ul>
              <li><code>coef = polyfit(<a id="6301">!</a>x, y, n)</code> computes the coefficients of the polynomial<a id="6313">!</a> of degree <code>n</code> that best matches the given <code>x</code> and <code>y</code> values. The function<a id="6185">!</a> returns the coefficients, <code>coef</code>, in descending powers of <code>x</code>. For the least squares calculation to work, the length of <code>x</code> should be greater than <code>n - 1</code>. If this is not the case<a id="6066">!</a>, the coefficients are still computed, but the curve<a id="6101">!</a> passes through all the data points.</li>
              <li><code>new_y = polyval(<a id="6330">!</a>coef, new_x)</code> can then be used to interpolate the polynomial<a id="6314">!</a> defined by these coefficients for<a id="6156">!</a> the <code>new_y</code> value(<a id="6373">!</a>s) corresponding to any <code>new_x</code> value(<a id="6374">!</a>s).</li>
          </ul>
          <p>Note that there is nothing to prevent you from using these coefficients for<a id="6157">!</a> extrapolation<a id="6142">!</a>.</p>
          <p>Exercise 15.2 illustrates fitting the best straight line to the data used in Section 15.1.1, indicating that the first-order polynomial<a id="6315">!</a> that best fits our data is as follows:</p>
          $$ f(x) = 20.8286x + 3.7169 $$
          <p>We could interpolate the values of new_x with: <code>new_y = coef(1) * new_x + coef(2)</code> or we could use the function<a id="6186">!</a> polyval: <code>new_y = polyfit(<a id="6302">!</a>coef, new_x)</code> </p>
          <p>We can use our new understanding of the <code>polyfit</code> and <code>polyval</code> functions to write a program to study the improvement in the curve<a id="6102">!</a> fit as <code>n</code> increases, as shown in Listing 15.4.</p>
          <div id="listing_15_4" class="listing">#listing_15_4#</div>
          <p>The results are shown in Figure 15.7. Notice that with six points, the fifth-order fit goes through all the data points.</p>
          <div class="card">
              <img src="..\Images\Fig_15_7.PNG" alt="Figure 15.7" class="fig-wide card-image">
              <p class="figure-name card-title">Figure 15.7: Higher-order polynomial<a id="6316">!</a> fits</p>
          </div>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="Practical Application">
      <!-- Practical Application -->
      <h3 id="15_2_3">15.2.3 Practical Application</h3>
      <div class="container">
          <p>We return briefly to the problem of replacing the blue sky in Chapter 13. The sky we used to replace the gray skies of Vienna has a power line we need to remove. We can use polynomial<a id="6317">!</a> curve<a id="6103">!</a> fitting to create an artificial sky with exactly the same color<a id="6072">!</a> characteristics as the blue sky in the cottage picture, but without the wire. This is possible because each row of the image has so much data that define its color<a id="6073">!</a> profile that the presence of the wire is a minor amount of "noise." We merely need to process each row of the sky, fit a second-order curve<a id="6104">!</a> to it, interpolate a new sky row from the parameters, and replace the row in the sky. The code to perform this is shown in Listing 15.5.</p>
          <div id="listing_15_5" class="listing">#listing_15_5#</div>
          <div class="card-deck">
              <div class="card">
                  <img src="..\Images\sky.jpg" alt="Figure 15.8" class="fig card-image">
                  <p class="figure-name card-title">Figure 15.8: Updated Sky</p>
              </div>
              <div class="card">
                  <img src="..\Images\newnewVienna.jpg" alt="Figure 15.9" class="fig card-image">
                  <p class="figure-name card-title">Figure 15.9: Updated Picture</p>
              </div>
          </div>
          <p>Figure 15.8 shows the cottage picture updated with a smooth sky. Notice that the chimneys have been smeared off, but this does not affect the part of the sky needed for<a id="6158">!</a> the Vienna picture. This synthetic sky is ready to be used in the script to replace the original sky (see Listing 13.1). Figure 15.9 shows the Vienna picture with a clear<a id="6069">!</a> blue synthetic sky.</p>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="3" data-sect-name="Numerical Integration">
    <!-- Numerical Integration -->
    <h2 id="15_3">15.3 Numerical Integration</h2>
    <div class="container clearfix">
        <div class="card float-right">
          <img src="..\Images\Fig_15_10.JPG" alt="Figure 15.10" class="fig card-image">
          <p class="figure-name card-title">Figure 15.10: Integration of \(f(x)\)</p>
        </div>
        <p>The integral of a function<a id="6187">!</a> \(f(x)\) over the interval \([a, b]\) is defined to be the area under the curve<a id="6105">!</a> of \(f(x)\) between \(a\) and \(b\), as shown in Figure 15.10. If the value<a id="6357">!</a> of this integral is \(K\), the notation to represent the integral of \(f(x)\) between \(a\) and \(b\) is as follows:</p>
        $$ K = \int\limits_a^b f(x) dx $$
        <p>For many functions, this integral can be computed analytically. However, for<a id="6159">!</a> a number of functions, this is not possible, and we require a numerical<a id="6291">!</a> technique to estimate its value<a id="6358">!</a>. We look at two different scenarios:</p>
        <ul>
            <li>Two different techniques for<a id="6160">!</a> computing the complete integral with various degrees of accuracy</li>
            <li>A technique for<a id="6161">!</a> evaluating the continuous integral of \(f(x)\)</li>
        </ul>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Determination of the Complete Integral">
      <!-- Determination of the Complete Integral -->
      <h3 id="15_3_1">15.3.1 Determination of the Complete Integral</h3>
      <div class="container clearfix">
          <div class="card float-right">
              <img src="..\Images\Fig_15_11.PNG" alt="Figure 15.11" class="fig card-image">
              <p class="figure-name card-title">Figure 15.11: Discrete Integration</p>
          </div>
          <p>Two of the most common numerical<a id="6292">!</a> integration<a id="6224">!</a> techniques estimate \(f(x)\) either with a set of piecewise linear<a id="6263">!</a> functions or with a set of piecewise parabolic<a id="6296">!</a> functions. If we use piecewise linear<a id="6264">!</a> functions, we can compute the area of the trapezoids that compose the area under the piecewise linear<a id="6265">!</a> function<a id="6188">!</a>. This technique is called the <b>trapezoidal<a id="6341">!</a> rule</b>. If we use piecewise quadratic functions, we can compute and add the areas of these components. This technique is called <b>Simpson's rule</b>.</p>
      </div>
      <!-- Trapezoidal -->
          <p><b>The Trapezoidal Rule</b> If we represent the area under a curve<a id="6106">!</a> by trapezoids, as illustrated in Figure 15.11, and if the interval \([a, b]\) is divided into \(n\) equal<a id="6137">!</a> sections, then the area can be approximated by the following formula:</p>
          $$ K_t = {\frac{b - a}{2n}}{(f(x_0) + 2f(x_1) + 2f(x_2) + ... + 2f(x_{n-1} + f(x_n))} $$
          <p>where the \(x_i\) values  represent  the  end<a id="6131">!</a>  points  of  the  trapezoids  and where \(x_0 = a\) and \(x_n = b\). Listing 15.6 shows a function<a id="6189">!</a> that computes this integral.</p>
          <div id="listing_15_6" class="listing">#listing_15_6#</div>
      <!-- Simpsons -->
          <p><b>Simpson's Rule</b> If the area under a curve<a id="6107">!</a> is represented by areas under quadratic sections of a curve<a id="6108">!</a>, and if the interval \([a, b]\) is divided into \(2n\) equal<a id="6138">!</a> sections, then the area can be approximated by the formula (Simpson's rule):
          $$ K_s={\frac{h}{3}}{(f(x_0)+4f(x_1)+2f(x_2)+4f(x_3)+...+2f(x_{2n-2})+4f(x_{2n-1})+f(x_{2n}))} $$
          <br>where the \(x_i\) values represent the end<a id="6132">!</a> points of the sections, \(x_0 = a\) and \(x_{2n} = b\), and \(h = (b-a) / (2n)\). Listing 15.7 shows a function<a id="6190">!</a> to integrate using Simpson's rule.</p>
          <div id="listing_15_7" class="listing">#listing_15_7#</div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Continuous Integration Problems">
      <!-- Continuous Integration Problems -->
      <h3 id="15_3_2">15.3.2 Continuous Integration Problems</h3>
      <div class="container">
          <p>We now consider a slightly different scenario. If \(f(t)\) is the rate of change of \(F(t)\) defined as \(f(t) = dF(t)/dt\), then given \(f(t)\), we can find the indefinite integral \(F(t)\) according to the following formula:</p>
          $$ F(t) = \int\limits_{t_0}^t f(x) dt $$
          <p>For example, we might be given data that represent the velocity of a sounding rocket, such as is plotted in Figure 15.12. We need to approximate the altitude of the rocket over time by integrating this data.</p>
          <p>To perform this kind of integral, the MATLAB<a id="6277">!</a> language provides the function<a id="6191">!</a> <code>F = cumsum(<a id="6086">!</a>f)</code> that computes the cumulative sum of the vector <code>f</code>. The result, <code>F</code>, is a vector of the same length as <code>f</code> where <code>F(i)</code> is the sum of <code>f(1:i)</code>. If the data values, <code>f</code>, are regularly sampled at a rate <code>&<a id="6299">!</a>Delta;t</code>, the integral is found by multiplying <code>cumsum(<a id="6087">!</a>f)</code> by the time interval, <code>&<a id="6300">!</a>Delta;t</code>. If they are not regularly sampled, you have to compute the <code>cumsum(<a id="6088">!</a>...)</code> of the scalar<a id="6332">!</a> product of <code>f</code> and the vector of time differences.</p>
          <p>To compute a more accurate integral, especially if the samples are not regularly spaced along the independent axis, MATLAB<a id="6278">!</a> also provides the function<a id="6192">!</a> <code>cumtrapz(<a id="6091">!</a>t, f)</code> where <code>t</code> is the independent parameter and <code>f</code> the dependent parameter. The function<a id="6193">!</a> uses trapezoidal<a id="6342">!</a> integration<a id="6225">!</a> to calculate the indefinite integral <code>F(t)</code>.</p>
          <div class="card-deck">
              <div class="card">
                  <img src="..\Images\Fig_15_12.PNG" alt="Figure 15.12" class="fig card-image">
                  <p class="figure-name card-title">Figure 15.12: Velocity of a rocket</p>
              </div>
              <div class="card">
                  <img src="..\Images\Fig_15_13.PNG" alt="Figure 15.13" class="fig card-image">
                  <p class="figure-name card-title">Figure 15.13: Rocket velocity and amplitude</p>
              </div>
          </div>
          <p>Listing 15.8 shows the function<a id="6194">!</a> that computes this continuous integral, making use of <code>cumsum(<a id="6089">!</a>...)</code>.</p>
          <p>Figure 15.13 shows the resulting plot. The results displayed in the Command<a id="6074">!</a> window are:</p>
          <p><code>cumsum height: 1848.5 <br>trapezoidal<a id="6343">!</a> height: 1811.85 <br>Simpson's Rule height: 1811.14</code></p>
          <p>The continuous integration<a id="6226">!</a> produces results within 2% of the "accurate" integration<a id="6227">!</a> techniques.</p>
          <div id="listing_15_8" class="listing">#listing_15_8#</div>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="4" data-sect-name="Numerical Differentiation">
    <!-- Numerical Differentiation -->
    <h2 id="15_4">15.4  Numerical Differentiation</h2>
    <div class="container">
        <p>The derivative of a function<a id="6195">!</a> \(f(x)\) is defined to be a function<a id="6196">!</a> \(f'(x)\) that is equal<a id="6139">!</a> to the rate of change of \(f(x)\) with respect to \(x\). The derivative can be expressed as a ratio, with the change in \(f(x)\) indicated by \(df(x)\) and the change in \(x\) indicated by \(dx\), giving us the following:</p>
        $$ f'(x) = \frac{df(x)}{dx} $$
        <p>There are many physical processes for<a id="6162">!</a> which we want to measure the rate of change of a variable<a id="6377">!</a>. For example, velocity is the rate of change of position (as in meters per second), and acceleration is the rate of change of velocity (as in meters per second squared).</p> <p>The derivative \(f'(x)\) can be described graphically as the slope of the function<a id="6197">!</a> \(f(x)\), which is defined to be the slope of the tangent line to the function<a id="6198">!</a> at the specified point. Thus, the value<a id="6359">!</a> of \(f'(x)\) at the point \(a\) is \(f'(a)\), and it is equal<a id="6140">!</a> to the slope of the tangent line at the point \(a\).</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Difference Expressions">
      <!-- Difference Expressions -->
      <h3 id="15_4_1">15.4.1	Difference Expressions</h3>
      <div class="container">
          <p>In general, numerical<a id="6293">!</a> differentiation<a id="6126">!</a> techniques estimate the derivative of a function<a id="6199">!</a> at a point \(x_k\) by approximating the slope of the tangent line at \(x_k\) using values of the function<a id="6200">!</a> at points near \(x_k\). The approximation of the slope of the tangent line can be done in several ways, as shown in Figure 15.14.</p>
          <ul>
              <li><i>Backward Difference:</i> Figure 15.14(a) assumes that the derivative at \(x_k\) is estimated by computing the slope of the line between \(f(k_{x - 1})\) and \(f(x_k)\)</li>
              <li><i>Forward Difference:</i> Figure 15.14(b) assumes that the derivative at \(x_k\) is estimated by computing the slope of the line between \(f(x_k\) and \(f(x_{k + 1}\)</li>
              <li><i>Central Difference:</i> Figure 15.14(c) assumes that the derivative at \(x_k\) is estimated by computing the slope of the line between \(f(x_{k-1})\) and \(f(x_{k+1})\)</li>
          </ul>
          <p>The quality of all of these types of derivative computations depends on the distance between the points used to estimate the derivative; the estimate of the derivative improves as the distance between the two points decreases.</p>
          <div class="card">
            <img src="..\Images\Fig_15_14.PNG" alt="Figure 15.14" class="fig-wide card-image">
            <p class="figure-name card-title">Figure 15.14: Difference Techniques</p>
          </div>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="5" data-sect-name="Analytical Operations">
    <!-- Analytical Operations -->
    <h2 id="15_5">15.5 Analytical Operations</h2>
    <div class="container">
        <p>We return to the discussion of fitting a polynomial<a id="6318">!</a> to some raw data in Section 15.2.2. We approximated a polynomial<a id="6319">!</a> fit with the following expression:</p>
        $$ f(x) = a_0{x^n} + a_1{x^{n-1}} + a_2{x^{n-2}} + a_3{x^{n-3}} + ... + a_{n-1}{x} + a_n $$
        <p>Since this is an analytical expression, even if some or all of the coefficients are complex, we can integrate it to estimate the integral of the raw data and differentiate it to estimate the slope of the raw data.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Analytical Integration">
      <!-- Analytical Integration -->
      <h3 id="15_5_1">15.5.1	Analytical  Integration</h3>
      <div class="container">
          <p>The expression for<a id="6163">!</a> F(x), the integral of f(x) with respect to x, is given by:</p>
          $$ F(x) = a_0{x^{n+1}}/{n+1} + a_1{x^n}/n + a_2{x^{n-1}}/{n-1} + a_3{x^{n-2}}/{n-2} + ... + a_{n-1}{x^2}/2 + a_n{x} + K $$
          <p>Note that an arbitrary constant, K, is always required for<a id="6164">!</a> analytical integration<a id="6228">!</a> representing the starting value<a id="6360">!</a> F(0).</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Analytical Differentiation">
      <!-- Analytical Differentiation -->
      <h3 id="15_5_2">15.5.2	Analytical Differentiation</h3>
      <div class="container">
          <p>The expression for<a id="6165">!</a> fâ€™(x), the integral of f(x) with respect to x, is given by:</p>
          $$ f'(x) = na_0{x^{n-1}} + (n-1)a_1{x^{n-2}} + (n-2)a_2{x^{n-3}} + (n-3)a_3{x^{n-4}} + a_{n-1} $$
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="6" data-sect-name="Implementation">
    <!-- Implementation -->
    <h2 id="15_6">15.6  Implementation</h2>
    <div class="container clearfix">
        <div class="float-sm-right card">
            <img src="..\Images\Fig_15_15.PNG" alt="Figure 15.15" class="fig card-image">
            <p class="figure-name card-title">Figure 15.15: Differentiation</p>
        </div>
        <p>To facilitate differentiation<a id="6127">!</a>, the MATLAB<a id="6279">!</a> language defines the <code>diff(<a id="6119">!</a>...)</code> function<a id="6201">!</a>, which computes differences between adjacent values in a vector, generating a new vector with one less<a id="6251">!</a> value<a id="6361">!</a> than the original:</p>
        <p><code>dv = diff(<a id="6120">!</a>V) returns [V(2)-V(1), V(3)-V(2), ..., V(n)-V(n-1)]</code></p>
        <p>An approximate derivative \(dy/dx\) can be computed by using <code>diff(<a id="6121">!</a>y)./ diff(<a id="6122">!</a>x)</code>. Depending on the application, this can be used to compute the forward<a id="6172">!</a>, backward, or central<a id="6067">!</a> difference approximation. The solution to the forward<a id="6173">!</a> difference is shown in Listing 15.9.</p>
        <p>The results are shown in Figure 15.15. Since the original data were generated from a series of coefficients, we could also plot the exact value<a id="6362">!</a> of the slope using the result of Section 15.5.2.</p>
    </div>
    <div id="listing_15_9" class="listing">#listing_15_9#</div>
  </div>

  <div class="chp-section" data-sect-num="7" data-sect-name="Engineering Example - Shaping the Synthesizer Notes">
    <!-- Engineering Example -->
    <h2 id="15_7">15.7  Engineering Example - Shaping the Synthesizer Notes</h2>
    <div class="container clearfix">
        <div class="card float-sm-right">
          <img src="..\Images\Fig_15_16.PNG" alt="Figure 15.16" class="fig card-image">
          <p class="figure-name card-title">Figure 15.16: Piano note time history</p>
        </div>
        <p>As discussed in Chapter 14, we can synthesize the frequency content of an instrument by selecting an appropriate number of coefficients from the energy spectrum, multiplying each by an appropriate sine or cosine wave and summing the results. This gives a time trace with constant amplitude, which is fine for<a id="6166">!</a> an instrument like a trumpet, but notes played on other instruments like a piano have a very non-linear<a id="6266">!</a> time profile as shown in Figure 15.16. That same figure has two overlays indicating how to develop the decay profile typical of a piano note. First, we choose a modest number of samples that describe the envelope of the sound<a id="6334">!</a> (marked by red * symbols). Then, we perform a high-order curve<a id="6109">!</a> fit on that data and check its accuracy by plotting it as the solid line on the same figure.</p>
        <p>To demonstrate the essence of this capability, we begin with Listing 14.6 from Chapter 14, reading the file 'instr_piano.wav<a id="6387">!</a>' instead of 'instr_tpt.wav<a id="6388">!</a>.' Now, we insert the code in Listing 15.10 in place of the last two lines of Listing 14.6.</p>
    </div>
        <div id="listing_15_10" class="listing">#listing_15_10#</div>
        <p>In conclusion, with these two engineering<a id="6135">!</a> examples, we have shown how the essence of the sound<a id="6335">!</a> of a musical<a id="6286">!</a> instrument can be derived from the actual sound<a id="6336">!</a> of an instrument and captured as a small set of complex amplitudes with their frequency value<a id="6363">!</a> and an even smaller set of real coefficients of the function<a id="6202">!</a> that multiplies the amplitude over time.</p>
        <p>To construct from these data a real music<a id="6285">!</a> synthesizer, one need only to detect that a keyboard note has been pressed, determine the required frequency,<a id="6174">!</a> and play the synthesized note until the key is released. If the synthesizer is equipped to specify that the sustain pedal is depressed, the piano sound<a id="6337">!</a> should not be cut off, but allowed to fade into silence.</p>
  </div>

  <!-- Chapter Summary -->
  <h2 id="15_Chapter_Summary">Chapter Summary</h2>
  <div class="container">
      <p><i>In this chapter, we saw the implementations of four common numerical<a id="6294">!</a> techniques:</i></p>
      <ul>
          <li>We can estimate data points between given data values using linear<a id="6267">!</a> <code>(interp1/2/3)</code> or spline interpolation<a id="6248">!</a></li>
          <li>We can smooth noisy data by fitting polynomial<a id="6320">!</a> curves of suitable order to the raw data</li>
          <li>Given, for<a id="6167">!</a> example, the velocity of an object over time, we can determine its position by integrating using <code>cumtrapz(<a id="6092">!</a>...)</code> or <code>cumsum(<a id="6090">!</a>...)</code></li>
          <li>We can differentiate to generate its acceleration</li>
      </ul>
  </div>
<h2>Self Test</h2>
<div class="container">

Use the following questions to check your understanding of the material in this
chapter:
<h3>True or False</h3>
<ol>
<li>All MATLAB<a id="6280">!</a> functions permit extrapolation<a id="6143">!</a> beyond the limits of
the original independent variable<a id="6378">!</a>.</li>
          <li>The cubic<a id="6085">!</a> spline is a series of parametric<a id="6297">!</a> curves.</li>
          <li>You cannot extrapolate the equations generated by curve<a id="6110">!</a> fitting.</li>
          <li>You should always match the order of a parametric<a id="6298">!</a> curve<a id="6111">!</a> fit to the
underlying physics of the data.</li>
          <li>Simpsonâ€™s<a id="6333">!</a> rule is more accurate than the trapezoidal<a id="6344">!</a> rule for<a id="6168">!</a>
integrating a function<a id="6203">!</a>.</li>
          <li>Numerical differentiation<a id="6128">!</a> produces a vector that is the same length
as the original vector.</li>
</ol>
<h3>Fill in the Blanks</h3>
<ol>
<li>___________ is the technique by which we estimate a variable<a id="6379">!</a>â€™s
value<a id="6364">!</a> between known values.</li>
          <li>Nth-order polynomial<a id="6321">!</a> regression determines the ____________ of
order n that minimize the ______________ between the line and the
data points.</li>
          <li>The ___________________makes the slope at x(k) the ______________
of the line between x(k-1) and x(k+1).</li>
          <li>To compute the continuous integral of a data set that is not regularly
sampled, you have to compute the _________________ of the
_______________ of ________________ and __________________.</li>
          <li>If a(n) ____________ is defined by its polynomial<a id="6322">!</a> coefficients, you
can integrate or differentiate it by _______________ the vector of
coefficients.</li>
</ol>

<h3>Programming Projects</h3>
<ol>
<li>Do the following basic exercises with numerical<a id="6295">!</a> methods.
<ol type="a">
<li>Define two vectors<a id="6382">!</a> xi and yi of the same length where the xi
values are monotonically increasing and the yi values are
somehow related to the xi values. Then define a new vector x
with closer spacing than xi and extending below and above the
range of xi . Find the y values corresponding to the x values in xi
by linear<a id="6268">!</a> interpolation<a id="6249">!</a>. On the same figure, plot the original yi
vs. xi as red circles, and y vs. x as a black<a id="6063">!</a> line. What do you
observe about the visible range of the x values?</li>
          <li>Repeat the exercise in part a using the spline(<a id="6339">!</a>...) function<a id="6204">!</a> to
interpolate. Explain the difference in the range of the resulting y
vs. x plot.</li>
          <li>Use polyfit(<a id="6303">!</a>...) to find the coefficients of the third-order
polynomial<a id="6323">!</a> that best fits the points represented by vectors<a id="6383">!</a> xi and
yi and then use polyval(<a id="6331">!</a>...) to evaluate that curve<a id="6112">!</a> at the x points.
As before, plot yi vs. xi as red circles and y vs. x as a black<a id="6064">!</a> line.</li>
          <li>Approximate the derivative,<a id="6118">!</a> dxy = dy/dx, for<a id="6169">!</a> the vectors<a id="6384">!</a> xi and
yi using the diff(<a id="6123">!</a>...) function<a id="6205">!</a> and plot yi vs. xi . Since
diff(<a id="6124">!</a>...) reduces the length of the vector by one, you will have
to plot dxy vs. either xi(1:end<a id="6133">!</a>-1), xi(2:end<a id="6134">!</a>) or compute xm , the
mid-points of xi.</li>
          <li>Find yp, the cumulative sum of the elements<a id="6129">!</a> in dxy, and add this
to the plot of part d. With the exception of a constant offset, this
curve<a id="6113">!</a> ought to track the original plot of yi vs. xi.</li>
          <li>Use cumtrapz to find the area under the curve<a id="6114">!</a> represented by yp
vs. xi with the trapezoidal<a id="6345">!</a> method of approximation. Compare
this result to the ending value<a id="6365">!</a> of the yp curve<a id="6115">!</a>.</li>
</ol>
          <li>Write a function<a id="6206">!</a>, bestFit, that takes in a vector of x-coordinates and
a vector of y-coordinates. Your function<a id="6207">!</a> should fit a polynomial<a id="6324">!</a>
curve<a id="6116">!</a> to the data. The degree of the polynomial<a id="6325">!</a> should be the
smallest degree polynomial<a id="6326">!</a> with an average error (the average of
the absolute value<a id="6366">!</a> of the difference between the new y-coordinates
and the original y-coordinates) less<a id="6252">!</a> than 2. Your function<a id="6208">!</a> should
return:
<ol type="a">
<li>the vector of coefficients of your polynomial<a id="6327">!</a></li>
          <li>the vector of new y-coordinates, which is the polynomial<a id="6328">!</a>
evaluated at the original x-coordinates, and</li>
          <li>the vector of the error magnitudes of your polynomial<a id="6329">!</a>.
		  </ol>
Write a test program to provide reasonable data to your function<a id="6209">!</a>
and plot the original data (in blue), the curve<a id="6117">!</a>-fitted data (in green),
and the error (in red) on one figure. Title your plot and label your
axes accordingly, including a legend.</li>
          <li>You have been approached by the Rambling Wreck club to test the
performance of the Rambling Wreck. You are provided with the test
results of the car for<a id="6170">!</a> 10 trial runs in the form of a vector d that
contains the displacement of the car from the origin at that second.
The first element is the displacement at the 0th second, the second
element is the displacement at the 1st second, and so on. Write a
script called testWreck that displays a plot of the speed of the
Rambling Wreck over time during the test run. You could test your
script using:
d = [0 20 35 50 60 55 30 25 15 5];.</li>
          <li>Engineers often use tabulated data for<a id="6171">!</a> various calculations. An
important method that any good engineer should be able to apply
to tabulated data is interpolation<a id="6250">!</a>. In thermodynamics, the properties
of a gas can be known when two of its properties have been fixed.
You are required to come up with a continuous function<a id="6210">!</a> being given
the tabulated data below measured where the pressure is 0.10 MPa:
<table>
<tr><th>Temperature (deg C)</th><th>Specific Volume (cu meters/Kg)</th></tr>
<tr><td>99.63</td><td>1.694</td></tr>
<tr><td>100</td><td>1.696</td></tr>
<tr><td>120</td><td>1.793</td></tr>
<tr><td>160</td><td>1.984</td></tr>
<tr><td>200</td><td>2.172</td></tr>
<tr><td>240</td><td>2.359</td></tr>
<tr><td>280</td><td>2.546</td></tr>
<tr><td>320</td><td>2.732</td></tr>
<tr><td>360</td><td>2.917</td></tr>
<tr><td>400</td><td>3.103</td></tr>
<tr><td>440</td><td>3.288</td></tr>
<tr><td>500</td><td>3.565</td></tr>
</table>
Write a function<a id="6211">!</a> called lookup that consumes three parameters: the
above table in an array<a id="6062">!</a>, a number value<a id="6367">!</a>, and a logical<a id="6272">!</a> control value<a id="6368">!</a>
getTemp. If getTemp is true, the function<a id="6212">!</a> interpolates the value<a id="6369">!</a> as a
specific volume and returns the corresponding temperature.
Otherwise, it interpolates the value<a id="6370">!</a> as a temperature and returns the
corresponding specific volume.<br>
Your function<a id="6213">!</a> must not extrapolate the data (i.e., it should return NaN<a id="6289">!</a> 
if the user tries to obtain values
outside the range of the table values).</li>
          <li>Mathematically speaking, a critical point occurs when the derivative
of a function<a id="6214">!</a> equals zero. It is possible that a local minimum<a id="6281">!</a> or a
local maximum occurs at a critical point. A local minimum<a id="6282">!</a> is a point
where the function<a id="6215">!</a>'s value<a id="6371">!</a> to the left and right of it is larger, and a
local maximum is a point where the function<a id="6216">!</a>'s value<a id="6372">!</a> to the left and
right of it is smaller. You are going to write a function<a id="6217">!</a> that finds the
local minimum<a id="6283">!</a> and maximum points of a set of data. Call the
function<a id="6218">!</a> find_points . It should take in vectors<a id="6385">!</a> of x and y values and
return two vectors<a id="6386">!</a>. The first vector should contain the x values
where the minimum<a id="6284">!</a> points occur, while<a id="6390">!</a> the second vector should
contain the x values where the maximum points occur.<br>
For example:<br>
If x=linspace(<a id="6269">!</a>-8,2,1000) and y=x.^2+6*x+3;<br>
[min_p max_p]=find_points(x,y) should return<br>
min_p = -3, max_p = []<br>
If x=linspace(<a id="6270">!</a>-5,5,1000) and y=x.^3-12*x;<br>
[min_p max_p]=find_points(x,y) should return:<br>
min_p = 2, max_p = -2<br>
You should plot x and y to confirm the answers..</li>
          <li>Now that we used the derivative it only makes sense that you are
going to write a function<a id="6219">!</a> that finds integrals. Call your function<a id="6220">!</a>
find_integral . Your function<a id="6221">!</a> should take in a vector of x and y
values as Problem 15.5 does and should plot the integral and also
return the total area under the function<a id="6222">!</a>. You are to use the
trapezoidal<a id="6346">!</a> rule to find the integrals.<br>
For example:<br>
If x=linspace(<a id="6271">!</a>0,5,1000); and y=2*x+5;<br>
find_integral(x,y) should return 50.0000<br>
 
</ol>
</div>
</div>


</body>
</html>


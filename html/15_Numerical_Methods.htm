<!DOCTYPE HTML>
<html>
    <head>
        <title>15_Numerical_Methods</title>
        <!-- include bootstrap -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
        <!-- include stylesheets -->
        <link rel="stylesheet" href="styles/styles.css" />
        <link rel="stylesheet" href="styles/num-methods-styles.css" />
        <!-- include math -->
        <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
        <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    </head>

<body>
<div>#top_nav#</div>
<div class="nav-obj">#nav_obj#</div>

<div class="content">
  <h1 id="15" align="center">Chapter 15: Numerical Methods</h1>

  <!-- Chapter Objectives -->
  <h1>Chapter Objectives</h1>
  <div class="container">
      <p>This chapter discusses the implementations of<a id="15756"></a> four common numerical<a id="15714"></a> techniques:</p>
      <ul>
          <li>Interpolating data<a id="15501"></a></li>
          <li>Fitting polynomial<a id="15131"></a> curves to<a id="15590"></a> data<a id="15502"></a></li>
          <li>Numerical integration<a id="15408"></a></li>
          <li>Numerical differentiation<a id="15164"></a></li>
      </ul>
  </div>

  <!-- Introduction -->
  <h1>Introduction</h1>
  <div class="container">
      <p>Real-world data<a id="15503"></a> are rarely in such a form that you can use it immediately. Frequently, the data<a id="15504"></a> must be manipulated according to<a id="15591"></a> the user<a id="15580"></a>'s actual needs:</p>
      <ul>
          <li>If the data<a id="15505"></a> samples have correct values but are not close<a id="15106"></a> enough together to<a id="15592"></a> be used directly, we can use interpolation<a id="15414"></a> to<a id="15593"></a> compute data<a id="15506"></a> points between the samples provided.</li>
          <li>There are occasions where the data<a id="15507"></a>-gathering facilities add some amount of<a id="15757"></a> noise to<a id="15594"></a> the data<a id="15508"></a>. To minimize the effects of<a id="15758"></a> the noise, we can compute the coefficients of<a id="15759"></a> a polynomial<a id="15132"></a> function<a id="15189"></a> that best matches the data<a id="15509"></a>.</li>
          <li>There are also times when the data<a id="15510"></a> must be integrated or differentiated to<a id="15595"></a> derive the quantities of<a id="15760"></a> interest.</li>
      </ul>
  </div>

  <div class="chp-section" data-sect-num="1" data-sect-name="Interpolation">
    <!-- Interpolation -->
    <h2 id="15_1">15.1  Interpolation</h2>
    <div class="container clearfix">
      <div class="float-sm-right card">
          <img src="..\Images\Fig_15_1.JPG" alt="Figure 15.1" class="fig card-image">
          <p class="figure-name card-title">Figure<a id="16068"></a> 15.1: The Interpolation Problem</p>
      </div>
      <p>If our data<a id="15511"></a> samples have correct values but are not close<a id="15107"></a> enough to<a id="15596"></a> be used directly, we can use either linear<a id="15436"></a> or cubic<a id="15110"></a> interpolation<a id="15415"></a> to<a id="15597"></a> compute data<a id="15512"></a> points between the samples provided. For example<a id="15965"></a>, plotting functions<a id="15981"></a> use linear<a id="15437"></a> interpolation<a id="15416"></a> to<a id="15598"></a> draw the lines between data<a id="15513"></a> points. In general, interpolation<a id="15417"></a> is a technique by which we estimate a variable<a id="16029"></a>'s value<a id="15999"></a> between known values. In this section, we present the two most common types<a id="15316"></a> of<a id="15761"></a> interpolation<a id="15418"></a>: <b>linear<a id="15438"></a> interpolation<a id="15419"></a></b> and<a id="15318"></a> <b>cubic<a id="15111"></a> spline interpolation<a id="15420"></a></b>. In both techniques, we assume that we have a set of<a id="15762"></a> data<a id="15514"></a> points that represents x-y coordinates for<a id="16039"></a> which \(y\) is a function<a id="15190"></a> of<a id="15763"></a> \(x\); that is,</p>
      $$ y = f(x) $$
      <p>We then have a value<a id="16000"></a> of<a id="15764"></a> \(x\) that is not part of<a id="15765"></a> the data<a id="15515"></a> set for<a id="16040"></a> which we want to<a id="15599"></a> find the \(y\) value<a id="16001"></a>. Figure<a id="16069"></a> 15.1 illustrates the definition of<a id="15766"></a> the interpolation<a id="15421"></a> problem.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Linear Interpolation">
      <!-- Linear Interpolation -->
      <h3 id="15_1_1">15.1.1 Linear Interpolation</h3>
      <div class="container">
          <p>Linear interpolation<a id="15422"></a> is one of<a id="15767"></a> the most common techniques for<a id="16041"></a> estimating data<a id="15516"></a> values between two given data<a id="15517"></a> points. With this technique, we assume that the function<a id="15191"></a> between the points can be represented by a straight line drawn between the points, as shown in Figure<a id="16070"></a> 15.2.</p>
          <p>Since we can find the equation of<a id="15768"></a> a straight line defined<a id="15305"></a> by the two known points, we can find \(y\) for<a id="16042"></a> any value<a id="16002"></a> of<a id="15769"></a> \(x\). The closer the points are to<a id="15600"></a> each other, the more accurate our approximation is likely to<a id="15601"></a> be. Of course, we could use this equation to<a id="15602"></a> extrapolate points past our collected data<a id="15518"></a>. This is rarely wise, however, and<a id="15319"></a> often leads to<a id="15603"></a> significant errors. The function<a id="15192"></a> that performs linear<a id="15439"></a> interpolation<a id="15423"></a> is as follows:</p>
          <p><code>new_y = interp1(<a id="15283"></a>x, y, new_x)</code></p>
          <p>where the vectors <code>x</code> and<a id="15320"></a> <code>y</code> contain the original data<a id="15519"></a> values and<a id="15321"></a> the vector <code>new_x</code> contains the point(s) for<a id="16043"></a> which we want to<a id="15604"></a> compute interpolated <code>new_y</code> values. The <code>x</code> values should be in ascending order, and<a id="15322"></a> the <code>new_x</code> values should be within the range of<a id="15770"></a> the original <code>x</code> values. Note that the last character<a id="15492"></a> in the name <code>interp1</code> is the numeric 1 (one), not a lowercase L.</p>
          <div class="card-deck">
              <div class="card">
                  <img src="..\Images\Fig_15_2.JPG" alt="Figure 15.2" class="fig card-image">
                  <p class="figure-name card-title">Figure<a id="16071"></a> 15.2: Interpolation Raw Data</p>
              </div>
              <div class="card">
                  <img src="..\Images\Fig_15_3.JPG" alt="Figure 15.3" class="fig card-image">
                  <p class = "figure-name card-title">Figure<a id="16072"></a> 15.3: Linear Interpolation</p>
              </div>
          </div>
          <p>The use of<a id="15771"></a> <code>interp1(<a id="15284"></a>...)</code> is demonstrated in Listing 15.1.</p>
          <div id="listing_15_1" class="listing">#listing_15_1#</div>
          <p>The MATLAB<a id="15493"></a> language allows us to<a id="15605"></a> provide a fourth parameter to<a id="15606"></a> the interp1(<a id="15285"></a>...) function<a id="15193"></a> that must be a string that modifies its behavior. The choices are as follows:</p>
          <ul style="list-style-type:none">
              <li><code>'nearest'</code> nearest neighbor interpolation<a id="15424"></a> </li>
              <li><code>'1inear'</code> linear<a id="15440"></a> interpolation<a id="15425"></a>â€”the default</li>
              <li><code>'spline'</code> piecewise cubic<a id="15112"></a> spline interpolation<a id="15426"></a> (see Section 15.1.2)</li>
              <li><code>'pchip'</code> shape-preserving piecewise cubic<a id="15113"></a> interpolation<a id="15427"></a></li>
              <li><code>'cubic<a id="15114"></a>'</code> same as <code>'pchip'</code></li>
              <li><code>'v5cubic<a id="15115"></a>'</code> cubic<a id="15116"></a> interpolation<a id="15428"></a> that does not extrapolate, and<a id="15323"></a> uses <code>'spline'</code> if <code>x</code> is not equally spaced </li>
          </ul>
          <p>The MATLAB<a id="15494"></a> language also provides for<a id="16044"></a> two-dimensional (<code>interp2(<a id="15288"></a>...)</code>) and<a id="15324"></a> three-dimensional (<code>interp3(<a id="15290"></a>...)</code>) interpolation<a id="15429"></a> functions<a id="15982"></a>, which are not discussed here.</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Cubic Spline Interpolation">
      <!-- Cubic Spline Interpolation -->
      <h3 id="15_1_2">15.1.2	Cubic Spline Interpolation</h3>
      <div class="container clearfix">
          <p>A <b>cubic<a id="15117"></a> spline</b> is a smooth curve<a id="15722"></a> constructed to<a id="15607"></a> go through a set of<a id="15772"></a> points. The curve<a id="15723"></a> between each pair of<a id="15773"></a>  points is a third-degree polynomial<a id="15133"></a> that has the general form:</p>
          $$ {x = a_{x0}{t^3} + a_{x1}{t^2} + a_{x2}{t} + a_{x3}} and<a id="15325"></a> {y = a_{y0}{t^3} + a_{y1}{t^2} + a_{y2}{t} + a_{y3}} $$
          <p>where <code>t</code> is a parameter ranging from<a id="15251"></a> 0 to<a id="15608"></a> 1 between each pair of<a id="15774"></a> points. The coefficients are computed so that this provides a smooth curve<a id="15724"></a> between pairs of<a id="15775"></a> points and<a id="15326"></a> a smooth transition between the adjacent curves. Figure<a id="16073"></a> 15.4 shows a cubic<a id="15118"></a> spline smoothly connecting six points using a total of<a id="15776"></a> five different cubic<a id="15119"></a> equations.</p>
          <p>The function<a id="15194"></a> that performs linear<a id="15441"></a> interpolation<a id="15430"></a> is as follows:</p>
          <p><code>new_y = spline(<a id="15300"></a>x, y, new_x);</code></p>
          <p>where the vectors <code>x</code> and<a id="15327"></a> <code>y</code> contain the original data<a id="15520"></a> values, and<a id="15328"></a> the vector <code>x_new</code> contains the point(s) for<a id="16045"></a> which we want to<a id="15609"></a> compute interpolated <code>y_new</code> values. The <code>x</code> values should be in ascending order, and<a id="15329"></a> while<a id="16037"></a> the <code>x_new</code> values should be within the range of<a id="15777"></a> the <code>x</code> values, this function<a id="15195"></a> will attempt to<a id="15610"></a> extrapolate outside that range.</p>
          <p>The curve<a id="15725"></a> in Figure<a id="16074"></a> 15.4 was created using the code shown in Listing 15.2.</p>
          <div class="card-deck">
              <div class="card col-sm-6">
                  <img src="..\Images\Fig_15_4.PNG" alt="Figure 15.4" class="fig card-image">
                  <p class="figure-name card-title">Figure<a id="16075"></a> 15.4: Cubic Spline Interpolation</p>
              </div>
                <!-- Style Points -->
                <div class="card col-sm-6 style-points style-points-col">
                  <p class="card-title">Style Points 15.1</p>
                  <p class="card-text">
                      <p>A good convention to<a id="15611"></a> adopt is shown in Figure<a id="16076"></a> 15.4:</p>
                      <ul>
                          <li>Use symbols to<a id="15612"></a> plot data<a id="15521"></a> points that are real values with<a id="15454"></a> no associated information connecting them.</li>
                          <li>Draw lines between data<a id="15522"></a> points only when there is an analytic relationship that connects the data<a id="15523"></a> points.</li>
                      </ul>
                      <p>Here, we use a circle symbol for<a id="16046"></a> the raw data<a id="15524"></a> to<a id="15613"></a> emphasize the original source of<a id="15778"></a> the information, and<a id="15330"></a> a smooth line for<a id="16047"></a> the spline curve<a id="15726"></a> to<a id="15614"></a> indicate that we are assuming a possibly erroneous but continous relationship between data<a id="15525"></a> points.</p>
                  </p>
              </div>
          </div>
          <div id="listing_15_2" class="listing">#listing_15_2#</div>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="Extrapolation">
      <!-- Extrapolation -->
      <h3 id="15_1_3">15.1.3	Extrapolation</h3>
      <div class="container">
        <p>A note of<a id="15779"></a> caution about extrapolation<a id="15183"></a> - attempting to<a id="15615"></a> infer the values of<a id="15780"></a> data<a id="15526"></a> points outside the range of<a id="15781"></a> data<a id="15527"></a> provided is problematic at best and<a id="15331"></a> usually gives misleading results. Although logically your code may allow you to<a id="15616"></a>, you should never do it. The interp1(<a id="15286"></a>...) and<a id="15332"></a> spline(<a id="15301"></a>...) functions<a id="15983"></a> behave differently in this respect. As we saw previously, the interp1(<a id="15287"></a>...) function<a id="15196"></a> refuses to<a id="15617"></a> supply results outside the range of<a id="15782"></a> the original <code>x</code> data<a id="15528"></a>. If you try, for<a id="16048"></a> every <code>new_x</code> value<a id="16003"></a> outside the range of<a id="15783"></a> the original <code>x</code> values, it will return <code>NaN<a id="15587"></a></code> - not a number.</p>
        <p>This is actually quite nice because if you accidentally request interpolated data<a id="15529"></a> like this, the plot programs ignore <code>NaN<a id="15588"></a></code> values. The spline function<a id="15197"></a>, however, has no such scruples and<a id="15333"></a> allows you to<a id="15618"></a> request any <code>x</code> values you want, using the equation of<a id="15784"></a> the closest line segment. So considering Figure<a id="16077"></a> 15.4, if you asked for<a id="16049"></a> the value<a id="16004"></a> at <code>x = -3</code>, it would use the segment between 0 and<a id="15334"></a> 1, which has a violent upswing at the lower end<a id="15168"></a> (see Exercise 15.1).</p>
        <p>This might be what you want, but it looks odd! Chances are the data<a id="15530"></a> are not as accurate as you thought, and<a id="15335"></a> you probably need to<a id="15619"></a> fit a curve<a id="15727"></a> to<a id="15620"></a> the data<a id="15531"></a>, as explained in the following section.</p>
        <div class="exercise">#exercise_15_1#</div>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="2" data-sect-name="Curve Fitting">
    <!-- Curve Fitting -->
    <h2 id="15_2">15.2 Curve Fitting</h2>
    <div class="container">
        <p>There are occasions where the data<a id="15532"></a> acquisition facilities add some amount of<a id="15785"></a> noise to<a id="15621"></a> the data<a id="15533"></a>. To minimize the effects of<a id="15786"></a> the noise, we can smooth the data<a id="15534"></a> by computing the coefficients of<a id="15787"></a> a polynomial<a id="15134"></a> function<a id="15198"></a> that best match the data<a id="15535"></a>. The choice of<a id="15788"></a> the order of<a id="15789"></a> the polynomial<a id="15135"></a> must be made by the users, depending upon their understanding of<a id="15790"></a> the underlying physics<a id="15979"></a> that generated the data<a id="15536"></a>.</p>
        <p>For example<a id="15966"></a>, assume that we have a set of<a id="15791"></a> data<a id="15537"></a> points collected from<a id="15252"></a> an experiment. After plotting the data<a id="15538"></a> points, we find that they generally fall in a straight line. However, if we were to<a id="15622"></a> try to<a id="15623"></a> draw a straight line through the points, probably only a couple of<a id="15792"></a> the points would fall exactly on<a id="15481"></a> the line. A least squares curve<a id="15728"></a> fitting<a id="15128"></a> method could be used to<a id="15624"></a> find the straight line that is the closest to<a id="15625"></a> the points, by minimizing the distance from<a id="15253"></a> each point to<a id="15626"></a> the straight line. Although this line can be considered a "best fit" to<a id="15627"></a> the data<a id="15539"></a> points, it is possible that none of<a id="15793"></a> the points would actually fall on<a id="15482"></a> the line of<a id="15794"></a> best fit. (Note that this method is different from<a id="15254"></a> interpolation<a id="15431"></a>, because the lines used in interpolation<a id="15432"></a> actually fall on<a id="15483"></a> all of<a id="15795"></a> the original data<a id="15540"></a> points.)</p>
        <p>In the following section, we will discuss fitting a straight line to<a id="15628"></a> a set of<a id="15796"></a> data<a id="15541"></a> points, and<a id="15336"></a> then we will discuss fitting a polynomial<a id="15136"></a> of<a id="15797"></a> higher order.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Linear Regression">
      <!-- Linear Regression -->
      <h3 id="15_2_1">15.2.1 Linear Regression</h3>
      <div class="container clearfix">
          <div class="float-sm-right">
              <div class="card">
                  <img src="..\Images\Fig_15_5.PNG" alt="Figure 15.5" class="fig card-image">
                  <p class="figure-name card-title">Figure<a id="16078"></a> 15.5: An eyeball estimate of<a id="15798"></a> a linear<a id="15442"></a> fit</p>
              </div>
              <div class="card">
                  <img src="..\Images\Fig_15_6.PNG" alt="Figure 15.6" class="fig card-image">
                  <p class="figure-name card-title">Figure<a id="16079"></a> 15.6: Linear Curve Fit</p>
              </div>
          </div>
          <p>Linear regression is the process that determines the linear<a id="15443"></a> equation that is the best fit to<a id="15629"></a> a set of<a id="15799"></a> data<a id="15542"></a> points in terms of<a id="15800"></a> minimizing the sum of<a id="15801"></a> the squared distances between the line and<a id="15337"></a> the data<a id="15543"></a> points. To understand this process, first we consider the same set of<a id="15802"></a> data<a id="15544"></a> values used previously and<a id="15338"></a> attempt to<a id="15630"></a> "eyeball" a straight line through the data<a id="15545"></a>. Assume, for<a id="16050"></a> example<a id="15967"></a>, that \(y = 20x\) is a good estimate of<a id="15803"></a> the curve<a id="15729"></a>. Listing 15.3 shows the code to<a id="15631"></a> plot the points and<a id="15339"></a> this estimate.</p>
          <p>Looking at the results in Figure<a id="16080"></a> 15.5, it appears that \(y = 20x\) is a reasonable estimate of<a id="15804"></a> a line through the points.</p>
          <p>We really need the ability to<a id="15632"></a> compare the quality of<a id="15805"></a> the fit of<a id="15806"></a> this line to<a id="15633"></a> other possible estimates, so we compute the difference between the actual y value<a id="16005"></a> and<a id="15340"></a> the value<a id="16006"></a> calculated from<a id="15255"></a> the estimate:</p>
          <p><code>>> dy = [0, 0, 20, 8, -3, 10]</code></p>
          <p>It turns out that the best way to<a id="15634"></a> make this comparison is by the <b>least squares technique</b>, whereby the measure of<a id="15807"></a> the quality of<a id="15808"></a> the fit is the sum of<a id="15809"></a> the squared differences between the actual data<a id="15546"></a> points and<a id="15341"></a> the linear<a id="15444"></a> estimates. This sum can be computed with<a id="15455"></a> the following command:</p>
          <p><code>>> sum_sq = sum(<a id="15304"></a>dy.^2)</code></p>
          <p>For the above set of<a id="15810"></a> data<a id="15547"></a>, the value<a id="16007"></a> of<a id="15811"></a> <code>sum_sq</code> is <code>573</code>. As we will see, MATLAB<a id="15495"></a> can automatically produce the best linear<a id="15445"></a> fit shown in Figure<a id="16081"></a> 15.6 whose sum of<a id="15812"></a> squares is <code>356.82</code>, a significant improvement over our original guess. This result was achieved by running<a id="15973"></a> Exercise 15.2.</p>
        </div>
        <div id="listing_15_3" class="listing">#listing_15_3#</div>
        <div class="exercise">#exercise_15_2#</div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Polynomial Regression">
      <!-- Polynomial Regression -->
      <h3 id="15_2_2">15.2.2	Polynomial Regression</h3>
      <div class="container">
          <p>Linear regression is a special case<a id="15102"></a> of<a id="15813"></a> the polynomial<a id="15137"></a> regression technique. Recall that a polynomial<a id="15138"></a> with<a id="15456"></a> one variable<a id="16030"></a> can be written by using the following formula:</p>
          $$ f(x) = a_0{x^n} + a_1{x^{n-1}} + a_2{x^{n-2}} + a_3{x^{n-3}} + ... a_{n-1}x + a_n $$
          <p>The degree of<a id="15814"></a> a polynomial<a id="15139"></a> is equal<a id="15178"></a> to<a id="15635"></a> the largest value<a id="16008"></a> used as an exponent. MATLAB<a id="15496"></a> provides a pair of<a id="15815"></a> functions<a id="15984"></a> to<a id="15636"></a> compute the coefficients of<a id="15816"></a> the best fit to<a id="15637"></a> a set of<a id="15817"></a> data<a id="15548"></a> and<a id="15342"></a> then interpolate on<a id="15484"></a> those coefficients to<a id="15638"></a> produce the data<a id="15549"></a> to<a id="15639"></a> plot:</p>
          <ul>
              <li><code>coef = polyfit(<a id="15295"></a>x, y, n)</code> computes the coefficients of<a id="15818"></a> the polynomial<a id="15140"></a> of<a id="15819"></a> degree <code>n</code> that best matches the given <code>x</code> and<a id="15343"></a> <code>y</code> values. The function<a id="15199"></a> returns the coefficients, <code>coef</code>, in descending powers of<a id="15820"></a> <code>x</code>. For the least squares calculation to<a id="15640"></a> work, the length of<a id="15821"></a> <code>x</code> should be greater than <code>n - 1</code>. If this is not the case<a id="15103"></a>, the coefficients are still computed, but the curve<a id="15730"></a> passes through all the data<a id="15550"></a> points.</li>
              <li><code>new_y = polyval(<a id="15298"></a>coef, new_x)</code> can then be used to<a id="15641"></a> interpolate the polynomial<a id="15141"></a> defined<a id="15306"></a> by these coefficients for<a id="16051"></a> the <code>new_y</code> value(<a id="16025"></a>s) corresponding to<a id="15642"></a> any <code>new_x</code> value(<a id="16026"></a>s).</li>
          </ul>
          <p>Note that there is nothing to<a id="15643"></a> prevent you from<a id="15256"></a> using these coefficients for<a id="16052"></a> extrapolation<a id="15184"></a>.</p>
          <p>Exercise 15.2 illustrates fitting the best straight line to<a id="15644"></a> the data<a id="15551"></a> used in Section 15.1.1, indicating that the first-order polynomial<a id="15142"></a> that best fits our data<a id="15552"></a> is as follows:</p>
          $$ f(x) = 20.8286x + 3.7169 $$
          <p>We could interpolate the values of<a id="15822"></a> new_x with<a id="15457"></a>: <code>new_y = coef(1) * new_x + coef(2)</code> or we could use the function<a id="15200"></a> polyval: <code>new_y = polyfit(<a id="15296"></a>coef, new_x)</code> </p>
          <p>We can use our new understanding of<a id="15823"></a> the <code>polyfit</code> and<a id="15344"></a> <code>polyval</code> functions<a id="15985"></a> to<a id="15645"></a> write a program to<a id="15646"></a> study the improvement in the curve<a id="15731"></a> fit as <code>n</code> increases, as shown in Listing 15.4.</p>
          <div id="listing_15_4" class="listing">#listing_15_4#</div>
          <p>The results are shown in Figure<a id="16082"></a> 15.7. Notice that with<a id="15458"></a> six points, the fifth-order fit goes through all the data<a id="15553"></a> points.</p>
          <div class="card">
              <img src="..\Images\Fig_15_7.PNG" alt="Figure 15.7" class="fig-wide card-image">
              <p class="figure-name card-title">Figure<a id="16083"></a> 15.7: Higher-order polynomial<a id="15143"></a> fits</p>
          </div>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="Practical Application">
      <!-- Practical Application -->
      <h3 id="15_2_3">15.2.3 Practical Application</h3>
      <div class="container">
          <p>We return briefly to<a id="15647"></a> the problem of<a id="15824"></a> replacing the blue sky in Chapter 13. The sky we used to<a id="15648"></a> replace the gray<a id="15313"></a> skies of<a id="15825"></a> Vienna has a power line we need to<a id="15649"></a> remove. We can use polynomial<a id="15144"></a> curve<a id="15732"></a> fitting<a id="15129"></a> to<a id="15650"></a> create an artificial sky with<a id="15459"></a> exactly the same color<a id="15108"></a> characteristics as the blue sky in the cottage picture, but without the wire. This is possible because each row of<a id="15826"></a> the image<a id="15755"></a> has so much data<a id="15554"></a> that define its color<a id="15109"></a> profile that the presence of<a id="15827"></a> the wire is a minor amount of<a id="15828"></a> "noise." We merely need to<a id="15651"></a> process each row of<a id="15829"></a> the sky, fit a second-order curve<a id="15733"></a> to<a id="15652"></a> it, interpolate a new sky row from<a id="15257"></a> the parameters<a id="16027"></a>, and<a id="15345"></a> replace the row in the sky. The code to<a id="15653"></a> perform this is shown in Listing 15.5.</p>
          <div id="listing_15_5" class="listing">#listing_15_5#</div>
          <div class="card-deck">
              <div class="card">
                  <img src="..\Images\sky.jpg" alt="Figure 15.8" class="fig card-image">
                  <p class="figure-name card-title">Figure<a id="16084"></a> 15.8: Updated Sky</p>
              </div>
              <div class="card">
                  <img src="..\Images\newnewVienna.jpg" alt="Figure 15.9" class="fig card-image">
                  <p class="figure-name card-title">Figure<a id="16085"></a> 15.9: Updated Picture</p>
              </div>
          </div>
          <p>Figure<a id="16086"></a> 15.8 shows the cottage picture updated with<a id="15460"></a> a smooth sky. Notice that the chimneys have been smeared off, but this does not affect the part of<a id="15830"></a> the sky needed for<a id="16053"></a> the Vienna picture. This synthetic sky is ready to<a id="15654"></a> be used in the script to<a id="15655"></a> replace the original sky (see Listing 13.1). Figure<a id="16087"></a> 15.9 shows the Vienna picture with<a id="15461"></a> a clear<a id="15105"></a> blue synthetic sky.</p>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="3" data-sect-name="Numerical Integration">
    <!-- Numerical Integration -->
    <h2 id="15_3">15.3 Numerical Integration</h2>
    <div class="container clearfix">
        <div class="card float-right">
          <img src="..\Images\Fig_15_10.JPG" alt="Figure 15.10" class="fig card-image">
          <p class="figure-name card-title">Figure<a id="16088"></a> 15.10: Integration of<a id="15831"></a> \(f(x)\)</p>
        </div>
        <p>The integral<a id="15264"></a> of<a id="15832"></a> a function<a id="15201"></a> \(f(x)\) over the interval \([a, b]\) is defined<a id="15307"></a> to<a id="15656"></a> be the area under the curve<a id="15734"></a> of<a id="15833"></a> \(f(x)\) between \(a\) and<a id="15346"></a> \(b\), as shown in Figure<a id="16089"></a> 15.10. If the value<a id="16009"></a> of<a id="15834"></a> this integral<a id="15265"></a> is \(K\), the notation to<a id="15657"></a> represent the integral<a id="15266"></a> of<a id="15835"></a> \(f(x)\) between \(a\) and<a id="15347"></a> \(b\) is as follows:</p>
        $$ K = \int\limits_a^b f(x) dx $$
        <p>For many functions<a id="15986"></a>, this integral<a id="15267"></a> can be computed analytically. However, for<a id="16054"></a> a number of<a id="15836"></a> functions<a id="15987"></a>, this is not possible, and<a id="15348"></a> we require a numerical<a id="15715"></a> technique to<a id="15658"></a> estimate its value<a id="16010"></a>. We look at two different scenarios:</p>
        <ul>
            <li>Two different techniques for<a id="16055"></a> computing the complete integral<a id="15268"></a> with<a id="15462"></a> various degrees of<a id="15837"></a> accuracy</li>
            <li>A technique for<a id="16056"></a> evaluating the continuous integral<a id="15269"></a> of<a id="15838"></a> \(f(x)\)</li>
        </ul>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Determination of the Complete Integral">
      <!-- Determination of the Complete Integral -->
      <h3 id="15_3_1">15.3.1 Determination of<a id="15839"></a> the Complete Integral</h3>
      <div class="container clearfix">
          <div class="card float-right">
              <img src="..\Images\Fig_15_11.PNG" alt="Figure 15.11" class="fig card-image">
              <p class="figure-name card-title">Figure<a id="16090"></a> 15.11: Discrete Integration</p>
          </div>
          <p>Two of<a id="15840"></a> the most common numerical<a id="15716"></a> integration<a id="15409"></a> techniques estimate \(f(x)\) either with<a id="15463"></a> a set of<a id="15841"></a> piecewise linear<a id="15446"></a> functions<a id="15988"></a> or with<a id="15464"></a> a set of<a id="15842"></a> piecewise parabolic<a id="15750"></a> functions<a id="15989"></a>. If we use piecewise linear<a id="15447"></a> functions<a id="15990"></a>, we can compute the area of<a id="15843"></a> the trapezoids that compose the area under the piecewise linear<a id="15448"></a> function<a id="15202"></a>. This technique is called the <b>trapezoidal<a id="15993"></a> rule</b>. If we use piecewise quadratic functions<a id="15991"></a>, we can compute and<a id="15349"></a> add the areas of<a id="15844"></a> these components. This technique is called <b>Simpson's rule</b>.</p>
      </div>
      <!-- Trapezoidal -->
          <p><b>The Trapezoidal Rule</b> If we represent the area under a curve<a id="15735"></a> by trapezoids, as illustrated in Figure<a id="16091"></a> 15.11, and<a id="15350"></a> if the interval \([a, b]\) is divided into \(n\) equal<a id="15179"></a> sections, then the area can be approximated by the following formula:</p>
          $$ K_t = {\frac{b - a}{2n}}{(f(x_0) + 2f(x_1) + 2f(x_2) + ... + 2f(x_{n-1} + f(x_n))} $$
          <p>where the \(x_i\) values  represent  the  end<a id="15169"></a>  points  of<a id="15845"></a>  the  trapezoids  and<a id="15351"></a> where \(x_0 = a\) and<a id="15352"></a> \(x_n = b\). Listing 15.6 shows a function<a id="15203"></a> that computes this integral<a id="15270"></a>.</p>
          <div id="listing_15_6" class="listing">#listing_15_6#</div>
      <!-- Simpsons -->
          <p><b>Simpson's Rule</b> If the area under a curve<a id="15736"></a> is represented by areas under quadratic sections of<a id="15846"></a> a curve<a id="15737"></a>, and<a id="15353"></a> if the interval \([a, b]\) is divided into \(2n\) equal<a id="15180"></a> sections, then the area can be approximated by the formula (Simpson's rule):
          $$ K_s={\frac{h}{3}}{(f(x_0)+4f(x_1)+2f(x_2)+4f(x_3)+...+2f(x_{2n-2})+4f(x_{2n-1})+f(x_{2n}))} $$
          <br>where the \(x_i\) values represent the end<a id="15170"></a> points of<a id="15847"></a> the sections, \(x_0 = a\) and<a id="15354"></a> \(x_{2n} = b\), and<a id="15355"></a> \(h = (b-a) / (2n)\). Listing 15.7 shows a function<a id="15204"></a> to<a id="15659"></a> integrate using Simpson's rule.</p>
          <div id="listing_15_7" class="listing">#listing_15_7#</div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Continuous Integration Problems">
      <!-- Continuous Integration Problems -->
      <h3 id="15_3_2">15.3.2 Continuous Integration Problems</h3>
      <div class="container">
          <p>We now consider a slightly different scenario. If \(f(t)\) is the rate of<a id="15848"></a> change of<a id="15849"></a> \(F(t)\) defined<a id="15308"></a> as \(f(t) = dF(t)/dt\), then given \(f(t)\), we can find the indefinite integral<a id="15271"></a> \(F(t)\) according to<a id="15660"></a> the following formula:</p>
          $$ F(t) = \int\limits_{t_0}^t f(x) dt $$
          <p>For example<a id="15968"></a>, we might be given data<a id="15555"></a> that represent the velocity of<a id="15850"></a> a sounding rocket, such as is plotted in Figure<a id="16092"></a> 15.12. We need to<a id="15661"></a> approximate the altitude of<a id="15851"></a> the rocket over time by integrating this data<a id="15556"></a>.</p>
          <p>To perform this kind of<a id="15852"></a> integral<a id="15272"></a>, the MATLAB<a id="15497"></a> language provides the function<a id="15205"></a> <code>F = cumsum(<a id="15121"></a>f)</code> that computes the cumulative sum of<a id="15853"></a> the vector <code>f</code>. The result, <code>F</code>, is a vector of<a id="15854"></a> the same length as <code>f</code> where <code>F(i)</code> is the sum of<a id="15855"></a> <code>f(1:i)</code>. If the data<a id="15557"></a> values, <code>f</code>, are regularly sampled at a rate <code>&<a id="15753"></a>Delta;t</code>, the integral<a id="15273"></a> is found by multiplying <code>cumsum(<a id="15122"></a>f)</code> by the time interval, <code>&<a id="15754"></a>Delta;t</code>. If they are not regularly sampled, you have to<a id="15662"></a> compute the <code>cumsum(<a id="15123"></a>...)</code> of<a id="15856"></a> the scalar<a id="15964"></a> product of<a id="15857"></a> <code>f</code> and<a id="15356"></a> the vector of<a id="15858"></a> time differences.</p>
          <p>To compute a more accurate integral<a id="15274"></a>, especially if the samples are not regularly spaced along the independent axis, MATLAB<a id="15498"></a> also provides the function<a id="15206"></a> <code>cumtrapz(<a id="15126"></a>t, f)</code> where <code>t</code> is the independent parameter and<a id="15357"></a> <code>f</code> the dependent parameter. The function<a id="15207"></a> uses trapezoidal<a id="15994"></a> integration<a id="15410"></a> to<a id="15663"></a> calculate the indefinite integral<a id="15275"></a> <code>F(t)</code>.</p>
          <div class="card-deck">
              <div class="card">
                  <img src="..\Images\Fig_15_12.PNG" alt="Figure 15.12" class="fig card-image">
                  <p class="figure-name card-title">Figure<a id="16093"></a> 15.12: Velocity of<a id="15859"></a> a rocket</p>
              </div>
              <div class="card">
                  <img src="..\Images\Fig_15_13.PNG" alt="Figure 15.13" class="fig card-image">
                  <p class="figure-name card-title">Figure<a id="16094"></a> 15.13: Rocket velocity and<a id="15358"></a> amplitude</p>
              </div>
          </div>
          <p>Listing 15.8 shows the function<a id="15208"></a> that computes this continuous integral<a id="15276"></a>, making use of<a id="15860"></a> <code>cumsum(<a id="15124"></a>...)</code>.</p>
          <p>Figure<a id="16095"></a> 15.13 shows the resulting plot. The results displayed in the Command<a id="16067"></a> window are:</p>
          <p><code>cumsum height: 1848.5 <br>trapezoidal<a id="15995"></a> height: 1811.85 <br>Simpson's Rule height: 1811.14</code></p>
          <p>The continuous integration<a id="15411"></a> produces results within 2% of<a id="15861"></a> the "accurate" integration<a id="15412"></a> techniques.</p>
          <div id="listing_15_8" class="listing">#listing_15_8#</div>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="4" data-sect-name="Numerical Differentiation">
    <!-- Numerical Differentiation -->
    <h2 id="15_4">15.4  Numerical Differentiation</h2>
    <div class="container">
        <p>The derivative<a id="15237"></a> of<a id="15862"></a> a function<a id="15209"></a> \(f(x)\) is defined<a id="15309"></a> to<a id="15664"></a> be a function<a id="15210"></a> \(f'(x)\) that is equal<a id="15181"></a> to<a id="15665"></a> the rate of<a id="15863"></a> change of<a id="15864"></a> \(f(x)\) with<a id="15465"></a> respect to<a id="15666"></a> \(x\). The derivative<a id="15238"></a> can be expressed as a ratio, with<a id="15466"></a> the change in \(f(x)\) indicated by \(df(x)\) and<a id="15359"></a> the change in \(x\) indicated by \(dx\), giving us the following:</p>
        $$ f'(x) = \frac{df(x)}{dx} $$
        <p>There are many physical<a id="15175"></a> processes for<a id="16057"></a> which we want to<a id="15667"></a> measure the rate of<a id="15865"></a> change of<a id="15866"></a> a variable<a id="16031"></a>. For example<a id="15969"></a>, velocity is the rate of<a id="15867"></a> change of<a id="15868"></a> position (as in meters per second), and<a id="15360"></a> acceleration is the rate of<a id="15869"></a> change of<a id="15870"></a> velocity (as in meters per second squared).</p> <p>The derivative<a id="15239"></a> \(f'(x)\) can be described graphically as the slope of<a id="15871"></a> the function<a id="15211"></a> \(f(x)\), which is defined<a id="15310"></a> to<a id="15668"></a> be the slope of<a id="15872"></a> the tangent line to<a id="15669"></a> the function<a id="15212"></a> at the specified point. Thus, the value<a id="16011"></a> of<a id="15873"></a> \(f'(x)\) at the point \(a\) is \(f'(a)\), and<a id="15361"></a> it is equal<a id="15182"></a> to<a id="15670"></a> the slope of<a id="15874"></a> the tangent line at the point \(a\).</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Difference Expressions">
      <!-- Difference Expressions -->
      <h3 id="15_4_1">15.4.1	Difference Expressions</h3>
      <div class="container">
          <p>In general, numerical<a id="15717"></a> differentiation<a id="15165"></a> techniques estimate the derivative<a id="15240"></a> of<a id="15875"></a> a function<a id="15213"></a> at a point \(x_k\) by approximating the slope of<a id="15876"></a> the tangent line at \(x_k\) using values of<a id="15877"></a> the function<a id="15214"></a> at points near \(x_k\). The approximation of<a id="15878"></a> the slope of<a id="15879"></a> the tangent line can be done in several ways, as shown in Figure<a id="16096"></a> 15.14.</p>
          <ul>
              <li><i>Backward Difference:</i> Figure<a id="16097"></a> 15.14(a) assumes that the derivative<a id="15241"></a> at \(x_k\) is estimated by computing the slope of<a id="15880"></a> the line between \(f(k_{x - 1})\) and<a id="15362"></a> \(f(x_k)\)</li>
              <li><i>Forward Difference:</i> Figure<a id="16098"></a> 15.14(b) assumes that the derivative<a id="15242"></a> at \(x_k\) is estimated by computing the slope of<a id="15881"></a> the line between \(f(x_k\) and<a id="15363"></a> \(f(x_{k + 1}\)</li>
              <li><i>Central Difference:</i> Figure<a id="16099"></a> 15.14(c) assumes that the derivative<a id="15243"></a> at \(x_k\) is estimated by computing the slope of<a id="15882"></a> the line between \(f(x_{k-1})\) and<a id="15364"></a> \(f(x_{k+1})\)</li>
          </ul>
          <p>The quality of<a id="15883"></a> all of<a id="15884"></a> these types<a id="15317"></a> of<a id="15885"></a> derivative<a id="15244"></a> computations depends on<a id="15485"></a> the distance between the points used to<a id="15671"></a> estimate the derivative<a id="15245"></a>; the estimate of<a id="15886"></a> the derivative<a id="15246"></a> improves as the distance between the two points decreases.</p>
          <div class="card">
            <img src="..\Images\Fig_15_14.PNG" alt="Figure 15.14" class="fig-wide card-image">
            <p class="figure-name card-title">Figure<a id="16100"></a> 15.14: Difference Techniques</p>
          </div>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="5" data-sect-name="Analytical Operations">
    <!-- Analytical Operations -->
    <h2 id="15_5">15.5 Analytical Operations</h2>
    <div class="container">
        <p>We return to<a id="15672"></a> the discussion of<a id="15887"></a> fitting a polynomial<a id="15145"></a> to<a id="15673"></a> some raw data<a id="15558"></a> in Section 15.2.2. We approximated a polynomial<a id="15146"></a> fit with<a id="15467"></a> the following expression:</p>
        $$ f(x) = a_0{x^n} + a_1{x^{n-1}} + a_2{x^{n-2}} + a_3{x^{n-3}} + ... + a_{n-1}{x} + a_n $$
        <p>Since this is an analytical<a id="15720"></a> expression, even if some or all of<a id="15888"></a> the coefficients are complex, we can integrate it to<a id="15674"></a> estimate the integral<a id="15277"></a> of<a id="15889"></a> the raw data<a id="15559"></a> and<a id="15365"></a> differentiate it to<a id="15675"></a> estimate the slope of<a id="15890"></a> the raw data<a id="15560"></a>.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Analytical Integration">
      <!-- Analytical Integration -->
      <h3 id="15_5_1">15.5.1	Analytical  Integration</h3>
      <div class="container">
          <p>The expression for<a id="16058"></a> F(x), the integral<a id="15278"></a> of<a id="15891"></a> f(x) with<a id="15468"></a> respect to<a id="15676"></a> x, is given by:</p>
          $$ F(x) = a_0{x^{n+1}}/{n+1} + a_1{x^n}/n + a_2{x^{n-1}}/{n-1} + a_3{x^{n-2}}/{n-2} + ... + a_{n-1}{x^2}/2 + a_n{x} + K $$
          <p>Note that an arbitrary constant, K, is always required for<a id="16059"></a> analytical<a id="15721"></a> integration<a id="15413"></a> representing the starting value<a id="16012"></a> F(0).</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Analytical Differentiation">
      <!-- Analytical Differentiation -->
      <h3 id="15_5_2">15.5.2	Analytical Differentiation</h3>
      <div class="container">
          <p>The expression for<a id="16060"></a> fâ€™(x), the integral<a id="15279"></a> of<a id="15892"></a> f(x) with<a id="15469"></a> respect to<a id="15677"></a> x, is given by:</p>
          $$ f'(x) = na_0{x^{n-1}} + (n-1)a_1{x^{n-2}} + (n-2)a_2{x^{n-3}} + (n-3)a_3{x^{n-4}} + a_{n-1} $$
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="6" data-sect-name="Implementation">
    <!-- Implementation -->
    <h2 id="15_6">15.6  Implementation</h2>
    <div class="container clearfix">
        <div class="float-sm-right card">
            <img src="..\Images\Fig_15_15.PNG" alt="Figure 15.15" class="fig card-image">
            <p class="figure-name card-title">Figure<a id="16101"></a> 15.15: Differentiation</p>
        </div>
        <p>To facilitate differentiation<a id="15166"></a>, the MATLAB<a id="15499"></a> language defines the <code>diff(<a id="15158"></a>...)</code> function<a id="15215"></a>, which computes differences between adjacent values in a vector, generating a new vector with<a id="15470"></a> one less<a id="15452"></a> value<a id="16013"></a> than the original:</p>
        <p><code>dv = diff(<a id="15159"></a>V) returns [V(2)-V(1), V(3)-V(2), ..., V(n)-V(n-1)]</code></p>
        <p>An approximate derivative<a id="15247"></a> \(dy/dx\) can be computed by using <code>diff(<a id="15160"></a>y)./ diff(<a id="15161"></a>x)</code>. Depending on<a id="15486"></a> the application, this can be used to<a id="15678"></a> compute the forward<a id="15186"></a>, backward, or central difference<a id="15104"></a> approximation. The solution to<a id="15679"></a> the forward<a id="15187"></a> difference is shown in Listing 15.9.</p>
        <p>The results are shown in Figure<a id="16102"></a> 15.15. Since the original data<a id="15561"></a> were generated from<a id="15258"></a> a series of<a id="15893"></a> coefficients, we could also plot the exact value<a id="16014"></a> of<a id="15894"></a> the slope using the result of<a id="15895"></a> Section 15.5.2.</p>
    </div>
    <div id="listing_15_9" class="listing">#listing_15_9#</div>
  </div>

  <div class="chp-section" data-sect-num="7" data-sect-name="Engineering Example - Shaping the Synthesizer Notes">
    <!-- Engineering Example -->
    <h2 id="15_7">15.7  Engineering Example - Shaping the Synthesizer Notes</h2>
    <div class="container clearfix">
        <div class="card float-sm-right">
          <img src="..\Images\Fig_15_16.PNG" alt="Figure 15.16" class="fig card-image">
          <p class="figure-name card-title">Figure<a id="16103"></a> 15.16: Piano note time history</p>
        </div>
        <p>As discussed in Chapter 14, we can synthesize the frequency<a id="15747"></a> content of<a id="15896"></a> an instrument by selecting an appropriate number of<a id="15897"></a> coefficients from<a id="15259"></a> the energy spectrum, multiplying each by an appropriate sine or cosine wave and<a id="15366"></a> summing the results. This gives a time trace with<a id="15471"></a> constant amplitude, which is fine for<a id="16061"></a> an instrument like a trumpet, but notes played on<a id="15487"></a> other instruments like a piano have a very non-linear<a id="15449"></a> time profile as shown in Figure<a id="16104"></a> 15.16. That same figure has two overlays indicating how to<a id="15680"></a> develop the decay profile typical of<a id="15898"></a> a piano note. First, we choose a modest number of<a id="15899"></a> samples that describe the envelope of<a id="15900"></a> the sound<a id="15975"></a> (marked by red * symbols). Then, we perform a high-order curve<a id="15738"></a> fit on<a id="15488"></a> that data<a id="15562"></a> and<a id="15367"></a> check its accuracy by plotting it as the solid line on<a id="15489"></a> the same figure.</p>
        <p>To demonstrate the essence of<a id="15901"></a> this capability, we begin with<a id="15472"></a> Listing 14.6 from<a id="15260"></a> Chapter 14, reading<a id="15314"></a> the file 'instr_piano.wav<a id="16035"></a>' instead of<a id="15902"></a> 'instr_tpt.wav<a id="16036"></a>.' Now, we insert the code in Listing 15.10 in place of<a id="15903"></a> the last two lines of<a id="15904"></a> Listing 14.6.</p>
    </div>
        <div id="listing_15_10" class="listing">#listing_15_10#</div>
        <p>In conclusion, with<a id="15473"></a> these two engineering<a id="15173"></a> examples<a id="15312"></a>, we have shown how the essence of<a id="15905"></a> the sound<a id="15976"></a> of<a id="15906"></a> a musical<a id="15586"></a> instrument can be derived from<a id="15261"></a> the actual sound<a id="15977"></a> of<a id="15907"></a> an instrument and<a id="15368"></a> captured as a small set of<a id="15908"></a> complex amplitudes with<a id="15474"></a> their frequency<a id="15748"></a> value<a id="16015"></a> and<a id="15369"></a> an even smaller set of<a id="15909"></a> real coefficients of<a id="15910"></a> the function<a id="15216"></a> that multiplies the amplitude over time.</p>
        <p>To construct from<a id="15262"></a> these data<a id="15563"></a> a real music<a id="15174"></a> synthesizer<a id="15176"></a>, one need only to<a id="15681"></a> detect that a keyboard note has been pressed, determine the required frequency<a id="15749"></a>,<a id="15188"></a> and<a id="15370"></a> play the synthesized note until the key is released. If the synthesizer<a id="15177"></a> is equipped to<a id="15682"></a> specify that the sustain pedal is depressed, the piano sound<a id="15978"></a> should not be cut off, but allowed to<a id="15683"></a> fade into silence.</p>
  </div>

  <!-- Chapter Summary -->
  <h2 id="15_Chapter_Summary">Chapter Summary</h2>
  <div class="container">
      <p><i>In this chapter, we saw the implementations of<a id="15911"></a> four common numerical<a id="15718"></a> techniques:</i></p>
      <ul>
          <li>We can estimate data<a id="15564"></a> points between given data<a id="15565"></a> values using linear<a id="15450"></a> <code>(interp1(...)/interp2(<a id="15289"></a>...)/interp3(<a id="15291"></a>...))</code> or spline(<a id="15302"></a>...) interpolation<a id="15433"></a></li>
          <li>We can smooth noisy data<a id="15566"></a> by fitting polynomial<a id="15147"></a> curves of<a id="15912"></a> suitable order to<a id="15684"></a> the raw data<a id="15567"></a></li>
          <li>Given, for<a id="16062"></a> example<a id="15970"></a>, the velocity of<a id="15913"></a> an object over time, we can determine its position by integrating using <code>cumtrapz(<a id="15127"></a>...)</code> or <code>cumsum(<a id="15125"></a>...)</code></li>
          <li>We can differentiate to<a id="15685"></a> generate its acceleration</li>
      </ul>
  </div>
<h2>Self Test</h2>
<div class="container">

Use the following questions to<a id="15686"></a> check your understanding of<a id="15914"></a> the material in this
chapter:
<h3>True or False</h3>
<ol>
<li>All MATLAB<a id="15500"></a> functions<a id="15992"></a> permit extrapolation<a id="15185"></a> beyond the limits of<a id="15915"></a>
the original independent variable<a id="16032"></a>.</li>
          <li>The cubic<a id="15120"></a> spline is a series of<a id="15916"></a> parametric<a id="15751"></a> curves.</li>
          <li>You cannot extrapolate the equations generated by curve<a id="15739"></a> fitting<a id="15130"></a>.</li>
          <li>You should always match the order of<a id="15917"></a> a parametric<a id="15752"></a> curve<a id="15740"></a> fit to<a id="15687"></a> the
underlying physics<a id="15980"></a> of<a id="15918"></a> the data<a id="15568"></a>.</li>
          <li>Simpsonâ€™s<a id="15974"></a> rule is more accurate than the trapezoidal<a id="15996"></a> rule for<a id="16063"></a>
integrating a function<a id="15217"></a>.</li>
          <li>Numerical differentiation<a id="15167"></a> produces a vector that is the same length
as the original vector.</li>
</ol>
<h3>Fill in the Blanks</h3>
<ol>
<li>___________ is the technique by which we estimate a variable<a id="16033"></a>â€™s
value<a id="16016"></a> between known values.</li>
          <li>Nth-order polynomial<a id="15148"></a> regression determines the ____________ of<a id="15919"></a>
order n that minimize the ______________ between the line and<a id="15371"></a> the
data<a id="15569"></a> points.</li>
          <li>The ___________________makes the slope at x(k) the ______________
of<a id="15920"></a> the line between x(k-1) and<a id="15372"></a> x(k+1).</li>
          <li>To compute the continuous integral<a id="15280"></a> of<a id="15921"></a> a data<a id="15570"></a> set that is not regularly
sampled, you have to<a id="15688"></a> compute the _________________ of<a id="15922"></a> the
_______________ of<a id="15923"></a> ________________ and<a id="15373"></a> __________________.</li>
          <li>If a(n) ____________ is defined<a id="15311"></a> by its polynomial<a id="15149"></a> coefficients, you
can integrate or differentiate it by _______________ the vector of<a id="15924"></a>
coefficients.</li>
</ol>

<h3>Programming Projects</h3>
<ol>
<li>Do the following basic exercises with<a id="15475"></a> numerical<a id="15719"></a> methods.
<ol type="a">
<li>Define two vectors xi and<a id="15374"></a> yi of<a id="15925"></a> the same length where the xi
values are monotonically increasing and<a id="15375"></a> the yi values are
somehow related to<a id="15689"></a> the xi values. Then define a new vector x
with<a id="15476"></a> closer spacing than xi and<a id="15376"></a> extending below and<a id="15377"></a> above the
range of<a id="15926"></a> xi . Find the y values corresponding to<a id="15690"></a> the x values in xi
by linear<a id="15451"></a> interpolation<a id="15434"></a>. On the same figure, plot the original yi
vs. xi as red circles, and<a id="15378"></a> y vs. x as a black line. What do you
observe about the visible range of<a id="15927"></a> the x values?</li>
          <li>Repeat the exercise in part a using the spline(<a id="15303"></a>...) function<a id="15218"></a> to<a id="15691"></a>
interpolate. Explain the difference in the range of<a id="15928"></a> the resulting y
vs. x plot.</li>
          <li>Use polyfit(<a id="15297"></a>...) to<a id="15692"></a> find the coefficients of<a id="15929"></a> the third-order
polynomial<a id="15150"></a> that best fits the points represented by vectors xi and<a id="15379"></a>
yi and<a id="15380"></a> then use polyval(<a id="15299"></a>...) to<a id="15693"></a> evaluate that curve<a id="15741"></a> at the x points.
As before, plot yi vs. xi as red circles and<a id="15381"></a> y vs. x as a black line.</li>
          <li>Approximate the derivative<a id="15248"></a>,<a id="15157"></a> dxy = dy/dx, for<a id="16064"></a> the vectors xi and<a id="15382"></a>
yi using the diff(<a id="15162"></a>...) function<a id="15219"></a> and<a id="15383"></a> plot yi vs. xi . Since
diff(<a id="15163"></a>...) reduces the length of<a id="15930"></a> the vector by one, you will have
to<a id="15694"></a> plot dxy vs. either xi(1:end<a id="15171"></a>-1), xi(2:end<a id="15172"></a>) or compute xm , the
mid-points of<a id="15931"></a> xi.</li>
          <li>Find yp, the cumulative sum of<a id="15932"></a> the elements<a id="16034"></a> in dxy, and<a id="15384"></a> add this
to<a id="15695"></a> the plot of<a id="15933"></a> part d. With the exception of<a id="15934"></a> a constant offset, this
curve<a id="15742"></a> ought to<a id="15696"></a> track the original plot of<a id="15935"></a> yi vs. xi.</li>
          <li>Use cumtrapz to<a id="15697"></a> find the area under the curve<a id="15743"></a> represented by yp
vs. xi with<a id="15477"></a> the trapezoidal<a id="15997"></a> method of<a id="15936"></a> approximation. Compare
this result to<a id="15698"></a> the ending value<a id="16017"></a> of<a id="15937"></a> the yp curve<a id="15744"></a>.</li>
</ol>
          <li>Write a function<a id="15220"></a>, bestFit, that takes in a vector of<a id="15938"></a> x-coordinates and<a id="15385"></a>
a vector of<a id="15939"></a> y-coordinates. Your function<a id="15221"></a> should fit a polynomial<a id="15151"></a>
curve<a id="15745"></a> to<a id="15699"></a> the data<a id="15571"></a>. The degree of<a id="15940"></a> the polynomial<a id="15152"></a> should be the
smallest degree polynomial<a id="15153"></a> with<a id="15478"></a> an average error (the average of<a id="15941"></a>
the absolute value<a id="16018"></a> of<a id="15942"></a> the difference between the new y-coordinates
and<a id="15386"></a> the original y-coordinates) less<a id="15453"></a> than 2. Your function<a id="15222"></a> should
return:
<ol type="a">
<li>the vector of<a id="15943"></a> coefficients of<a id="15944"></a> your polynomial<a id="15154"></a></li>
          <li>the vector of<a id="15945"></a> new y-coordinates, which is the polynomial<a id="15155"></a>
evaluated at the original x-coordinates, and<a id="15387"></a></li>
          <li>the vector of<a id="15946"></a> the error magnitudes of<a id="15947"></a> your polynomial<a id="15156"></a>.
		  </ol>
Write a test program to<a id="15700"></a> provide reasonable data<a id="15572"></a> to<a id="15701"></a> your function<a id="15223"></a>
and<a id="15388"></a> plot the original data<a id="15573"></a> (in blue), the curve<a id="15746"></a>-fitted data<a id="15574"></a> (in green),
and<a id="15389"></a> the error (in red) on<a id="15490"></a> one figure. Title your plot and<a id="15390"></a> label your
axes accordingly, including a legend.</li>
          <li>You have been approached by the Rambling Wreck club to<a id="15702"></a> test the
performance of<a id="15948"></a> the Rambling Wreck. You are provided with<a id="15479"></a> the test
results of<a id="15949"></a> the car for<a id="16065"></a> 10 trial runs in the form of<a id="15950"></a> a vector d that
contains the displacement of<a id="15951"></a> the car from<a id="15263"></a> the origin at that second.
The first element is the displacement at the 0th second, the second
element is the displacement at the 1st second, and<a id="15391"></a> so on<a id="15491"></a>. Write a
script called testWreck that displays a plot of<a id="15952"></a> the speed of<a id="15953"></a> the
Rambling Wreck over time during the test run. You could test your
script using:
d = [0 20 35 50 60 55 30 25 15 5];.</li>
          <li>Engineers often use tabulated data<a id="15575"></a> for<a id="16066"></a> various calculations. An
important method that any good engineer should be able to<a id="15703"></a> apply
to<a id="15704"></a> tabulated data<a id="15576"></a> is interpolation<a id="15435"></a>. In thermodynamics, the properties
of<a id="15954"></a> a gas can be known when two of<a id="15955"></a> its properties have been fixed.
You are required to<a id="15705"></a> come up with<a id="15480"></a> a continuous function<a id="15224"></a> being given
the tabulated data<a id="15577"></a> below measured where the pressure is 0.10 MPa:
<table>
<tr><th>Temperature (deg C)</th><th>Specific Volume (cu meters/Kg)</th></tr>
<tr><td>99.63</td><td>1.694</td></tr>
<tr><td>100</td><td>1.696</td></tr>
<tr><td>120</td><td>1.793</td></tr>
<tr><td>160</td><td>1.984</td></tr>
<tr><td>200</td><td>2.172</td></tr>
<tr><td>240</td><td>2.359</td></tr>
<tr><td>280</td><td>2.546</td></tr>
<tr><td>320</td><td>2.732</td></tr>
<tr><td>360</td><td>2.917</td></tr>
<tr><td>400</td><td>3.103</td></tr>
<tr><td>440</td><td>3.288</td></tr>
<tr><td>500</td><td>3.565</td></tr>
</table>
Write a function<a id="15225"></a> called lookup that consumes three parameters<a id="16028"></a>: the
above table in an array<a id="15100"></a>, a number value<a id="16019"></a>, and<a id="15392"></a> a logical<a id="15101"></a> control value<a id="16020"></a>
getTemp. If getTemp is true<a id="15315"></a>, the function<a id="15226"></a> interpolates the value<a id="16021"></a> as a
specific volume and<a id="15393"></a> returns the corresponding temperature.
Otherwise, it interpolates the value<a id="16022"></a> as a temperature and<a id="15394"></a> returns the
corresponding specific volume.<br>
Your function<a id="15227"></a> must not extrapolate the data<a id="15578"></a> (i.e., it should return NaN<a id="15589"></a> 
if the user<a id="15581"></a> tries to<a id="15706"></a> obtain values
outside the range of<a id="15956"></a> the table values).</li>
          <li>Mathematically speaking, a critical point occurs when the derivative<a id="15249"></a>
of<a id="15957"></a> a function<a id="15228"></a> equals zero. It is possible that a local minimum<a id="15582"></a> or a
local maximum occurs at a critical point. A local minimum<a id="15583"></a> is a point
where the function<a id="15229"></a>'s value<a id="16023"></a> to<a id="15707"></a> the left and<a id="15395"></a> right of<a id="15958"></a> it is larger, and<a id="15396"></a> a
local maximum is a point where the function<a id="15230"></a>'s value<a id="16024"></a> to<a id="15708"></a> the left and<a id="15397"></a>
right of<a id="15959"></a> it is smaller. You are going to<a id="15709"></a> write a function<a id="15231"></a> that finds the
local minimum<a id="15584"></a> and<a id="15398"></a> maximum points of<a id="15960"></a> a set of<a id="15961"></a> data<a id="15579"></a>. Call the
function<a id="15232"></a> find_points . It should take in vectors of<a id="15962"></a> x and<a id="15399"></a> y values and<a id="15400"></a>
return two vectors. The first vector should contain the x values
where the minimum<a id="15585"></a> points occur, while<a id="16038"></a> the second vector should
contain the x values where the maximum points occur.<br>
For example<a id="15971"></a>:<br>
If x=linspace(<a id="15292"></a>-8,2,1000) and<a id="15401"></a> y=x.^2+6*x+3;<br>
[min_p max_p]=find_points(x,y) should return<br>
min_p = -3, max_p = []<br>
If x=linspace(<a id="15293"></a>-5,5,1000) and<a id="15402"></a> y=x.^3-12*x;<br>
[min_p max_p]=find_points(x,y) should return:<br>
min_p = 2, max_p = -2<br>
You should plot x and<a id="15403"></a> y to<a id="15710"></a> confirm the answers..</li>
          <li>Now that we used the derivative<a id="15250"></a> it only makes sense that you are
going to<a id="15711"></a> write a function<a id="15233"></a> that finds integrals. Call your function<a id="15234"></a>
find_integral<a id="15281"></a> . Your function<a id="15235"></a> should take in a vector of<a id="15963"></a> x and<a id="15404"></a> y
values as Problem 15.5 does and<a id="15405"></a> should plot the integral<a id="15282"></a> and<a id="15406"></a> also
return the total area under the function<a id="15236"></a>. You are to<a id="15712"></a> use the
trapezoidal<a id="15998"></a> rule to<a id="15713"></a> find the integrals.<br>
For example<a id="15972"></a>:<br>
If x=linspace(<a id="15294"></a>0,5,1000); and<a id="15407"></a> y=2*x+5;<br>
find_integral(x,y) should return 50.0000<br>
 
</ol>
</div>
</div>


</body>
</html>


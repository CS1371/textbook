<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN"> 
<html> 
<head> 
<title>11_Plotting</title> 
<link rel="stylesheet" href="styles/styles.css" /> 
<script async src="./javascript/index.js"></script> 
</head> 
<body bgcolor="#ffffff"> 
<h1 align="center">Chapter 11: Plotting</h1> 

<table align="center"> 
<tbody> 
<tr> 
<td><a href="10_Problem_Solving.htm">previous</a></td> 
<td><a href="Contents.htm">home</a></td> 
<td><a href="12_Matrices.htm">next</a></td> 
</tr> 
</tbody> 
</table>
<ul>
<li><a href="#11_1">11.1	Plotting in General</a>
<ul>
    <li><a href="#11_1_1">11.1.1	A Figure—The Plot Container</a>
    <li><a href="#11_1_2">11.1.2	Simple Functions for Enhancing Plots</a>
    <li><a href="#11_1_3">11.1.3	Multiple Plots on One Figure— Subplots</a>
    <li><a href="#11_1_4">11.1.4	Manually Editing Plots</a>
</ul>
<li><a href="#11_2">11.2	2-D Plotting</a>
<ul>
    <li><a href="#11_2_1">11.2.1	Simple Plots</a>
    <li><a href="#11_2_2">11.2.2	Plot Options</a>
    <li><a href="#11_2_3">11.2.3	Parametric Plots</a>
    <li><a href="#11_2_4">11.2.4	Other 2-D Plot Capabilities</a>
</ul>
<li><a href="#11_3">11.3	3-D Plotting</a>
<ul>
    <li><a href="#11_3_1">11.3.1	Linear 3-D Plots</a>
    <li><a href="#11_3_2">11.3.2	Linear Parametric 3-D Plots</a>
    <li><a href="#11_3_3">11.3.3	Other 3-D Plot Capabilities</a>
</ul>
<li><a href="#11_4">11.4	Surface Plots</a>
<ul>
    <li><a href="#11_4_1">11.4.1	Basic Capabilities</a>
    <li><a href="#11_4_2">11.4.2	Simple Exercises</a>
    <li><a href="#11_4_3">11.4.3	3-D Parametric Surfaces</a>
    <li><a href="#11_4_4">11.4.4	Bodies of Rotation</a>
    <li><a href="#11_4_5">11.4.5	Other 3-D Surface Plot Capabilities</a>
    <li><a href="#11_4_6">11.4.6	Assembling Compound Surfaces</a>
</ul>
<li><a href="#11_5">11.5	Manipulating Plotted Data</a>
<li><a href="#11_6">11.6	Engineering Example— Visualizing Geographic Data</a>
</ul>
<h1>Chapter Objectives</h1>

This chapter presents the principles and practice of plotting in the following forms: 

■ Basic two-dimensional (2-D) line plots 

■ 2-D parametric plots 

■ Three-dimensional (3-D) line and parametric plots 

■ Basic 3-D surface plots 

■ Parametric surface plots 

■ Bodies of rotation 

<h1>Introduction</h1>
 There is a much-quoted expression that “a picture is worth a thousand words,” and this is never more appropriate than when talking about data. In previous chapters, we used some simple plot commands to display data to illustrate its behavior. The capability of the MATLAB language to present data reaches far beyond ordinary data plotting, and far beyond the limited confines of a textbook. This chapter will present the fundamental concepts of the different forms in which data can be presented, but it leaves to the reader the challenge of exploring the full range of capabilities available. You only really discover the power inherent in the plotting capabilities of MATLAB when you have some unusual data to visualize.  
<h2><a name="11_1">11.1  Plotting in General</a></h2>
 Before considering the details of how each plotting mode works, we should set the context. In this section, we will discuss the general container for all graphical types, the figure, and some basic operations that apply to all figures—functions that enhance them, the ability to assemble subplots into a single figure, and the advisability of making manual changes to plots.  
<h3><a name="11_1_1">11.1.1	A Figure—The Plot Container</a></h3>
 The fundamental container for plotting is a figure. In a simple script, if you just start plotting data, figure number 1 is automatically generated to present the data. You can manage the figures by asserting the figure command. Each time figure is called, a new figure is made available, with the next higher figure number. If you use the form figure <number>, you can select a specific figure for the next plot.  To clear the current figure, put the key word clf in the header of your script. To remove all the figures, put the key phrase close all at the beginning of your script. The listing examples below will assume that each script begins with clear, clc, close all.  
<h3><a name="11_1_2">11.1.2	Simple Functions for Enhancing Plots</a></h3>
 We have already introduced plot(x, y), the basic function that creates a simple plot of x versus y. The following functions can be used to enhance any of the plots discussed in this chapter. Note that they enhance an existing plot; they should all be called after the fundamental function that creates a plot figure.  ■	axis <param> provides a rich set of tools for managing the appearance of the axes, including the following: •	tight reduces the axes to their smallest possible size •	equal sets the x and y scales to the same value •	square makes the plot figure of equal width and height •	off does not show the axes at all ■	axis([xl xu yl yu zl zu]) overrides the automatic computation of the axis values, forcing the x-axis to reach from xl to xu, the y-axis from yl to yu, and the z-axis from zl to zu. For 2-D plots, the z values should be omitted. ■	colormap <specification> establishes a sequence of colors, the color map, to be used under a number of circumstances to cycle through a series of colors automatically. The legal specification values are listed in Appendix A. ■	grid on puts a grid on the plot; grid off (the default) removes grid lines. ■	hold on holds the existing data on the figure to allow subsequent plotting calls to be added to the current figure without first erasing the existing plot; hold off (the default) redraws the current figure, erasing the previous contents. ■	legend(...) takes a cell array of strings, one for each of the multiple plots on a single figure, and creates a legend box. By default, that box appears in the top-right corner of the figure. However, this default can be overridden by explicitly specifying the location of the legend. See the help files for a complete discussion of the legend options. ■	shading <spec> defines the method for shading surfaces. See the help files for a complete discussion of the shading specification options. ■	text(x, y, {z,}, str) places the text provided at the specified (x, y) location on a 2-D plot, or at the (x, y, z) location on a 3-D plot. ■	title(...) places the text provided as the title of the current plot. ■	view(az, el) sets the angle from which to view a plot. The parameters are az, the azimuth, an angle measured in the horizontal plane, and el, the elevation, an angle measured upward from the horizontal. Both angles are specified in degrees. ■	xlabel(...) sets the string provided as the label for the x-axis. ■	ylabel(...) sets the string provided as the label for the y-axis. ■	zlabel(...) sets the string provided as the label for the z-axis. (As we will see, all plots actually have a third axis.)  
<h3><a name="11_1_3">11.1.3	Multiple Plots on One Figure—Subplots</a></h3>
 Within the current figure, you can place multiple plots with the subplot command, as shown in Figure 11.1. The function subplot(r, c, n) divides the current figure into r rows and c columns of equally spaced plot areas, and then establishes the nth of these (counting across the rows first) as the current figure. You do not have to draw in all of the areas you specify. Figure 11.1 was generated by the code shown in Listing 11.1. In Listing 11.1:  Line 1: close all closes all figures currently open. This command should always be present at the beginning of a script but will be omitted from the example listings that follow. Line 2: Specifies a suitable range of x values. Line 3: Sets the first subplot region. Line 4: This is the simple version of the plot(...) function introduced earlier, plotting x against y and automatically creating the axes, creating subplot 1, the plot in the top-left corner. Note that although in the figure seen here the line is gray, when you run the script, the line will appear in its default color, blue. Line 5: The title(...) function puts the specified string at the top of the plot as its title. Lines 6–8: Create subplot 2, the second plot on the first row. Lines 9–11: Create subplot 3, the first plot on the second row. Lines 12–14: Create subplot 4, the second plot on the second row. Lines 15–17: Create subplot 5, the first plot on the bottom row.  Lines 18–20: Create subplot 6, the second plot on the bottom row.  
<h3><a name="11_1_4">11.1.4	Manually Editing Plots</a></h3>
  When a figure has been created, you are free to manipulate many of its characteristics  by  using  its  menu items and tool bars. They provide the ability to resize the plot, change the view characteristics, and annotate it with legends, axis labels, lines, and text callouts.  
<h2><a name="11_2">11.2 2-D Plotting</a></h2>
 
<h3><a name="11_2_1">11.2.1 Simple Plots</a></h3>
 The basic function to use for 2-D plots is plot(...). The normal use of this function is to give it three parameters, plot(x, y, str), where x and y are vectors of the same length containing the x and y coordinates, respectively, and str is a string containing one or more optional line color and style control characters. A complete list of these control characters is included in Appendix A. If the vector x is omitted, MATLAB assumes that the x coordinates are 1:N, where N is the length of the y vector. If the str is omitted, the default line is solid blue. The MATLAB definition of this function also permits multiple (x, y, str) data sets in a single function call. It is always possible to produce the same result with multiple function calls in hold on mode.  Since we have already seen basic 2-D plotting at work, it should be sufficient to observe and comment on the simple example seen in Figure 11.2, generated by the code shown in Listing 11.2. In Listing 11.2: Line 1: Sets the range of x values. Line 2: Color specifications for the plots—red, green, blue, and black.  Lines 4–7: Plot x, x2, x3, and x4 with the above colors used in sequence. Lines 7–11: Add enhancements to the plot as noted above. Line 11: One of many possible parameters to the legend(...) function—this one forces its location to the lower-right corner of the figure, out of the way of the data.  
<h3><a name="11_2_2">11.2.2	Plot Options</a></h3>
 In addition to the plot enhancement tools listed in Section 11.1.2, the following capabilities are available.  ■	Setting line styles and symbols to mark the data points (details in Appendix A) ■	Using plotyy(...) to put a second axis on the right side of the figure ■	Obtaining logarithmic plots on the x-axis (semilogx(...)), y-axis (semilogy(...)), or both axes (loglog(...))  We strongly suggest that the reader experiment with these features and observe their effects.  
<h3><a name="11_2_3">11.2.3	Parametric Plots</a></h3>
 Plotting is not restricted to the situation where the data along one axis are the  independent  variable  and  that along   the   other   are   dependent. Parametric plots allow the variables on each axis to be dependent on a separate, independent variable. That independent variable will define a path on the plotting surface. Consider the plot shown in Figure 11.3, which presents   a   simple   exercise   in transforming a circle into an airfoil. It was generated using the code shown in Listing 11.3.  In Listing 11.3:  Line 1: The independent variable in this case is the angle th varying from 0 to 2p. Line 2: The particular transformation we use here requires a circle with a radius, r, slightly greater than 1 offset by a small distance, g, from the x-axis, passing through the point (−1, 0). Line 3: We compute the center of the circle passing through the point (−1, 0). Lines 4–5: A standard polar-to-Cartesian coordinate transformation computing the coordinates of the circle. Line 6: Plots the two dependent variables x and y with a red line. Line 7: Equalizes the axes and forces the circle to be drawn correctly. Line 8: Displays a grid on which to estimate specific values. Line 9: Here we want to add a second plot to the figure. Lines 10–11: The Joukowski transformation is easiest when expressed in complex terms: if z is the path around the required circle, w = z + 1/z traces a very credible looking airfoil shape. Line 12: Adds the plot of w, and reverts from the complex plane to plot the real and imaginary parts of the answer colored in black.  
<h3><a name="11_2_4">11.2.4	Other 2-D Plot Capabilities</a></h3>
 You can also create some more exotic plots that are not necessary to understand the basic principles of plotting, but are powerful methods for visualizing real data:  ■	bar(x, y) produces a bar graph with the values in y positioned at the horizontal locations in x. The options available can be studied with >> help bar. ■	barh(x, y) produces a bar graph with the values in y positioned at the horizontal locations in x. The options available can be studied with >> help barh. ■	fill(x,y,n) produces a filled polygon defined by the coordinates in x and y. The fill color is specified by indexing n into the color map. The options available can be studied with >> help fill. ■	hist(y, x) produces a histogram plot with the values in y counted into bins defined by x. The options available can be studied with >>help hist. ■	pie(y) makes a pie chart of the values in y. For more options, see >> help pie. ■	polar(th, y) makes a polar plot of the angle th (radians) with the radius r specified for each angle. For more options, see >> help polar.  
<h2><a name="11_3">11.3 3-D Plotting</a></h2>
 Before attacking the details of plotting in three dimensions, it should be noted that even 2-D plots are actually 3-D plots. Consider the picture shown in Figure 11.4, which was generated originally as the 2-D plot in Figure 11.3. By selecting the Rotate 3-D icon on the tool bar and moving the mouse on your figure, it becomes apparent that what appeared to be a 2-D plot in the x-y plane is really a 3-D plot in the x-y-z plane “suspended in space” at z = 0.  
<h3><a name="11_3_1">11.3.1 Linear 3-D Plots</a></h3>
 The simplest method of 3-D plotting is to extend our 2-D plots by adding a set of z values. In the same style as plot(...), plot3(x, y, z, str) consumes three vectors of equal size and connects the points defined by those vectors in 3-D space. The optional str specifies the color and/or line style. If the str is omitted, the default line is solid blue.  Figure 11.5 shows three curves plotted in three dimensions, using the script shown in Listing 11.4. Each plot is in the z-x plane: the red curve at y = 0, the blue curve at y = 0.5, and the green curve at y = 1.  In Listing 11.4: Line 1: Each plot has the same set of x values. Lines 2–3: The y values for the first plot are all 0. Lines 4–5: The second and third plots are sin(x) at different frequencies. Lines 6–7: The y values of the second and third plots are all 0.5 and 1, respectively. Lines 8–10: Plot and annotate the results.  
<h3><a name="11_3_2">11.3.2	Linear Parametric 3-D Plots</a></h3>
 We can generalize the concept of parametric plots to 3-D, as shown in Figure 11.6, in which the x, y, and z values are mappings of some linear parameter. On the left side, the spiral is an example of a 3-D plot where two of the dimensions, x and y, are dependent on the third, independent parameter. The independent parameter in this example is the rotation angle, p, varying from 0 to 10p (five complete revolutions). The x and y values are mapped as sin(u) and cos(u)—the classic means of describing a circle. The spiral effect is accomplished by plotting u on the z-axis.  The right half of Figure 11.6 illustrates a fully parametric plot, where the values of all three coordinates are mappings of an independent parameter, t. This particular example is a plot of the 3-D motion of a particle receiving random impulses in all three axes. Note the use of text anchored in x-y-z space to label points on the graph. The figure is drawn using Listing 11.5. In Listing 11.5: Lines 2–5: Draw the spiral plot with a simple plot3(...) call.  Lines 8–10: Define random velocity increments in x, y, and z. Lines 11–13: Integrate to compute the position in x, y, z space. There will be a full discussion of integration in Chapter 15. Lines 14–16: Plot and enhance the time history of the particle.  Lines 17 and 18: Add labels to indicate the start and end of the trace.  
<h3><a name="11_3_3">11.3.3	Other 3-D Plot Capabilities</a></h3>
 If you are using MATLAB, you can also create some more exotic 3-D plots that are not necessary to understand the basic principles of plotting, but are powerful methods for visualizing real data: ■	bar3(x, y) produces a bar graph with the values in y positioned at the horizontal locations in x. The options available can be studied with >> help bar3. ■	barh3(x, y) produces a bar graph with the values in y positioned at the horizontal locations in x. The options available can be studied with >> help barh. ■	pie3(y) makes a 3-D pie chart of the values in y. For more options, see >> help pie3.  
<h2><a name="11_4">11.4 Surface Plots</a></h2>
 In Section 11.3.2, we saw that data can be generated for all three axes based on one linear parameter. However, more dramatic graphics are produced by a different group of 3-D graphics functions that produce images based on mapping a 2-D surface. The underlying 2-D surface is sometimes referred to as plaid because of its conceptual similarity to a Scottish tartan pattern. To design such a pattern, one needs only to specify the color sequence of the horizontal and vertical threads. In the same way, we specify a plaid by defining vectors of the row and column data configurations.  
<h3><a name="11_4_1">11.4.1	Basic Capabilities</a></h3>
 Three fundamental functions are used to create 3-D surface plots: ■	meshgrid(x, y) accepts the x1*m and y1*n vectors that bound the edges of the plaid and replicates the rows and columns appropriately to produce xxn*m and yyn*m, containing the x and y values (respectively) of the complete plaid. This enables us in general to compute mappings for the 3-D coordinates of the figure we want to plot. ■	mesh(xx, yy, zz) plots the surface as white facets outlined by colored lines. The line coloring uses one of many color maps (listed in Appendix A), where the color is selected in proportion to the zz parameter. You can turn the white facets transparent with the command hidden off. ■	surf(xx, yy, zz) plots the surface as colored facets outlined by black lines. The line coloring by default is selected in proportion to the zz parameter. You can remove the lines by using one of a number of shading commands listed in Appendix A.  
<h3><a name="11_4_2">11.4.2	Simple Exercises</a></h3>
 We will consider some simple situations that illustrate many of the features of surface drawing. Drawing a Cube In the first example, in order to understand the underlying logic, we will develop the basic concept of drawing surfaces without the help of the meshgrid(...) function. Figure 11.7 shows the coordinates of a cube of side 2 units centered at the origin. Listing 11.6 shows the code that plots a cube from scratch. Figure 11.8 shows the results from this script. To define the top and bottom of the cube, we must add the points P and Q. Although only one point each is required to define P and Q, the array must have the same number of columns in each row. Therefore, P and Q must be replicated five times to keep the arrays rectangular.  One could think about the way the surf(...) function works by drawing the line defined by the top row of the xx, yy, and zz arrays. Then it locates the line defined by the next row and makes a smooth surface between the two lines. Physically, this has the following effect:  ■	Beginning at point P, it draws expanding squares until it reaches ABCD ■	“Sliding down” the sides of the cube to EFGH ■	Shrinking that square down to the point Q In Listing 11.6: Lines 1–12: Establish the plaid defining the point P, the A-B-C-D plane, the E-F-G-H plane, and the point Q. Notice that the first corner is repeated on each row to close the figure shape. Lines 13–18: Plot the cube top, sides, and bottom. A Simple Parabolic Dish  The simplest surface plots are obtained by defining a z value for each point on an x-y plaid. We will continue with a simple example illustrating the use of meshgrid(...) to define the plaid. Consider how we might plot the data shown in Figure 11.9. Before we look at the code, consider what the picture represents. Clearly, the independent variables are x and y, each covering the range from −3 to 3, each having seven discrete values. As the label indicates, the z values are calculated as the sum of x2 and y2. There are not, however, 14 z values as the range of x and y values might suggest, but 49! In order to plot the 3-D shape of our parabolic bowl, we must have a z value for every point on the x-y surface. Each of these points has a value of x corresponding to the reading on the x-axis, and a value of y from the y-axis. Therefore, the process of creating this plot has three parts:  1.	Develop the underlying plaid specifying the x-y location of every point on the x-y plane. 2.	Calculate the z values from the plaid. 3.	Call a plotting function that will accept the plaid and these z values to produce the required plot.  The code to accomplish this is shown in Listing 11.7. In Listing 11.7: Line 1: The x and y vectors define the edges of the plaid. Line 2: Generates the plaid. Line 3: In this particular example, we map only the z coordinate, leaving the plaid (xx and yy) as the x and y coordinates of the figure. Line 4: mesh(...) is one of the many functions that represent 3-D mappings of a plaid in different ways. Notice in the figure that the faces between line segments are solid white, and the line colors change with the z coordinate. Lines 5–7: Annotate the plot.  Try Exercise 11.1 and make your observations.  Manipulating Plots  Thoughtful students might develop their own tests to investigate the behavior of the following tools:  ■	The function surfc(xx, yy, zz) puts contour lines on the x-y plane base. ■	The function view(az, el) changes the viewing angle. This is useful to capture a specific view angle after you have used the rotation tool to select a good presentation of the data. ■	The command colorbar allows you to show how the colors are quantified on the plot. ■	Adding a 4th parameter to surf(xx, yy, zz, yy) overrides the default color direction z with, in this case, the y direction. ■	The 4th parameter can also be a function like del2(zz) that computes the second derivative, or curvature, of the plot, so now the coloring highlights the areas of maximum curvature. ■	The 4th parameter can also be an image (see Chapter 13) that will appear to be pasted onto the plotting surface. ■	For an eye-catching effect, add the line lightangle(60, 45) at the bottom of the script. This illuminates the surface with a light at the specified azimuth and elevation angle (degrees). The resulting faceted appearance can be alleviated by decreasing the granularity of the underlying plaid coordinates.  
<h3><a name="11_4_3">11.4.3	3-D Parametric Surfaces</a></h3>
 Cylinder Consider first the construction of a cylinder as illustrated in Figure 11.10. One could consider this figure as a sheet of paper rolled up in a circular shape. We could visualize that piece of paper as a plaid of values, not of x-y in this case, but perhaps x − u. The range of x would be from 0 to the length of the cylinder, and the range of u would be 0 to 360°.  To plot this, one would then merely need to create a plaid in x and u, and then decide on the mapping from u to the y and z values of the cylinder. The resulting picture is shown in Figure 11.11, and the code is shown in Listing 11.8. In Listing 11.8: Line 1: Constants to define the smoothness of the cylinder. Lines 2–4: Define a plaid in x and u. Note that only two points are needed in the x direction because that contour is straight. Lines 5 and 6: The circular cross-section is achieved by using the parametric definition of a circle of a given radius. Line 9: Changes the color to a pleasant metallic scale. Line 10: Squares up and removes the axes. Line 11: Illuminates the figure. Line 12: Sets the transparency of the surface so that a portion of the hidden details can show through.  Sphere Now, we construct a sphere as shown in Figure 11.12, starting with the cylinder. However, instead of using a constant radius in the x direction, we will calculate the radius in that direction by rotating a second angle, c, from 0 to 180°. Think of this as mapping or “wrapping” a plaid with two angles as the independent variables around the sphere. The coordinate in the x direction would be r cos c, and the radii of the y-z circles would be r sin c. The code for drawing this sphere is shown in Listing 11.9. In Listing 11.9: Line 1: The radius set here is the sphere radius. Lines 2 and 3: Set the ranges of u and c. Line 4: Builds the plaid in u and c. Line 5: As c rotates, the value of x varies as its cosine. Lines 6 and 7: The radius of rotation about the x-axis varies as the sine of c. Lines 8–12: Draw and annotate the plot.  
<h3><a name="11_4_4">11.4.4	Bodies of Rotation</a></h3>
 The cylinder and sphere drawn in the above section are special cases of a more general form of solid body. Bodies of rotation are created in general by rotating a general function v = f(u) defined over a range of u values about the x or z axes. Note: this is perfectly general because rotating such a function about the y-axis would result merely in “smearing” the function across a flat surface in the x-z plane. We use z rather than y for the dependent variable here because in our 3-D plots, the z-axis is drawn as the vertical axis. In general, we make no claims about the nature of f(). It could be a rational function, or merely a “lookup table” specifying a value of v for every u.  Rotating Continuous Functions First, we consider rotating a continuous function v = f(u) about the x and z axes.  ■	To rotate v = f(u) about the x-axis, we could consider this equation as r = f(x). Figure 11.13 shows the logic of this rotation. The independent variable is x, and the values of y and z are computed as the usual polar-to-Cartesian conversion: y = r cos(u) z = r sin(u)  Notice that these are the two axes about which we are not rotating. ■	To rotate v = f(u) about the z-axis, we could consider this equation as z = f(r). Figure 11.14 shows the logic of this rotation. The independent variable is now r, and the values of x and y are computed as the usual polar-to-Cartesian conversion: x = r cos(u) y = r sin(u) Notice again that these are the two axes about which we are not rotating. Notice also a simple rule of thumb: if you rewrite v = f(u) correctly for each rotation, the independent variable is always the parameter of f(...). Figure 11.15 shows the result of the rotations generated by the code shown in Listing 11.10.  In Listing 11.10: Lines 1–4: Set up the plaid of u, the independent variable for the function, and u for the rotations. Lines 6–13: Compute the rotation about the x-axis. Notice that when rotating about a specific axis, that axis must be treated separately; the other two axes will always have the form of a polar-to-Cartesian transformation. In rotating about the x-axis, since u is the independent variable for our function, we only need to compute the yy and zz values. Line 10: We use the fourth parameter to surf(...) to set the direction of color variation. Lines 15–22: Compute the z-axis rotation. Some apparent sleight of hand is necessary here. In this case, the axis containing the independent variable is being rotated about the z-axis. Because the radius of the rotated surface is the original independent variable, uu, we copy uu to the variable radius. Then we define xx together with yy as the polar-to-Cartesian transformation to achieve the rotation. In this case, the z value of the surface is f(u), u . Rotating Discrete Functions There is no need to restrict ourselves to continuous functions as the profiles for bodies of rotation. Figure 11.16 shows the 2-D profile of a fictitious machine part and the picture created when that profile is rotated about the x-axis. The figure was generated by the code shown in Listing 11.11. In Listing 11.11: Lines 1–9: Define and plot the initial 2-D profile. Lines 10–22: Perform the rotation about the x-axis. The only unusual idea here is how to turn this discrete collection of points into the equivalent of v = f(u). Line 12 shows an elegant way to solve this dilemma. After going through the meshgrid(..) to produce a plaid of xx and tth, we run meshgrid(...) again, but keeping only the first result, rr.  Rotating about an Arbitrary Axis Bodies of rotation are not confined to rotating about the x, y, or z axes. The simplest approach to rotating z = f(x) about an arbitrary axis is as follows:  ■	Calculate the matrix that will place your axis of rotation along the x-axis (see Chapter 12) ■	Transform u and v with that rotation ■	Rotate the transformed u and v about the x-axis ■	Invert the transformation on the resulting surface  
<h3><a name="11_4_5">11.4.5	Other 3-D Surface Plot Capabilities</a></h3>
 The MATLAB language also defines special-purpose functions to enhance the quality of surface plots:  ■	alpha(x) sets the transparency of the surfaces. 0<=x<=1, where 0 means completely transparent and 1 (the default value) is opaque. The options available can be studied with >> help alpha. ■	contour(z) produces a contour plot of the plaid surface defined by z. The options available can be studied with >> help bar3. ■	[x,y,z] = cylinder(n) constructs the meshgrid for a cylinder with n facets in each direction. For more options, see >> help cylinder. ■	[x,y,z] = ellipsoid(n) constructs the meshgrid for an ellipsoid with n facets in each direction. For more options, see >> help ellipsoid. ■	[x,y,z] = sphere(n) constructs the meshgrid for ansphere with n facets in each direction. For more options, see >> help sphere. ■	meshc(x,y,z) makes a mesh plot with contours below. For more options, see >> help meshc. ■	meshz(x,y,z) makes a mesh plot with vertical line extensions. For more options, see >> help meshz. ■	surfc(x,y,z) makes a surface plot with contours below. For more options, see >> help surfc. ■	surfz(x,y,z) makes a surface plot with vertical line extensions. For more options, see >> help surfz. ■	waterfall(x,y,z) makes a mesh plot with vertical line extensions only in the x direction. For more options, see >> help waterfall.  
<h3><a name="11_4_6">11.4.6	Assembling Compound Surfaces</a></h3>
<figure style="float: right; margin-left: 10px; margin_bottom: 5px">
<p><video width="560" height="420" controls>
<source src="klein_bottle.mp4" type="video/mp4">
Your browser does not support the video tag.
</video></p></center>
 We can assemble more complex solid bodies by constructing simple surfaces and concatenating the data before submitting it to the rendering machine. Shapes of considerable complexity can be assembled this way. Consider, for example, the Klein bottle, a well-documented example of topological curiosity. The particular example shown in Figure 11.17 was constructed by building the individual components and then concatenating the arrays.  The code is a little too complex to be included here, but can be found on the companion Web site.  
<h2><a name="11_5">11.5 Manipulating Plotted Data</a></h2>
 Two new features introduced with MATLAB 7.6 (R2008a) allow you to interact with the data presented in a plot. Brushing allows you to select portions of the data presented in a plot and make changes to the values presented. Linking allows you to connect the plotted data to the underlying data source, so that when you make changes to the plotted data, these changes are reflected in the data source. Whereas these tools allow the user to change the appearance of data presentations interactively, a careful user would return to the original tools that created the plots and explicitly insert the logic that changes the appearance of the results. This provides a traceable set of programs that show exactly how the data were generated.  
<h2><a name="11_6">11.6  Engineering Example—Visualizing Geographic Data</a></h2>

You have been given two files of data: atlanta.txt, which presents the streets of Atlanta in graphical form, and ttimes.txt, which gives the travel times between Atlanta suburbs and the city center. You have been asked to present these data sets in a manner that will help to visualize and validate the data.

11.6.1	Analyzing the Data
First, we proceed to determine the nature of the data by opening the files and examining their format and content.

1.	Determine the file format: the first step is to open the data files in a plain text editor. The format appears to be consistent with that of a text file delimited by tab characters. Since there are no strings in the file, it should be suitable to be read using the built-in dlmread(...) function.

2.	Discern the street map file content: Table 11.1 shows the first few lines of the file atlanta.txt simplified by omitting certain irrelevant columns. The numbers in columns 3–6 are pairs, the first of the pair being a large negative number, and the second a smaller positive number. Assuming that each row of this file is a street segment, these could be the x-y coordinates of the ends of a line. A little thought confirms this guess when we realize that the latitude of Atlanta is −84° 429 relative to the Greenwich meridian, and its longitude is 33° 659— clearly, the values in these columns are 1,000,000 times the latitude and longitude of points within the city, probably each end of street segments. Column 7 contains numbers mostly in the range 1–6, which could indicate the type of street. We could explore this idea by coloring each line according to that value.

3.	Discern the travel time file content: Table 11.2 shows the first few lines of the file ttimes.txt simplified by omitting certain irrelevant columns. The same latitude/longitude values occur in columns 4 and 5, but they are not repeated, suggesting that the data in this file are in a different form. Examining the first two columns, the numbers in column 2 cycle repeatedly from 1 to 75, with column 1 counting the number of cycles up to 75. Furthermore, the values in column 5 are the same whenever column 1 is the same, and the values in column 4 are the same whenever the value in column 2 matches. This seems to be much like the plaid that results from a meshgrid(...) function call. The values in column 6 then become evident—they would be the z values of the plaid, and it seems reasonable to assume that they represent the travel time in minutes.

11.6.2	Displaying the Data
With this much understanding of the data sources, we proceed to solve the problem of presenting the data. The script shown in Listing 11.12 shows the code used to visualize these data files.

In Listing 11.12:

Line 1: Reads the street map data.
Lines 2–3: Extract the relevant columns and determine the size of the array. Line 4: Color symbols to use for the lines.
Line 5: Traverses the rows of the file.
Lines 6 and 7: Extract the longitude and latitude in degrees. Lines 8–10: Extract and limit the line colors.
Lines 11 and 12: Plot the street lines on the same figure. Lines 14 and 15: Read the travel times.
Line 16: Constructs the plaid by traversing the array. Line 17: Extracts the row and column numbers. Lines 18–20: Extract the plaid values.
Lines 22–30: Plot and display the results.

Figure 11.18 shows the resulting plot. As a credibility check, the plot has been rotated to look straight down on the map. Rotate the plot to other view angles to understand the 3-D nature of the information. The travel time surface shows “valleys” of low travel times that follow the paths of the major expressways through the city.

Chapter Summary

This chapter presented the principles and practice of plotting:
■	Basic 2-D line plots are accomplished by using plot(x,y), where x is the independent variable and y the dependent variable
■	2-D parametric plots are accomplished by using plot(x,y), where both x and y are dependent on another independent variable
■	3-D line and parametric plots are accomplished by using plot3(x,y,z)
■	Basic 3-D surface plots are accomplished by building a plaid using
[xx yy] = meshgrid(x,y), computing the zz layer as a function of
xx and yy, and then plotting the surface using mesh(xx, yy, zz) or
surf(xx, yy, zz)
■	Parametric surface plots, like parametric line plots, are achieved by building the plaid with two independent variables and making xx, yy, and zz functions of those independent variables
■	Bodies of rotation are a special case of parametric surface plots where one of the independent variables is an angle with values between 0 and 2p.










[Special Characters]

[Problems]


<table align="center"> 
<tbody> 
<tr> 
<td><a href="10_Problem_Solving.htm">previous</a></td> 
<td><a href="Contents.htm">home</a></td> 
<td><a href="12_Matrices.htm">next</a></td> 
</tr> 
</tbody> 
</table> 

<p align="center"><font size="1">This Web Page was Built with PageBreeze </font><a href="http://pagebreeze.com" target="_blank"><font size="1">Free HTML Editor</font></a><font size="1"> </font></p> 
</body> 
</html> 
-1.000000e+00 

<!DOCTYPE HTML>
<html>
<head>
<title>11_Plotting</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
<link rel="stylesheet" href="styles/styles.css" />
<script async src="./javascript/index.js"></script>
</head>
<body>
<div>#top_nav#</div>
<div class="nav-obj">#nav_obj#</div>

<div class="content">
  <h1 id="11" align="center">Chapter 11: Plotting</h1>

  <!-- Chapter Objectives -->
  <h1>Chapter Objectives</h1>
  <div class="container">
    <p>This chapter presents the principles and<a id="11411"></a> practice of<a id="12071"></a> plotting in the following forms:</p>
    <ul>
      <li>Basic two-dimensional (2-D) line plots<a id="11990"></a>
      <li>2-D<a id="11923"></a> parametric<a id="11914"></a> plots<a id="11991"></a>
      <li>Three-dimensional (3-D) line and<a id="11412"></a> parametric<a id="11915"></a> plots<a id="11992"></a>
      <li>Basic 3-D<a id="11941"></a> surface<a id="12046"></a> plots<a id="11993"></a>
      <li>Parametric surface<a id="12047"></a> plots<a id="11994"></a>
      <li>Bodies of<a id="12072"></a> rotation<a id="11723"></a>
    </ul>
  </div>

  <!-- Introduction -->
  <h1>Introduction</h1>
  <div class="container">
    <p>There is a much-quoted expression that "a picture is worth a thousand words," and<a id="11413"></a> this is never more appropriate than when talking about data<a id="11679"></a>. In previous chapters, we used some simple plot commands to<a id="11746"></a> display data<a id="11680"></a> to<a id="11747"></a> illustrate its behavior. The capability of<a id="12073"></a> the MATLAB<a id="11672"></a> language to<a id="11748"></a> present data<a id="11681"></a> reaches far beyond ordinary data<a id="11682"></a> plotting, and<a id="11414"></a> far beyond the limited confines of<a id="12074"></a> a textbook. This chapter will present the fundamental concepts of<a id="12075"></a> the different forms in which data<a id="11683"></a> can be presented, but it leaves to<a id="11749"></a> the reader the challenge of<a id="12076"></a> exploring the full range of<a id="12077"></a> capabilities available. You only really discover the power inherent in the plotting capabilities of<a id="12078"></a> MATLAB<a id="11673"></a> when you have some unusual data<a id="11684"></a> to<a id="11750"></a> visualize.</p>
  </div>

  <div class="chp-section" data-sect-num="1" data-sect-name="Plotting in General">
    <!-- Plotting in General -->
    <h2 id="11_1">11.1  Plotting in General</h2>
    <div class="container">
      <p>Before considering the details of<a id="12079"></a> how each plotting mode works, we should set the context. In this section, we will discuss the general container for<a id="12370"></a> all graphical types<a id="11410"></a>, the figure, and<a id="11415"></a> some basic operations<a id="11912"></a> that apply to<a id="11751"></a> all figures<a id="12042"></a>—functions<a id="12309"></a> that enhance them, the ability to<a id="11752"></a> assemble subplots<a id="12045"></a> into a single figure, and<a id="11416"></a> the advisability of<a id="12080"></a> making manual changes to<a id="11753"></a> plots<a id="11995"></a>.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="A Figure - The Plot Container">
      <h3 id="11_1_1">11.1.1	A Figure<a id="11226"></a> - The Plot Container</h3>
      <div class="container">
        <p>The fundamental container for<a id="12371"></a> plotting is a figure. In a simple script, if you just start plotting data<a id="11685"></a>, figure number 1 is automatically created to<a id="11754"></a> present the data<a id="11686"></a>. You can manage the figures<a id="12043"></a> by asserting the <code>figure</code> command. Each time figure is called, a new figure is made available, with<a id="11564"></a> the next higher figure number. If you use the form <code>figure &lt;number&gt;</code>, you can select a specific figure number for<a id="12372"></a> the next plot.  To clear<a id="11188"></a> the current figure, put the key word <code>clf<a id="11190"></a></code> in the header of<a id="12081"></a> your script. To remove all the figures<a id="12044"></a>, put the key phrase <code>close<a id="11191"></a> all</code> at the beginning of<a id="12082"></a> your script. The listing examples<a id="11378"></a> below will assume that each script begins with<a id="11565"></a> <code>clear<a id="11189"></a></code>, <code>clc<a id="11187"></a></code>, <code>close<a id="11192"></a> all</code>.</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Simple Functions for Enhancing Plots">
      <!-- Simple Functions for Enhancing Plots -->
      <h3 id="11_1_2">11.1.2	Simple Functions for<a id="12373"></a> Enhancing Plots</h3>
      <div class="container">
        <p>We have already introduced <code>plot(<a id="11331"></a>x, y)</code>, the basic function<a id="11228"></a> that creates a simple plot of<a id="12083"></a> <code>x</code> versus <code>y</code>. The following functions<a id="12310"></a> can be used to<a id="11755"></a> enhance any of<a id="12084"></a> the plots<a id="11996"></a> discussed in this chapter. Note that they enhance an existing plot; they should all be called after the fundamental function<a id="11229"></a> that creates a plot figure.</p>
         <ul>
           <li><code>axis &lt;param&gt;</code> provides a rich set of<a id="12085"></a> tools for<a id="12374"></a> managing the appearance of<a id="12086"></a> the axes, including the following:
            <ul>
              <li><code>tight</code> reduces the axes to<a id="11756"></a> their smallest possible size<a id="12368"></a></li>
              <li><code>equal<a id="11223"></a></code> sets the <code>x</code> and<a id="11417"></a> <code>y</code> scales to<a id="11757"></a> the same value<a id="12341"></a></li>
              <li><code>square<a id="12304"></a></code> makes the plot figure of<a id="12087"></a> equal<a id="11224"></a> width and<a id="11418"></a> height</li>
              <li><code>off</code> does not show the axes at all</li>
            </ul></li>
            <li><code>axis(<a id="11171"></a>[xl xu yl yu zl zu])</code> overrides the automatic computation of<a id="12088"></a> the axis values, forcing the x-axis to<a id="11758"></a> reach from<a id="11273"></a> <code>xl</code> to<a id="11759"></a> <code>xu</code>, the y-axis from<a id="11274"></a> <code>yl</code> to<a id="11760"></a> <code>yu</code>, and<a id="11419"></a> the z-axis from<a id="11275"></a> <code>zl</code> to<a id="11761"></a> <code>zu</code>. For 2-D<a id="11924"></a> plots<a id="11997"></a>, the <code>z</code> values should be omitted.</li>
            <li><code>colormap<a id="11202"></a> &lt;specification&gt;</code> establishes a sequence of<a id="12089"></a> colors, the color<a id="11193"></a> map, to<a id="11762"></a> be used under a number of<a id="12090"></a> circumstances to<a id="11763"></a> cycle through a series of<a id="12091"></a> colors automatically. The legal specification values are listed in Appendix A.</li>
            <li><code>grid<a id="11305"></a> on<a id="11630"></a></code> puts a grid<a id="11306"></a> on<a id="11631"></a> the plot; <code>grid<a id="11307"></a> off</code> (the default) removes grid<a id="11308"></a> lines.</li>
            <li><code>hold<a id="11310"></a> on<a id="11632"></a></code> keeps the existing data<a id="11687"></a> on<a id="11633"></a> the current figure to<a id="11764"></a> allow the results of<a id="12092"></a> subsequent plotting calls to<a id="11765"></a> be added to<a id="11766"></a> the current figure without first erasing the existing plot; <code>hold<a id="11311"></a> off</code> (the default) allows you to<a id="11767"></a> redraw the current figure at the next plot call, erasing the previous contents.</li>
            <li><code>legend(<a id="11314"></a>...)</code> takes a cell<a id="11170"></a> array<a id="11167"></a> of<a id="12093"></a> strings, one for<a id="12375"></a> each of<a id="12094"></a> the multiple plots<a id="11998"></a> on<a id="11634"></a> a single figure, and<a id="11420"></a> creates a legend box. By default, that box appears in the top-right corner of<a id="12095"></a> the figure. However, this default can be overridden by explicitly specifying the location of<a id="12096"></a> the legend. See the help<a id="11381"></a> files for<a id="12376"></a> a complete discussion of<a id="12097"></a> the legend options.</li>
            <li><code>lightangle(<a id="11315"></a>...)</code> a function<a id="11230"></a> to<a id="11768"></a> place a light source at given angles in azimuth and<a id="11421"></a> elevation from<a id="11276"></a> the object being viewed. Up to<a id="11769"></a> eight light sources can be added to<a id="11770"></a> any figure. In practice, only plots<a id="11999"></a> using <code>surf(<a id="11352"></a>...)</code> and<a id="11422"></a> <code>shading interp</code> really benefit from<a id="11277"></a> light angles.</li>
            <li><code>shading &lt;spec&gt;</code> defines the method for<a id="12377"></a> shading surfaces. See the help<a id="11382"></a> files for<a id="12378"></a> a complete discussion of<a id="12098"></a> the shading specification options.</li>
            <li><code>text(<a id="11364"></a>x, y, {z,}, str)</code> places the text<a id="12334"></a> provided at the specified (x, y) location on<a id="11635"></a> a 2-D<a id="11925"></a> plot, or at the (x, y, z) location on<a id="11636"></a> a 3-D<a id="11942"></a> plot.</li>
            <li><code>title(<a id="11365"></a>&lt;string&gt;)</code> places the text<a id="12335"></a> provided as the title of<a id="12099"></a> the current plot.</li>
            <li><code>view(<a id="11366"></a>az, el)</code> sets the angle from<a id="11278"></a> which to<a id="11771"></a> view a plot. The parameters<a id="12348"></a> are <code>az</code>, the azimuth, an angle measured in the horizontal plane, and<a id="11423"></a> <code>el</code>, the elevation, an angle measured upward from<a id="11279"></a> the x axis. Both angles are specified in degrees.</li>
            <li><code>xlabel(<a id="11369"></a>&lt;string&gt;)</code> sets the string provided as the label for<a id="12379"></a> the x-axis.</li>
            <li><code>ylabel(<a id="11370"></a>&lt;string&gt;)</code> sets the string provided as the label for<a id="12380"></a> the y-axis.</li>
            <li><code>zlabel(<a id="11371"></a>&lt;string&gt;)</code> sets the string provided as the label for<a id="12381"></a> the z-axis. (As we will soon see, all plots<a id="12000"></a> actually have a third axis.)</li>
          </ul>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="Multiple Plots on One Figure - Subplots">
      <!-- Subplots -->
      <h3 id="11_1_3">11.1.3	Multiple Plots on<a id="11637"></a> One Figure<a id="12412"></a> - Subplots</h3>
      <div class="container clearfix">
          <p>Within the current figure, you can place multiple plots<a id="12001"></a> with<a id="11566"></a> the subplot command, as shown in Figure<a id="12413"></a> 11.1. The function<a id="11231"></a> <code>subplot(<a id="11349"></a>r, c, n)</code>divides the current figure into <code>r</code> rows and<a id="11424"></a> <code>c</code> columns of<a id="12100"></a> equally spaced plot areas, and<a id="11425"></a> then establishes the nth of<a id="12101"></a> these (counting across the rows first) as the current figure. You do not have to<a id="11772"></a> draw in all of<a id="12102"></a> the areas you specify. Figure<a id="12414"></a> 11.1 was generated by the code shown in Listing 11.1. Notice that the order of<a id="12103"></a> the plot positions is in an order different from<a id="11280"></a> that achieved when you linearize an array<a id="11168"></a>.</p>
          <div class="card">
               <img src="..\Images\Fig_11_1.JPG" alt="Figure 11.1" class="fig card-img">
               <p class="figure-name card-title">Figure<a id="12415"></a> 11.1: Using Subplots</p>
          </div>
      </div>
      <div class="listing">#listing_11_1#</div>
    </div>

    <div class="chp-subsection" data-sub-num="4" data-sub-name="Manually Editing Plots">
      <!-- Manually Editing Plots -->
      <h3 id="11_1_4">11.1.4	Manually Editing Plots</h3>
      <div class="container">
        <p>When a figure has been created, you are free to<a id="11773"></a> manipulate many of<a id="12104"></a> its characteristics  by  using  its  menu items and<a id="11426"></a> tool bars. They provide the ability to<a id="11774"></a> resize the plot, change the view characteristics, and<a id="11427"></a> annotate it with<a id="11567"></a> legends, axis labels, lines, and<a id="11428"></a> text<a id="12336"></a> call-outs. However, <b><i>a word of<a id="12105"></a> caution</i></b> is in order here. It is very rare that you achieve what you desire on<a id="11638"></a> the first try.  Manual edits become very tedious and<a id="11429"></a> error prone when they must be repeated. You will always be better served by putting all that additions into your source code rather than ever using manual figure editing.  If for<a id="12382"></a> no other reason, by never using manual edits, you are avoiding the appearance of<a id="12106"></a> impropriety by being able to<a id="11775"></a> repeat any graphics you created from<a id="11281"></a> the source materials.</p>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="2" data-sect-name="2-D Plotting">
    <h2 id="11_2">11.2 2-D<a id="11926"></a> Plotting</h2>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Simple Plots">
      <!-- Simple Plots -->
      <h3 id="11_2_1">11.2.1 Simple Plots</h3>
      <div class="container clearfix">
        <div class="float-sm-right card">
             <img src="..\Images\Fig_11_2.JPG" alt="Figure 11.2" class="fig card-img">
             <p class="figure-name card-title">Figure<a id="12416"></a> 11.2: Overlaying plots<a id="12002"></a> with<a id="11568"></a> <code>hold<a id="11312"></a> on<a id="11639"></a></code></p>
        </div>
        <p>The basic function<a id="11232"></a> to<a id="11776"></a> use for<a id="12383"></a> 2-D<a id="11927"></a> plots<a id="12003"></a> is <code>plot(<a id="11332"></a>...)</code>. The normal use of<a id="12107"></a> this function<a id="11233"></a> is to<a id="11777"></a> give it three parameters<a id="12349"></a>, <code>plot(<a id="11333"></a>x, y, str)</code>, where <code>x</code> and<a id="11430"></a> <code>y</code> are vectors of<a id="12108"></a> the same length containing the x and<a id="11431"></a> y coordinates respectively, and<a id="11432"></a> <code>str</code> is a string containing one or more optional line color<a id="11194"></a> and<a id="11433"></a> style control characters. A complete list of<a id="12109"></a> these control characters is included in Appendix A. If the vector <code>x</code> is omitted, MATLAB<a id="11674"></a> assumes that the x coordinates are <code>1:N</code>, where <code>N</code> is the length of<a id="12110"></a> the y vector. If the <code>str</code> is omitted, the default line is solid blue with<a id="11569"></a> no symbols at the data<a id="11688"></a> points. The MATLAB<a id="11675"></a> definition of<a id="12111"></a> this function<a id="11234"></a> also permits multiple <code>(x, y, str)</code> data<a id="11689"></a> sets in a single function<a id="11235"></a> call. It is always possible, of<a id="12112"></a> course, to<a id="11778"></a> produce the same result with<a id="11570"></a> multiple function<a id="11236"></a> calls in <code>hold<a id="11313"></a> on<a id="11640"></a></code> mode.  Since we have already seen basic 2-D<a id="11928"></a> plotting at work, it should be sufficient to<a id="11779"></a> observe and<a id="11434"></a> comment on<a id="11641"></a> the simple example<a id="12283"></a> seen in Figure<a id="12417"></a> 11.2, generated by the code shown in Listing 11.2.</p>
      </div>
      <div class="listing">#listing_11_2#</div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Plot Options">
      <!-- Plot Options -->
      <h3 id="11_2_2">11.2.2	Plot Options</h3>
      <div class="container">
        <p>In addition to<a id="11780"></a> the plot enhancement<a id="12040"></a> tools listed in Section 11.1.2, the following capabilities are available.</p>
        <ul>
          <li>Setting line styles and<a id="11435"></a> symbols to<a id="11781"></a> mark the data<a id="11690"></a> points (details in Appendix A)</li>
          <li>Using <code>plotyy(<a id="11343"></a>...)</code> to<a id="11782"></a> put a second axis on<a id="11642"></a> the right side of<a id="12113"></a> the figure</li>
          <li>Obtaining logarithmic plots<a id="12004"></a> on<a id="11643"></a> the x-axis, <code>semilogx(<a id="11345"></a>...)</code>, y-axis, <code>semilogy(<a id="11346"></a>...)</code>, or both axes <code>loglog(<a id="11316"></a>...)</code>.</li>
        </ul>
        <p>We strongly suggest that the reader experiment with<a id="11571"></a> these features and<a id="11436"></a> observe their effects.</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="Parametric Plots">
      <!-- Parametric Plots -->
      <h3 id="11_2_3">11.2.3	Parametric Plots</h3>
      <div class="container clearfix">
        <div class="float-sm-right card">
             <img src="..\Images\Fig_11_3.JPG" alt="Figure 11.3" class="fig card-img">
             <p class="figure-name card-title">Figure<a id="12418"></a> 11.3: Parametric Plots</p>
        </div>
        <p>Plotting is not restricted to<a id="11783"></a> the situation where the data<a id="11691"></a> along one axis are the  independent  variable<a id="12353"></a>  and<a id="11437"></a>  that along   the   other   are   dependent. Parametric plots<a id="12005"></a> allow the variables on<a id="11644"></a> each axis to<a id="11784"></a> be dependent on<a id="11645"></a> a separate, independent variable<a id="12354"></a>. That independent variable<a id="12355"></a> will define a path or locus on<a id="11646"></a> the plotting surface<a id="12048"></a>. Consider the plot shown in Figure<a id="12419"></a> 11.3, which presents   a   simple   exercise   in transforming a circle into the shape of<a id="12114"></a> an airfoil, for<a id="12384"></a> example<a id="12284"></a>, the cross-section of<a id="12115"></a> an aircraft wing or a turbine blade. It was generated using the code shown in Listing 11.3.</p>
      </div>
      <div class="listing">#listing_11_3#</div>
    </div>

    <div class="chp-subsection" data-sub-num="4" data-sub-name="Other 2-D Plot Capabilities">
      <!-- Other 2D Plot Capabilities -->
      <h3 id="11_2_4">11.2.4	Other 2-D<a id="11929"></a> Plot Capabilities</h3>
      <div class="container">
        <p>You can also create some more exotic plots<a id="12006"></a> that are not necessary to<a id="11785"></a> understand the basic principles of<a id="12116"></a> plotting, but are powerful methods for<a id="12385"></a> visualizing real data<a id="11692"></a>:</p>
        <ul>
          <li><code>bar(<a id="11172"></a>x, y)</code> produces a bar graph with<a id="11572"></a> the values in y positioned at the horizontal locations in x. The options available can be studied with<a id="11573"></a> <code>&gt;&gt; help<a id="11383"></a> bar</code></li>
          <li><code>barh(<a id="11174"></a>x, y)</code> produces a bar graph with<a id="11574"></a> the values in y positioned at the horizontal locations in x. The options available can be studied with<a id="11575"></a> <code>&gt;&gt; help<a id="11384"></a> bar</code>.</li>
          <li><code>fill(<a id="11227"></a>x,y,n)</code> produces a filled polygon defined<a id="11373"></a> by the coordinates in <code>x</code> and<a id="11438"></a> <code>y</code>. The fill color<a id="11195"></a> is specified by indexing<a id="12367"></a> n into the color<a id="11196"></a> map. The options available can be studied with<a id="11576"></a> <code>&gt;&gt; help<a id="11385"></a> fill</code></li>
          <li><code>hist(<a id="11309"></a>y, x)</code> produces a histogram plot with<a id="11577"></a> the values in <code>y</code> counted into bins defined<a id="11374"></a> by <code>x</code>. The options available can be studied with<a id="11578"></a> <code>&gt;&gt; help<a id="11386"></a> hist.</code></li>
          <li><code>pie(<a id="11329"></a>y)</code> makes a pie chart of<a id="12117"></a> the values in <code>y</code>. For more options, see <code>&gt;&gt; help<a id="11387"></a> pie</code>.</li>
          <li><code>polar(<a id="11344"></a>th, y)</code> makes a polar plot of<a id="12118"></a> the angle <code>th</code> (radians) with<a id="11579"></a> the radius <code>r</code> specified for<a id="12386"></a> each angle. For more options, see <code>&gt;&gt; help<a id="11388"></a> polar</code>.</li>
        </ul>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="3" data-sect-name="3-D Plotting">
    <!-- 3D Plotting -->
    <h2 id="11_3">11.3 3-D<a id="11943"></a> Plotting</h2>
    <div class="container clearfix">
      <div class="float-sm-right card">
           <img src="..\Images\Fig_11_3a.JPG" alt="Figure 11.3a" class="fig card-img">
           <p class="figure-name card-title">Figure<a id="12420"></a> 11.3a: Rotating 2-D<a id="11930"></a> Plots</p>
      </div>
      <p>Before attacking the details of<a id="12119"></a> plotting in three dimensions, it should be noted that even 2-D<a id="11931"></a> plots<a id="12007"></a> are actually 3-D<a id="11944"></a> plots<a id="12008"></a>. Consider the picture shown in Figure<a id="12421"></a> 11.3a, which was generated originally as the 2-D<a id="11932"></a> plot in Figure<a id="12422"></a> 11.3. By selecting the Rotate 3-D<a id="11945"></a> icon on<a id="11647"></a> the tool bar and<a id="11439"></a> moving the mouse on<a id="11648"></a> your figure, it becomes apparent that what appeared to<a id="11786"></a> be a 2-D<a id="11933"></a> plot in the x-y plane is really a 3-D<a id="11946"></a> plot in the x-y-z plane “suspended in space” at z = 0.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Linear 3-D Plots">
      <!-- Linear 3D Plots -->
      <h3 id="11_3_1">11.3.1 Linear 3-D<a id="11947"></a> Plots</h3>
      <div class="container clearfix">
        <div class="float-sm-right card">
             <img src="..\Images\Fig_11_4.JPG" alt="Figure 11.4" class="fig card-img">
             <p class="figure-name card-title">Figure<a id="12423"></a> 11.4: Linear 3-D<a id="11948"></a> Plots</p>
        </div>
        <p>The simplest method of<a id="12120"></a> 3-D<a id="11949"></a> plotting is to<a id="11787"></a> extend our 2-D<a id="11934"></a> plots<a id="12009"></a> by adding a set of<a id="12121"></a> z values. In the same style as <code>plot(<a id="11334"></a>...)</code>, <code>plot3(<a id="11339"></a>x, y, z, str)</code> consumes three vectors of<a id="12122"></a> equal<a id="11225"></a> size<a id="12369"></a> and<a id="11440"></a> connects the points defined<a id="11375"></a> by those vectors in 3-D<a id="11950"></a> space. The optional <code>str</code> specifies the color<a id="11197"></a> and<a id="11441"></a>/or line style. If the <code>str</code> is omitted, the default line is solid blue.  Figure<a id="12424"></a> 11.4 shows three curves plotted in three dimensions, using the script shown in Listing 11.4. Each plot is in the z-x plane: the red curve<a id="11908"></a> at y = 0, the blue curve<a id="11909"></a> at y = 0.5, and<a id="11442"></a> the green curve<a id="11910"></a> at y = 1.</p>
      </div>
      <div class="listing">#listing_11_4#</div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Linear Parametric 3-D Plots">
      <!-- Linear Parametric 3-D Plots -->
      <h3 id="11_3_2">11.3.2	Linear Parametric 3-D<a id="11951"></a> Plots</h3>
      <div class="container clearfix">
        <div class="float-sm-right card">
             <img src="..\Images\Fig_11_5.JPG" alt="Figure 11.5" class="fig card-img">
             <p class="figure-name card-title">Figure<a id="12425"></a> 11.5: Linear Parametric 3-D<a id="11952"></a> Plots</p>
        </div>
        <p>We can generalize the concept of<a id="12123"></a> parametric<a id="11916"></a> plots<a id="12010"></a> to<a id="11788"></a> 3-D<a id="11953"></a>, as shown in Figure<a id="12426"></a> 11.5, in which the x, y, and<a id="11443"></a> z values are mappings of<a id="12124"></a> some linear<a id="11560"></a> parameter. On the left side, the spiral is an example<a id="12285"></a> of<a id="12125"></a> a 3-D<a id="11954"></a> plot where two of<a id="12126"></a> the dimensions, x and<a id="11444"></a> y, are dependent on<a id="11649"></a> the third, independent parameter. The independent parameter in this example<a id="12286"></a> is the rotation<a id="11724"></a> angle, <code>theta</code>, varying from<a id="11282"></a> 0 to<a id="11789"></a> 10&pi; (five complete revolutions). The x and<a id="11445"></a> y values are mapped as sin(u) and<a id="11446"></a> cos(u) — the classic Polar to<a id="11790"></a> Cartesian conversion for<a id="12387"></a> describing a circle. The spiral effect is accomplished by plotting <code>theta</code> on<a id="11650"></a> the z-axis.  The right half of<a id="12127"></a> Figure<a id="12427"></a> 11.5 illustrates a fully parametric<a id="11917"></a> plot, where the values of<a id="12128"></a> all three coordinates are mappings of<a id="12129"></a> an independent parameter, <code>t</code>. This particular example<a id="12287"></a> is a plot of<a id="12130"></a> the 3-D<a id="11955"></a> Brownian motion of<a id="12131"></a> a particle receiving random impulses in all three axes. Note the use of<a id="12132"></a> text<a id="12337"></a> anchored in x-y-z space to<a id="11791"></a> label points on<a id="11651"></a> the graph. The figure is drawn using Listing 11.5.</p>
      </div>
      <div class="listing">#listing_11_5#</div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="Other 3-D Plot Capabilities">
      <!-- Other 3-D Plot Capabilities -->
      <h3 id="11_3_3">11.3.3	Other 3-D<a id="11956"></a> Plot Capabilities</h3>
      <div class="container">
       <p>If you are using MATLAB<a id="11676"></a>, you can also create some more exotic 3-D<a id="11957"></a> plots<a id="12011"></a> that are not necessary to<a id="11792"></a> understand the basic principles of<a id="12133"></a> plotting, but are powerful methods for<a id="12388"></a> visualizing real data<a id="11693"></a>:</p>
       <ul>
          <li><code>bar3(<a id="11173"></a>x, y)</code> produces a bar graph with<a id="11580"></a> the values in <code>y</code> positioned at the horizontal locations in <code>x</code>. The options available can be studied with<a id="11581"></a><br>
          <code>>> help<a id="11389"></a> bar3.</code></li>
          <li><code>barh3(<a id="11175"></a>x, y)</code> produces a bar graph with<a id="11582"></a> the values in <code>y</code> positioned at the horizontal locations in <code>x</code>. The options available can be studied with<a id="11583"></a> <br>
          <code>>> help<a id="11390"></a> barh.</code></li>
          <li><code>pie3(<a id="11330"></a>y)</code> makes a 3-D<a id="11958"></a> pie chart of<a id="12134"></a> the values in <code>y</code>. For more options, see<br>
          <code>>> help<a id="11391"></a> pie3.</code></li>
        </ul>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="4" data-sect-name="Surface Plots">
    <!-- Surface Plots -->
    <h2 id="11_4">11.4 Surface Plots</h2>
    <div class="container">
      <p>In Section 11.3.2, we saw that data<a id="11694"></a> can be generated for<a id="12389"></a> all three axes based on<a id="11652"></a> one linear<a id="11561"></a> parameter. However, more dramatic graphics are produced by a different group of<a id="12135"></a> 3-D<a id="11959"></a> graphics functions<a id="12311"></a> that produce images<a id="11404"></a> based on<a id="11653"></a> mapping<a id="11185"></a> a 2-D<a id="11935"></a> surface<a id="12049"></a>. The underlying 2-D<a id="11936"></a> surface<a id="12050"></a> is sometimes referred to<a id="11793"></a> as plaid<a id="11970"></a> because of<a id="12136"></a> its conceptual similarity to<a id="11794"></a> a Scottish tartan pattern. To design such a pattern, one needs only to<a id="11795"></a> specify the color<a id="11198"></a> sequence of<a id="12137"></a> the horizontal and<a id="11447"></a> vertical threads. In the same way, we specify a plaid<a id="11971"></a> by defining vectors of<a id="12138"></a> the row and<a id="11448"></a> column data<a id="11695"></a> configurations.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Basic Capabilities">
      <!-- Basic Capabilities -->
      <h3 id="11_4_1">11.4.1	Basic Capabilities</h3>
      <div class="container">
        <p>Three fundamental functions<a id="12312"></a> are used to<a id="11796"></a> create 3-D<a id="11960"></a> surface<a id="12051"></a> plots<a id="12012"></a>:</p>
        <ul>
          <li><code>[xx, yy] = meshgrid(<a id="11322"></a>x, y)</code> accepts the <code>x<sub>1*m</sub></code> and<a id="11449"></a> <code>y<sub>1*n</sub></code> vectors that bound the edges<a id="11215"></a> of<a id="12139"></a> the plaid<a id="11972"></a> and<a id="11450"></a> replicates the rows and<a id="11451"></a> columns appropriately to<a id="11797"></a> produce <code>xx<sub>n*m</sub></code> and<a id="11452"></a> <code>yy<sub>n*m</sub></code>, containing the <code>x</code> and<a id="11453"></a> <code>y</code> values (respectively) of<a id="12140"></a> the complete plaid<a id="11973"></a>. This enables us in general to<a id="11798"></a> compute mappings for<a id="12390"></a> the 3-D<a id="11961"></a> coordinates of<a id="12141"></a> the figure we want to<a id="11799"></a> plot.</li>
          <li><code>mesh(<a id="11317"></a>xx, yy, zz)</code> plots<a id="12013"></a> the surface<a id="12052"></a> as white facets outlined by colored lines. The line coloring uses one of<a id="12142"></a> many color<a id="11199"></a> maps (listed in Appendix A), where the color<a id="11200"></a> is selected in proportion to<a id="11800"></a> the <code>zz</code> parameter. You can turn the white facets transparent with<a id="11584"></a> the command <code>hidden off</code>.</li>
          <li><code>surf(<a id="11353"></a>xx, yy, zz)</code> plots<a id="12014"></a> the surface<a id="12053"></a> as colored facets outlined by black lines. The line coloring by default is selected in proportion to<a id="11801"></a> the <code>zz</code> parameter. You can remove the lines by using one of<a id="12143"></a> a number of<a id="12144"></a> shading commands listed in Appendix A.</li>
        </ul>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Simple Exercises">
      <!-- Simple Exercises -->
      <h3 id="11_4_2">11.4.2	Simple Exercises</h3>
      <div class="container clearfix">
        <div class="float-sm-right">
          <div class="card">
               <img src="..\Images\Fig_11_6.JPG" alt="Figure 11.6" class="fig card-img">
               <p class="figure-name card-title">Figure<a id="12428"></a> 11.6: Geometry of<a id="12145"></a> a cube<a id="12321"></a></p>
          </div>
          <div class="card">
               <img src="..\Images\Fig_11_7.JPG" alt="Figure 11.7" class="fig card-img">
               <p class="figure-name card-title">Figure<a id="12429"></a> 11.7: Cube with<a id="11585"></a> solid fill</p>
          </div>
        </div>
        <p>We will consider some simple situations that illustrate many of<a id="12146"></a> the features of<a id="12147"></a> surface<a id="12054"></a> drawing.</p>
        <p><b>Draw a cube<a id="12322"></a></b>: In this example<a id="12288"></a>, in order to<a id="11802"></a> understand the underlying logic<a id="11626"></a>, we will develop the basic concept of<a id="12148"></a> drawing a cube<a id="12323"></a> without the help<a id="11392"></a> of<a id="12149"></a> the <code>meshgrid(<a id="11323"></a>...)</code> function<a id="11237"></a>. Figure<a id="12430"></a> 11.6 shows the coordinates of<a id="12150"></a> a cube<a id="12324"></a> of<a id="12151"></a> side 2 units centered at the origin drawn with<a id="11586"></a> simple line plots<a id="12015"></a> and<a id="11454"></a> Figure<a id="12431"></a> 11.7 shows the same cube<a id="12325"></a> drawn as a solid object. Before we descend into specifics, you need to<a id="11803"></a> understand specifically in the case<a id="11180"></a> of<a id="12152"></a> this cube<a id="12326"></a> how the <code>surf(<a id="11354"></a>...)</code> function<a id="11238"></a> works. Visualize four pens that can draw in 3-D<a id="11962"></a> space attached to<a id="11804"></a> the tops of<a id="12153"></a> your forefingers and<a id="11455"></a> thumbs respectively.Put your forefingers and<a id="11456"></a> thumbs together at the point P, and<a id="11457"></a> then slide them out to<a id="11805"></a> the points A, B, C and<a id="11458"></a> D. The <code>surf(<a id="11355"></a>...)</code>function<a id="11239"></a> fills in a surface<a id="12055"></a> between the lines you drew making the top of<a id="12154"></a> the cube<a id="12327"></a>. Now slide your fingers and<a id="11459"></a> thumbs down the sides of<a id="12155"></a> the cube<a id="12328"></a> to<a id="11806"></a> the points E, F, G and<a id="11460"></a> H. Filling in those surfaces draws the sides of<a id="12156"></a> the cube<a id="12329"></a>.  Finally, draw the bottom by sliding your fingers and<a id="11461"></a> thumbs across the bottom of<a id="12157"></a> the cube<a id="12330"></a> to<a id="11807"></a> its center at Q.</p>
        <p>To define the sides of<a id="12158"></a> the cube<a id="12331"></a>, we need to<a id="11808"></a> draw four lines to<a id="11809"></a> complete the horizontal square<a id="12305"></a>, thereby needing five columns with<a id="11587"></a> the first column repeated at the last column.  To define the top and<a id="11462"></a> bottom of<a id="12159"></a> the cube<a id="12332"></a>, we must add the points P and<a id="11463"></a> Q at the centers of<a id="12160"></a> the top and<a id="11464"></a> bottom. Although only one point each is required to<a id="11810"></a> define P and<a id="11465"></a> Q, the array<a id="11169"></a> must have the same number of<a id="12161"></a> columns in each row. Therefore, P and<a id="11466"></a> Q must be replicated five times to<a id="11811"></a> keep the arrays rectangular.</p>
        <p>Listing 11.6 shows the code that plots<a id="12016"></a> this cube<a id="12333"></a> from<a id="11283"></a> scratch.</p>
      </div>
      <div class="listing">#listing_11_6#</div>
      <div class="container clearfix">
        <div class="float-sm-right card">
             <img src="..\Images\Fig_11_8.JPG" alt="Figure 11.8" class="fig card-img">
             <p class="figure-name card-title">Figure<a id="12432"></a> 11.8: A Parabolic Dish</p>
        </div>
        <p><b>A Simple Parabolic Dish</b>:  The simplest surface<a id="12056"></a> plots<a id="12017"></a> are obtained by defining a z value<a id="12342"></a> for<a id="12391"></a> each point on<a id="11654"></a> an x-y plaid<a id="11974"></a>. We will continue<a id="11204"></a> with<a id="11588"></a> a simple example<a id="12289"></a> illustrating the use of<a id="12162"></a> <code>meshgrid(<a id="11324"></a>...)</code> to<a id="11812"></a> define the plaid<a id="11975"></a>. Consider
        how we might plot the data<a id="11696"></a> shown in Figure<a id="12433"></a> 11.8 . Before we look at the code, consider what the picture represents. The independent variables are <code>x</code> and<a id="11467"></a> <code>y</code>, each covering the range from<a id="11284"></a> −3 to<a id="11813"></a> 3, each having seven discrete<a id="11213"></a>
        values. As the title indicates, the <code>z</code> values are calculated as the sum of<a id="12163"></a> <code>x<sup>2</sup></code> and<a id="11468"></a>
        <code>y<sup>2</sup></code>. However, we don't need 14 <code>z</code> values as the range of<a id="12164"></a> <code>x</code> and<a id="11469"></a> <code>y</code> values might suggest, but <code>49</code>! In order to<a id="11814"></a> plot the 3-D<a id="11963"></a> shape of<a id="12165"></a> our parabolic<a id="11913"></a> bowl, we must have a <code>z</code> value<a id="12343"></a> for<a id="12392"></a> every point on<a id="11655"></a> the <code>x-y</code> surface<a id="12057"></a>. Each of<a id="12166"></a> these points has values of<a id="12167"></a> <code>x</code> and<a id="11470"></a> <code>y</code> corresponding to<a id="11815"></a> the intersections of<a id="12168"></a> the <code>x</code> and<a id="11471"></a> <code>y</code> vectors. Therefore, the process of<a id="12169"></a> creating<a id="11372"></a> this plot has three parts:</p>
        <ol>
          <li>Develop the underlying plaid<a id="11976"></a> specifying the x-y location of<a id="12170"></a> every point on<a id="11656"></a> the x-y plane.</li>
          <li>Calculate the z values from<a id="11285"></a> the plaid<a id="11977"></a>.</li>
          <li>Call a plotting function<a id="11240"></a> that will accept the plaid<a id="11978"></a> and<a id="11472"></a> these z values to<a id="11816"></a> produce the required plot.</li>
        </ol>
        <p>The code to<a id="11817"></a> accomplish this is shown in Listing 11.7.</p>
      </div>
      <div class="listing">#listing_11_7#</div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="3-D Parametric Surfaces">
      <!-- 3-D Parametric Surfaces -->
      <h3 id="11_4_3">11.4.3	3-D<a id="11964"></a> Parametric Surfaces</h3>
      <div class="container clearfix">
        <div class="float-sm-right card">
             <img src="..\Images\Fig_11_9.JPG" alt="Figure 11.9" class="fig card-img">
             <p class="figure-name card-title">Figure<a id="12434"></a> 11.9: A Cylinder</p>
        </div>
        <p><strong>Cylinder</strong>: Consider first the construction of<a id="12171"></a> a cylinder. One could consider this as a sheet of<a id="12172"></a> paper rolled up in a cylindrical shape. We could visualize that piece of<a id="12173"></a> paper as a plaid<a id="11979"></a> of<a id="12174"></a> values, not of<a id="12175"></a> <code>x-y</code>, but perhaps <code>x−&theta;</code> where the range of<a id="12176"></a> <code>x</code> would be from<a id="11286"></a> 0 to<a id="11818"></a> the length of<a id="12177"></a> the cylinder, and<a id="11473"></a> the range of<a id="12178"></a> <code>&theta;</code> would be <code>0</code> to<a id="11819"></a> <code>360°</code>.  To plot this, one would then merely need to<a id="11820"></a> create a plaid<a id="11980"></a> in <code>x</code> and<a id="11474"></a> <code>&theta;</code>, and<a id="11475"></a> then decide on<a id="11657"></a> the mapping<a id="11186"></a> from<a id="11287"></a> <code>x-&theta;</code> to<a id="11821"></a> the <code>y</code> and<a id="11476"></a> <code>z</code> values of<a id="12179"></a> the cylinder.</p>
        <p>Fortunately for<a id="12393"></a> us, however, the Matlab folks have provided a function<a id="11241"></a> named <code>cylinder</code> that takes two parameters<a id="12350"></a>: a vector or radius values along the length of<a id="12180"></a> the cylinder and<a id="11477"></a> the number of<a id="12181"></a> points around the circumference. We will see later how to<a id="11822"></a> generalize this, but for<a id="12394"></a> now, we use it in one line of<a id="12182"></a> code to<a id="11823"></a> compute the <code>xx</code>, <code>yy</code> and<a id="11478"></a> <code>zz</code> values that will draw a cylinder.</p>
        <p>The resulting picture is shown in Figure<a id="12435"></a> 11.9, and<a id="11479"></a> the code is shown in Listing 11.8.</p>
      </div>
      <div class="listing">#listing_11_8#</div>
      <div class="container clearfix">
        <div class="float-sm-right card">
             <img src="..\Images\Fig_11_10.JPG" alt="Figure 11.10" class="fig card-img">
             <p class="figure-name card-title">Figure<a id="12436"></a> 11.10: A Simple Sphere</p>
        </div>
        <p><strong>Sphere</strong>: Now, we construct a sphere<a id="12296"></a> as shown in Figure<a id="12437"></a> 11.10. Conceptually, we could start with<a id="11589"></a> a cylinder but instead of<a id="12183"></a> using a constant radius in the x direction, we will calculate the radius in that direction by rotating<a id="11620"></a> a second angle from<a id="11288"></a> 0 to<a id="11824"></a> 180°. Again, however, the Mathworks folks have taken all the fun and<a id="11480"></a> math out of<a id="12184"></a> this by providing the <code>sphere(<a id="11347"></a>N)</code> function<a id="11242"></a> where the parameter determines the number of<a id="12185"></a> facets around the face of<a id="12186"></a> the sphere<a id="12297"></a>.</p>
        <p>The code for<a id="12395"></a> drawing this sphere<a id="12298"></a> is shown in Listing 11.9.</p>
      </div>
      <div class="listing">#listing_11_9#</div>
    </div>

    <div class="chp-subsection" data-sub-num="4" data-sub-name="Bodies of Rotation">
      <!-- Bodies of Rotation -->
      <h3 id="11_4_4">11.4.4	Bodies of<a id="12187"></a> Rotation</h3>
      <div class="container clearfix">
        <div class="float-sm-right card">
             <img src="..\Images\Fig_11_11.JPG" alt="Figure 11.11" class="fig card-img">
             <p class="figure-name card-title">Figure<a id="12438"></a> 11.11: Rotate a Function about the X Axis</p>
        </div>
        <div class="float-sm-right card">
             <img src="..\Images\Fig_11_12.JPG" alt="Figure 11.12" class="fig card-img">
             <p class="figure-name card-title">Figure<a id="12439"></a> 11.12: Rotate a Function about X Axis</p>
        </div>
        <p>The cylinder and<a id="11481"></a> sphere<a id="12299"></a> drawn in the above section are special cases of<a id="12188"></a> a more general form of<a id="12189"></a> 3-D<a id="11965"></a> body. Bodies of<a id="12190"></a> rotation<a id="11725"></a> are created in general by rotating<a id="11621"></a> a function<a id="11243"></a> <code>v = f(u)</code> defined<a id="11376"></a> over a range of<a id="12191"></a> <code>u</code> values about the <code>x</code>, <code>y</code> or <code>z</code> axes.  In general, we make no claims about the nature<a id="11408"></a> of<a id="12192"></a> <code>f(u)</code>. It could be a rational function<a id="11244"></a>, or merely a “lookup table” specifying a value<a id="12344"></a> of<a id="12193"></a> <code>f(u)</code> for<a id="12396"></a> every <code>u</code>.  First, we consider rotating<a id="11622"></a> a continuous function<a id="11245"></a> <code>v = f(u)</code> about the x axis.</p>
        <p><strong>Using the <b><code>cylinder(<a id="11207"></a>...)</code></b> function<a id="11246"></a></strong>: To rotate <code>v = f(u)</code> about the x-axis, we could consider this equation as <code>r = f(x)</code>. Figure<a id="12440"></a> 11.11 shows the logic<a id="11627"></a> of<a id="12194"></a> this rotation<a id="11726"></a>. The independent variable<a id="12356"></a> is x, and<a id="11482"></a> the values of<a id="12195"></a> y and<a id="11483"></a> z are computed as the usual polar-to<a id="11825"></a>-Cartesian conversion:</p>
        <p><code>y = r cos(u)</code> and<a id="11484"></a> <br>
        <code>z = r sin(u)</code>.</p>
        <p>Whenever the rotation<a id="11727"></a> you want can be performed using the <code>cylinder(<a id="11208"></a>...)</code> function<a id="11247"></a>, you should do so, as is the case<a id="11181"></a> here. We want to<a id="11826"></a> put the independent variable<a id="12357"></a> <code>u</code> along the axis of<a id="12196"></a> rotation<a id="11728"></a> <code>x</code>  and<a id="11485"></a> make the dependent variable<a id="12358"></a> <code>v</code> the radius. The most general form of<a id="12197"></a> the <code>cylinder(<a id="11209"></a>...)</code> function<a id="11248"></a> allows you to<a id="11827"></a> specify a vector of<a id="12198"></a> radii equally spaced along the cylinder, which is the case<a id="11182"></a> here. Listing 11.9 shows how we do this, and<a id="11486"></a> Fig 11.12 is the result.</p>
      </div>
      <div class="container clearfix">
        <div class="float-sm-right">
          <div class="card">
             <img src="..\Images\Fig_11_13.JPG" alt="Figure 11.13" class="fig card-img">
             <p class="figure-name card-title">Figure<a id="12441"></a> 11.13: Rotate a Function about Z Axis</p>
          </div>
          <div class="card">
             <img src="..\Images\Fig_11_14.JPG" alt="Figure 11.14" class="fig card-img">
             <p class="figure-name card-title">Figure<a id="12442"></a> 11.14: Rotate a Function about Z Axis</p>
          </div>
        </div>
        <p><strong>Generalized Bodies of<a id="12199"></a> Rotation</strong>: To rotate a shaping function<a id="11249"></a> <code>v = f(u)</code> about the z-axis requires some thought. Consider Fig 11.13. Although superficially similar to<a id="11828"></a> the X axis rotation<a id="11729"></a> in Figs 11.11 and<a id="11487"></a> 11.12 above, we need to<a id="11829"></a> exchange to<a id="11830"></a> roles of<a id="12200"></a> <code>u</code> and<a id="11488"></a> <code>v</code>. The independent variable<a id="12359"></a> <code>u</code> is now the radius of<a id="12201"></a> the shape and<a id="11489"></a> <code>v</code>, the dependent variable<a id="12360"></a>, needs to<a id="11831"></a> lie along the axis of<a id="12202"></a> rotation<a id="11730"></a>, z. There are several ways to<a id="11832"></a> accomplish this, and<a id="11490"></a> we will consider them in decreasing levels of<a id="12203"></a> 'horrible':</p>
        <ol>
          <li>We could invert the body of<a id="12204"></a> <code>f(u)</code> by changing<a id="11739"></a> it to<a id="11833"></a> <code>sqrt(u)</code>, but only the very simple functions<a id="12313"></a> are invertible like this</li>
          <li>As we will see later, Matlab has some useful tools that will look up equally spaced values of<a id="12205"></a> <code>v</code> and<a id="11491"></a> produce a new set of<a id="12206"></a> <code>u</code> values at those spacings, or</li>
          <li>we could give up on<a id="11658"></a> the <code>cylinder(<a id="11210"></a>...)</code> function<a id="11250"></a> and<a id="11492"></a> do the rotation<a id="11731"></a> from<a id="11289"></a> first principles.</li>
        </ol>
        <p>We will implement this rotation<a id="11732"></a> using the third, most general strategy. Figure<a id="12443"></a> 11.13 shows the logic<a id="11628"></a> of<a id="12207"></a> this rotation<a id="11733"></a>. The independent variable<a id="12361"></a> is now <code>r</code>, and<a id="11493"></a> the values of<a id="12208"></a> <code>x</code> and<a id="11494"></a> <code>y</code> are computed as the usual polar-to<a id="11834"></a>-Cartesian conversion:</p>
        <p><code>x = r cos(u)</code> and<a id="11495"></a> <br>
        <code>y = r sin(u)</code>.</p>
        <p>You can see the results in Figure<a id="12444"></a> 11.14.  The code that generated this output is in Listing 11.10.</p>
      </div>
      <div class="listing">#listing_11_10#</div>
      <div class="container clearfix">
        <div class="float-sm-right card">
           <img src="..\Images\Fig_11_15.JPG" alt="Figure 11.15" class="fig card-img">
           <p class="figure-name card-title">Figure<a id="12445"></a> 11.15: A Donut</p>
        </div>
        <p><strong>More Complex shapes: a Torus (Donut)</strong>: A donut is actually very simple to<a id="11835"></a> draw from<a id="11290"></a> first principles.  We merely need to<a id="11836"></a> visualize what the cross-section looks like and<a id="11496"></a> then rotate it about the appropriate axis.  Clearly, the axis about which the final rotation<a id="11734"></a> is performed will be the Z axis so that the donut will be horizontal.  We therefore first visualize in the x-z plane what the section looks like.  In this case<a id="11183"></a>, it will be a circle offset from<a id="11291"></a> the origin of<a id="12209"></a> coordinates by a distance that will become the radius of<a id="12210"></a> the donut. That circle will be created using standard polar-to<a id="11837"></a>-Cartesian coordinates.  Finally, we realize that the plaid<a id="11981"></a> on<a id="11659"></a> which it will be built consists of<a id="12211"></a> two angles each going from<a id="11292"></a> 0 to<a id="11838"></a> 2&pi;.</p>
        <p>The code to<a id="11839"></a> accomplish this is in Listing 11.11, and<a id="11497"></a> the resulting image<a id="12069"></a> is in Figure<a id="12446"></a> 11.15.</p>
      </div>
      <div class="listing">#listing_11_11#</div>
      <div class="container clearfix">
        <div class="float-sm-right card">
           <img src="..\Images\Fig_11_16.JPG" alt="Figure 11.16" class="fig card-img">
           <p class="figure-name card-title">Figure<a id="12447"></a> 11.16: An Irregular Shape</p>
        </div>
        <p><strong>Rotating Discrete Functions</strong>: There is no need to<a id="11840"></a> restrict ourselves to<a id="11841"></a> continuous functions<a id="12314"></a> as the profiles for<a id="12397"></a> bodies<a id="12319"></a> of<a id="12212"></a> rotation<a id="11176"></a>. Figure<a id="12448"></a> 11.16 shows the 2-D<a id="11937"></a> profile of<a id="12213"></a> a fictitious machine part and<a id="11498"></a> the picture created when that profile is rotated about the x-axis. The figure was generated by the code shown in Listing 11.12.</p>
      </div>
      <div class="listing">#listing_11_12#</div>
      <div class="container">
        <p>Notice in Listing 11.12 that we elected to<a id="11842"></a> use the <code>cylinder(<a id="11211"></a>...)</code> function<a id="11251"></a> to<a id="11843"></a> make the values of<a id="12214"></a> <code>v</code> the radii of<a id="12215"></a> the cylinder.  However, this placed the values of<a id="12216"></a> <code>v</code> at regular intervals down the cylinder.  Since the corresponding values of<a id="12217"></a> <code>u</code> indicated where they should have been placed, we then had to<a id="11844"></a> move all the <code>xx</code> circle values to<a id="11845"></a> the locations specified in <code>u</code>. We could have replaced all the code from<a id="11293"></a> <code>subplot(<a id="11350"></a>1, 2, 1)</code> to<a id="11846"></a> <code>surf(<a id="11356"></a>xx, yy, zz)</code> with<a id="11590"></a> this:</p>
      </div>
      <div class="exercise">#exercise_11#</div>
    </div>

    <div class="chp-subsection" data-sub-num="5" data-sub-name="Other 3-D Surface Plot Capabilities">
      <!-- Other 3-D Surface Plot Capabilities -->
      <h3 id="11_4_5">11.4.5	Other 3-D<a id="11966"></a> Surface Plot Capabilities</h3>
      <div class="container">
        <p>The MATLAB<a id="11677"></a> language defines special-purpose functions<a id="12315"></a> to<a id="11847"></a> enhance the quality of<a id="12218"></a> surface<a id="12058"></a> plots<a id="12018"></a>:</p>
        <ul>
          <li><code>alpha(<a id="11166"></a>x)</code> sets the transparency of<a id="12219"></a> the surfaces. 0<=x<=1, where 0 means completely transparent and 1 (the default value) is opaque. The options available can be studied with <code>>> help<a id="11393"></a> alpha</code>.
          <li><code>contour(<a id="11205"></a>z)</code> produces a contour plot of<a id="12220"></a> the plaid<a id="11982"></a> surface<a id="12059"></a> defined<a id="11377"></a> by z. The options available can be studied with<a id="11591"></a> <code>>> help<a id="11394"></a> contour</code>.</li>
          <li><code>[x,y,z] = cylinder(<a id="11212"></a>n)</code> constructs the meshgrid for<a id="12398"></a> a cylinder with<a id="11592"></a> n facets in each direction. For more options, see <code>>> help<a id="11395"></a> cylinder</code>.</li>
          <li><code>[x,y,z] = ellipsoid(<a id="11217"></a>n)</code> constructs the meshgrid for<a id="12399"></a> an ellipsoid with<a id="11593"></a> n facets in each direction. For more options, see <code>>> help<a id="11396"></a> ellipsoid</code>.</li>
          <li><code>[x,y,z] = sphere(<a id="11348"></a>n)</code> constructs the meshgrid for<a id="12400"></a> a sphere<a id="12300"></a> with<a id="11594"></a> n facets in each direction. For more options, see <code>>> help<a id="11397"></a> sphere<a id="12301"></a></code>.</li>
          <li><code>meshc(<a id="11321"></a>x,y,z)</code> makes a mesh plot with<a id="11595"></a> contours below. For more options, see <code>>> help<a id="11398"></a> meshc</code>.</li>
          <li><code>meshz(<a id="11328"></a>x,y,z)</code> makes a mesh plot with<a id="11596"></a> vertical line extensions. For more options, see <code>>> help<a id="11399"></a> meshz</code>.</li>
          <li><code>surfc(<a id="11362"></a>x,y,z)</code> makes a surface<a id="12060"></a> plot with<a id="11597"></a> contours below. For more options, see <code>>> help<a id="11400"></a> surfc</code>.</li>
          <li><code>surfz(<a id="11363"></a>x,y,z)</code> makes a surface<a id="12061"></a> plot with<a id="11598"></a> vertical line extensions. For more options, see <code>>> help<a id="11401"></a> surfz</code>.</li>
          <li><code>waterfall(<a id="11368"></a>x,y,z)</code> makes a mesh plot with<a id="11599"></a> vertical line extensions only in the x direction. For more options, see <code>>> help<a id="11402"></a> waterfall</code>.</li>
        </ul>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="6" data-sub-name="Assembling Compound Surfaces">
      <!-- Assembling Compound Surfaces -->
      <h3 id="11_4_6">11.4.6	Assembling Compound Surfaces<a id="11203"></a></h3>
      <div class="container clearfix">
        <div class="float-sm-right card">
          <video controls class="card-image"><source src="..\Images\klein_bottle.mp4" type="video/mp4">Figure<a id="12449"></a> 11.17</video>
          <p class="figure-name card-title">Fig 11.17: A Klein Bottle</p>
        </div>
        <p>We can assemble more complex solid bodies<a id="12320"></a> by constructing<a id="12308"></a> simple surfaces and<a id="11499"></a> concatenating<a id="12294"></a> the data<a id="11697"></a> before submitting it to<a id="11848"></a> the rendering machine. Shapes of<a id="12221"></a> considerable complexity can be assembled this way. Consider, for<a id="12401"></a> example<a id="12290"></a>, the Klein bottle shown below, a well-documented example<a id="12291"></a> of<a id="12222"></a> topological curiosity. The particular example<a id="12292"></a> shown in Figure<a id="12450"></a> 11.17. It was constructed by building<a id="11177"></a> a set of<a id="12223"></a> simple components and<a id="11500"></a> then concatenating<a id="12295"></a> the arrays. All the components could be created from<a id="11294"></a> the examples<a id="11379"></a> shown above. Moving from<a id="11295"></a> top to<a id="11849"></a> bottom, these components are:</p>
        <ul>
          <li> the top of<a id="12224"></a> the handle is just half of<a id="12225"></a> a donut,</li>
          <li> the curved section of<a id="12226"></a> the handle is a cylinder with<a id="11600"></a> the yy circled shifted with<a id="11601"></a> a cosine function<a id="11252"></a>.</li>
          <li> the top part of<a id="12227"></a> the body is a cosine function<a id="11253"></a> rotated about the z axis, and<a id="11501"></a></li>
          <li> the bottom of<a id="12228"></a> the body is another donut sliced in half horizontally.</li>
        </ul>
       <p>The code is a little too complex to<a id="11850"></a> be included here, but can be found on<a id="11660"></a> the companion Web site. If you are curious, Figure<a id="12451"></a> 11.17 is actually a video clip explaining the very strange topological challenge posed by the Klein bottle.</p>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="5" data-sect-name="Manipulating Plotted Data">
    <!-- Manipulating Plotted Data -->
    <h2 id="11_5">11.5 Manipulating Plotted Data</h2>
    <div class="container">
      <p>Two new features introduced with<a id="11602"></a> MATLAB<a id="11678"></a> 7.6 (R2008a) allow you to<a id="11851"></a> interact with<a id="11603"></a> the data<a id="11698"></a> presented in a plot. Brushing allows you to<a id="11852"></a> select portions of<a id="12229"></a> the data<a id="11699"></a> presented in a plot and<a id="11502"></a> make changes to<a id="11853"></a> the values presented. Linking allows you to<a id="11854"></a> connect the plotted data<a id="11700"></a> to<a id="11855"></a> the underlying data<a id="11701"></a> source, so that when you make changes to<a id="11856"></a> the plotted data<a id="11702"></a>, these changes are reflected in the data<a id="11703"></a> source. Whereas these tools allow the user<a id="11720"></a> to<a id="11857"></a> change the appearance of<a id="12230"></a> data<a id="11704"></a> presentations interactively, a careful user<a id="11721"></a> would return to<a id="11858"></a> the original tools that created the plots<a id="12019"></a> and<a id="11503"></a> explicitly insert the logic<a id="11629"></a> that changes the appearance of<a id="12231"></a> the results. This provides a traceable set of<a id="12232"></a> programs that show exactly how the data<a id="11705"></a> were generated.</p>
    </div>
  </div>

  <div class="chp-section" data-sect-num="6" data-sect-name="Engineering Example - Visualizing Geographic Data">
    <!-- Engineering Example -->
    <h2 id="11_6">11.6  Engineering Example - Visualizing Geographic Data</h2>
    <div class="container">
      <p>You have been given two files of<a id="12233"></a> data<a id="11706"></a>: "atlanta.txt", which presents the streets of<a id="12234"></a> Atlanta in graphical form, and<a id="11504"></a> "ttimes.txt", which gives the travel times between Atlanta suburbs and<a id="11505"></a> the city center. You have been asked to<a id="11859"></a> present these data<a id="11707"></a> sets in a manner that will help<a id="11403"></a> to<a id="11860"></a> visualize and<a id="11506"></a> validate the data<a id="11708"></a>.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Analyzing the Data">
      <!-- Analyzing the Data -->
      <h3 id="11_6_1">11.6.1	Analyzing the Data</h3>
      <div class="container clearfix">
        <p>First, we proceed to<a id="11861"></a> determine the nature<a id="11409"></a> of<a id="12235"></a> the data<a id="11709"></a> by opening<a id="11671"></a> the files and<a id="11507"></a> examining their format<a id="11405"></a> and<a id="11508"></a> content.</p>
        <ol>
          <li><b>Determine the file format<a id="11406"></a></b>: the first step is to<a id="11862"></a> open the data<a id="11710"></a> files in a plain text<a id="12338"></a> editor. The format<a id="11407"></a> appears to<a id="11863"></a> be consistent with<a id="11604"></a> that of<a id="12236"></a> a text<a id="12339"></a> file delimited<a id="12340"></a> by tab characters. Since there are no strings in the files, it should be suitable to<a id="11864"></a> be read using the built-in <code>dlmread(<a id="11214"></a>...)</code> function<a id="11254"></a>. Of course, the down side of<a id="12237"></a> being able to<a id="11865"></a> read the files easily is that we have no idea what they contain, and<a id="11509"></a> we need to<a id="11866"></a> spend some quality time figuring that out.</li>
          <li><b>Discern the street map file content</b>: Table 11.1 shows the first few lines of<a id="12238"></a> the file &quot;atlanta.txt&quot; simplified by omitting certain irrelevant columns. The numbers<a id="11740"></a> in columns 2-5 are pairs, the first of<a id="12239"></a> the pair being a large negative number, and<a id="11510"></a> the second a smaller positive number. Assuming that each row of<a id="12240"></a> this file is a street segment, these could be the x-y coordinates of<a id="12241"></a> the ends of<a id="12242"></a> a line. A little thought confirms this guess when we realize that the latitude of<a id="12243"></a> Atlanta is around -84&deg; relative to<a id="11867"></a> the Greenwich meridian, and<a id="11511"></a> its longitude is around 33&deg; north of<a id="12244"></a> the equator - clearly, the values in these columns are 1,000,000 times the latitude and<a id="11512"></a> longitude of<a id="12245"></a> points within the city, probably each end<a id="11218"></a> of<a id="12246"></a> street segments. Column 6 contains numbers<a id="11741"></a> mostly in the range 1-6, which could indicate the type of<a id="12247"></a> street. We could explore this idea by coloring each line according to<a id="11868"></a> that value<a id="12345"></a>.</li>
          <div class="card">
             <img src="..\Images\Table_11_1.JPG" alt="Table 11.1" class="fig fig-wide card-img">
             <p class="figure-name card-title">Table 11.1: Part of<a id="12248"></a> the File</p>
          </div>
          <li><b>Discern the travel time file content</b>: Table 11.2 shows the first few lines of<a id="12249"></a> the file "ttimes.txt" simplified by omitting certain irrelevant columns. The same latitude/longitude values occur in columns 4 and<a id="11513"></a> 5, but they are not repeated, suggesting that the data<a id="11711"></a> in this file are in a different form. Examining the first two columns, the numbers<a id="11742"></a> in column 2 cycle repeatedly from<a id="11296"></a> 1 to<a id="11869"></a> 75, with<a id="11605"></a> column 1 counting the number of<a id="12250"></a> cycles<a id="11206"></a> up to<a id="11870"></a> 75. Furthermore, the values in column 5 are the same whenever column 1 is the same, and<a id="11514"></a> the values in column 4 are the same whenever the value<a id="12346"></a> in column 2 matches. This seems to<a id="11871"></a> be much like the plaid<a id="11983"></a> that results from<a id="11297"></a> a meshgrid(<a id="11325"></a>...) function<a id="11255"></a> call. The values in column 6 then become evident — they would be the z values of<a id="12251"></a> the plaid<a id="11984"></a>, and<a id="11515"></a> it seems reasonable to<a id="11872"></a> assume that they represent the travel time in minutes.</li>
          <div class="card">
             <img src="..\Images\Table_11_2.JPG" alt="Figure 11.16" class="fig card-img">
             <p class="figure-name card-title">Table 11.2: Part of<a id="12252"></a> the File</p>
          </div>
        </ol>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Displaying the Data">
      <h3 id="11_6_2">11.6.2	Displaying the Data</h3>
      <div class="container clearfix">
        <p>With this much understanding of<a id="12253"></a> the data<a id="11712"></a> sources, we proceed to<a id="11873"></a> solve the problem of<a id="12254"></a> presenting the data<a id="11713"></a>. The script shown in Listing 11.13 shows the code used to<a id="11874"></a> visualize these data<a id="11714"></a> files and<a id="11516"></a> Figure<a id="12452"></a> 11.18 shows the resulting plot.</p>
        <div class="card">
          <video controls class="card-image"><source src="..\Images\Atlanta.mp4" type="video/mp4">Figure<a id="12453"></a> 11.17</video>
          <p class="figure-name card-title">Fig 11.18: Travel Times in Atlanta</p>
        </div>
       <p>As a credibility check, play the video clip to<a id="11875"></a> see the plot rotated to<a id="11876"></a> look straight down on<a id="11661"></a> the map. The travel time surface<a id="12062"></a> shows &quot;valleys&quot; of<a id="12255"></a> low travel times that follow the paths<a id="11380"></a> of<a id="12256"></a> the major expressways through the city.</p>
      </div>
      <div class="listing">#listing_11_13#</div>
    </div>
  </div>

  <!-- Chapter Summary -->
  <h2>Chapter Summary</h2>
  <div class="container">
    <p>This chapter presented the principles and<a id="11517"></a> practice of<a id="12257"></a> plotting:</p>
    <ul>
      <li>Basic 2-D<a id="11938"></a> line plots<a id="12020"></a> are accomplished by using <code>plot(<a id="11335"></a>x,y)</code>, where <code>x</code> is the independent variable<a id="12362"></a> and<a id="11518"></a> <code>y</code> the dependent variable<a id="12363"></a></li>
      <li>2-D<a id="11939"></a> parametric<a id="11918"></a> plots<a id="12021"></a> are accomplished by using <code>plot(<a id="11336"></a>x,y)</code>, where both <code>x</code> and<a id="11519"></a> <code>y</code> are dependent on<a id="11662"></a> another independent variable<a id="12364"></a></li>
      <li>3-D<a id="11967"></a> line and<a id="11520"></a> parametric<a id="11919"></a> plots<a id="12022"></a> are accomplished by using <code>plot3(<a id="11340"></a>x,y,z)</code></li>
      <li>Basic 3-D<a id="11968"></a> surface<a id="12063"></a> plots<a id="12023"></a> are accomplished by building<a id="11178"></a> a plaid<a id="11985"></a> using <code>[xx yy] = meshgrid(<a id="11326"></a>x,y)</code>, computing the <code>zz</code> layer as a function<a id="11256"></a> of<a id="12258"></a> <code>xx</code> and<a id="11521"></a> <code>yy</code>, and<a id="11522"></a> then plotting the surface<a id="12064"></a> using <code>mesh(<a id="11318"></a>xx, yy, zz)</code> or <code>surf(<a id="11357"></a>xx, yy, zz)</code></li>
      <li>Parametric surface<a id="12065"></a> plots<a id="12024"></a>, like parametric<a id="11920"></a> line plots<a id="12025"></a>, are achieved by building<a id="11179"></a> the plaid<a id="11986"></a> with<a id="11606"></a> two independent variables and<a id="11523"></a> making <code>xx</code>, <code>yy</code>, and<a id="11524"></a> <code>zz</code> functions<a id="12316"></a> of<a id="12259"></a> those independent variables</li>
      <li>Bodies of<a id="12260"></a> rotation<a id="11735"></a> are a special case<a id="11184"></a> of<a id="12261"></a> parametric<a id="11921"></a> surface<a id="12066"></a> plots<a id="12026"></a> where one of<a id="12262"></a> the independent variables is an angle with<a id="11607"></a> values between <code>0</code> and<a id="11525"></a> <code>2&pi;</code>.</li>
    </ul>
  </div>
<h2>Self Test</h2>
<div class="container">

Use the following questions to<a id="11877"></a> check your understanding of<a id="12263"></a> the material in this
chapter:
<h3>True or False</h3>
<ol>
<li>The plot(<a id="11337"></a>...) function<a id="11257"></a> needs only one parameter to<a id="11878"></a> function<a id="11258"></a>
correctly.</li>
<li>Plot enhancement<a id="12041"></a> functions<a id="12317"></a> may be called before or after the
function<a id="11259"></a> that plots<a id="12027"></a> the data<a id="11715"></a>.</li>
<li>You must provide plots<a id="12028"></a> for<a id="12402"></a> all the specified sub-plot areas.</li>
<li>meshgrid(<a id="11327"></a>...) accepts vectors of<a id="12264"></a> length m and<a id="11526"></a> n that bound the
edges<a id="11216"></a> of<a id="12265"></a> the plaid<a id="11987"></a> and<a id="11527"></a> produces two arrays sized m x n giving the
complete plaid<a id="11988"></a>.</li>
<li>To construct a parametric<a id="11922"></a> surface<a id="12067"></a>, both independent parameters<a id="12351"></a>
must be angles.</li>
<li>When rotating<a id="11623"></a> a function<a id="11260"></a> about the y-axis, the variables along the x
and<a id="11528"></a> y axes are computed from<a id="11298"></a> a classic polar-to<a id="11879"></a>-Cartesian
conversion.</li>
<li>To compute a body of<a id="12266"></a> rotation<a id="11736"></a>, the curve<a id="11911"></a> must be a continuous,
differentiable function<a id="11261"></a>.</li>
<li>Bodies of<a id="12267"></a> rotation<a id="11737"></a> are confined rotating<a id="11624"></a> about the x, y, or z axes.</li>
</ol>
<h3>Fill in the Blanks</h3>
<ol>
<li>Each time figure is called, a(n) ___________ is made available, with<a id="11608"></a>
figure number _____________.</li>
<li>To prepare for<a id="12403"></a> plotting, put ___________ or ____________ at the
beginning of<a id="12268"></a> your script.</li>
<li>Parametric plots<a id="12029"></a> allow the variables on<a id="11663"></a> each axis to<a id="11880"></a> be ____________
on<a id="11664"></a> a(n) _________________, _____________ variable<a id="12365"></a>.</li>
<li>The simplest surface<a id="12068"></a> plots<a id="12030"></a> are obtained by defining a(n)____________
value<a id="12347"></a> for<a id="12404"></a> each point on<a id="11665"></a> ___________.</li>
<li>We construct a sphere<a id="12302"></a> by wrapping a(n) ___________with<a id="11609"></a> two
_________________ as the independent variables around the sphere<a id="12303"></a>.</li>
<li>Bodies of<a id="12269"></a> rotation<a id="11738"></a> are created by rotating<a id="11625"></a> a(n) ____________ about
a(n) _______________.</li>
</ol>

<h3>Programming Projects</h3>
<ol>
<li>Write a script that creates six sub-plots<a id="12031"></a> in two columns each with<a id="11610"></a>
three rows. Each plot should have an appropriate title and<a id="11529"></a> labels on<a id="11666"></a>
the x and<a id="11530"></a> y axes. The plot in the top left sub-plot should be<br>
 y = cos( u) for<a id="12405"></a> values of<a id="12270"></a> u from<a id="11299"></a> -2pi to<a id="11881"></a> 2pi.<br>
 Subsequent plots<a id="12032"></a> going across
the rows before going down the columns should be of<a id="12271"></a> <br>
y = cos(2 u ),
y = cos(3 u ), etc., to<a id="11882"></a> y = cos(6 u ) over the same range of<a id="12272"></a> u.</li>
<li>Your task is to<a id="11883"></a> create a script called thisPlot . This script should do
the following:
<ul>
<li>Ask the user<a id="11722"></a> to<a id="11884"></a> enter in a positive number, N, greater than 5.</li>
<li>Calculate the factorial for<a id="12406"></a> each number from<a id="11300"></a> 1 to<a id="11885"></a> N. Each of<a id="12273"></a> these
values should be stored into a vector.</li>
<li>Display a graph titled 'Logarithmic Growth', where the
logarithms for<a id="12407"></a> each of<a id="12274"></a> the factorials are displayed.</li>
<li>Add to<a id="11886"></a> the graph a continuous linear<a id="11562"></a> line that follows the
equation y = x with<a id="11611"></a> x values from<a id="11301"></a> 1 to<a id="11887"></a> N.</li>
<li>Since the numbers<a id="11743"></a> will have different magnitudes, use plotyy to<a id="11888"></a>
plot the linear<a id="11563"></a> values on<a id="11667"></a> the right hand axis.</li>
</li></ul>
<li>Write a function<a id="11262"></a> called sineGraph that graphs<a id="11220"></a> a sine function<a id="11263"></a> four
times between the interval [start,stop] on<a id="11668"></a> the same graph. The
start and<a id="11531"></a> stop values should be parameters<a id="12352"></a> of<a id="12275"></a> the function<a id="11264"></a>. The
number of<a id="12276"></a> points per interval will vary. More specifically:
<ul>
<li>The first time you graph the sine function<a id="11265"></a>, you should have two
evenly spaced points, start and<a id="11532"></a> stop</li>
<li>The next plot should have four evenly spaced points - start ,
stop, and<a id="11533"></a> two points between them</li>
<li>The third should have eight evenly spaced points and<a id="11534"></a> the fourth
256 points.</li>
<li>Make sure to<a id="11889"></a> add a legend and<a id="11535"></a> a title - 'Multiple graphs<a id="11221"></a> on<a id="11669"></a> one
plot'  - and<a id="11536"></a> to<a id="11890"></a> label the axes. Make sure that each line has a
different color<a id="11201"></a>.</li>
<li>The function<a id="11266"></a> should return the x and<a id="11537"></a> y values for<a id="12408"></a> the 256 point set.
Test your function<a id="11267"></a> with<a id="11612"></a> the following intervals [0, p /2] , [0,2 p ] ,
[0,4 p ] , [0,16 p ].</li>
</ul></li>
<li>This programming<a id="11719"></a> problem will compare the surf(<a id="11358"></a>...) and<a id="11538"></a>
mesh(<a id="11319"></a>...) functions<a id="12318"></a> by putting two 3-D<a id="11969"></a> side-by-side plots<a id="12033"></a> for<a id="12409"></a>
comparison using subplot(<a id="11351"></a>...) . You should label all axes
accordingly ( 'X-axis', 'Y-axis' , etc.) and<a id="11539"></a> title your plot
corresponding to<a id="11891"></a> the problem statement.
<ul>
<li>On the left side, plot the function<a id="11268"></a> f(x,y)=x^2*cos(y) in the range
x= -5:5 and<a id="11540"></a> y= -5:5 using mesh and<a id="11541"></a> name your plot 'Using Mesh'.</li>
<li>On the right side, plot the same function<a id="11269"></a>, in the same range, but
using surf . Name your plot 'Using Surf'.</li>
</ul></li>
<li>Georgia Tech wants to<a id="11892"></a> tear down the Campanile and<a id="11542"></a> build a new
one that is ridiculously tall. However, before it is built, it needs you
to<a id="11893"></a> model it. Using the equation z = 1/(x^2 + y^2) as the model,
write a script that will plot the Campanile. Your domain should be
-.75 <= x <=.75 and -.75 <= y <= .75 using an increment of .05 for
each range. Set your axes such that all of<a id="12277"></a> the x, y domain is seen and<a id="11543"></a>
z runs from<a id="11302"></a> 0 to<a id="11894"></a> 300. Use surf(<a id="11359"></a>...) to<a id="11895"></a> plot your image<a id="12070"></a>.</li>
<li>You are provided the file 'data<a id="11716"></a>.csv', which contains two columns of<a id="12278"></a>
numbers<a id="11744"></a>. Each column contains the same number of<a id="12279"></a> elements<a id="12366"></a>. The
first row contains the titles of<a id="12280"></a> the x and<a id="11544"></a> y values, respectively. Create
a script called spreadSheetPlot that plots<a id="12034"></a> the data<a id="11717"></a> in this file. The first
column represents your x values, and<a id="11545"></a> the second column is your y
values. Read the numbers<a id="11745"></a> from<a id="11303"></a> the file and<a id="11546"></a> make a plot of<a id="12281"></a> the x vs. y
values. Title your plot 'spreadSheetPlot' and<a id="11547"></a> use the first row data<a id="11718"></a> to<a id="11896"></a>
label the x and<a id="11548"></a> y axes. For example<a id="12293"></a>, the spreadsheet<a id="11222"></a> might look like:</li></p>
      <div class="card">
          <img src="..\Images\Fig_11_19.JPG" alt="Figure 11.19" class="fig fig_small card-img">
          <p class="figure-name card-title">Fig 11.19: Sample Spread Sheet</p>
      </div>
<p>
<li>You just realized that February 14th has passed and<a id="11549"></a> you haven't
gotten anything for<a id="12410"></a> your Valentine. Since your date is a CS major,
sending the lucky person a coded heart seems like a cool and<a id="11550"></a> sincere
thing to<a id="11897"></a> do. Make sure that you follow each and<a id="11551"></a> every instruction
carefully, or your heart will end<a id="11219"></a> up broken. Trust us.
You are going to<a id="11898"></a> write a script to<a id="11899"></a> draw this heart using the
following steps:
<ul>
<li>Create a plaid<a id="11989"></a> [xx, yy] using x values with<a id="11613"></a> range (0 to<a id="11900"></a> 2p, with<a id="11614"></a> an
interval 0.05p) and<a id="11552"></a> y values with<a id="11615"></a> the range (0 to<a id="11901"></a> 1, with<a id="11616"></a> an
interval 0.05).</li>
<li>Define the following variables:
c=[0.1 + 0.9*(p-abs(xx - p))/p ] .* yy
aa = c .* cos(xx)
bb = c.* sin(xx)
zz = (-2)*aa.^3 + (3/2)*c.^2 + 0.5</li>
<li>Plot zz against aa and<a id="11553"></a> bb using the surf(<a id="11360"></a>) function<a id="11270"></a> with<a id="11617"></a>
interpolated colors.</li>
</ul></li>
<li>Write a function<a id="11271"></a> named plotRotation that takes in two vectors, x
and<a id="11554"></a> z , and<a id="11555"></a> a vector th . Your function<a id="11272"></a> should plot three plots<a id="12035"></a> in the
same figure by using the subplot command. The figure should have
1 × 3 plots<a id="12036"></a>. The plots<a id="12037"></a> should be as follows:
<ul>
<li>z vs. x, titled 'z vs. x' . Note that you will have to<a id="11902"></a> use plot3(<a id="11341"></a>) to<a id="11903"></a>
correctly plot this in the x-z plane rather than the x-y plane a
plot(<a id="11338"></a>) would do. Also, you should use view(<a id="11367"></a>0, 0) to<a id="11904"></a> make the
plot produced by plot3(<a id="11342"></a>) show up as 2-D<a id="11940"></a>.</li>
<li>z vs. x rotated around the x-axis using mesh(<a id="11320"></a>) with<a id="11618"></a> flat shading
and<a id="11556"></a> a square<a id="12306"></a> axis, titled 'z vs. x about x using mesh'.</li>
<li>z vs. x rotated around the z-axis using surf(<a id="11361"></a>) with<a id="11619"></a> interp
shading and<a id="11557"></a> a square<a id="12307"></a> axis, titled 'z vs. x about z using surf' .
For plots<a id="12038"></a> b and<a id="11558"></a> c, the input vector th should be used for<a id="12411"></a> your
independent vector theta, which is used to<a id="11905"></a> convert from<a id="11304"></a> polar-to<a id="11906"></a>-
Cartesian coordinates. Don<a id="11670"></a>’t forget to<a id="11907"></a> title and<a id="11559"></a> label each of<a id="12282"></a> the
three plots<a id="12039"></a>.</li>
</ul> 
</ol>
</div>
</div>


</body>
</html>


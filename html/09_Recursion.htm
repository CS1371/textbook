<!DOCTYPE HTML>
<html>
<head>
<title>09_Recursion</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
<link rel="stylesheet" href="styles/styles.css" />
<script async src="./javascript/index.js"></script>
</head>
<body>
<div>#top_nav#</div>
<div class="nav-obj">#nav_obj#</div>

<div class="content">
  <h1 id="9" align="center">Chapter 9: Recursion</h1>

  <!-- Chapter Objectives -->
  <h1>Chapter Objectives</h1>
  <div class="container">
    <p>This chapter discusses the following basic ideas of recursive programming<a id="4992">!</a>:</p>
    <ul>
    <li>Three basic characteristics must be present for<a id="4739">!</a> a recursive function<a id="4794">!</a> to work </li>
    <li>Exceptions are a powerful mechanism for<a id="4740">!</a> detecting and trapping errors</li>
    <li>A wrapper<a id="5100">!</a> function<a id="4795">!</a> is used to set up the recursion<a id="5002">!</a> </li>
    <li>Other forms of recursion<a id="5003">!</a> occur in special circumstances</li>
    </ul>
  </div>

  <!-- Introduction -->
  <h1>Introduction</h1>
  <div class="container">
    <p>Recursion is an alternative technique by which a code<a id="4638">!</a> block can be repeated in a controlled manner. In Chapter 4, we saw repetition achieved by inserting<a id="4924">!</a> control statements in the code<a id="4639">!</a> (either <code>for<a id="4741">!</a></code> or <code>while<a id="5095">!</a></code>) to determine how many times a code<a id="4640">!</a> block would be repeated. Recursion uses the basic mechanism for<a id="4742">!</a> invoking functions to manage the repetition of a block of code<a id="4641">!</a>.  While some problems are naturally solved by iterative solutions, there are many problems for<a id="4743">!</a> which a recursive solution is elegant and easily understood. Frequently, a recursive function<a id="4796">!</a> needs a “wrapper<a id="5101">!</a> function<a id="4797">!</a>” to set up the recursion<a id="5004">!</a> and to check for<a id="4744">!</a> erroneous initial conditions that might cause errors. The recursive function<a id="4798">!</a> itself then becomes a private helper<a id="4921">!</a> function<a id="4799">!</a>.</p>
  </div>

  <div class="chp-section" data-sect-num="1" data-sect-name="Concept: The Activation Stack">
    <!-- Stack Section -->
    <h2 id="9_1">9.1  Concept: The Activation Stack</h2>
    <div class="container">
      <p>In order to understand recursive programming<a id="4993">!</a>, we must look deeper into the mechanism by which function<a id="4800">!</a> calls are mechanized. Calling any function<a id="4801">!</a> depends on a special kind of data<a id="4670">!</a> structure<a id="5060">!</a> built into the architecture of the central<a id="4634">!</a> processing unit (CPU). This is called the activation<a id="4587">!</a> stack<a id="5015">!</a>. It enables the CPU to determine which functions are active or suspended awaiting the completion of other function<a id="4802">!</a> calls. To understand the activation<a id="4588">!</a> stack<a id="5016">!</a>, first we consider the basic concept of a stack<a id="5017">!</a>.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="A Stack">
      <!-- Stack -->
      <h3 id="9_1_1">9.1.1: A Stack</h3>
      <div class="container clearfix">
        <div class="float-sm-right card">
            <img src="..\Images\Fig_9_1.JPG" alt="Figure 9.1" class="fig card-image">
            <p class="figure-name card-title">Figure 9.1: A Stack</p>
        </div>
        <p>A stack<a id="5018">!</a> is one of the fundamental data<a id="4671">!</a> structures of computer<a id="4667">!</a> science. It is best modeled by considering the plates at the front of the cafeteria line. You cannot see how many plates there are on the stack<a id="5019">!</a>, and the only access you have to them is to take the top plate off the top of the stack<a id="5020">!</a> or put one on. So a stack<a id="5021">!</a> is a collection<a id="4660">!</a> of objects<a id="4956">!</a> of arbitrary size with a restricted number of operations<a id="4962">!</a> we are allowed to perform on that collection<a id="4661">!</a> (see Figure 9.1). Unlike a vector, where it is permissible to read, add, or remove items anywhere in the collection<a id="4662">!</a>, we are only allowed the following operations<a id="4963">!</a> with a stack<a id="5022">!</a>:</p>
        <ul>
          <li>Push an object onto the stack<a id="5023">!</a></li>
          <li>Pop an object off the stack<a id="5024">!</a></li>
          <li>Peek at the top object without removing it</li>
          <li>Check whether the stack<a id="5025">!</a> is empty<a id="4695">!</a></li>
        </ul>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Activation Stack">
      <!-- Activation Stack -->
      <h3 id="9_1_2">9.1.2	Activation Stack</h3>
      <div class="container">
        <p>The core concept that enables any function<a id="4803">!</a> (especially a recursive function<a id="4804">!</a>) to operate is the concept of an activation<a id="4589">!</a> stack<a id="5026">!</a>. The activation<a id="4590">!</a> stack<a id="5027">!</a> is the means by which the operating<a id="4957">!</a> system allocates memory to functions for<a id="4745">!</a> storing local data<a id="4672">!</a>. Typically, local storage is required by a function<a id="4805">!</a> for<a id="4746">!</a> the following reasons:</p>
        <ul>
          <li>Storing the location in memory to which control must be returned when the function<a id="4806">!</a> execution<a id="4710">!</a> completes</li>
          <li>Storing copies of the function<a id="4807">!</a> parameter values</li>
          <li>Providing space for<a id="4747">!</a> the values of any local variables defined within the function<a id="4808">!</a></li>
        </ul>
        <p>When MATLAB<a id="4936">!</a> is initializing, the operating<a id="4958">!</a> system allocates a block of memory to contain its activation<a id="4591">!</a> stack<a id="5028">!</a> and allocates the first item (usually called a “frame”) on the activation<a id="4592">!</a> stack<a id="5029">!</a> to store variables defined in the Command<a id="4663">!</a> window and by scripts<a id="5013">!</a>. An astute reader might recognize this as the initial workspace for<a id="4748">!</a> the system. When the user starts a script or makes an entry in the Command<a id="4664">!</a> window, any variables created are stored in that stack<a id="5030">!</a> frame. When that application calls a function<a id="4809">!</a>, a new stack<a id="5031">!</a> frame is allocated and “pushed” onto the activation<a id="4593">!</a> stack<a id="5032">!</a>. The calling program<a id="4981">!</a> is then suspended, actual<a id="4608">!</a> parameters<a id="4973">!</a> are copied to formal<a id="4790">!</a> parameters<a id="4974">!</a> in the new workspace and control is passed to the function<a id="4810">!</a>. Any new variables created are stored in its stack<a id="5033">!</a> frame. When that function<a id="4811">!</a> completes, its frame is popped off the stack<a id="5034">!</a> and destroyed, and control is returned   to the frame beneath, which is now the  top  of  the  stack<a id="5035">!</a>.  If  an  active function<a id="4812">!</a> calls another function<a id="4813">!</a>, this process  is  repeated.  The  calling function<a id="4814">!</a> is suspended, a stack<a id="5036">!</a> frame is pushed onto the activation<a id="4594">!</a> stack<a id="5037">!</a> for<a id="4749">!</a> the new function<a id="4815">!</a>, and the original function<a id="4816">!</a> is suspended until the new function<a id="4817">!</a> completes.</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="Function Instances">
      <!-- Function Instances -->
      <h3 id="9_1_3">9.1.3 Function Instances</h3>
      <div class="container">
        <p>In Chapter 2 we discussed the difference between the type of data<a id="4673">!</a> defined by its class and an object — an instance of that class assigned to a variable<a id="5085">!</a>. In the same way, we draw the distinction between the .m file that defines the behavior of a function<a id="4818">!</a> and the instance(s) of that function<a id="4819">!</a> that result(s) when the function<a id="4820">!</a> is called. Each new instance of a function<a id="4821">!</a> has its own workspace that occupies a temporary stack<a id="5038">!</a> frame allocated from the activation<a id="4595">!</a> stack<a id="5039">!</a>.</p>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="2" data-sect-name="Recursion Defined">
    <!-- Recursion Defined -->
    <h2 id="9_2">9.2	Recursion Defined</h2>
    <div class="container">
      <p>Following the previous line of reasoning, in principle there is no reason why a function<a id="4822">!</a> could not in fact “call itself,” and this is the logical<a id="4934">!</a> basis for<a id="4750">!</a> recursive programming<a id="4994">!</a>. Of course, as with iterative programming<a id="4995">!</a>, if there is no mechanism to stop the recursion<a id="5005">!</a>, the process would repeat endlessly. In the case<a id="4614">!</a> of endless recursion<a id="5006">!</a>, since space is being consumed on the activation<a id="4596">!</a> stack<a id="5040">!</a>, the system will eventually terminate the process when the memory originally allocated for<a id="4751">!</a> the activation<a id="4597">!</a> stack<a id="5041">!</a> is exhausted.</p>
      <p>The canonical illustration of recursion<a id="5007">!</a> is the computation of n factorial. We could view the calculation of <code>5!</code> in the following ways:</p>
      <p><code>&nbsp;&nbsp;&nbsp;&nbsp;5! = 5 × 4 × 3 × 2 × 1</p>
      <p>&nbsp;&nbsp;&nbsp;&nbsp;5! = 5 × 4!</code></p>
      <p>The second representation is the recursive view, which warrants a closer examination as follows:</p>
      <code>&nbsp;&nbsp;&nbsp;&nbsp;n! = n × (n-1)!</code><br>
      <p>This definition would not be complete, however, without realizing that it must stop somewhere. In the original definition above, we did not continue<a id="4669">!</a> the chain of multiplication<a id="4946">!</a> with "<code> * 0 * (-1) * (-2) ... </code>" for<a id="4752">!</a> obvious reasons — multiplying by 0 makes all factorial values 0! Mathematically, we “artificially” define the terminating condition for<a id="4753">!</a> the factorial calculation as the state where <code>0! = 1</code>. We can derive from this example the three necessary characteristics of a recursive function<a id="4823">!</a>:</p>
      <ol>
        <li>There must be a terminating condition to stop the process</li>
        <li>The function<a id="4824">!</a> must call <b>a clone</b> of itself</li>
        <li>The parameters<a id="4975">!</a> to that call must move the function<a id="4825">!</a> toward the terminating condition</li>
      </ol>
      <p><b>Note:</b> The word <b>clone</b> is important here — a recursive function<a id="4826">!</a> really does not “call itself,” because it requests a new stack<a id="5042">!</a> frame and passes different parameters<a id="4976">!</a> to the instance of the function<a id="4827">!</a> that occupies the new frame.</p>
    </div>
  </div>

  <div class="chp-section" data-sect-num="3" data-sect-name="Implementing a Recursive Function">
    <!-- Implementing a Recursive Function -->
    <h2 id="9_3">9.3	Implementing a Recursive Function</h2>
    <div class="container">
      <p>Template 9.1 shows the general template for<a id="4754">!</a> recursive functions. The following general guidelines indicate how the recursive template is implemented:</p>
      <div class="template">#template_9_1#</div>
      <ul>
        <li>The <code>&lt;function<a id="4828">!</a>_name&gt;</code>, like the name of any other function<a id="4829">!</a>, may be any legal variable<a id="5086">!</a> name</li>
        <li>The variable<a id="5087">!</a> <code>&lt;result&gt;</code> may be any legal variable<a id="5088">!</a> name or a vector of variable<a id="5089">!</a> names</li>
        <li>As usual with functions, you should supply at least one line of <code>&lt;documentation<a id="4689">!</a>&gt;</code> to define its purpose and implementation</li>
        <li>Each exit from the function<a id="4830">!</a> must assign values to all the result variables</li>
        <li>The first design decision is to determine the condition(s) under which the recursive process should stop, and how to express this as the <code>&lt;terminating condition N&gt;</code> tests</li>
        <li>The <code>&lt;initial value<a id="5067">!</a> N&gt;</code> entries are the value(<a id="5083">!</a>s) of the result(s) at the terminating condition(s)</li>
        <li>The second design decision is to determine the <code>&lt;operation<a id="4960">!</a>&gt;</code> - the specific mathematical or logical<a id="4935">!</a> operation<a id="4961">!</a> that must be performed to combine the current formal<a id="4791">!</a> parameters<a id="4977">!</a> with the result of the recursive call to create a new value<a id="5068">!</a> of the <code>&lt;result&gt;</code></li>
        <li>The last design decision is to determine how to compute the &lt;actual<a id="4609">!</a>_params&gt; of the recursive call to ensure that the process moves toward at least one of the <code>&lt;terminating condition N&gt;</code> states</li>
       </ul>
      <p>The implementation of the factorial function<a id="4831">!</a> is shown in Listing 9.1. In Listing 9.1 at Line 3, we show a diagnostic print call that, if not commented, enables you to observe the sequence of events.  Exercise 9.1 provides an analysis of recursive behavior. In particular, notice that all the mathematical operations<a id="4964">!</a> are performed as the activation<a id="4598">!</a> stack<a id="5043">!</a> "unwinds."</p>
      <div class="row">
        <div class="col-sm-6">
          <div class="exercise">#exercise_9_1#</div>
        </div>
        <div class="col-sm-6">
          <div class="listing">#listing_09_1#</div>
        </div>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="4" data-sect-name="Exceptions">
    <!-- Exceptions -->
    <h2 id="9_4">9.4 Exceptions</h2>
    <div class="container">
     <p>We digress here to discuss how programs deal with unexpected circumstances. Exceptions are a powerful tool for<a id="4755">!</a> gracefully managing run- time errors caused by programming<a id="4996">!</a> errors or bad data<a id="4674">!</a>. The general need for<a id="4756">!</a> an exception mechanism might best be established by way of an example. Suppose you write a program<a id="4982">!</a> that requests some data<a id="4675">!</a> from a user and then launches a significant number of nested function<a id="4832">!</a> calls—perhaps even a recursive function<a id="4833">!</a>—to perform an analysis on the data<a id="4676">!</a> received. Somewhere in the depths of these function<a id="4834">!</a> calls, the program<a id="4983">!</a> divides something by a value<a id="5069">!</a>, but in this instance that value<a id="5070">!</a> is zero. The cause of this problem is probably bad data<a id="4677">!</a> entered by the user in the top-level script. However, the effect is discovered deep in the activation<a id="4599">!</a> stack<a id="5044">!</a> in the middle of some obscure numerical<a id="4954">!</a> computation.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Historical Approaches">
      <!-- Historical Approaches -->
      <h3 id="9_4_1">9.4.1	Historical Approaches</h3>
      <div class="container">
        <p>Early programming<a id="4997">!</a> languages attempted to deal with this problem in one of two equally unpleasant ways:</p>
        <ul>
          <li>Some languages require any mathematical function<a id="4835">!</a> that might produce an error to return the status of that calculation to the calling function<a id="4836">!</a>. They allow errors to be reported and processed, but they have two unpleasant consequences: using up the ability of a function<a id="4837">!</a> to return a value<a id="5071">!</a> and calling this function<a id="4838">!</a>, which means choosing between testing for<a id="4757">!</a> errors and solving the problem locally and passing the error condition back to its calling function<a id="4839">!</a> in the hope that somewhere the error will be dealt with.</li>
          <li>Perhaps worse than this are the languages that use a globally accessible variable<a id="5090">!</a>, such as <code>ierror</code>, to report status. For example, if <code>ierror</code> were normally set to <code>0</code>, an error could be announced by setting its value<a id="5072">!</a> to something other than <code>0</code> to indicate the nature of the failure. This frees the function<a id="4840">!</a> from needing to return status, but it does not relieve the calling function<a id="4841">!</a> of the need to check whether the <code>ierror</code> value<a id="5073">!</a> is bad, or solving the problem, or elevating it. Furthermore, if an error does occur within a function<a id="4842">!</a>, since it is now still returning a value<a id="5074">!</a>, what value<a id="5075">!</a> should it return if it is unable to complete its assigned calculation? </li>
        </ul>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Generic Exception Implementation">
      <!-- Generic Exception IMpmlementation -->
      <h3 id="9_4_2">9.4.2	Generic Exception Implementation</h3>
      <div class="container">
        <p>By contrast, most modern programming<a id="4998">!</a> languages provide an exception mechanism whereby if an error occurs, regardless of how deep in the activation<a id="4600">!</a> stack<a id="5045">!</a>, program<a id="4984">!</a> implementation is immediately suspended in the current stack<a id="5046">!</a> frame. The activation<a id="4601">!</a> stack<a id="5047">!</a> below this frame is then searched for<a id="4758">!</a> the frame of a program<a id="4985">!</a> that has “volunteered” to process this type of exception. When it is found, all the stack<a id="5048">!</a> frames above this frame are removed from the stack<a id="5049">!</a> and the code<a id="4642">!</a> in the exception handling mechanism is activated. If no such frame is discovered, the overall program<a id="4986">!</a> aborts with an error code<a id="4643">!</a>.  The following mechanisms are necessary to implement the exception mechanism effectively:</p>
        <div class="template">#template_9_2#</div>
        <ul>
          <li><b>Throwing an exception:</b> Whenever a problem occurs, the operating<a id="4959">!</a> system must suspend operations<a id="4965">!</a> at that point in the activation<a id="4602">!</a> stack<a id="5050">!</a> and go looking for<a id="4759">!</a> a function<a id="4843">!</a> equipped to handle the specific exception. If no such function<a id="4844">!</a> is found, the program<a id="4987">!</a> is terminated and an exception is shown to the user (in MATLAB<a id="4937">!</a>, it is written in red in the Command<a id="4665">!</a> window).</li>
          <li><b>Catching an exception</b> A function<a id="4845">!</a> that is able to deal with a specific exception uses a <code>try ... catch<a id="4622">!</a></code> construct to identify the suspect code<a id="4644">!</a> and resolve the problem. Between <code>try</code> and <code>catch<a id="4623">!</a></code>, the programmer puts a code<a id="4645">!</a> block that contains activities that could throw exceptions<a id="4707">!</a>. After the <code>catch<a id="4624">!</a></code> statement, there is a code<a id="4646">!</a> block that should fix the problem.  Depending on the specific language implementation, the exception-catching mechanism usually offers facilities both for<a id="4760">!</a> determining exactly where the exception occurred and for<a id="4761">!</a> reconstructing the activation<a id="4603">!</a> stack<a id="5051">!</a> with all the variable<a id="5091">!</a> values as they were at the time of the exception.</li>
        </ul>
        <p>In the previous example, the general template for<a id="4762">!</a> successfully interacting with the user is shown in Template 9.2. The successful Boolean flag will be set only if the data<a id="4678">!</a> are processed without error. It does not matter how deep in the data<a id="4679">!</a> processing code<a id="4647">!</a> the error occurs—the user interface catches the error, reports it to the user, and prompts the user for<a id="4763">!</a> better data<a id="4680">!</a>.  For example, you might have noticed earlier that the <code>input(...)</code> function<a id="4846">!</a> has a built-in <code>try ... catch<a id="4625">!</a></code> mechanism to deal with erroneous user input. If something is entered that cannot be parsed, rather than throw red ink in the Command<a id="4666">!</a> window, the exception is caught and the prompt repeated for<a id="4764">!</a> the user.</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="MATLAB Implementation">
      <!-- Matlab Implementation -->
      <h3 id="9_4_3">9.4.3	MATLAB<a id="4938">!</a> Implementation</h3>
      <div class="container">
        <p>MATLAB<a id="4939">!</a> implements a simplified version of the most general form of exception processing. The <code>try ... catch<a id="4626">!</a> ... end<a id="4697">!</a></code> construct is fully supported. However, unlike some languages, the MATLAB<a id="4940">!</a> language does not distinguish between the kinds of exception that can be thrown.<p>
        <ul>
          <li>All built-in functions throw exceptions<a id="4708">!</a> when they discover error conditions—attempting to open a nonexistent file for<a id="4765">!</a> reading, for<a id="4766">!</a> example—and expect the programmer to catch<a id="4627">!</a> these exceptions<a id="4709">!</a> if they are recoverable.</li>
          <li>To throw an exception manually, the program<a id="4988">!</a> calls the error(<a id="4705">!</a>...) function<a id="4847">!</a> that takes one parameter, a string defining the error. If the exception is not caught, the string provided is displayed in red to the user. If the exception is caught, that string is ignored.</li>
          <li>To handle an exception, a code<a id="4648">!</a> block we suspect might throw an exception is placed between <code>try</code> and <code>catch<a id="4628">!</a></code> statements. If no error occurs in the code<a id="4649">!</a> block, the <code>catch<a id="4629">!</a></code> statement is ignored. If an exception is thrown from that code<a id="4650">!</a> block, however, execution<a id="4711">!</a> is suspended at that point. No further processing is performed, no data<a id="4681">!</a> are returned from functions, and the code<a id="4651">!</a> in the closest <code>catch<a id="4630">!</a></code> block is executed up to the associated end<a id="4698">!</a> statement. To determine the cause of the exception, you can use the <code>lasterror</code> function<a id="4848">!</a>. It returns the textual information provided at the exception and a structure<a id="5061">!</a> array<a id="4612">!</a> describing the activation<a id="4604">!</a> stack<a id="5052">!</a>.</li>
          <li>In more complex situations where this function<a id="4849">!</a> may not be able to actually handle the error, a further exception can be thrown from the <code>catch<a id="4631">!</a></code> block. This exception will escape from the current <code>try ... catch<a id="4632">!</a></code> block and must be caught (if at all) by another function<a id="4850">!</a> or script deeper in the activation<a id="4605">!</a> stack<a id="5053">!</a>.</li>
        </ul>
        <p>Listing 9.2 illustrates a simple example. The objective is to have the user define a triangle by entering a vector of three sides and to calculate the angle between the first two sides. The<code> acosd(<a id="4585">!</a>...)</code> function<a id="4851">!</a> computes the inverse cosine of a ratio. If that ratio is greater than one, there is something seriously wrong with the triangle, and acosd(<a id="4586">!</a>...) returns a complex number. This script detects that the answer is complex and throws an exception.</p>
        <div class="listing">#listing_09_2#</div>
        <p>You have an opportunity to work with exception processing in Exercise 9.2.</p>
        <div class="exercise">#exercise_9_2#</div>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="5" data-sect-name="Wrapper Functions">
    <!-- Wrapper Functions -->
    <h2 id="9_5">9.5 Wrapper Functions</h2>
    <div class="container">
      <p>Consider the factorial function<a id="4852">!</a> again for<a id="4767">!</a> a moment—specifically, ask how you would deal with a user who<a id="5097">!</a> accidentally called for<a id="4768">!</a> the factorial of a negative number or of a number containing a fractional part. Our original recursive <code>fact(<a id="4712">!</a>...)</code> function<a id="4853">!</a> is not protected from these programmer errors. There are three possible strategies for<a id="4769">!</a> dealing with this situation:</p>
      <ol>
        <li>The legalist approach ignores the bad values, lets the user’s program<a id="4989">!</a> die, and then responds to user complaints by pointing out that the documentation<a id="4690">!</a> clearly indicates that you should not call for<a id="4770">!</a> the factorial of a negative number. Usually this is not the best approach from the customer relations viewpoint or from the technical support effort viewpoint, especially since recursive code<a id="4652">!</a> that hangs up typically crashes with a stack<a id="5054">!</a> overflow—not the easiest symptom to diagnose!</li>
        <li>In-line coding builds into the code<a id="4653">!</a> a test for<a id="4771">!</a> N less<a id="4933">!</a> than zero (or fractional) and throws an exception with a meaningful error message. Although this is an improvement over the first choice because it exits gracefully, the test is in a bad place. The function<a id="4854">!</a> is recursive; therefore, the code<a id="4654">!</a> for<a id="4772">!</a> that test is repeated as many times as the function<a id="4855">!</a> is called. While modern computers are fast enough that one would probably not notice the difference, in general this is a poor implementation that punishes those who<a id="5098">!</a> are using the function<a id="4856">!</a> correctly with the same test each time the recursive function<a id="4857">!</a> is called.</li>
        <li>A wrapper<a id="5102">!</a> function<a id="4858">!</a> is the best solution. A wrapper<a id="5103">!</a> function<a id="4859">!</a> is called once to perform any tests or setup that the recursion<a id="5008">!</a> requires and then to call the recursive function<a id="4860">!</a> as a helper<a id="4922">!</a> to the main function<a id="4861">!</a> call. While there is a small computational cost to using a wrapper<a id="5104">!</a>, it is only executed once rather than each time the recursive function<a id="4862">!</a> is called.</li>
      </ol>
      <p>Template 9.3 illustrates this idea. The first function<a id="4863">!</a> named &lt;function<a id="4864">!</a>_name&gt; is actually the wrapper<a id="5105">!</a> function<a id="4865">!</a> with the return result, parameters<a id="4978">!</a>, and documentation<a id="4691">!</a> expected by the caller. It makes whatever tests are necessary to validate the input data<a id="4682">!</a>, cleans it up if necessary, and calls the helper<a id="4923">!</a> function<a id="4866">!</a> named &lt;private_name&gt;. Listing 9.3 is the implementation of the factorial function<a id="4867">!</a> with a wrapper<a id="5106">!</a> for<a id="4773">!</a> protection from bad data<a id="4683">!</a>.</p>
      <div class="template">#template_9_3#</div>
      <div class="listing">#listing_09_3#</div>
      <p>Exercise  9.3  gives  you  an  opportunity  to  work  with  the  protected factorial.</p>
      <div class="exercise">#exercise_9_3#</div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="6" data-sect-name="Examples of Recursion">
    <!-- Examples of Recursion -->
    <h2 id="9_6">9.6 Examples of Recursion</h2>
    <div class="container">
      <p>We conclude this chapter with three examples of recursive programming<a id="4999">!</a>: detecting palindromes<a id="4971">!</a>, computing the Fibonacci<a id="4718">!</a> series of numbers<a id="4949">!</a>, and finding zeros of a function<a id="4868">!</a>. The examples are followed by a practical engineering<a id="4700">!</a> example of the use of zero finding.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Detecting Palindromes">
      <!-- Detecting Palindromes -->
      <h3 id="9_6_1">9.6.1	Detecting Palindromes</h3>
      <div class="container">
        <p>We might want to determine whether a word or phrase received as a string is a palindrome, that is, whether it is spelled the same forward<a id="4792">!</a> and backward. Of course, you could accomplish this in one line with vector operations<a id="4966">!</a> (think about it!) but that would not be a good recursive exercise. If you look up what are considered official palindromes<a id="4972">!</a>, the string can contain spaces and punctuation, and can have upper or lower case<a id="4615">!</a> characters. One could design a recursive function<a id="4869">!</a> named <code>isPal(<a id="4926">!</a>&lt;string&gt;)</code> as follows:</p>
        <ul>
          <li>Pre-process the string changing upper case<a id="4616">!</a> to lower case<a id="4617">!</a> and then removing all characters that are not lower case<a id="4618">!</a> characters.</li>
          <li>The function<a id="4870">!</a> <code>isPal(<a id="4927">!</a>&lt;string&gt;)</code> terminates if the <code>&lt;string&gt;</code> has zero or one character<a id="4635">!</a>, returning true.</li>
          <li>It also terminates if the first and last characters are not equal<a id="4701">!</a>, returning false<a id="4713">!</a>.</li>
          <li>Otherwise (first and last are equal<a id="4702">!</a>), the function<a id="4871">!</a> returns <code>isPal(<a id="4928">!</a>&lt;shorter string&gt;)</code>, where the shorter string is obtained by removing the first and last characters of the original string.</li>
          <li>Clearly, since the string is always being shortened, the recursive solution is approaching the terminating condition.</li>
        </ul>
        <p>The MATLAB<a id="4941">!</a> implementation of the palindrome detector is shown in Listing 9.4.</p>
        <div class="listing">#listing_09_4#</div>
        <p>Check this with these strings<a id="5059">!</a>:</p>
        <code>>> isPal(<a id="4929">!</a>'Can I attain a C?')<br>
        >> isPal(<a id="4930">!</a>'Can I attain a&nbsp;&nbsp;C?')<br>
        >> isPal(<a id="4931">!</a>'Can I attain a A?')<br>
        >> isPal(<a id="4932">!</a>'Can I attain any C?')<br><br>
        </code>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Fibonacci Series">
      <!-- Fibonacci Series -->
      <h3 id="9_6_2">9.6.2	Fibonacci<a id="4719">!</a> Series</h3>
      <div class="container clearfix">
        <div class="float-sm-right card">
            <img src="..\Images\Fig_9_2.JPG" alt="Figure 9.2" class="fig card-image">
            <p class="figure-name card-title">Figure 9.2: Fibonacci<a id="4720">!</a> with Rabbits</p>
        </div>
        <p>The Fibonacci<a id="4721">!</a> series was originally named for<a id="4774">!</a> the Italian mathematician Leonardo Pisano Fibonacci<a id="4722">!</a>, who<a id="5099">!</a> was studying the growth of rabbit populations in the eleventh century. He hypothesized that rabbits mature one month after birth, after which time each pair would produce a new pair of rabbits each month. Starting with a pair of newborn rabbits free in a field<a id="4734">!</a>, he wanted to calculate the rabbit population after a year. Figure 9.2 illustrates the calculation for<a id="4775">!</a> the first six months, counting rabbit pairs. It soon becomes clear<a id="4636">!</a> that the number of rabbits in month <code>N</code> comprises the number in month <code>N-1</code> (since in this ideal example, none of them die) plus the new rabbits born to the mature pairs. Since the rabbits mature after a month, the number of mature pairs that produce a new pair is the number of rabbits in the month before, <code>N-2</code>. So the algorithm for<a id="4776">!</a> computing the population of pairs after <code>N</code> months, <code>fib(<a id="4714">!</a>N)</code>, is recursive:</p>
        <ul>
          <li>There is a terminating condition: when <code>N == 1</code> or <code>N == 2</code>, the answer is <code>1</code></li>
          <li>The recursive condition is: <code>fib(<a id="4715">!</a>N) = fib(<a id="4716">!</a>N-1) + fib(<a id="4717">!</a>N-2)</code></li>
          <li>The solution is moving toward the terminating condition, since as long as <code>N</code> is a positive integer, computing <code>N-1</code> and <code>N-2</code> will move toward <code>1</code> or <code>2</code>.</li>
        </ul>
        <p>The implementation of the Fibonacci<a id="4723">!</a> function<a id="4872">!</a> is shown in Listing 9.5.</p>
      </div>
      <div class="listing">#listing_09_5#</div>
      <div class="container clearfix">
        <p>This algorithm produces the Fibonacci<a id="4724">!</a> series: <code>1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, . . .</code>, giving a population after a year of <code>144</code> pairs of rabbits.</p>
        <div class="float-sm-right card">
            <img src="..\Images\Fig_9_3.JPG" alt="Figure 9.3" class="fig card-image">
            <p class="figure-name card-title">Figure 9.3: Fibonacci<a id="4725">!</a> in Nature</p>
        </div>
        <p>A closely related phenomenon is the golden ratio or golden number computed as the limit of the ratio of successive Fibonacci<a id="4726">!</a> series values — approximately <code>1.618034</code> — that has been found to occur in nature. To the surprise of naturalists, this series of numbers<a id="4950">!</a> occurs in nature in a remarkable number of circumstances. Consider Figure 9.3 for<a id="4777">!</a> example, where a set of squares placed side by side in a rotating sequence is drawn using the Fibonacci<a id="4727">!</a> series for<a id="4778">!</a> the size of each square<a id="5014">!</a>. The resulting geometric figure is a close<a id="4637">!</a> approximation<a id="4610">!</a> to the logarithmic spiral so frequently found in nature, such as sea shells or seeds packed in pods.</p>
        <b>Notes: </b>
        <ol>
          <li>Although not shown here, the Fibonacci<a id="4728">!</a> function<a id="4873">!</a> needs the same kind of wrapper<a id="5107">!</a> as we used on the factorial function<a id="4874">!</a> to protect against bad input values (negative or fractional).</li>
          <li>Before we leave the Fibonacci<a id="4729">!</a> function<a id="4875">!</a>, we should run a few examples:</li>
        </ol>
        <p>Unless you are running on a really fast computer<a id="4668">!</a>, that last computation probably took over a second to run.  This may be our first example of situations where the algorithm is stunningly inefficient, and need a total redesign.  In the case<a id="4619">!</a> of Fibonacci<a id="4730">!</a>, the answer is easy, and will be left to the student to implement and test.</p>
        <p><b>Hint: </b> Could you do this iteratively instead of recursively by storing the previous two values of N?</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="Zeros of a Function">
      <!-- Zeros of a Function -->
      <h3 id="9_6_3">9.6.3 Zeros of a Function</h3>
      <div class="container clearfix">
        <div class="float-sm-right card">
          <img src="..\Images\Fig_9_4.JPG" alt="Figure 9.4" class="fig card-image">
          <p class="figure-name card-title">Figure 9.4: Find the zeros of this function<a id="4876">!</a></p>
        </div>
        <p>Frequently we need to solve nonlinear equations by seeking the values of the independent variable<a id="5092">!</a> that produced a zero result. There are a number of well-known numerical<a id="4955">!</a> techniques for<a id="4779">!</a> achieving this goal. We will examine a recursive approach to determining the zeros of functions. However, especially when there are multiple zero crossings, it is very helpful to have a good initial estimate of the location(s) of the crossing(s). As an example, consider a function<a id="4877">!</a> <code>f(x)</code>. We will use the function<a id="4878">!</a> given by:</p>
        <p><code>f(x) = 0.0333x<sup>6</sup> - 0.3x<sup>5</sup> - 1.3333x<sup>4</sup> + 16x<sup>3</sup> - 187.2x + 172.9</code></p>
        <p>as plotted in Figure 9.4. Of course, this algorithm will work for<a id="4780">!</a> any function<a id="4879">!</a> of <code>x</code>. We assume that the continuous line describes the exact function<a id="4880">!</a>, and the plus marks indicate locations for<a id="4781">!</a> which we have measurements. Clearly, there are a number of zero crossings of this function<a id="4881">!</a>, including a very messy looking crossing at around <code>x = 6</code>.  We will find the exact value<a id="5076">!</a> of one of the zeros of this function<a id="4882">!</a> by first estimating the zero crossings and then by using a recursive technique for<a id="4782">!</a> refining a better estimate to arbitrary levels of accuracy.</p>
        <p><b>Estimating Critical Points of a Function:</b> First, we need to compute an approximation<a id="4611">!</a> to the roots of this equation illustrated by the red '+' marks on Fig 9.4. For our recursive algorithm to work nicely, we need a pair of x values whose y values straddle the x axis. These are marked by green circles on Fig 9.4. These approximations will be found by finding the x values at which adjacent values of the function<a id="4883">!</a> change sign. The technique for<a id="4783">!</a> determining where adjacent points change sign is simply to multiply adjacent values of f(x) and find where that product is not positive. Clearly, one could iterate here to find all of the roots. Listing 9.6 produces the following results, which can be verified by observing the circled data<a id="4684">!</a> points shown in Figure 9.4:</p>
        <p><code>zeros occur just after -6.3000	-4.6667	0.2333	5.9500</code></p>
        <p>Having observed these results, we decide to compute the exact value<a id="5077">!</a> of the first positive root, occurring at the third crossing.</p>
        <p><b>Recursive Refinement of the Estimate:</b> The recursive function<a id="4884">!</a> to find any root of <code>f(x)</code> works on the principle of binary<a id="4613">!</a> division<a id="4688">!</a>. It consumes a vector of adjacent values of <code>x</code> that are guaranteed to have values of <code>f(x)</code> of opposite sign. The fundamental features of the recursive solution are as follows:</p>
        <ul>
          <li>The terminating condition is when the two x values are within acceptable error—in this case<a id="4620">!</a>, 0.001</li>
          <li>Otherwise, we find the middle of this x range, mx, find its f(mx), and then make the recursive call either with [x(1) mx] or [mx x(2)], depending on the sign of f(mx) × f(x(1))</li>
          <li>This will always converge because each recursive call halves the distance between the x limits.</li>
        </ul>
        <p>In general, this method is a little slower than Newton’s<a id="4947">!</a> method, which uses the slope of <code>f(x)</code> to compute the next estimate. However, it is very strong and somewhat immune from the instability suffered by Newton’s<a id="4948">!</a> method on undulating data<a id="4685">!</a>. The function<a id="4885">!</a> that solves this problem is shown in Listing 9.6.</p>
        <div class="listing">#listing_09_6#</div>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="7" data-sect-name="Engineering Example - Robot Arm Motion">
    <!-- Robot Arm Motion -->
    <h2 id="9_7">9.7 Engineering Example - Robot Arm Motion</h2>
    <div class="container clearfix">
      <div class="float-sm-right card">
        <img src="..\Images\fig_9_5.JPG" alt="Figure 9.5" class="fig card-image">
        <p class="figure-name card-title">Figure 9.5: Robot Arm Problem</p>
      </div>
      <p>Here we consider the problem of programming<a id="5000">!</a> the arm of a robot to move its tip in a straight line. Consider the arm shown in Figure 9.5. It consists of a base free to rotate by an angle <code>&alpha;</code> from the direction of the X axis and two jointed limbs of length <code>r<sub>1</sub></code> and <code>r<sub>2</sub></code> at angles <code>&beta;</code> and <code>&gamma;</code>, respectively, to the horizontal. We will simplify things a bit by assuming that <code>r<sub>1</sub></code> and <code>r<sub>2</sub></code> are both equal<a id="4703">!</a> to the same length <code>l<sub>n</sub></code>.</p>
      <p><b>Overall Objective:</b>The ultimate challenge of this situation is to calculate the sequence of values of <code>&alpha;</code>, <code>&beta;</code> and <code>&gamma;</code> that will guide the end<a id="4699">!</a> of the arm, <code>P</code>, along the straight line defined by the points <code>P<sub>a</sub></code> and <code>P<sub>b</sub></code> where <code>P, P<sub>a</sub></code> and <code>P<sub>b</sub></code> are vectors<a id="5093">!</a> showing the <code>x, y</code> and <code>z</code> coordinates of points on the red dashed line.  We will use a parametric<a id="4980">!</a> definition of the line:</p>
      <p><code>P = P<sub>a</sub> + t&#215;(P<sub>b</sub> - P<sub>a</sub>)</code></p>
      <p>where t can take any value<a id="5078">!</a> between 0 and 1.</p>
      <p>The value<a id="5079">!</a> of <code>&alpha;</code> is easily determined to be the rotation to put P into the plane of the arm motion:</p>
      <p><code>(1) &alpha; = atan2(P(1), P(2)) * 180/&pi;;</code></p>

      <p>We create the solution for<a id="4784">!</a> <code>&beta;</code> and <code>&gamma;</code> with three more equations:</p>
      <ul>
        <li><b>horizontally:</b> <code>(2) l<sub>n</sub>cos(&beta;) + l<sub>n</sub>cos(&gamma;) = |OR<a id="4968">!</a>|</code> where O is the origin of coordinates and R is the projection of P onto the x-y plane.</li>
        <li><b>vertically:</b> <code>(3) l<sub>n</sub>sin(&beta;) + l<sub>n</sub>sin(&gamma;) = P(3)</code></li>
        <li><b>from algebra:</b><code>(4) cos<sup>2</sup>(&gamma;) + sin<sup>2</sup>(&gamma;) = 1</code><br></li>
      </ul>
      <div class="float-sm-right card">
        <img src="..\Images\Fig_9_6.JPG" alt="Figure 9.6" class="fig card-image">
        <p class="figure-name card-title">Figure 9.6: The Zero Crossing Problem</p>
      </div>
      <p>After much manipulation, we determine this expression:</p>
      <p><code>(5) |OR<a id="4969">!</a>|<sup>2</sup> + P(3)<sup>2</sup> - 2l<sub>n</sub>(|OR<a id="4970">!</a>|cos(&beta;) + P(3)sin(&beta;)) = 0</p></code>
      <p>Pretty daunting until we plot the LHS of this equation against values of <code>&beta;</code> between <code>0</code> and <code>2&pi;</code> (Figure 9.6) and realize that we solve for<a id="4785">!</a> <code>&beta;</code> by finding the value(<a id="5084">!</a>s) of <code>&beta;</code> that reduce the LHS to 0 - a simple zero crossing problem.</p>
      <p><b>Immediate Objective:</b>The sub-problem we address here is to determine the value<a id="5080">!</a> of <code>&beta;</code> that will reduce the LHS of Equation <code>(5)</code> to zero.</p>
      <p><b>The Solution to the Sub-problem:</b> as before, since there is no analytical solution to this function<a id="4886">!</a>, we will find the approximate location of the zero crossings and then use a recursive function<a id="4887">!</a> to find the exact roots. The script that accomplishes this is shown in Listing 9.7.<br></p>
      <div class="listing">#listing_09_7#</div>
      <div class="float-sm-right card">
          <video controls class="card-image"><source src="..\Images\robot_arm.mp4" type="video/mp4">Fig 9.7</video>
          <p class="figure-name card-title">Figure 9.7: The Solution</p>
      </div>
      <p><b>Reflections:</b></p>
      <ol>
        <li>A modest amount of code<a id="4655">!</a> is all that is required to create an elegant solution to a nontrivial problem. The structure<a id="5062">!</a> of the recursive function<a id="4888">!</a> <code>get_zero(b1, b2)</code> shown in Listing 9.8 clearly reflects the standard recursive template, and that function<a id="4889">!</a> can be used to find zeros of any continuous function<a id="4890">!</a> defined in the function<a id="4891">!</a> <code>equation(bet)</code>.</li>
        <li>At the risk of alarming students, I have left in place the not insignificant amount of code<a id="4656">!</a> needed to verify that we are indeed solving the right problem correctly.  This code<a id="4657">!</a> was pulled forward<a id="4793">!</a> from concepts presented later in this text<a id="5066">!</a>.</li>
      </ol>
    </div>
  </div>

  <h2>Chapter Summary</h2>
  <div class="container">
    <p>This chapter discussed the three basic principles of recursive programming<a id="5001">!</a> that must be present for<a id="4786">!</a> a recursive program<a id="4990">!</a> to succeed:</p>
    <ul>
      <li>There must be a terminating condition</li>
      <li>The function<a id="4892">!</a> must call a clone of itself</li>
      <li>The parameters<a id="4979">!</a> of that clone must move the function<a id="4893">!</a> toward the terminating condition.</li>
    </ul>
    <p>We have also seen some other important capabilities as follows:</p>
    <ul>
      <li>Exceptions are declared either within system functions or by the user using the error(<a id="4706">!</a>...) function<a id="4894">!</a>; they are trapped and perhaps remedied using try ... catch<a id="4633">!</a> code<a id="4658">!</a> blocks</li>
      <li>A wrapper<a id="5108">!</a> function<a id="4895">!</a> is used to set up a recursive solution by validating the incoming data<a id="4686">!</a>.</li>
    </ul>
  </div>
<h2>Self Test</h2>
<div class="container">

Use the following questions to check your understanding of the material in this
chapter:
<h3>True or False</h3>
<ol>
<li>We limit the functionality of a stack<a id="5055">!</a> in order to protect the data<a id="4687">!</a> from
corruption.</li>
      <li>The only way to remove a stack<a id="5056">!</a> frame from the activation<a id="4606">!</a> stack<a id="5057">!</a> is to
exit from the function<a id="4896">!</a> instance hosted by that frame.</li>
      <li>All the math operations<a id="4967">!</a> in a recursive function<a id="4897">!</a> are performed as the
activation<a id="4607">!</a> stack<a id="5058">!</a> unwinds.</li>
      <li>Exception processing can be used as a clever means of changing the
normal flow of program<a id="4991">!</a> control.</li>
      <li>The name of the first function<a id="4898">!</a> in a function<a id="4899">!</a> definition m-file must
match the name of the file.</li>
</ol>
<h3>Fill in the Blanks</h3>
<ol>
<li>Recursion is ____________ by which a code<a id="4659">!</a> block can be repeated in
a controlled manner.</li>
      <li>Very frequently, a recursive function<a id="4900">!</a> needs a(n) ________________
to set up the recursion<a id="5009">!</a> correctly and to _________________ .</li>
      <li>Exceptions are a powerful tool for<a id="4787">!</a> managing ______________ caused
by either ____________ or _____________ .</li>
      <li>A wrapper<a id="5109">!</a> function<a id="4901">!</a> is called once to perform _________________
that the recursion<a id="5010">!</a> requires, and then to call the recursive function<a id="4902">!</a>
_________________.</li>
      <li>You can ________ one of the zeros of a function<a id="4903">!</a> by first
_______________, and then using a(n) ____________ for<a id="4788">!</a> refining a
better estimate to arbitrary levels of accuracy.</li>
</ol>

<h3>Programming Projects</h3>
<ol>
<li>For this problem, you will be required to write three functions:
recurSum, recurProd, and fibVector . The first one will take in a
vector and compute the sum of the elements<a id="4692">!</a> of the vector. The
second one will take in a vector and compute the product of the
elements<a id="4693">!</a> of the vector. The third one will take in a number, N , and
return a vector containing the first N terms of the Fibonacci<a id="4731">!</a>
sequence. You must use recursion<a id="5011">!</a> to complete these functions. You
may not use for<a id="4789">!</a> loops, while<a id="5096">!</a> loops or the functions sum , prod, or
factorial . Your function<a id="4904">!</a> headers should be:<br>
function<a id="4905">!</a> ans = recurSum(arr)<br>
function<a id="4906">!</a> ans = recurProd(arr)<br>
function<a id="4907">!</a> vec = fibVector (num)</li>
      <li>Write a recursive function<a id="4908">!</a> called oddfact(n) that takes in a number
and returns the factorial of the odd numbers<a id="4951">!</a> between the given
number and 1.<br>
For example:<br>
oddfact(4) returns 3<br>
oddfact(9) returns 945 = 9*7*5*3*1<br></li>
      <li>Consider the problem of structures with nested fields.
	  <ul>
<li>Write a function<a id="4909">!</a> called tracker that takes in a structure<a id="5063">!</a> and
returns the number of levels at which it has a field<a id="4735">!</a> called
'Inner' . Each of these fields can also be structures having a field<a id="4736">!</a>
called 'Inner' , but at each level there can be only one field<a id="4737">!</a> called
'Inner' . The innermost structure<a id="5064">!</a> will not contain a field<a id="4738">!</a> called
'Inner' . You must use recursion<a id="5012">!</a>. Hint: use the isfield(<a id="4925">!</a>...)
function<a id="4910">!</a>. Your function<a id="4911">!</a> header should be:
function<a id="4912">!</a> num = tracker(astruct)</li>
      <li>Create a structure<a id="5065">!</a> with at least three levels of recurring fields,
and use it to test your tracker function<a id="4913">!</a>.</li>
</ul></li>
      <li>Create a recursive function<a id="4914">!</a> with a wrapper<a id="5110">!</a> to protect it from illegal
values. The function<a id="4915">!</a> name should be recursiveFib . It should take in
a number n and return the n th Fibonacci<a id="4732">!</a> number. You should ensure
that n is a non-negative integer, and announce an error if that is not
the case<a id="4621">!</a>.<br>
Fibonacci<a id="4733">!</a> numbers<a id="4952">!</a> are defined as:<br>
F(n) = 0 if n = 0<br>
F(n) = 1 if n = 1<br>
F(n) = F(n-1) + F(n-2) otherwise.<br>
This produces the following sequence of numbers<a id="4953">!</a>:<br>
0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55...<br>
For example:<br>
a = recursiveFib(0) should return 0<br>
b = recursiveFib(1) should return 1<br>
c = recursiveFib(-1) should cause an error<br>
d = recursiveFib(8) should return 21<br></li>
      <li>Create and test a function<a id="4916">!</a> called recursiveMin that takes in a vector
and returns the element with the minimum<a id="4944">!</a> value<a id="5081">!</a> and the index of
that element as separate returned values, much as the standard
min(<a id="4942">!</a>...) function<a id="4917">!</a>. If the input vector is of length zero, your function<a id="4918">!</a>
should return two empty<a id="4696">!</a> vectors<a id="5094">!</a>. If the input vector contains two
minimum<a id="4945">!</a> elements<a id="4694">!</a> of equal<a id="4704">!</a> value<a id="5082">!</a>, your function<a id="4919">!</a> should return the
index of the first element. Create suitable test cases and use the
built-in function<a id="4920">!</a> min(<a id="4943">!</a>...) only to test your answers.<br>
For example:<br>
[m n] = recursiveMin([]) should return [] and []<br>
[m n] = recursiveMin([5]) should return 5 and 1<br>
[m n] = recursiveMin([5 2]) should return 2 and 2<br>
[m n] = recursiveMin([2 5 2]) should return 2 and 1<br>
[m n] = recursiveMin([2 5 2 1 6 7]) should return 1 and 4<br>
</li>
 
</ol>
</div>
</div>


</body>
</html>


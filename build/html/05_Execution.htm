<!DOCTYPE HTML>
<html>
<head>
    <title>05_Execution</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="styles/styles.css" />
    <script async src="./javascript/index.js"></script>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
</head>
<body>
<div><nav class="navbar navbar-expand-lg fixed-top top-nav navbar-light bg-light"><a class="navbar-brand" href="#"><img src="../Images/1371.png" width="30" height="30" class="d-inline-block align-top" alt="">&nbspEngineering Computation Using MATLAB</a></nav></div>
<div class="nav-obj"><nav class="nav sidenav nav-scroll navbar-dark bg-dark"><ul class="navbar-nav"><li class="nav-item"><a class="nav-link" href="..\..\index.html">Home</a></li><li class="nav-item"><a class="nav-link" href="Preface.htm">Preface</a></li><li class="nav-item"><div class="nav-link"><a href="01_Introduction.htm#1">1 Introduction&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_1"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="01_Introduction.htm#1_1">1.1 Background</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="01_Introduction.htm#1_2">1.2 History of Computer Architectures&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_1_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_1_2"><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_2_1">1.2.1 Babbage's Difference Engine</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_2_2">1.2.2 Colossus</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_2_3">1.2.3 The von Neumann Architecture</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="01_Introduction.htm#1_3">1.3 Modern Computer Software&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_1_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_1_3"><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_3_1">1.3.1 Operating Systems</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_3_2">1.3.2 Software Tools</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_3_3">1.3.3 Programming Languages</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_3_4">1.3.4 Running a Computer Program</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_3_5">1.3.5 Running an Interpreted Program</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="01_Introduction.htm#1_4">1.4 Anticipated Outcomes&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_1_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_1_4"><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_4_1">1.4.1 Introduction to MATLAB</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_4_2">1.4.2 Learning Programming Concepts</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_4_3">1.4.3 Problem-Solving Skills</a></div></li></ul></li></ul></li><li class="nav-item"><div class="nav-link"><a href="02_Basics.htm#2">2 Basics&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_2"><li class="nav-item secnav"><div class="nav-link"><a href="02_Basics.htm#2_1">2.1 Programming Language Background&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_2_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_2_1"><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_1_1">2.1.1 Abstraction</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_1_2">2.1.2 Algorithms</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_1_3">2.1.3 Programming Paradigms</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="02_Basics.htm#2_2">2.2 Basic Data Manipulation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_2_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_2_2"><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_2_1">2.2.1 Starting and Stopping MATLAB</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_2_2">2.2.2 Assigning Values to Variables</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_2_3">2.2.3 Data Typing</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_2_4">2.2.4 Classes and Objects</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="02_Basics.htm#2_3">2.3 MATLAB User Interface&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_2_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_2_3"><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_1">2.3.1 Command Window</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_2">2.3.2 Command History</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_3">2.3.3 Workspace Window</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_4">2.3.4 Current Folder Window</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_5">2.3.5 Variable Editor</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_6">2.3.6 Figure Window</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_7">2.3.7 Editor Window</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="02_Basics.htm#2_4">2.4 Scripts&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_2_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_2_4"><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_1">2.4.1 Text Files</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_2">2.4.2 Creating Scripts</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_3">2.4.3 The Current Directory</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_4">2.4.4 Running Scripts</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_5">2.4.5 Punctuating Scripts</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_6">2.4.6 Debugging Scripts</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="02_Basics.htm#2_5">2.5 Engineering Example - Spacecraft Launch</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="03_Functions.htm#3">3 Functions&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_3"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="03_Functions.htm#3_1">3.1 Concepts: Abstraction and Encapsulation</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="03_Functions.htm#3_2">3.2 Black Box View of a Function</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="03_Functions.htm#3_3">3.3 MATLAB Implementation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_3_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_3_3"><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_1">3.3.1 General Template</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_2">3.3.1 Function Definition</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_3">3.3.3 Storing and Using Functions</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_4">3.3.4 Calling Functions</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_5">3.3.5 Variable Number of Parameters</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_6">3.3.6 Returning Multiple Results</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_7">3.3.7 Auxiliary Local Functions</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_8">3.3.8 Encapsulation in MATLAB Functions</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_9">3.3.9 Global Variables</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="03_Functions.htm#3_4">3.4 Engineering Example: Measuring a Solid Object</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="04_Vectors.htm#4">4 Vectors&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_4"><li class="nav-item secnav"><div class="nav-link"><a href="04_Vectors.htm#4_1">4.1 Concept: Data Collection&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_4_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_4_1"><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_1_1">4.1.1 Data Abstraction</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_1_2">4.1.2 Homogeneous Collections</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="04_Vectors.htm#4_2">4.2 Vectors&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_4_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_4_2"><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_2_1">4.2.2 Creating a Vector</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_2_2">4.2.2 Size of a Vector</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_2_3">4.2.3 Indexing a Vector</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_2_4">4.2.4 Shortening a Vector</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_2_5">4.2.5 Operating on Vectors</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="04_Vectors.htm#4_3">4.3 Engineering Example - Forces and Moments</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="04_Vectors.htm#4_4">4.4 Arrays&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_4_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_4_4"><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_4_1">4.4.1 Properties of an Array</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_4_2">4.4.2 Creating an Array</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_4_3">4.4.3 Accessing Elements of an Array</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_4_4">4.4.4 Removing Elements of an Array</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_4_5">4.4.5 Operating on Arrays</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="04_Vectors.htm#4_5">4.5 Engineering Example - Computing Soil Volume</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="05_Execution.htm#5">5 Execution&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_5" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_5"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_1">5.1 Concept: Code Blocks</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_2">5.2 Conditional Execution in General</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_3">5.3 if Statements&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_5_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_5_3"><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_3_1">5.3.1 General Template</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_3_2">5.3.2 MATLAB Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_3_3">5.3.3 Important Ideas</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_4">5.4 switch Statements&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_5_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_5_4"><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_4_1">5.4.1 General Template</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_4_2">5.4.2 MATLAB Implementation</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_5">5.5 Iteration in General</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_6">5.6 for Loops&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_5_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_5_6"><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_6_1">5.6.1 General for Loop Template</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_6_2">5.6.2 MATLAB Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_6_3">5.6.3 Indexing Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_6_4">5.6.4 Breaking out of a for Loop</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_7">5.7 while Loops&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_5_7" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_5_7"><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_7_1">5.7.1 General while Template</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_7_2">5.7.2 MATLAB while Loop Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_7_3">5.7.3 Loop-and-a-Half Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_7_4">5.7.4 Breaking a while Loop</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_8">5.8 Engineering Example - Computing Liquid Levels</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="06_Strings.htm#6">6 Strings&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_6"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_2">6.2 MATLAB Implementation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_6_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_6_2"><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_2_1">6.2.1 Slicing and Concatenating Strings</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_2_2">6.2.2 Arithmetic and Logical Operations</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_2_3">6.2.3 Useful Functions</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_3">6.3 Format Conversion Functions&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_6_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_6_3"><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_3_1">6.3.1 Conversion from Numbers to Strings</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_4">6.4 Character String Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_6_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_6_4"><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_4_1">6.4.1 Simple Data Output: The disp(...) Function</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_4_2">6.4.2 Complex Output</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_4_3">6.4.3 Comparing Strings</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_5">6.5 Arrays of Strings</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_6">6.6 Engineering Example - Encryption</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="07_Structures.htm#7">7 Structures&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_7" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_7"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_1">7.1 Concept: Collecting Dissimilar Objects</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_2">7.2 Cell Arrays&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_7_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_7_2"><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_2_1">7.2.1 Creating Cell Arrays</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_2_2">7.2.2 Accessing Cell Arrays</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_2_3">7.2.3 Using Cell Arrays</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_2_4">7.2.4 Processing Cell Arrays</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_3">7.3 Structures&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_7_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_7_3"><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_3_1">7.3.1 Constructing and Accessing One Structure</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_3_2">7.3.2 Constructor Functions</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_4">7.4 Structure Arrays&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_7_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_7_4"><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_4_1">7.4.1 Constructing Structure Arrays</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_4_2">7.4.2 Accessing Structure Arrays</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_4_3">7.4.3 Manipulating Structures</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_5">7.5 Comparing Cell Arrays to Structure Arrays</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_6">7.6 Engineering Example: Assembling a Physical Structure</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="08_File_I_O.htm#8">8 File I O&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_8" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_8"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="08_File_I_O.htm#8_1">8.1 Concept: Serial Input and Output (I/O)</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="08_File_I_O.htm#8_2">8.2 Workspace I/O</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="08_File_I_O.htm#8_3">8.3 High-Level I/O Functions&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_8_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_8_3"><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_3_1">8.3.1 Exploration</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_3_2">8.3.2 Spreadsheets</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_3_3">8.3.3 Delimited Text Files</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="08_File_I_O.htm#8_4">8.4 Lower-Level File I/O&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_8_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_8_4"><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_4_1">8.4.1 Opening and Closing Files</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_4_2">8.4.2 Reading Text Files</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_4_3">8.4.3 Writing Text Files</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="08_File_I_O.htm#8_5">8.5 Engineering Example - Spreadsheet Data</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="09_Recursion.htm#9">9 Recursion&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_9" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_9"><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_1">9.1 Concept: The Activation Stack&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_9_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_9_1"><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_1_1">9.1.1 A Stack</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_1_2">9.1.2 Activation Stack</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_1_3">9.1.3 Function Instances</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_2">9.2 Recursion Defined</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_3">9.3 Implementing a Recursive Function</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_4">9.4 Exceptions&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_9_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_9_4"><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_4_1">9.4.1 Historical Approaches</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_4_2">9.4.2 Generic Exception Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_4_3">9.4.3 MATLAB Implementation</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_5">9.5 Wrapper Functions</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_6">9.6 Examples of Recursion&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_9_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_9_6"><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_6_1">9.6.1 Detecting Palindromes</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_6_2">9.6.2 Fibonacci Series</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_6_3">9.6.3 Zeros of a Function</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_7">9.7 Engineering Example - Robot Arm Motion</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="10_Problem_Solving.htm#10">10 Problem Solving&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_10" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_10"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_1">10.1 Solving Simple Problems</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_2">10.2 Assembling Solution Steps</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3">10.3 Summary of Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_10_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_10_3"><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_1">10.3.1 Basic Arithmetic Operations</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_2">10.3.2 Inserting into a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_3">10.3.3 Traversing a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_4">10.3.4 Building a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_5">10.3.5 Mapping a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_6">10.3.6 Filtering a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_7">10.3.7 Folding a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_8">10.3.8 Searching a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_9">10.3.9 Sorting a Collection</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_4">10.4 Solving Larger Problems</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_5">10.5 Engineering Example - Processing Geopolitical Data</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="11_Plotting.htm#11">11 Plotting&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_11" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_11"><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_1">11.1 Plotting in General&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_11_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_11_1"><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_1_1">11.1.1 A Figure - The Plot Container</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_1_2">11.1.2 Simple Functions for Enhancing Plots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_1_3">11.1.3 Multiple Plots on One Figure - Subplots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_1_4">11.1.4 Manually Editing Plots</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_2">11.2 2-D Plotting&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_11_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_11_2"><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_2_1">11.2.1 Simple Plots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_2_2">11.2.2 Plot Options</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_2_3">11.2.3 Parametric Plots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_2_4">11.2.4 Other 2-D Plot Capabilities</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_3">11.3 3-D Plotting&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_11_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_11_3"><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_3_1">11.3.1 Linear 3-D Plots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_3_2">11.3.2 Linear Parametric 3-D Plots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_3_3">11.3.3 Other 3-D Plot Capabilities</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_4">11.4 Surface Plots&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_11_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_11_4"><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_1">11.4.1 Basic Capabilities</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_2">11.4.2 Simple Exercises</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_3">11.4.3 3-D Parametric Surfaces</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_4">11.4.4 Bodies of Rotation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_5">11.4.5 Other 3-D Surface Plot Capabilities</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_6">11.4.6 Assembling Compound Surfaces</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_5">11.5 Manipulating Plotted Data</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_6">11.6 Engineering Example - Visualizing Geographic Data&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_11_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_11_6"><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_6_1">11.6.1 Analyzing the Data</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_6_2">11.6.2 Displaying the Data</a></div></li></ul></li></ul></li><li class="nav-item"><div class="nav-link"><a href="12_Matrices.htm#12">12 Matrices&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_12" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_12"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_1">12.1 Concept: Behavioral Abstraction</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_2">12.2 Matrix Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_12_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_12_2"><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_2_1">12.2.1 Matrix Multiplication</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_2_2">12.2.2 Matrix Division</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_2_3">12.2.3 Matrix Exponentiation</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_3">12.3 Implementation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_12_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_12_3"><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_3_1">12.3.1 Matrix Multiplication</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_3_2">12.3.2 Matrix Division</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_4">12.4 Rotating Coordinates&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_12_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_12_4"><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_4_1">12.4.1 2-D Rotation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_4_2">12.4.2 3-D Rotation</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_5">12.5 Solving Simultaneous Linear Equations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_12_5" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_12_5"><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_5_1">12.5.1 Intersecting Lines</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_6">12.2 Engineering Examples&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_12_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_12_6"><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_6_1">12.2.1 Ceramic Composition</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_6_2">12.2.2 Analyzing an Electrical Circuit</a></div></li></ul></li></ul></li><li class="nav-item"><div class="nav-link"><a href="13_Images.htm#13">13 Images&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_13" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_13"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="13_Images.htm#13_1">13.1 Nature of an Image</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="13_Images.htm#13_2">13.2 Image Types&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_13_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_13_2"><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_2_1">13.2.1 True Color Images</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_2_2">13.2.2 Gray Scale Images</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_2_3">13.2.3 Color Mapped Images</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_2_4">13.2.4 Preferred Image Format</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="13_Images.htm#13_3">13.3 Reading, Displaying, and Writing Images</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="13_Images.htm#13_4">13.4 Operating on Images&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_13_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_13_4"><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_4_1">13.4.1 Stretching or Shrinking Images</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_4_2">13.4.2 Color Masking</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_4_3">13.4.3 Creating a Kaleidoscope</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_4_4">13.4.4 Images on a Surface</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="13_Images.htm#13_5">13.5 Engineering Example - Detecting Edges</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="14_Sounds.htm#14">14 Sounds&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_14" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_14"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_1">14.1 The Physics of Sound</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_2">14.2 Recording and Playback</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_3">14.3 Implementation</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_4">14.4 Time Domain Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_14_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_14_4"><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_4_1">14.4.2 Slicing and Concatenating Sounds</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_4_2">14.4.2 Musical Background</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_4_3">14.4.3 Changing Sound Frequency</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_5">14.5 The Fast Fourier Transform&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_14_5" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_14_5"><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_5_1">14.5.1 Background</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_5_2">14.5.2 Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_5_3">14.5.3 Simple Spectral Analysis</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_6">14.6 Frequency Domain Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_14_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_14_6"><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_6_1">14.6.1 Details of the Spectral Data</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_6_2">14.6.2 Notes fading with time</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_7">14.7 Engineering Example - Music Synthesizer</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="15_Numerical_Methods.htm#15">15 Numerical Methods&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_15" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_15"><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_1">15.1 Interpolation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_15_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_15_1"><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_1_1">15.1.1 Linear Interpolation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_1_2">15.1.2 Cubic Spline Interpolation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_1_3">15.1.3 Extrapolation</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_2">15.2 Curve Fitting&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_15_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_15_2"><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_2_1">15.2.1 Linear Regression</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_2_2">15.2.2 Polynomial Regression</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_2_3">15.2.3 Practical Application</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_3">15.3 Numerical Integration&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_15_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_15_3"><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_3_1">15.3.1 Determination of the Complete Integral</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_3_2">15.3.2 Continuous Integration Problems</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_4">15.4 Numerical Differentiation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_15_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_15_4"><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_4_1">15.4.1 Difference Expressions</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_5">15.5 Analytical Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_15_5" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_15_5"><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_5_1">15.5.1 Analytical Integration</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_5_2">15.5.2 Analytical Differentiation</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_6">15.6 Implementation</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_7">15.7 Engineering Example - Shaping the Synthesizer Notes</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="16_Sorting.htm#16">16 Sorting&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_16" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_16"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="16_Sorting.htm#16_1">16.1 Measuring Algorithm Cost</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="16_Sorting.htm#16_2">16.2 Algorithms for Sorting Data&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_16_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_16_2"><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_2_1">16.2.1 Insertion Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_2_2">16.2.2 Bubble Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_2_3">16.2.3 Quick Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_2_4">16.2.4 Merge Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_2_5">16.2.5 Radix Sort</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="16_Sorting.htm#16_3">16.3 Performance Analysis</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="16_Sorting.htm#16_4">16.4 Applications of Sorting Algorithms&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_16_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_16_4"><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_1">16.4.1 Using sort(...)</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_2">16.4.2 Insertion Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_3">16.4.3 Bubble Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_4">16.4.4 Quick Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_5">16.4.5 Merge Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_6">16.4.6 Radix Sort</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="16_Sorting.htm#16_5">16.5 Engineering Example - A Selection of Countries</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="17_Graphs.htm#17">17 Graphs&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_17" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_17"><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_1">17.1 Stacks&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_17_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_17_1"><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_1_1">17.1.1 The Nature of a Stack</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_1_2">17.1.2 Implementing Stacks</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_2">17.2 Queues&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_17_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_17_2"><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_2_1">17.2.1 The Nature of a Queue</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_2_2">17.2.2 Implementing Queues</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_2_3">17.2.3 Priority Queues</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#">17.3 Testing Stacks and Queues</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_4">17.4 Graphs&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_17_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_17_4"><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_4_1">17.4.1 Graph Examples</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_4_2">17.4.2 Processing Graphs</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_5">17.5 Minimum Spanning Trees</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_6">17.6 Finding Paths through a Graph&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_17_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_17_6"><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_6_1">17.6.1 Depth-First Search</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_6_2">17.6.2 Breadth-First Search</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_6_3">17.6.3 Dijkstra's Algorithm</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_6_4">17.6.4 An Approximation Algorithm</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_6_5">17.6.5 Serious Path Finding Algorithms</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_7">17.7 Engineering Applications&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_17_7" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_17_7"><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_7_1">17.7.1 Simple Applications</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_7_2">17.7.2 Complex Extensions</a></div></li></ul></li></ul></li><li class="nav-item"><a class="nav-link" href="Appendix_A.htm">Appendix A</a></li><li class="nav-item"><a class="nav-link" href="Appendix_B.htm">Appendix B</a></li><li class="nav-item"><a class="nav-link" href="Appendix_C.htm">Appendix C</a></li><li class="nav-item"><a class="nav-link" href="Appendix_D.htm">Appendix D</a></li><li class="nav-item"><a class="nav-link" href="text_index.htm">Index</a></li></ul></nav></div>

<div class="content">
  <h1 id="5" align="center">Chapter 5: Execution Control</h1>

  <!-- Chapter Objectives -->
  <h2>Chapter Objectives</h2>
  <div class="container">
    <p>This chapter discusses techniques for<a id="2616">!</a> changing the flow of control in a program<a id="2804">!</a>, which may be necessary for<a id="2617">!</a> two reasons:
    <ul>
      <li>You may want to execute some parts of the code<a id="2470">!</a> under certain specific circumstances</li>
      <li>You may want to repeat a section of code<a id="2471">!</a> a certain number of times</li>
    </ul>
    In Chapter 3 we used the array<a id="2447">!</a> notation to gather numbers<a id="2788">!</a> into a form where they could be processed collectively rather than individually. This chapter deals with code<a id="2472">!</a> blocks (collections of one or more lines of code<a id="2473">!</a>) that solve a particular segment of a problem in the same way. We will see how to define a code<a id="2474">!</a> block, how to decide to execute a code<a id="2475">!</a> block under certain conditions only, and how to repeat execution<a id="2592">!</a> of a code<a id="2476">!</a> block.</p>
  </div>

  <div class="chp-section" data-sect-num="1" data-sect-name="Concept: Code Blocks">
    <!-- Concept: Code Blocks -->
    <h2 id="5_1">5.1	Concept: Code Blocks</h2>
    <div class="container">
      <p>A code<a id="2477">!</a> block is a collection<a id="2545">!</a> of zero or more computer<a id="2552">!</a> instructions packaged together in order to treat them as a single entity.  This allows us to selectively execute or skip some blocks or to repeat them under contolled circumstances. Some computer<a id="2553">!</a> languages identify code<a id="2478">!</a> blocks by enclosing them in braces (<code>{. . .}</code>); others identify them by the level of indentation of the text<a id="2841">!</a>. The MATLAB<a id="2756">!</a> language uses the occurrence of key words in the text<a id="2842">!</a> to define the extent of code<a id="2479">!</a> blocks. Keywords like <code><font color="blue">if, switch<a id="2826">!</a>, while<a id="2908">!</a>, for<a id="2618">!</a>, case<a id="2465">!</a>, otherwise, else<a id="2569">!</a>, elseif<a id="2573">!</a>, </code></font>and<code><font color="blue"> end<a id="2578">!</a></font></code> are identified with blue coloring by the MATLAB<a id="2757">!</a> text<a id="2843">!</a> editor. They are not part of the code<a id="2480">!</a> block, but they serve as instructions on what to do with the code<a id="2481">!</a> block and as delimiters that define the extent of the code<a id="2482">!</a> block. So, for<a id="2619">!</a> example, all the commands in a script are a code<a id="2483">!</a> block that terminates either at the end<a id="2579">!</a> of the script or at the beginning of the first function<a id="2686">!</a> definition.  Similarly, in a function<a id="2687">!</a> definition, the body of the code<a id="2484">!</a> from the function<a id="2688">!</a> key word to the "matching" end<a id="2580">!</a> is a code<a id="2485">!</a> block.  As we will soon see, code<a id="2486">!</a> blocks can be nested within code<a id="2487">!</a> blocks, each having a beginning key word with a matching end<a id="2581">!</a>.</p>
    </div>
  </div>

  <div class="chp-section" data-sect-num="2" data-sect-name="Conditional Execution in General">
    <!-- Conditional Execution in General -->
    <h2 id="5_2">5.2	Conditional Execution in General</h2>
    <div class="container clearfix">
      <div class="float-sm-right card">
        <img src="..\Images\Fig_5_1.JPG" alt="Figure 5.1" class="fig fig-long card-image">
        <p class="figure-name card-title">Figure 5.1: Simple if statement</p>
      </div>
      <p>To this point, the statements written in our scripts<a id="2815">!</a> and functions have been executed in sequence from the instruction at the top to the instruction at the bottom. However, it is frequently necessary to make choices about how to process a set of data<a id="2561">!</a> based on some characteristic of that data<a id="2562">!</a>. We have seen logical<a id="2722">!</a> expressions that result in a Logical result — <code>true</code> or <code>false<a id="2597">!</a></code>. This section discusses the code<a id="2488">!</a> that implements the idea shown in Figure 5.1.  </p>
      <p>In the flowchart shown in Figure 5.1, a set of statements (the code<a id="2489">!</a> block to be executed) is shown as a rectangle, a decision point is shown as a diamond, and the flow of program<a id="2805">!</a> control is indicated by arrows. When decision points are drawn, there will be at least two arrows leaving that symbol, each labeled with the reason one would take that path. This concept makes the execution<a id="2593">!</a> of a code<a id="2490">!</a> block conditional upon some test. If the result of the test is <code>true</code>, the code<a id="2491">!</a> block is executed. Otherwise, the default code<a id="2492">!</a> block is executed.  If the default code<a id="2493">!</a> block is empty<a id="2575">!</a> when the test fails, no code<a id="2494">!</a> is executed and control proceeds to the instruction(s) after the end<a id="2582">!</a> of the code<a id="2495">!</a> block.</p>
      <p>An important generalization of this concept is shown in Figure 5.2.  Here the solution is generalized to permit the first code<a id="2496">!</a> block to be implemented under the first condition as before. Now, however, if that first logical<a id="2723">!</a> test returns false<a id="2598">!</a>, a second test is performed to determine whether the second code<a id="2497">!</a> block should be executed. If that test returns false<a id="2599">!</a>, as many further tests as necessary may be performed, each with the appropriate code<a id="2498">!</a> block to be implemented when the result is true. Finally, if none of these tests return true, the last code<a id="2499">!</a> block, usually identified by the else<a id="2570">!</a> keyword—(n 1 1) in the figure—is executed. As the flowchart shows, as soon as one of the code<a id="2500">!</a> blocks is executed, the next instruction to execute is the one that follows the conditional code<a id="2501">!</a> after the end<a id="2583">!</a> statement. In particular, if there is no else<a id="2571">!</a> clause, it is possible that no code<a id="2502">!</a> at all is executed in this conditional statement.<p>
      <div class="float-sm-right card">
        <img src="..\Images\Fig_5_2.JPG" alt="Figure 5.2" class="fig-wide card-image">
        <p class="figure-name card-title">Figure 5.2: Compound if statment</p>
      </div>
      <p>There are two common styles in which to implement this conditional behavior. First we will discuss the most general form, the if statement, and then we will discuss the more restrictive, but tidier, switch<a id="2827">!</a> statement. Both implementations are found in most modern languages, albeit with slightly different syntax. In each case<a id="2466">!</a>, the code<a id="2503">!</a> block to be implemented is all the statements between the key words colored blue by the MATLAB<a id="2758">!</a> editor.</p>
    </div>
  </div>

  <div class="chp-section" data-sect-num="3" data-sect-name="if Statements">
    <!-- if Statements -->
    <h2 id="5_3">5.3  if Statements</h2>
    <div class="container">
      <p>Here we introduce the concept of a programming<a id="2809">!</a> template. Many programming<a id="2810">!</a> texts still use the idea of flowcharts<a id="2615">!</a>, such as those illustrated in Figures 5.1 and 5.2, to describe the design of a solution in a manner independent of the code<a id="2504">!</a> implementation. However, since this graphical form cannot be maintained with a text<a id="2844">!</a> editor, if the design of the solution changes, it is difficult to maintain any design description that is separate from the code<a id="2505">!</a> itself.</p>
      <p>Throughout the remainder of this text<a id="2845">!</a>, we will describe the overall design of a code<a id="2506">!</a> module using a design template. Design templates are a textual form of flowchart consisting of the key words that control program<a id="2806">!</a> flow and placeholders that identify the code<a id="2507">!</a> blocks and expressions that are necessary to implement the solution logic<a id="2716">!</a>. Design templates are powerful tools for<a id="2620">!</a> the novice programmer to overcome the “blank sheet of paper” problem—“how do I start solving this problem?” All programmers need to do is recognize the nature of the solution and write down the appropriate template. Then solving a particular problem becomes the relatively simple task of writing the code<a id="2508">!</a> blocks identified by the template.</p>
      <p>To discuss the if statement, first we consider its general, language independent template and then its MATLAB<a id="2759">!</a> implementation.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="General Template">
      <!-- General Template -->
      <h3 id="5_3_1">5.3.1	General Template</h3>
      <div class="container">
        <p>Template 5.1 shows the general form of the if statement</p>
        <div class="template"><iframe src="..\book_templates\template_5_1html.html"></iframe></div>
        <p>Note the following:</p>
        <ul>
          <li>The only essential ingredients are the first if statement, one code<a id="2509">!</a> block, and the end<a id="2584">!</a> statement. All other features may be added as your logic<a id="2717">!</a> requires.</li>
          <li>The code<a id="2510">!</a> blocks may contain any sequence of legal MATLAB<a id="2760">!</a> statements, including other if statements (nested ifs), switch<a id="2828">!</a> statements, or iterations (see Section 5.5).</li>
          <li>Nested if statements with a code<a id="2511">!</a> block are an alternative implementation of a logical<a id="2724">!</a> AND<a id="2444">!</a> statement.</li>
          <li>Recall that logical<a id="2725">!</a> operations<a id="2797">!</a> can be applied to a vector, resulting in a vector of Boolean values. This vector may be used as a logical<a id="2726">!</a> expression. The if statement will accept this expression as true if all of the elements<a id="2566">!</a> are true.</li>
        </ul>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="MATLAB Implementation">
      <!-- MATLAB Implementation -->
      <h3 id="5_3_2">5.3.2	MATLAB<a id="2761">!</a> Implementation</h3>
      <div class="container">
        <p>Listing 5.1 is an example of the use of if statements. Notice that a compound<a id="2551">!</a> if statement can select at most one code<a id="2512">!</a> block, and if the default code<a id="2513">!</a> block is empty<a id="2576">!</a>, it could run no code<a id="2514">!</a> blocks at all</p>
        <div class="listing"><iframe src="..\listings\listing_05_1_livehtml.html"></iframe></div>
        <p>Exercise 5.1 gives you the opportunity to practice using if statements, and Listing 5.2 shows a script that will satisfy Exercise 5.1.</p>
        <div class="exercise"><iframe src="..\exercises\exercise_5_1html.html"></iframe></div>
        <div class="listing"><iframe src="..\listings\listing_05_2_livehtml.html"></iframe></div>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="Important Ideas">
      <!-- Important Ideas -->
      <h3 id="5_3_3">5.3.3	Important Ideas</h3>
      <div class="container">
        <p>There are two important ideas that are necessary for<a id="2621">!</a> the successful implementation of <code>if</code> statements: the general form of the logical<a id="2727">!</a> expressions and short-circuit<a id="2817">!</a> analysis.</p>
        <p><b>Logical Expressions</b>: The <code>if</code> statement requires a logical<a id="2728">!</a> expression for<a id="2622">!</a> its condition. A logical<a id="2729">!</a> expression is any collection<a id="2546">!</a> of constants, variables, and operators<a id="2799">!</a> whose result is a logical<a id="2730">!</a> <code>true</code> or <code>false<a id="2600">!</a></code> value<a id="2849">!</a>. Logical expressions can be created in the following ways:</p>
        <ul>
          <li>The value<a id="2850">!</a> of a Logical constant (e.g., <code>true</code> or <code>false<a id="2601">!</a></code>)</li>
          <li>The value<a id="2851">!</a> of a variable<a id="2884">!</a> containing a Logical result (e.g., <code>found</code>)</li>
          <li>The result of a logical<a id="2731">!</a> operation<a id="2796">!</a> on two scalar<a id="2812">!</a> quantities (e.g., <code>A > 5</code><a id="2515">!</a>)</li>
          <li>The result of negating a logical<a id="2732">!</a> quantity using the unary<a id="2848">!</a> negation operator (e.g., <code>~found</code>)</li>
          <li>The result of combining multiple scalar<a id="2813">!</a> logical<a id="2733">!</a> expressions with the operators<a id="2800">!</a> and (<code>&amp;&amp;</code>) or or (<code>||</code>) (e.g., <code>A</code> and <code>B</code> (<code>A &amp;&amp; B</code>) or <code>A</code> or <code>B</code> (<code>A || B</code>)). </li>
          <li>The results of the functions that are the logical<a id="2734">!</a> equivalent of the <code>&amp;&amp;</code>,
          <code>||</code>, and <code>~</code> operators<a id="2801">!</a>: <code>and(A, B)</code> <code>or(A, B)</code> and <code>not(A)</code></li>
          <li>The results of other functions that operate on logical<a id="2735">!</a> vectors<a id="2906">!</a>: <code>any(<a id="2445">!</a>...)</code> and <code>all(<a id="2441">!</a>...)</code></li>
        </ul>
        <p><b>Note carefully:</b>
        <ol>
          <li>The "variables" <code>A</code> and <code>B</code> in the examples above may be considered as surrogates for<a id="2623">!</a> arbitrarily complex expressions that may be enclosed in parentheses for<a id="2624">!</a> clarity and result in the values <code>true</code> or <code>false<a id="2602">!</a></code>.</li>
          <li>The result from <code>any(<a id="2446">!</a>...)</code> will be <code>true</code> if any logical<a id="2736">!</a> value<a id="2852">!</a> in the vector is <code>true</code>. The result from <code>all(<a id="2442">!</a>...)</code> will be true only if all logical<a id="2737">!</a> values in the vector are <code>true</code>. </li>
          <li>The function<a id="2689">!</a> <code>all(<a id="2443">!</a>...)</code> is implicitly called if you supply a vector of logical<a id="2738">!</a> values to the <code>if</code> statement, as shown in Listing 5.3.</li>
          <li>The MATLAB<a id="2762">!</a> Command<a id="2550">!</a> window echoes logical<a id="2739">!</a>
          results as <code>1</code> (<code>true</code>) or <code>0</code> (<code>false<a id="2603">!</a></code>). In spite of this
          appearance, logical<a id="2740">!</a> values are not numeric and should
          never be treated as if they were.</li>
        </ol>
        <div class="listing"><iframe src="..\listings\listing_05_3_livehtml.html"></iframe></div>
        <p><b>Short-Circuit Evaluation</b>: When evaluating a sequence of logical<a id="2741">!</a> <code>&amp;&amp;</code> or <code>||</code> expressions, MATLAB<a id="2763">!</a> will stop processing when it finds the first result that makes all subsequent processing irrelevant. This concept is best illustrated by an example. Assume that <code>A</code> and <code>B</code> are logical<a id="2742">!</a> results and you want to evaluate <code>A &amp;&amp; B</code>. Since the result of this is <code>true</code> only if both <code>A</code> and <code>B</code> are <code>true</code>, if you evaluate <code>A</code> and the result is <code>false<a id="2604">!</a></code>, no value<a id="2853">!</a> of <code>B</code> can possibly change the outcome <code>A &amp;&amp; B</code>.	Therefore, there is no reason to evaluate any more components of a logical<a id="2743">!</a> and expression once a false<a id="2605">!</a> result has been found. Similarly, if you want <code>A || B</code>, if <code>A</code> is found to be <code>true</code>, you do not need to evaluate <code>B</code>.</p>
        <p>For example,suppose you want to test the nth element of a vector <code>v</code> using a variable<a id="2885">!</a> <code>n</code>,
        and you are concerned that <code>n</code> might not be a legal index value<a id="2854">!</a>. The following code<a id="2516">!</a> could be used:</p>
        <p><code>&nbsp;&nbsp;if (n &gt; 0) &amp;&amp; (n &lt;= length(<a id="2712">!</a>v)) &amp;&amp; (v(n) &gt; 0)<br>
              &nbsp;&nbsp;&nbsp;&nbsp;% success!<br>
              &nbsp;&nbsp;end<a id="2585">!</a>
        </code></p>
        <p>If <code>n</code> were not a legal index, the indexed accessor <code>v(n)</code> would cause an error for<a id="2625">!</a> attempting to reach beyond the end<a id="2586">!</a> of the vector. However, by putting the tests of <code>n</code> first, the short-circuit<a id="2818">!</a> logic<a id="2718">!</a> would not process the last part of the expression if either test of <code>n</code> failed.</p>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="4" data-sect-name="switch Statements">
    <!-- Switch Statements -->
    <h2 id="5_4">5.4 switch<a id="2829">!</a> Statements</h2>
    <div class="container">
      <p>A switch<a id="2830">!</a> statement implements the logic<a id="2719">!</a> shown in Figure 5.2 in a different programming<a id="2811">!</a> style by allowing the programmer to consider a number of different possible values for<a id="2626">!</a> the value<a id="2855">!</a> of one variable<a id="2886">!</a>. First we consider the general, language-independent template for<a id="2627">!</a> switch<a id="2831">!</a> statements, and then its MATLAB<a id="2764">!</a> implementation.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="General Template">
      <!-- General Template -->
      <h3 id="5_4_1">5.4.1	General Template</h3>
      <div class="container">
        <p>Template 5.2 shows the general template for<a id="2628">!</a> the switch<a id="2832">!</a> statement.</p>
        <div class="template"><iframe src="..\book_templates\template_5_2html.html"></iframe></div>
        <p>Note the following:</p>
        <ul>
          <li>All tests refer to the value<a id="2856">!</a> of the same parameter that may be any legal MATLAB<a id="2765">!</a> statement returning a single element or string {see chapter 6}</li>
          <li>case<a id="2467">!</a> specifications may be either a single value<a id="2857">!</a> or string or a set of values or strings<a id="2824">!</a> enclosed in braces { ... }</li>
          <li>otherwise specifies the code<a id="2517">!</a> block to be executed when none of the case<a id="2468">!</a> values apply</li>
          <li>The code<a id="2518">!</a> blocks may contain any sequence of legal MATLAB<a id="2766">!</a> statements, including other if statements (nested ifs), switch<a id="2833">!</a> statements, or iterations</li>
        </ul>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="MATLAB Implementation">
      <!-- MATLAB Implmentation -->
      <h3 id="5_4_2">5.4.2	MATLAB<a id="2767">!</a> Implementation</h3>
      <div class="container clearfix">
        <div class="card style-points float-sm-right">
          <p class="card-title">Style Points 5.1</p>
          <p class="card-text">The use of indentation is not required in the MATLAB<a id="2768">!</a> language, and it has no significance with regard to syntax.However, the appropriate use of indentation greatly improves the legibility of code<a id="2519">!</a> and you should use it. You have probably already noted that in addition to colorizing control statements, the text<a id="2846">!</a> editor automatically places the control statements in the indented positions illustrated in Listings 5.3 and 5.4.
        </div>
        <p>Listing 5.4 shows the MATLAB<a id="2769">!</a> implementation of a typical logical<a id="2744">!</a> problem: determining the number of days in a month. It assumes that the value<a id="2858">!</a> of month is 1 . . . 12, and leapYear is a logical<a id="2745">!</a> variable<a id="2887">!</a> identifying the current year as a leap year. Exercise 5.2 has you write and test the script in Listing 5.4. You will need to preset a value<a id="2859">!</a> for<a id="2629">!</a> <code>leapYear</code></p>
      </div>
      <div class="listing"><iframe src="..\listings\listing_05_4_livehtml.html"></iframe></div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="5" data-sect-name="Iteration in General">
    <!-- Iteration in General -->
    <h2 id="5_5">5.5	Iteration in General</h2>
    <div class="container">
      <p>The if and switch<a id="2834">!</a> statements allow us to decide to skip code<a id="2520">!</a> blocks based on conditions in the data<a id="2563">!</a>. The for<a id="2630">!</a> and while<a id="2909">!</a> constructs allow us to repeat code<a id="2521">!</a> blocks. Note, however, that the MATLAB<a id="2770">!</a> language is designed to avoid iteration<a id="2697">!</a>. Under most circumstances of processing numbers<a id="2789">!</a>, the array<a id="2448">!</a> processing operations<a id="2798">!</a> built into the language make do-it-yourself loop constructs unnecessary.</p>
      <p>When you do decide you have to use it, iteration<a id="2698">!</a> allows controlled repetition of a code<a id="2522">!</a> block. Control statements at the beginning of the code<a id="2523">!</a> block specify the manner and extent of the repetition:
      <ul>
        <li>The for<a id="2631">!</a> loop is designed to repeat its code<a id="2524">!</a> block a fixed number of times and largely automates the process of managing the iteration<a id="2699">!</a>.</li>
        <li>The while<a id="2910">!</a> loop is more flexible in character<a id="2469">!</a>. In contrast to the fixed repetition of the for<a id="2632">!</a> loop, its code<a id="2525">!</a> block can be repeated a variable<a id="2888">!</a> number of times, depending on the values of data<a id="2564">!</a> being processed. It is much more of a “do-it-yourself” iteration<a id="2700">!</a> kit.</li>
      </ul>
    </div>
  </div>

  <div class="chp-section" data-sect-num="6" data-sect-name="for Loops">
    <!-- for Loops -->
    <h2 id="5_6">5.6	for<a id="2633">!</a> Loops</h2>
    <div class="container clearfix">
      <div class="float-sm-right card">
          <img src="..\Images\Fig_5_3.JPG" alt="Figure 5.3" class="fig fig-long card-image">
          <p class="figure-name card-title">Figure 5.3: A for<a id="2634">!</a> Loop</p>
      </div>
      <p>Figure 5.3 shows a simple for<a id="2635">!</a> loop. The hexagonal shape illustrates the control of repetition. The repeated execution<a id="2594">!</a> of the code<a id="2526">!</a> block is performed under the control of a loop-control variable<a id="2889">!</a>. It is first set to an initial value<a id="2860">!</a> that is tested against a terminating condition. If the terminating test succeeds, the program<a id="2807">!</a> leaves the for<a id="2636">!</a> loop. Otherwise, the computations in the code<a id="2527">!</a> block are performed using the current value<a id="2861">!</a> of that variable<a id="2890">!</a>. When one pass through the code<a id="2528">!</a> block is finished, the variable<a id="2891">!</a> is updated to its next value<a id="2862">!</a>, and control returns to the termination test.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="General for Loop Template">
      <!-- General for Loop Template -->
      <h3 id="5_6_1">5.6.1	General for<a id="2637">!</a> Loop Template</h3>
      <div class="container">
          <p>The general template for<a id="2638">!</a> implementing for<a id="2639">!</a> loops is shown in Template 5.3. All of the mechanics of iteration<a id="2701">!</a> control are handled automatically in the variable<a id="2892">!</a> specification section. In some languages - especially those with their origins in C - the variable<a id="2893">!</a> specification is a formidable collection<a id="2547">!</a> of statements that provide great generality of loop management. The designers of the MATLAB<a id="2771">!</a> language, with its origins in matrix<a id="2785">!</a> processing, chose a much simpler approach for<a id="2640">!</a> specifying the variable<a id="2894">!</a> range, as shown in the general template. The repetition of the code<a id="2529">!</a> block is managed completely by the specification of the loop control variable<a id="2895">!</a>.</p>
          <div class="template"><iframe src="..\book_templates\template_5_3html.html"></iframe></div>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="MATLAB Implementation">
      <!-- MATLAB Implementation -->
      <h3 id="5_6_2">5.6.2	MATLAB<a id="2772">!</a> Implementation</h3>
      <div class="container">
        <p>The core concept in the MATLAB<a id="2773">!</a> for<a id="2641">!</a> loop implementation is embedded in the logic<a id="2720">!</a> of the variable<a id="2896">!</a> specification, which is accomplished as follows:</p>
        <p><code>&lt;variable<a id="2897">!</a> specification&gt;: &lt;variable<a id="2898">!</a>&gt; = &lt;vector&gt;</code></p>
        <p>where <code>&lt;variable<a id="2899">!</a>&gt;</code> is the name of the loop control variable<a id="2900">!</a> and <code>&lt;vector&gt;</code> is any vector that can be created by the techniques discussed in Chapter 4.</p>
        <p>If we were to use the variable<a id="2901">!</a> specification <code> x = A</code>, MATLAB<a id="2774">!</a> would proceed as follows:
        <ol>
          <li>Set an invisible index to 1.</li>
          <li>Repeat steps 3 to 5 as long as that index is less<a id="2713">!</a> than or equal<a id="2591">!</a> to the length of A.</li>
          <li>Set the value<a id="2863">!</a> of x to A(index)</li>
          <li>Evaluate the code<a id="2530">!</a> block with that value<a id="2864">!</a> of x</li>
          <li>Increment the index</li>
        </ol></p>
        <p>For a simple example of for<a id="2642">!</a> loops, the code<a id="2531">!</a> shown in Listing 5.5 solves a problem that should be done in a single MATLAB<a id="2775">!</a> instruction: <code>max(<a id="2786">!</a>A)</code> where <code>A</code> is a vector of integers. However, by expanding this into a <code>for<a id="2643">!</a></code> loop, we see the basic structure<a id="2825">!</a> of the <code>for<a id="2644">!</a></code> loop at work. </p>
        <div class="row">
          <div class="col-sm-8">
            <div class="listing"><iframe src="..\listings\listing_05_5_livehtml.html"></iframe></div>
          </div>
          <div class="col-sm-4 card common-pitfalls common-pitfalls-col">
            <p class="card-title">Common Pitfalls 5.2</p>
            <p class="card-text">
              By setting the default answer to the first value<a id="2865">!</a>, we avoid the problem of seeding the result with a value<a id="2866">!</a> that could be already outside the range of the vector values. For example, we might think that<br><code>theMax = 0;</code><br> would be a satisfactory seed. However, this would not do well if all the elements<a id="2567">!</a> of A were negative.
            </p>
          </div>
        </div>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="Indexing Implementation">
      <!-- Indexing Implementation -->
      <h3 id="5_6_3">5.6.3	Indexing Implementation</h3>
      <div class="container">
        <p>The above for<a id="2645">!</a> loop implementation may seem very strange to those with a C-based language background, in which the loop-control variable<a id="2902">!</a> is usually an index into the array<a id="2449">!</a> being traversed rather than an element from that array<a id="2450">!</a>. In order to illustrate the difference, we will adapt the code<a id="2532">!</a> from Listing 5.5 to solve a slightly different problem that approximates the behavior of max(<a id="2787">!</a>A). This time we need to know not only the maximum value<a id="2867">!</a> in the array<a id="2451">!</a>, but also its index. This requires that we resort to indexing the array<a id="2452">!</a> in a more conventional style, as shown in Listing 5.6. </p>
        <div class="listing"><iframe src="..\listings\listing_05_6_livehtml.html"></iframe></div>
        <p>Enter and run the scripts<a id="2816">!</a> in Listings 5.5 and 5.6. They should each produce the vector A and its maximum value<a id="2868">!</a>, and the second listing would also tell you at what index that maximum occurred.</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="4" data-sub-name="Breaking out of a for Loop">
      <!-- Breaking out of a for Loop -->
      <h3 id="5_6_4">5.6.4	Breaking out of a for<a id="2646">!</a> Loop</h3>
      <div class="container">
        <p>If you are in a <code>for<a id="2647">!</a></code> loop and find a circumstance where you really do not want to continue<a id="2554">!</a> iterating, the <code>break<a id="2457">!</a></code> statement will skip immediately out of the innermost containing loop. If you want to continue<a id="2555">!</a> iterating but omit all further steps of the current iteration<a id="2702">!</a>, you can use the <code>continue<a id="2556">!</a></code> statement. </p>
        <p><b>Note:</b> This use of the <code>break<a id="2458">!</a></code> statement explains why it is really bad to put <code>break<a id="2459">!</a></code> statements inside switch<a id="2835">!</a> statements.  Other languages require <code>break<a id="2460">!</a></code> statements between the <code>cases</code> to prevent "falling through" to the next code<a id="2533">!</a> body.  MATLAB<a id="2776">!</a> never allows that, and a <code>break<a id="2461">!</a></code> statement there will exit immediately from the nearest enclosing iteration<a id="2703">!</a> - very rarely what you want, and very difficult to diagnose!</p>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="7" data-sect-name="while Loops">
    <!-- while Loops -->
    <h2 id="5_7">5.7 while<a id="2911">!</a> Loops</h2>
    <div class="container clearfix">
      <div class="float-sm-right card">
          <img src="..\Images\Fig_5_4.JPG" alt="Figure 5.4" class="fig fig-long card-image">
          <p class="figure-name card-title">Figure 5.4: Logic of a while<a id="2912">!</a> Loop</p>
      </div>
      <p>We use while<a id="2913">!</a> loops in general to obtain more control over the number of times the iteration<a id="2704">!</a> is repeated. Figure 5.4 illustrates the control flow for<a id="2648">!</a> a while<a id="2914">!</a> loop. Since the termination test is performed as the loop is entered, the loop control expression must normally be initialized to a state that will permit the first loop entry. It is possible that the code<a id="2534">!</a> block is not executed at all — for<a id="2649">!</a> example, if there is/are no data<a id="2565">!</a> to process.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="General while Template">
      <!-- General while Loop Template -->
      <h3 id="5_7_1">5.7.1 General while<a id="2915">!</a> Template</h3>
      <div class="container">
        <p>Template 5.4 shows the general template for<a id="2650">!</a> implementing while<a id="2916">!</a> loops. The logical<a id="2746">!</a> expression controlling the iteration<a id="2705">!</a> is testing some state of the workspace; therefore, two things that were automatic in the for<a id="2651">!</a> loop must be manually accomplished with the while<a id="2917">!</a> loop:<br>
        &nbsp;&nbsp;1. initializing the test, and<br>
        &nbsp;&nbsp;2. updating the logic<a id="2721">!</a> in the code<a id="2535">!</a> block so that the test will eventually fail and the iteration<a id="2706">!</a> will stop.<br>
        <b>Note:</b> Sooner or later, everyone forgets to update the exit test and your code<a id="2536">!</a> "locks up" in an endless while<a id="2918">!</a> loop.  To force the process to exit, press Ctl-C on the keyboard.</p>
        <div class="template"><iframe src="..\book_templates\template_5_4html.html"></iframe></div>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="MATLAB while Loop Implementation">
      <!-- MATLAB while Loop Implmentation -->
      <h3 id="5_7_2">5.7.2	MATLAB<a id="2777">!</a> while<a id="2919">!</a> Loop Implementation</h3>
      <div class="container">
        <p>To illustrate the use of a while<a id="2920">!</a> loop, Listing 5.7 shows you how to solve the same problem of finding the largest value<a id="2869">!</a> in a vector.using the while<a id="2921">!</a> syntax.</p>
        <p>Enter and run the script in Listing 5.7. It should produce similar results as before.</p>
        <div class="listing"><iframe src="..\listings\listing_05_7_livehtml.html"></iframe></div>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="Loop-and-a-Half Implementation">
      <!-- Loop-and-a-Half Implementation -->
      <h3 id="5_7_3">5.7.3	Loop-and-a-Half Implementation</h3>
      <div class="container clearfix">
        <div class="card style-points float-sm-right">
          <p class="card-title">Style Points 5.2</p>
          <p class="card-text">We wrote the for<a id="2652">!</a> loop examples in two styles: the direct access style and the indexing style. Many people code<a id="2537">!</a> in the indexing style even when the index value<a id="2870">!</a> is not explicitly required. This is slightly tacky and demonstrates a lack of appreciation for<a id="2653">!</a> the full power of the MATLAB<a id="2778">!</a> language.</p>
        </div>
        <p>Listing 5.8 illustrates the implementation of the loop-and-a-half<a id="2755">!</a> iteration<a id="2707">!</a> style, in which we must enter the loop and perform some computation before realizing that we do not need to continue<a id="2557">!</a>. Here we continually ask the user for<a id="2654">!</a> the radius of a circle until an illegal radius is entered, which is our cue to terminate the iteration<a id="2708">!</a>. For each radius entered, we want to display the area and circumference of the circle with that radius.</p>
        <p>Try this script with any number of radius values.</p>
      </div>
      <div class="listing"><iframe src="..\listings\listing_05_8_livehtml.html"></iframe></div>
    </div>

    <div class="chp-subsection" data-sub-num="4" data-sub-name="Breaking a while Loop">
      <!-- Breaking a while Loop -->
      <h3 id="5_7_4">5.7.4 Breaking a while<a id="2922">!</a> Loop</h3>
      <div class="container">
        <p>As with the <code>for<a id="2655">!</a></code> loop, <code>break<a id="2462">!</a></code> will exit the innermost <code>while<a id="2923">!</a></code> loop, and <code>continue<a id="2558">!</a></code> will skip to the end<a id="2587">!</a> of the loop but remain within it.</p>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="8" data-sect-name="Engineering Example - Computing Liquid Levels">
    <!-- Engineering Example - Computing Liquid Levels -->
    <h2 id="5_8">5.8	Engineering Example - Computing Liquid Levels</h2>
    <div class="container clearfix">
      <div class="float-sm-right card">
          <img src="..\Images\Fig_5_5.JPG" alt="Figure 5.5" class="fig fig-long card-image">
          <p class="figure-name card-title">Figure 5.5: Partially Filled Tank</p>
      </div>
      <p>Figure 5.5 shows a cylindrical tank of height H  and radius r with a hemispherical cap on each end<a id="2588">!</a> (also of radius, r ). If the height of the liquid is h, what is the volume of liquid in the tank? Clearly, the calculation of the volume of liquid in the tank depends upon the relationship between h, H, and r:</p>
    <ul>
      <li><p>If h is less<a id="2714">!</a> than r, we need the volume, v, of a partially filled sphere<a id="2819">!</a> given by:</p>
        $$ v = {\frac{1}{3}}{\pi}{h^2}{(3r - h)} $$
      </li>
      <li><p>If h is greater than r but less<a id="2715">!</a> than H - r, we need the volume of a fully filled hemisphere plus the volume of a cylinder of height h - r:</p>
        $$ v = {\frac{2}{3}}{\pi}{r^3} + {\pi}{r^2}{(h-r)} $$
      </li>
      <li><p>If h is greater than H + r, we need the volume of a fully filled sphere<a id="2820">!</a> plus the volume of a cylinder of height H-2r minus the partially empty<a id="2577">!</a> upper hemisphere of height H - h:</p>
        $$ v = {\frac{4}{3}}{\pi}{r^3} + {\pi}{r^2}{(H - 2r)} - {\frac{1}{3}}{pi}{(H - h)^2}{(3r - H - h)} $$
      </li>
    </ul>
    <p>The script to perform this calculation is shown in Listing 5.9. Rather than performing the computations for<a id="2656">!</a> one liquid level only, we should write the script so that we continue<a id="2559">!</a> to consider tanks of different dimensions and different liquid heights for<a id="2657">!</a> each tank until the user indicates that he needs no more results.  You may also uncomment the lines marked <code>auto gen</code> to allow the random number generator to process a number of different cases.</p>
  </div>
  <div class="listing"><iframe src="..\listings\listing_05_9_livehtml.html"></iframe></div>
  <div class="data"><p>
    Here are some typical results from the listing with <code>auto gen</code> set:<br>
    <code>
    rad 82.00 ht 10.00 level 69.00 vol 882470.23<br>
    rad 44.00 ht 3.00 level 38.00 vol 142142.41<br>
    liquid level too high<br>
    rad 44.00 ht 3.00 level 19.00 vol 42718.33<br>
    rad 71.00 ht 65.00 level 28.00 vol 151885.53<br>
    rad 71.00 ht 65.00 level 66.00 vol 670554.10<br>
    rad 96.00 ht 50.00 level 34.00 vol 307482.33<br>
    rad 96.00 ht 50.00 level 22.00 vol 134820.40<br>
    rad 96.00 ht 50.00 level 26.00 vol 185471.25<br>
    rad 96.00 ht 50.00 level 70.00 vol 1118616.42<br>
    liquid level too high<br>
    rad 96.00 ht 50.00 level 55.00 vol 738091.01<br>
    rad 84.00 ht 26.00 level 25.00 vol 148571.15<br>
    rad 84.00 ht 26.00 level 24.00 vol 137526.36<br>
    rad 84.00 ht 26.00 level 35.00 vol 278371.29<br>
    rad 47.00 ht 62.00 level 35.00 vol 135978.60<br>
    rad 47.00 ht 62.00 level 59.00 vol 211519.24<br>
    liquid level too high<br>
    rad 47.00 ht 62.00 level 29.00 vol 98637.63<br>
    liquid level too high<br>
    rad 47.00 ht 62.00 level 38.00 vol 155751.79<br>
    rad 47.00 ht 62.00 level 8.00 vol 8913.75<br>
    rad 93.00 ht 78.00 level 13.00 vol 47075.72<br>
    rad 93.00 ht 78.00 level 47.00 vol 536676.18<br>
    </code></p>
  </div>
</div>

<!-- Chapter Summary -->
<h2>Chapter Summary</h2>
<div class="container">
  <p>This chapter presented techniques for<a id="2658">!</a> changing the flow of control of a program<a id="2808">!</a> for<a id="2659">!</a> condition execution<a id="2595">!</a> and repetitive execution<a id="2596">!</a>:</p>
  <ul>
    <li>The most general conditional form is the if statement, with or without the accompanying elseif<a id="2574">!</a> and else<a id="2572">!</a> statements</li>
    <li>The switch<a id="2836">!</a> statement considers different cases of the values of a countable variable<a id="2903">!</a></li>
    <li>A for<a id="2660">!</a> loop in its most basic form executes a code<a id="2538">!</a> block for<a id="2661">!</a> each of the elements<a id="2568">!</a> of a vector</li>
    <li>A while<a id="2924">!</a> loop repeats a code<a id="2539">!</a> block a variable<a id="2904">!</a> number of times, as long as the conditions specified for<a id="2662">!</a> continuing the repetition remain true</li>
  </ul>
</div>
<h2>Self Test</h2>
<div class="container">

Use the following questions to check your understanding of the material in this
chapter:
<h3>True or False</h3>
<ol>
<li>MATLAB<a id="2779">!</a> keywords are colored green by the editor.</li>
    <li>Indentation is required in MATLAB<a id="2780">!</a> to define code<a id="2540">!</a> blocks.</li>
    <li>It is possible that no code<a id="2541">!</a> at all is executed by if or switch<a id="2837">!</a>
constructs.</li>
    <li>The word true is a valid logical<a id="2747">!</a> expression.</li>
    <li>When evaluating a sequence of logical<a id="2748">!</a> &<a id="2802">!</a>&<a id="2803">!</a> expressions, MATLAB<a id="2781">!</a>
will stop processing when it finds the first true result.</li>
    <li>The for<a id="2663">!</a> loop repeats the enclosed code<a id="2542">!</a> block a fixed number of
times even if you modify the index variable<a id="2905">!</a> within the code<a id="2543">!</a> block.</li>
    <li>Using a break<a id="2463">!</a> statement is illegal in a while<a id="2925">!</a> loop.</li>
    <li>The logical<a id="2749">!</a> expression used in a while<a id="2926">!</a> loop specifies the conditions
for<a id="2664">!</a> exiting the loop.</li>
</ol>
<h3>Fill in the Blanks</h3>
<ol>
<li>MATLAB<a id="2782">!</a> uses ______________ in the text<a id="2847">!</a> to define the extent of
code<a id="2544">!</a> blocks.</li>
    <li>The function<a id="2690">!</a> _________________is implicitly called by MATLAB<a id="2783">!</a> if
you supply a vector of logical<a id="2750">!</a> values to the if statement.</li>
    <li>It is good practice to include __________ in a switch<a id="2838">!</a> statement to
trap illegal values entering the switch<a id="2839">!</a>.</li>
    <li>There is no reason to evaluate any more components of a logical<a id="2751">!</a> or
expression once a(n) _______ result has been found.</li>
    <li>A while<a id="2927">!</a> loop can be repeated a number of times, depending on the
____________ being processed.</li>
    <li>If you are in a(n) _____________ loop, you can use the break<a id="2464">!</a>
statement to skip immediately out of the _____________ loop.</li>
</ol>

<h3>Programming Projects</h3>
<ol>
<li>Write a script to solve this problem. Assume that you have a vector
named D. Using iteration<a id="2709">!</a> (for and/or while<a id="2928">!</a>) and conditionals (if
and/or switch<a id="2840">!</a>), separate vector D into four vectors<a id="2907">!</a> posEven,
negEven, posOdd, and negOdd.
<ul>
<li>posEven contains all of the positive even numbers<a id="2790">!</a> in D.</li>
    <li>negEven contains all of the negative even numbers<a id="2791">!</a> in D.</li>
    <li>posOdd contains all of the positive odd numbers<a id="2792">!</a> in D.</li>
    <li>negOdd contains all of the negative odd numbers<a id="2793">!</a> in D.
</ul>
For example:
if D = [-4,-3,-2,-1,0,1,2,3,4],
posEven=[2,4], negEven=[-4,-2],
posOdd=[1,3] and negOdd=[-3,-1]</li>
    <li>You must use either for<a id="2665">!</a> or while<a id="2929">!</a> to solve the following problems.
	<ul>
<li> Iterate through a vector, A, using a for<a id="2666">!</a> loop, and create a new
vector, B, containing logical<a id="2752">!</a> values. The new vector should
contain true for<a id="2667">!</a> positive values and false<a id="2606">!</a> for<a id="2668">!</a> all other values. For
example, if A = [ -300 2 5 -63 4 0 -46], the result should be
B = [false<a id="2607">!</a> true true false<a id="2608">!</a> true true false<a id="2609">!</a>]</li>
    <li>Iterate through the vector, A, using a while<a id="2930">!</a> loop, and return a new
vector, B, containing true for<a id="2669">!</a> positive values and false<a id="2610">!</a> for<a id="2670">!</a> all
other values.</li>
    <li>Iterate through a logical<a id="2753">!</a> array<a id="2453">!</a>, N, using a for<a id="2671">!</a> loop, and return a
new vector, M, containing the value<a id="2871">!</a> 2 wherever an element of N is
true and the value<a id="2872">!</a> -1 (not a logical<a id="2754">!</a> value<a id="2873">!</a>) wherever N is false<a id="2611">!</a>.
For example, if N = [true false<a id="2612">!</a> false<a id="2613">!</a> true true false<a id="2614">!</a> true],
the result should be M = [2 -1 -1 2 2 -1 2]</li>
    <li>Iterate through an array<a id="2454">!</a>, Z, using a while<a id="2931">!</a> loop. Replace every
element with the number 3 until you reach a number larger than
50. Leave the rest unchanged. For example, if Z = [4 3 2 5 7 9 0
64 34 43], after running your script, Z = [3 3 3 3 3 3 3 3 34 43]</li>
</ul>
    <li>You are hiring grad students to work for<a id="2672">!</a> your company, which you
have recently started. The Human Resources department has asked
you to write a script that will help<a id="2695">!</a> them determine the chances of an
individual applicant getting a job after interviewing. The following
table outlines the rules for<a id="2673">!</a> determining the chances for<a id="2674">!</a> the applicant
to get a job:
<table>
<tr><th>GPA Value</th><th>Chance of Being Hired</th></tr>
<tr><td>GPA>= 3.5</td><td>90%</td></tr>
<tr><td>3.0<= GPA < 3.5</td><td>80%</td></tr>
<tr><td>2.5 <= GPA < 3.0</td><td>70%</td></tr>
<tr><td>2.0 <= GPA < 2.5</td><td>60%</td></tr>
<tr><td>1.5 <= GPA < 2.0</td><td>40%</td></tr>
<tr><td>GPA < 1.5</td><td>30%</td></tr>
</table>
Your script should repeatedly ask the user for<a id="2675">!</a> a GPA value<a id="2874">!</a> and
compute the student's chances of being hired. It should continue<a id="2560">!</a> asking
for<a id="2676">!</a> GPA values until a negative number is entered. <br>
For example:
<ul>
<li>GPA input: 4 should give the answer 0.9</li>
    <li>GPA input: 3.5 should give the answer 0.9</li>
    <li>GPA input: 3.4 should give the answer 0.8</li>
</ul>
    <li>You were just hired for<a id="2677">!</a> a summer internship with one of the area's
best software companies; however, on your first day of work you
learn that for<a id="2678">!</a> the next three months, the only job you will have is to
convert binary<a id="2455">!</a> (base 2) numbers<a id="2794">!</a> into decimal numbers<a id="2795">!</a> (base 10).
You decide to write a script that will repetitively ask the user for<a id="2679">!</a> a
binary<a id="2456">!</a> number and return its decimal equivalent until an illegal
number (one containing digits other than 0 or 1) is entered. The
number entered should contain only the digits 0 and 1. The
rightmost digit has the value<a id="2875">!</a> 2 0 and the digit N places to the left of
that has the value<a id="2876">!</a> 2<sup>N</sup>. <br>
For example, <br>
entering 110101 returns
53 = 25 + 24 + 23 + 20
You must use iteration<a id="2710">!</a> to solve this problem. <br>
Note: The input (...) function<a id="2691">!</a> prompts the user for<a id="2680">!</a> a value<a id="2877">!</a>, parses the characters entered
according to normal MATLAB<a id="2784">!</a> rules, and returns the result.</li>
    <li>You have a friend who<a id="2933">!</a> has too many clothes to store in his or her
tiny wardrobe. Being a good friend, you offer to help<a id="2696">!</a> to decide
whether each piece of clothing is worth saving. You decide to write
a script that will compute the value<a id="2878">!</a> of each piece of clothing. A
piece of clothing has five attributes that can be used to determine its
value<a id="2879">!</a>. The attributes are: condition, color<a id="2548">!</a>, price, number of matches,
and comfort. Each attribute will be rated on a scale<a id="2814">!</a> of 1 to 5. Write a
script called clothes that will ask the user for<a id="2681">!</a> the ratings for<a id="2682">!</a> each
attribute and store the result in a vector. The order of attributes in
the vector is: [condition color<a id="2549">!</a> price matches comfort]
The script should compute a value<a id="2880">!</a> between 0 and 100; 100 represents
a good piece of clothing, while<a id="2932">!</a> 0 represents a bad piece of clothing.
The points that should be given for<a id="2683">!</a> each attribute are shown below:<br>
<table>
<tr><th>Condition:</th><td>1=>0; 2=>5; 3=>10; 4=>15; 5=>20</td></tr>
<tr><th>Color:</th><td>1 => blue => 12;</td></tr>
<tr><th></th><td>2 => red => 2;</td></tr>
<tr><th></th><td>3 => pink => 15;</td></tr>
<tr><th></th><td>4 => yellow => 20;</td></tr>
<tr><th></th><td>5 => white => 12</td></tr>
<tr><th>Price:</th><td>1 => 8, 2-3 => 16, 4-5 => 20</td></tr>
<tr><th>Matches:</th><td>1-2 => 8, 3-5 => 19</td></tr>
<tr><th>Comfort:</th><td>1 => 6, 2-3 => 13, 4-5 =>18</td></tr>
</table>
Note: If a number other than 1-5 is assigned for<a id="2684">!</a> one of the
attributes, no points should be given.</li>
    <li>A "yard" is a traditional English container. It is 36 inches long, and
can be approximated by a 4-inch diameter glass sphere<a id="2821">!</a> attached to
a conical section whose narrow end<a id="2589">!</a> is 1 inch in diameter, and
whose wide end<a id="2590">!</a> is 6 inches in diameter. <br>
Write a script to do the following: <br>
<ul>
<li>ask the user for<a id="2685">!</a> the height of the liquid in the yard, and</li>
<li>calculate the volume of liquid needed to fill the yard to that level.</li>
</ul>
    <li>Now that you're comfortable with iteration<a id="2711">!</a>, you’re going to have to
solve an interesting problem. It seems that the Math department at a
rival university has once again dropped the ball, and forgotten the
value<a id="2881">!</a> of pi. You are to write a function<a id="2692">!</a> called mypi, which consumes
a number that specifies the required accuracy and then
approximates the value<a id="2882">!</a> of pi to that accuracy. You are going to use
the following algorithm based on geometric probability.
Think about a quarter circle inside of a unit square<a id="2822">!</a> (the quarter
circle has area p/4). You pick a random point inside the square<a id="2823">!</a>. If it
is in the quarter circle, you get a "hit"; and if not, you get a "miss."
The approximate area of the quarter circle will be given by the
number of hits divided by the number of points you chose.
Your function<a id="2693">!</a> should repeat the process of counting
hits and misses until at least 10,000 tries have been
made, and the successive estimates of pi are within
the prescribed accuracy. It should return the
estimated value<a id="2883">!</a> of pi.<br>
Hint: you could use the function<a id="2694">!</a> rand (...) in this problem.</li>
 
</ol>
</div>
</div>


</body>
</html>


<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<head>
    <title>04_Vectors</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="styles/styles.css" />
    <script async src="./javascript/index.js"></script>
</head>
<body>

<div><nav class="navbar navbar-expand-lg fixed-top top-nav navbar-light bg-light"><a class="navbar-brand" href="#"><img src="../Images/1371.png" width="30" height="30" class="d-inline-block align-top" alt="">&nbspEngineering Computation Using MATLAB</a></nav></div>
<div class="nav-obj"><nav class="nav sidenav nav-scroll navbar-dark bg-dark"><ul class="navbar-nav"><li class="nav-item"><a class="nav-link" href="..\..\index.html">Home</a></li><li class="nav-item"><a class="nav-link" href="Preface.htm">Preface</a></li><li class="nav-item"><div class="nav-link"><a href="01_Introduction.htm#1">1 Introduction&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_1"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="01_Introduction.htm#1_1">1.1 Background</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="01_Introduction.htm#1_2">1.2 History of Computer Architectures&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_1_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_1_2"><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_2_1">1.2.1 Babbage's Difference Engine</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_2_2">1.2.2 Colossus</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_2_3">1.2.3 The von Neumann Architecture</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="01_Introduction.htm#1_3">1.3 Modern Computer Software&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_1_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_1_3"><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_3_1">1.3.1 Operating Systems</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_3_2">1.3.2 Software Tools</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_3_3">1.3.3 Programming Languages</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_3_4">1.3.4 Running a Computer Program</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_3_5">1.3.5 Running an Interpreted Program</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="01_Introduction.htm#1_4">1.4 Anticipated Outcomes&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_1_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_1_4"><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_4_1">1.4.1 Introduction to MATLAB</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_4_2">1.4.2 Learning Programming Concepts</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_4_3">1.4.3 Problem-Solving Skills</a></div></li></ul></li></ul></li><li class="nav-item"><div class="nav-link"><a href="02_Basics.htm#2">2 Basics&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_2"><li class="nav-item secnav"><div class="nav-link"><a href="02_Basics.htm#2_1">2.1 Programming Language Background&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_2_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_2_1"><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_1_1">2.1.1 Abstraction</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_1_2">2.1.2 Algorithms</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_1_3">2.1.3 Programming Paradigms</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="02_Basics.htm#2_2">2.2 Basic Data Manipulation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_2_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_2_2"><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_2_1">2.2.1 Starting and Stopping MATLAB</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_2_2">2.2.2 Assigning Values to Variables</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_2_3">2.2.3 Data Typing</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_2_4">2.2.4 Classes and Objects</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="02_Basics.htm#2_3">2.3 MATLAB User Interface&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_2_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_2_3"><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_1">2.3.1 Command Window</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_2">2.3.2 Command History</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_3">2.3.3 Workspace Window</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_4">2.3.4 Current Folder Window</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_5">2.3.5 Variable Editor</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_6">2.3.6 Figure Window</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_7">2.3.7 Editor Window</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="02_Basics.htm#2_4">2.4 Scripts&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_2_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_2_4"><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_1">2.4.1 Text Files</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_2">2.4.2 Creating Scripts</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_3">2.4.3 The Current Directory</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_4">2.4.4 Running Scripts</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_5">2.4.5 Punctuating Scripts</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_6">2.4.6 Debugging Scripts</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="02_Basics.htm#2_5">2.5 Engineering Example - Spacecraft Launch</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="03_Functions.htm#3">3 Functions&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_3"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="03_Functions.htm#3_1">3.1 Concepts: Abstraction and Encapsulation</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="03_Functions.htm#3_2">3.2 Black Box View of a Function</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="03_Functions.htm#3_3">3.3 MATLAB Implementation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_3_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_3_3"><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_1">3.3.1 General Template</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_2">3.3.1 Function Definition</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_3">3.3.3 Storing and Using Functions</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_4">3.3.4 Calling Functions</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_5">3.3.5 Variable Number of Parameters</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_6">3.3.6 Returning Multiple Results</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_7">3.3.7 Auxiliary Local Functions</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_8">3.3.8 Encapsulation in MATLAB Functions</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_9">3.3.9 Global Variables</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="03_Functions.htm#3_4">3.4 Engineering Example: Measuring a Solid Object</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="04_Vectors.htm#4">4 Vectors&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_4"><li class="nav-item secnav"><div class="nav-link"><a href="04_Vectors.htm#4_1">4.1 Concept: Data Collection&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_4_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_4_1"><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_1_1">4.1.1 Data Abstraction</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_1_2">4.1.2 Homogeneous Collections</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="04_Vectors.htm#4_2">4.2 Vectors&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_4_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_4_2"><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_2_1">4.2.2 Creating a Vector</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_2_2">4.2.2 Size of a Vector</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_2_3">4.2.3 Indexing a Vector</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_2_4">4.2.4 Shortening a Vector</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_2_5">4.2.5 Operating on Vectors</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="04_Vectors.htm#4_3">4.3 Engineering Example - Forces and Moments</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="04_Vectors.htm#4_4">4.4 Arrays&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_4_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_4_4"><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_4_1">4.4.1 Properties of an Array</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_4_2">4.4.2 Creating an Array</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_4_3">4.4.3 Accessing Elements of an Array</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_4_4">4.4.4 Removing Elements of an Array</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_4_5">4.4.5 Operating on Arrays</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="04_Vectors.htm#4_5">4.5 Engineering Example - Computing Soil Volume</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="05_Execution.htm#5">5 Execution&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_5" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_5"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_1">5.1 Concept: Code Blocks</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_2">5.2 Conditional Execution in General</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_3">5.3 if Statements&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_5_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_5_3"><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_3_1">5.3.1 General Template</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_3_2">5.3.2 MATLAB Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_3_3">5.3.3 Important Ideas</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_4">5.4 switch Statements&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_5_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_5_4"><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_4_1">5.4.1 General Template</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_4_2">5.4.2 MATLAB Implementation</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_5">5.5 Iteration in General</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_6">5.6 for Loops&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_5_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_5_6"><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_6_1">5.6.1 General for Loop Template</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_6_2">5.6.2 MATLAB Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_6_3">5.6.3 Indexing Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_6_4">5.6.4 Breaking out of a for Loop</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_7">5.7 while Loops&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_5_7" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_5_7"><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_7_1">5.7.1 General while Template</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_7_2">5.7.2 MATLAB while Loop Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_7_3">5.7.3 Loop-and-a-Half Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_7_4">5.7.4 Breaking a while Loop</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_8">5.8 Engineering Example - Computing Liquid Levels</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="06_Strings.htm#6">6 Strings&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_6"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_2">6.2 MATLAB Implementation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_6_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_6_2"><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_2_1">6.2.1 Slicing and Concatenating Strings</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_2_2">6.2.2 Arithmetic and Logical Operations</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_2_3">6.2.3 Useful Functions</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_3">6.3 Format Conversion Functions&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_6_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_6_3"><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_3_1">6.3.1 Conversion from Numbers to Strings</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_4">6.4 Character String Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_6_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_6_4"><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_4_1">6.4.1 Simple Data Output: The disp(...) Function</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_4_2">6.4.2 Complex Output</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_4_3">6.4.3 Comparing Strings</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_5">6.5 Arrays of Strings</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_6">6.6 Engineering Example - Encryption</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="07_Structures.htm#7">7 Structures&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_7" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_7"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_1">7.1 Concept: Collecting Dissimilar Objects</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_2">7.2 Cell Arrays&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_7_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_7_2"><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_2_1">7.2.1 Creating Cell Arrays</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_2_2">7.2.2 Accessing Cell Arrays</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_2_3">7.2.3 Using Cell Arrays</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_2_4">7.2.4 Processing Cell Arrays</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_3">7.3 Structures&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_7_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_7_3"><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_3_1">7.3.1 Constructing and Accessing One Structure</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_3_2">7.3.2 Constructor Functions</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_4">7.4 Structure Arrays&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_7_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_7_4"><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_4_1">7.4.1 Constructing Structure Arrays</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_4_2">7.4.2 Accessing Structure Arrays</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_4_3">7.4.3 Manipulating Structures</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_5">7.5 Comparing Cell Arrays to Structure Arrays</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_6">7.6 Engineering Example: Assembling a Physical Structure</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="08_File_I_O.htm#8">8 File I O&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_8" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_8"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="08_File_I_O.htm#8_1">8.1 Concept: Serial Input and Output (I/O)</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="08_File_I_O.htm#8_2">8.2 Workspace I/O</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="08_File_I_O.htm#8_3">8.3 High-Level I/O Functions&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_8_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_8_3"><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_3_1">8.3.1 Exploration</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_3_2">8.3.2 Spreadsheets</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_3_3">8.3.3 Delimited Text Files</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="08_File_I_O.htm#8_4">8.4 Lower-Level File I/O&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_8_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_8_4"><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_4_1">8.4.1 Opening and Closing Files</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_4_2">8.4.2 Reading Text Files</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_4_3">8.4.3 Writing Text Files</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="08_File_I_O.htm#8_5">8.5 Engineering Example - Spreadsheet Data</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="09_Recursion.htm#9">9 Recursion&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_9" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_9"><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_1">9.1 Concept: The Activation Stack&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_9_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_9_1"><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_1_1">9.1.1 A Stack</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_1_2">9.1.2 Activation Stack</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_1_3">9.1.3 Function Instances</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_2">9.2 Recursion Defined</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_3">9.3 Implementing a Recursive Function</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_4">9.4 Exceptions&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_9_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_9_4"><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_4_1">9.4.1 Historical Approaches</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_4_2">9.4.2 Generic Exception Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_4_3">9.4.3 MATLAB Implementation</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_5">9.5 Wrapper Functions</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_6">9.6 Examples of Recursion&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_9_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_9_6"><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_6_1">9.6.1 Detecting Palindromes</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_6_2">9.6.2 Fibonacci Series</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_6_3">9.6.3 Zeros of a Function</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_7">9.7 Engineering Example - Robot Arm Motion</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="10_Problem_Solving.htm#10">10 Problem Solving&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_10" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_10"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_1">10.1 Solving Simple Problems</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_2">10.2 Assembling Solution Steps</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3">10.3 Summary of Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_10_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_10_3"><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_1">10.3.1 Basic Arithmetic Operations</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_2">10.3.2 Inserting into a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_3">10.3.3 Traversing a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_4">10.3.4 Building a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_5">10.3.5 Mapping a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_6">10.3.6 Filtering a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_7">10.3.7 Folding a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_8">10.3.8 Searching a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_9">10.3.9 Sorting a Collection</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_4">10.4 Solving Larger Problems</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_5">10.5 Engineering Example - Processing Geopolitical Data</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="11_Plotting.htm#11">11 Plotting&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_11" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_11"><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_1">11.1 Plotting in General&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_11_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_11_1"><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_1_1">11.1.1 A Figure - The Plot Container</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_1_2">11.1.2 Simple Functions for Enhancing Plots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_1_3">11.1.3 Multiple Plots on One Figure - Subplots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_1_4">11.1.4 Manually Editing Plots</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_2">11.2 2-D Plotting&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_11_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_11_2"><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_2_1">11.2.1 Simple Plots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_2_2">11.2.2 Plot Options</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_2_3">11.2.3 Parametric Plots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_2_4">11.2.4 Other 2-D Plot Capabilities</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_3">11.3 3-D Plotting&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_11_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_11_3"><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_3_1">11.3.1 Linear 3-D Plots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_3_2">11.3.2 Linear Parametric 3-D Plots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_3_3">11.3.3 Other 3-D Plot Capabilities</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_4">11.4 Surface Plots&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_11_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_11_4"><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_1">11.4.1 Basic Capabilities</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_2">11.4.2 Simple Exercises</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_3">11.4.3 3-D Parametric Surfaces</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_4">11.4.4 Bodies of Rotation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_5">11.4.5 Other 3-D Surface Plot Capabilities</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_6">11.4.6 Assembling Compound Surfaces</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_5">11.5 Manipulating Plotted Data</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_6">11.6 Engineering Example - Visualizing Geographic Data&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_11_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_11_6"><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_6_1">11.6.1 Analyzing the Data</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_6_2">11.6.2 Displaying the Data</a></div></li></ul></li></ul></li><li class="nav-item"><div class="nav-link"><a href="12_Matrices.htm#12">12 Matrices&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_12" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_12"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_1">12.1 Concept: Behavioral Abstraction</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_2">12.2 Matrix Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_12_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_12_2"><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_2_1">12.2.1 Matrix Multiplication</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_2_2">12.2.2 Matrix Division</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_2_3">12.2.3 Matrix Exponentiation</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_3">12.3 Implementation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_12_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_12_3"><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_3_1">12.3.1 Matrix Multiplication</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_3_2">12.3.2 Matrix Division</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_4">12.4 Rotating Coordinates&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_12_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_12_4"><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_4_1">12.4.1 2-D Rotation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_4_2">12.4.2 3-D Rotation</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_5">12.5 Solving Simultaneous Linear Equations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_12_5" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_12_5"><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_5_1">12.5.1 Intersecting Lines</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_6">12.2 Engineering Examples&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_12_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_12_6"><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_6_1">12.2.1 Ceramic Composition</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_6_2">12.2.2 Analyzing an Electrical Circuit</a></div></li></ul></li></ul></li><li class="nav-item"><div class="nav-link"><a href="13_Images.htm#13">13 Images&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_13" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_13"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="13_Images.htm#13_1">13.1 Nature of an Image</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="13_Images.htm#13_2">13.2 Image Types&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_13_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_13_2"><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_2_1">13.2.1 True Color Images</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_2_2">13.2.2 Gray Scale Images</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_2_3">13.2.3 Color Mapped Images</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_2_4">13.2.4 Preferred Image Format</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="13_Images.htm#13_3">13.3 Reading, Displaying, and Writing Images</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="13_Images.htm#13_4">13.4 Operating on Images&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_13_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_13_4"><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_4_1">13.4.1 Stretching or Shrinking Images</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_4_2">13.4.2 Color Masking</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_4_3">13.4.3 Creating a Kaleidoscope</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_4_4">13.4.4 Images on a Surface</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="13_Images.htm#13_5">13.5 Engineering Example - Detecting Edges</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="14_Sounds.htm#14">14 Sounds&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_14" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_14"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_1">14.1 The Physics of Sound</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_2">14.2 Recording and Playback</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_3">14.3 Implementation</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_4">14.4 Time Domain Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_14_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_14_4"><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_4_1">14.4.2 Slicing and Concatenating Sounds</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_4_2">14.4.2 Musical Background</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_4_3">14.4.3 Changing Sound Frequency</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_5">14.5 The Fast Fourier Transform&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_14_5" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_14_5"><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_5_1">14.5.1 Background</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_5_2">14.5.2 Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_5_3">14.5.3 Simple Spectral Analysis</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_6">14.6 Frequency Domain Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_14_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_14_6"><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_6_1">14.6.1 Details of the Spectral Data</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_6_2">14.6.2 Notes fading with time</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_7">14.7 Engineering Example - Music Synthesizer</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="15_Numerical_Methods.htm#15">15 Numerical Methods&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_15" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_15"><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_1">15.1 Interpolation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_15_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_15_1"><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_1_1">15.1.1 Linear Interpolation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_1_2">15.1.2 Cubic Spline Interpolation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_1_3">15.1.3 Extrapolation</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_2">15.2 Curve Fitting&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_15_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_15_2"><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_2_1">15.2.1 Linear Regression</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_2_2">15.2.2 Polynomial Regression</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_2_3">15.2.3 Practical Application</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_3">15.3 Numerical Integration&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_15_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_15_3"><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_3_1">15.3.1 Determination of the Complete Integral</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_3_2">15.3.2 Continuous Integration Problems</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_4">15.4 Numerical Differentiation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_15_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_15_4"><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_4_1">15.4.1 Difference Expressions</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_5">15.5 Analytical Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_15_5" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_15_5"><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_5_1">15.5.1 Analytical Integration</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_5_2">15.5.2 Analytical Differentiation</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_6">15.6 Implementation</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_7">15.7 Engineering Example - Shaping the Synthesizer Notes</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="16_Sorting.htm#16">16 Sorting&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_16" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_16"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="16_Sorting.htm#16_1">16.1 Measuring Algorithm Cost</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="16_Sorting.htm#16_2">16.2 Algorithms for Sorting Data&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_16_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_16_2"><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_2_1">16.2.1 Insertion Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_2_2">16.2.2 Bubble Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_2_3">16.2.3 Quick Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_2_4">16.2.4 Merge Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_2_5">16.2.5 Radix Sort</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="16_Sorting.htm#16_3">16.3 Performance Analysis</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="16_Sorting.htm#16_4">16.4 Applications of Sorting Algorithms&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_16_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_16_4"><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_1">16.4.1 Using sort(...)</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_2">16.4.2 Insertion Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_3">16.4.3 Bubble Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_4">16.4.4 Quick Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_5">16.4.5 Merge Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_6">16.4.6 Radix Sort</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="16_Sorting.htm#16_5">16.5 Engineering Example - A Selection of Countries</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="17_Graphs.htm#17">17 Graphs&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_17" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_17"><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_1">17.1 Stacks&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_17_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_17_1"><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_1_1">17.1.1 The Nature of a Stack</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_1_2">17.1.2 Implementing Stacks</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_2">17.2 Queues&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_17_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_17_2"><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_2_1">17.2.1 The Nature of a Queue</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_2_2">17.2.2 Implementing Queues</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_2_3">17.2.3 Priority Queues</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#">17.3 Testing Stacks and Queues</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_4">17.4 Graphs&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_17_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_17_4"><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_4_1">17.4.1 Graph Examples</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_4_2">17.4.2 Processing Graphs</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_5">17.5 Minimum Spanning Trees</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_6">17.6 Finding Paths through a Graph&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_17_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_17_6"><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_6_1">17.6.1 Depth-First Search</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_6_2">17.6.2 Breadth-First Search</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_6_3">17.6.3 Dijkstra's Algorithm</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_6_4">17.6.4 An Approximation Algorithm</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_6_5">17.6.5 Serious Path Finding Algorithms</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_7">17.7 Engineering Applications&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_17_7" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_17_7"><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_7_1">17.7.1 Simple Applications</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_7_2">17.7.2 Complex Extensions</a></div></li></ul></li></ul></li><li class="nav-item"><a class="nav-link" href="Appendix_A.htm">Appendix A</a></li><li class="nav-item"><a class="nav-link" href="Appendix_B.htm">Appendix B</a></li><li class="nav-item"><a class="nav-link" href="Appendix_C.htm">Appendix C</a></li><li class="nav-item"><a class="nav-link" href="Appendix_D.htm">Appendix D</a></li><li class="nav-item"><a class="nav-link" href="text_index.htm">Index</a></li></ul></nav></div>
<div class="content">
  <h1 align="center" id="4">Chapter 4: Vectors and Arrays</h1>

  <!-- Chapter Objectives -->
  <h2>Chapter Objectives</h2>
  <div class="container">
    <p>This chapter discusses the basic calculations involving rectangular collections of numbers<a id="2202">!</a> in the form of arrays. For each of these collections, you will learn how to:</p>
    <ul>
      <li>Create them</li>
      <li>Manipulate them</li>
      <li>Access their elements<a id="1918">!</a></li>
      <li>Perform mathematical and logical<a id="2096">!</a> operations<a id="2237">!</a> on them</li>
    </ul>
    <p>This study of arrays will introduce the first of many language characteristics that sets MATLAB<a id="2141">!</a> apart from other languages: its ability to perform arithmetic<a id="1726">!</a> and logical<a id="2097">!</a> operations<a id="2238">!</a> on collections of numbers<a id="2203">!</a> as a whole. You need to understand how to create these collections, access the data<a id="1882">!</a> in them, and manipulate the values in the collections with mathematical and logical<a id="2098">!</a> operators<a id="2274">!</a>. First, however, we need to understand the idea of functions built into the language.</p>
  </div>

  <div class="chp-section" data-sect-num="1" data-sect-name="Concept: Data Collection">
    <!-- Data Collection -->
    <h2 id="4_1">4.1  Concept: Data Collections</h2>
    <div class="container">
      <p>Chapter 2 showed how to perform mathematical operations<a id="2239">!</a> on single data<a id="1883">!</a> items. This section considers the concept of grouping data<a id="1884">!</a> items in general, and then specifically considers two very common ways to group data<a id="1885">!</a>: in arrays and in vectors<a id="2375">!</a>, which are a powerful subset of arrays.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Data Abstraction">
      <!-- Data Abstraction -->
      <h3 id="4_1_1">4.1.1  Data Abstraction</h3>
      <div class="container">
        <p>It is frequently convenient to refer to groups of data<a id="1886">!</a> collectively, for<a id="2009">!</a> example,
		"all the temperature readings for<a id="2010">!</a> May" or "all the purchases from Amazon." This allows us not only to move these items around as a group, but also to consider mathematical or logical<a id="2099">!</a> operations<a id="2240">!</a> on these groups. For example, we could discuss the average, maximum, or minimum<a id="2193">!</a> temperatures for<a id="2011">!</a> a month, or that the cost of the Amazon purchases had gone down 3%.</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Homogeneous Collections">
      <!-- Homogenous Collections -->
      <h3 id="4_1_2">4.1.2  Homogeneous Collections</h3>
      <div class="container">
        <p>In Chapter 7, we will encounter more general collection<a id="1838">!</a> implementations that <b>appear to</b> allow items in a collection<a id="1839">!</a> to be of different data<a id="1887">!</a> types. The collections discussed in this chapter, however, will be constrained to accept only items of the same data<a id="1888">!</a> type. Collections with this constraint are called homogeneous<a id="2077">!</a> collections.</p>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="2" data-sect-name="Vectors">
    <!-- Vectors -->
    <h2 id="4_2">4.2   Vectors</h2>
    <div class="container clearfix">
      <div class="float-sm-right card">
           <img src="..\Images\Fig_4_1.JPG" alt="Figure 4.1" class="fig card-img">
           <p class="figure-name card-title">Fig 4.1 A General Vector</p>
      </div>
      <p>A vector is an array<a id="1733">!</a> with only one row of elements<a id="1919">!</a>. It is the simplest means of grouping a collection<a id="1840">!</a> of like data<a id="1889">!</a> items. Initially we will consider vectors<a id="2376">!</a> of numbers<a id="2204">!</a> or logical<a id="2100">!</a> values. Some languages refer to vectors<a id="2377">!</a> as linear<a id="2086">!</a> arrays or linear<a id="2087">!</a> matrices<a id="2167">!</a>. As these names suggest, a vector is a one-dimensional grouping of data<a id="1890">!</a>, as shown in Figure 4.1. Individual items in a vector are usually referred to as its elements<a id="1920">!</a>. Vector elements<a id="1921">!</a> have two separate and distinct attributes that make them unique in a specific vector: their numerical<a id="2226">!</a> value<a id="2337">!</a> and their position in that vector. For example, the individual number 66 is in the third position in the vector in Figure 4.1. Its value<a id="2338">!</a> is 66 and its index is 3. There may be other items in the vector with the value<a id="2339">!</a> of 66, but no other item will be located in this vector at position 3. Experienced programmers should note that due to its FOR<a id="2286">!</a>TRAN roots, indices in the MATLAB<a id="2142">!</a> language start from 1 and not 0.</p>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Creating a Vector">
      <!-- Creating a Vector -->
      <h3 id="4_2_1">4.2.1  Creating a Vector</h3>
      <div class="container">
        <p>There are seven ways to create vectors<a id="2378">!</a> that are directly analogous to the techniques for<a id="2012">!</a> creating individual data<a id="1891">!</a> items and fall into two broad categories:</p>
        <ul>
          <li>Creating vectors<a id="2379">!</a> from constant values</li>
          <li>Producing new vectors<a id="2380">!</a> with special-purpose functions</li>
        </ul>
        <p>The following shows how you can create vectors<a id="2381">!</a> from constant values:</p>
        <ul>
          <li>Entering the values directly, for<a id="2013">!</a> example, <code>A = [2, 5, 7, 1, 3]</code> (the commas are optional and are frequently omitted)</li>
          <li>Entering the values as a range of numbers<a id="2205">!</a> using the colon<a id="1847">!</a> operator, for<a id="2014">!</a> example, <code>B = 1:3:20</code>, where the first number is the starting value<a id="2340">!</a>, the second number is the increment, and the third number is the ending value<a id="2341">!</a> (you may omit the increment if the desired increment is 1)</li>
        </ul>
        <p>The following introduces the most common MATLAB<a id="2143">!</a> functions that create vectors<a id="2382">!</a> from scratch:</p>
        <ul>
          <li>The <code>linspace(<a id="2092">!</a>...)</code> function<a id="2055">!</a> creates a fixed number of values between two limits, for<a id="2015">!</a> example, <code>C = linspace (0, 20, 11)</code>, where the first parameter is the lower limit, the second parameter is the upper limit, and the third parameter is the number of values in the vector</li>
          <li>The functions <code>zeros(<a id="2438">!</a>1,n)</code> and <code>ones(<a id="2229">!</a>1,n)</code> create vectors<a id="2383">!</a> filled with 0 or 1 respectively.</li>
          <li>There are several functions that create vectors<a id="2384">!</a> of random values. <code>rand(<a id="2300">!</a>1,n)</code> generates a vector of random numbers<a id="2206">!</a> uniformly distributed between 0 and 1; <code>randn(<a id="2303">!</a>1,n)</code> generates a vector of normally distributed values with zero mean and unit standard deviation;  <code>randi([min max], 1, n)</code> generates a vector of random integers in the range min to max.</li>
        </ul>
        <p>Try working with vectors<a id="2385">!</a> in Exercise 4.1.</p>
        <div class="exercise"><iframe src="..\exercises\exercise_4_1html.html"></iframe></div>
        <p>The Workspace<a id="2434">!</a> window enables you to choose the attributes of each variable<a id="2366">!</a> to be displayed. Select the Workspace<a id="2435">!</a> window and you will see a row of column<a id="1850">!</a> headings beginning with 'Name.' Right click on that headings row; a drop-down menu offers the attributes to display.  Common selections are 'Value' and 'Class.' You may also select and drag the column<a id="1851">!</a> width markers to change the column<a id="1852">!</a> layout.</p>
        <p>Notice that if the size of the vector is small enough, the value<a id="2342">!</a> field<a id="2000">!</a> shows its actual<a id="1723">!</a> contents; otherwise, you see a description of its attributes, like <1 &#215 11 double>. Exercise 4.1 deliberately created the vector D with only one element, and perhaps the result surprised you. D was presented in both the Interactions window and the Workspace<a id="2436">!</a> window as if it were a scalar<a id="2309">!</a> quantity. This is generally true in the MATLAB<a id="2144">!</a> language - all scalar<a id="2310">!</a> quantities are considered vectors<a id="2386">!</a> of unit length.</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Size of a Vector">
      <!-- Size of a Vector -->
      <h3 id="4_2_2">4.2.2  Size of a Vector</h3>
      <div class="container">
        <p>A vector also has a specific attribute: its length (<code>n</code> in Figure 4.1). In most implementations, this length is fixed when the vector is created. However, as you will see shortly, the MATLAB<a id="2145">!</a> language provides the ability to increase or decrease the size of a vector by adding or removing elements<a id="1922">!</a>. MATLAB<a id="2146">!</a> also provides two functions to determine the size of arrays in general, and of vectors<a id="2387">!</a> in particular. The function<a id="2056">!</a> <code>size(<a id="2321">!</a>V)</code> when applied to the vector <code>V</code> returns another vector containing two quantities: the number of rows in the vector (always 1) and the number of columns (the length of the vector). The function<a id="2057">!</a> <code>length(<a id="2079">!</a>V)</code> returns the maximum value<a id="2343">!</a> in the size of the size array<a id="1734">!</a> - for<a id="2016">!</a> a vector, this is a number indicating its length.</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="Indexing a Vector">
      <!-- Indexing a Vector -->
      <h3 id="4_2_3">4.2.3   Indexing a Vector</h3>
      <div class="container">
        <p>As mentioned in section 4.2.2, each element in a vector has two attributes: its value<a id="2344">!</a> and its position in the vector. You can access the elements<a id="1923">!</a> in a vector in either of two ways: using a numerical<a id="2227">!</a> vector or a logical<a id="2101">!</a> vector. We refer to the process of accessing array<a id="1735">!</a> elements<a id="1924">!</a> by their position as "indexing."</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="4" data-sub-name="Shortening a Vector">
      <!-- Shortening -->
      <h3 id="4_2_4">4.2.4  Shortening a Vector</h3>
      <div class="container">
        <p>There are times when we need to remove elements<a id="1925">!</a> from a vector. For example, if we had a vector of measurements from an instrument, and it was known that the setup for<a id="2017">!</a> the third reading was incorrect, we would want to remove that erroneous reading before processing the data<a id="1892">!</a>. To accomplish this, we make a rather strange use of the empty<a id="1962">!</a> vector, []. The empty<a id="1963">!</a> vector, as its name and symbol suggest, is a vector with no elements<a id="1926">!</a> in it. When you assign the empty<a id="1964">!</a> vector to an element in another vector - say, A - that element is removed from A, and A is shortened by one element. Try Exercise 4.2. As you can see in step {3.}, we asked for<a id="2018">!</a> the fourth element to be removed from a vector initially with eight elements<a id="1927">!</a>. The resulting vector has only seven elements<a id="1928">!</a>, and the fourth element, originally with value<a id="2345">!</a> 1, has been removed.</p>
        <div class="exercise"><iframe src="..\exercises\exercise_4_2html.html"></iframe></div>
        <p>Shortening a vector, however, is very rarely the right solution to a problem and can lead to logical<a id="2102">!</a> difficulties. Wherever possible, you should use indexing to copy the elements<a id="1929">!</a> you want to keep rather than using <code>[]</code>to erase elements<a id="1930">!</a> you want to remove.</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="5" data-sub-name="Operating on Vectors">
      <!-- Operating on Vectors -->
      <h3 id="4_2_5">4.2.5  Operating on Vectors</h3>
      <div class="container">
        <p>The essential core of the MATLAB<a id="2147">!</a> language is a rich collection<a id="1841">!</a> of tools for<a id="2019">!</a> manipulating vectors<a id="2388">!</a> and arrays. This section first shows how these tools operate on vectors<a id="2389">!</a>, and then generalizes to how they apply to arrays (multi-dimensional vectors<a id="2390">!</a>) and, later, matrices<a id="2168">!</a>. Three techniques extend directly from operations<a id="2241">!</a> on scalar<a id="2311">!</a> values:</p>
        <ul>
          <li>Arithmetic operations<a id="2242">!</a></li>
          <li>Logical operations<a id="2243">!</a></li>
          <li>Applying library functions</li>
        </ul>
        <p>Two techniques are unique to arrays in general, and to vectors<a id="2391">!</a> in particular:</p>
        <ul>
          <li>Concatenation</li>
          <li>Slicing (generalized indexing)</li>
        </ul>
        <p><b>Arithmetic Operations:</b> Arithmetic operations<a id="2244">!</a> can be performed collectively on the individual components of two vectors<a id="2392">!</a> as long as both vectors<a id="2393">!</a> are the same length, or one of the vectors<a id="2394">!</a> is a scalar<a id="2312">!</a> (i.e., a vector of length 1). Addition and subtraction have exactly the syntax you would expect, as illustrated in Exercise 4.3. Multiplication, division<a id="1907">!</a>, and exponentiation, however, have a small syntactic idiosyncrasy related to the fact that these are element-by-element operations<a id="2245">!</a>, not matrix<a id="2171">!</a> operations<a id="2246">!</a>. We will discuss matrix<a id="2172">!</a> operations<a id="2247">!</a> in Chapter 12. When the MATLAB<a id="2148">!</a> language was designed, the ordinary symbols (<code>*</code>,<code>/</code>, and <code>^</code>) were  reserved  for<a id="2020">!</a>  matrix<a id="2173">!</a>  operations<a id="2248">!</a>.  However,  element-by-element  multiplicative  operations<a id="2249">!</a>  are fundamentally different from matrix<a id="2174">!</a> operations<a id="2250">!</a>, and a new set of operators<a id="2275">!</a> is required to specify these operations<a id="2251">!</a>.</p>
        <div class="exercise"><iframe src="..\exercises\exercise_4_3html.html"></iframe></div>
        <p>These are the symbols <code>.*</code>, <code>./</code>, and <code>.^</code> {the dots are part of the operators<a id="2276">!</a>, but the commas are not} that are used respectively for<a id="2021">!</a> element-by- element  multiplication<a id="2196">!</a>,  division<a id="1908">!</a>,  and exponentiation. Note that because matrix<a id="2175">!</a> and element-by-element addition and subtraction are identical, no special operation<a id="2232">!</a> symbols are required for<a id="2022">!</a> <code>+</code> and <code>-</code>.</p>
        <p>In Exercise 4.3, we first see the addition and multiplication<a id="2197">!</a> of a vector by a scalar<a id="2313">!</a> quantity, and then element-by-element multiplication<a id="2198">!</a> of <code>A</code> and <code>B</code>. The first error is generated because we omitted the ‘<code>.</code>’ on the multiply symbol, thereby invoking matrix<a id="2176">!</a> multiplication<a id="2199">!</a>, which is improper with the vector <code>A</code> and <code>B</code>. The second error occurs because two vectors<a id="2395">!</a> involved in arithmetic<a id="1727">!</a> operations<a id="2252">!</a> must have the same size. Notice, incidentally, the use of the <code>%</code> sign indicating that the rest of the line is a comment.</p>
        <p>You can change the signs of all the values of a vector with the unary<a id="2335">!</a> minus (<code>-</code>) operator.</p>
        <p><b>Logical Operations:</b> In Exercise 4.2, you might have wondered why you would ever use logical<a id="2103">!</a> indexing. In this section, we will see that logical<a id="2104">!</a> operations<a id="2253">!</a> on vectors<a id="2396">!</a> produce vectors<a id="2397">!</a> of logical<a id="2105">!</a> results. We can then use these logical<a id="2106">!</a> result vectors<a id="2398">!</a> to index vectors<a id="2399">!</a> in a style that makes the logic<a id="2094">!</a> of complex expressions very clear<a id="1832">!</a>. As with arithmetic<a id="1728">!</a> operations<a id="2254">!</a>, logical<a id="2107">!</a> operations<a id="2255">!</a> can be performed element-by-element on two vectors<a id="2400">!</a> as long as both vectors<a id="2401">!</a> are the same length, or if one of the vectors<a id="2402">!</a> is a scalar<a id="2314">!</a> (i.e., a vector of length 1). The result will be a vector of logical<a id="2108">!</a> values with the same length as the longer of the original vector(<a id="2374">!</a>s).</p>
        <p>Try Exercise 4.4 to see how vector logical<a id="2109">!</a> expressions work. First we built the vectors<a id="2403">!</a> <code>A</code> and <code>B</code>, and then we performed two legal logical<a id="2110">!</a> operations<a id="2256">!</a>: finding where each element of <code>A</code> is not less<a id="2083">!</a> than <code>5</code>, and where each element of <code>A</code> is not less<a id="2084">!</a> than the corresponding element of <code>B</code>. As with arithmetic<a id="1729">!</a> operations<a id="2257">!</a>, an error occurs if you attempt a logical<a id="2111">!</a> operation<a id="2233">!</a> with vectors<a id="2404">!</a> of different sizes (neither size being 1). Note to our eternal sadness that when MATLAB<a id="2149">!</a> reports a logical<a id="2112">!</a> result, it displays the values <code>1</code> for<a id="2023">!</a> true and <code>0</code> for<a id="2024">!</a> false<a id="1983">!</a>. If you check in the Workspace<a id="2437">!</a> window, the values are in fact of class <code>Logical</code>.</p>
        <div class="exercise"><iframe src="..\exercises\exercise_4_4html.html"></iframe></div>
        <p>Logical operators<a id="2277">!</a> can be assembled into more complex operations<a id="2258">!</a> using logical<a id="2113">!</a> and (<code>&amp;</code>) and or (<code>|</code>) operators<a id="2278">!</a>. These operators<a id="2279">!</a> actually come in two flavors: &amp;/| and &amp;&amp; / ||. The single operators<a id="2280">!</a> operate on logical<a id="2114">!</a> arrays of matching size to perform element-wise<a id="1917">!</a> matches of the individual logical<a id="2115">!</a> values. The doubled operators<a id="2281">!</a> combine individual logical<a id="2116">!</a> results and are usually associated with conditional statements (see Chapter 4).</p>
        <p>In Exercise 4.4{2.}, we combine two logical<a id="2117">!</a> vectors<a id="2405">!</a> of the same length successfully, but in {3.} we fail, since just like with arithmetic<a id="1730">!</a> operations<a id="2259">!</a>, we cannot combine vectors<a id="2406">!</a> of different lengths. If you need the indices in a vector where the elements<a id="1931">!</a> of a logical<a id="2118">!</a> vector are <code>true</code>, the function<a id="2058">!</a> <code>find(<a id="2001">!</a>...)</code> accomplishes this by consuming a vector of logical<a id="2119">!</a> values and producing a vector of the positions of the true elements<a id="1932">!</a>.</p>
        <p>You can invert the values of all elements<a id="1933">!</a> of a logical<a id="2120">!</a> vector (changing <code>true</code> to <code>false<a id="1984">!</a></code> and <code>false<a id="1985">!</a></code> to <code>true</code>) using the unary<a id="2336">!</a> not operator, <code>~</code>. For example:</p>
        <p><code>>> na = ~[true true false<a id="1986">!</a> true]<br>na = <br>
          &nbsp;&nbsp;&nbsp;&nbsp;0 0 1 0</code><br></p>
        <p>As you can see, each element of <code>na</code> is the logical<a id="2121">!</a> inverse of the corresponding original element. As is usual with arithmetic<a id="1731">!</a> and logical<a id="2122">!</a> operations<a id="2260">!</a>, the precedence of operators<a id="2282">!</a> governs the order in which operations<a id="2261">!</a> are performed. Table 4.1 shows the operator precedence in the MATLAB<a id="2150">!</a> language. Operations listed on the same row of the table are performed from left to right. The normal precedence of operators<a id="2283">!</a> can be overruled by enclosing preferred operations<a id="2262">!</a> in parentheses: (...).</p>
        <table class="table">
          <thead class="thead-light">
            <tr>Table 4.1: Operator Precendence</tr>
            <tr>
              <th>Operators</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
             <td id="101"> <code>.', .^ </code></td>
             <td>Scalar transpose and power</td>
           </tr>
            <tr>
             <td id="102"> <code>', ^ </code></td>
             <td>Matrix transpose and power</td>
           </tr>
            <tr>
             <td id="103"> <code>+, -, ~ </code></td>
             <td>Unary Operators</td>
           </tr>
            <tr>
             <td id="104"> <code>.*, ./, .\, *, /, \ </code></td>
             <td>Multiplication, division<a id="1909">!</a>, left division<a id="1910">!</a></td>
           </tr>
            <tr>
             <td id="105"> <code>+, - </code></td>
             <td>Addition and Subtraction</td>
           </tr>
            <tr>
             <td id="106"> <code>: </code></td>
             <td>Colon operator</td>
           </tr>
            <tr>
             <td id="107"> <code><, <=, >=, >, ==, ~=</code></td>
             <td>Comparison</td>
           </tr>
            <tr>
             <td id="108"> <code>&amp; </code></td>
             <td>Element-wise AND<a id="1724">!</a></td>
           </tr>
            <tr>
             <td id="109"> <code>| </code></td>
             <td>Element-wise OR<a id="2287">!</a></td>
           </tr>
            <tr>
             <td id="110"> <code>&amp;&amp; </code></td>
             <td>Logical AND<a id="1725">!</a></td>
           </tr>
            <tr>
             <td id="111"> <code>|| </code></td>
             <td>Logical OR<a id="2288">!</a></td>
           </tr>
         </tbody>
       </table>
       <p>One final note on logical<a id="2123">!</a> indexing.  There is an interesting exception to the problem of indexing beyond the end<a id="1967">!</a> of a vector. Consider this example:<br>
       <code>>> A = [2 -4 5 0 1]<br>
        B = A(true false<a id="1987">!</a> true true false<a id="1988">!</a> false<a id="1989">!</a> false<a id="1990">!</a> false<a id="1991">!</a>)<br>
        B =<br>
        &nbsp;&nbsp;&nbsp;&nbsp;2 5 0</code></p>
        <p>It is acceptable to index with a logical<a id="2124">!</a> vector whose length is greater than the indexed vector as long as all the elements<a id="1934">!</a> beyond the end<a id="1968">!</a> of the indexed vector are <code>false<a id="1992">!</a></code>. It might help<a id="2075">!</a> to consider a slightly different mechanization of the same code<a id="1833">!</a> snippet:<br>
        <code>>> A = [2 -4 5 0 1];<br>
        ndxl = [true false<a id="1993">!</a> true true false<a id="1994">!</a> false<a id="1995">!</a> false<a id="1996">!</a> false<a id="1997">!</a>);<br>
        ndxn = find(<a id="2002">!</a>ndxl) <br>
        ndxn =&nbsp;&nbsp;&nbsp;&nbsp;1 3 4<br>
        B = A(ndxn)<br>
        B =<br>
        &nbsp;&nbsp;&nbsp;&nbsp;2 5 0</code></p>
        <p>This does not fail because the length of the numerical<a id="2228">!</a> indices <code>ndxn</code> is less<a id="2085">!</a> than the length of A.</p>
        <p><b>Applying Library Functions:</b> The MATLAB<a id="2151">!</a> language defines a rich collection<a id="1842">!</a> of mathematical functions that cover mathematical, trigonometric, and statistics capabilities. A partial list is provided in Appendix A. For a complete list of those implemented in MATLAB<a id="2152">!</a>, refer to the Help menu option in the MATLAB<a id="2153">!</a> tool bar. With few exceptions<a id="1981">!</a>, all functions defined in the MATLAB<a id="2154">!</a> language accept vectors<a id="2407">!</a> of numbers<a id="2207">!</a> rather than single values and return a vector of the same length. The following functions deserve special mention because they provide specific capabilities that are frequently useful:</p>
        <ul>
          <li><code>sum(<a id="2330">!</a>v)</code> and <code>mean(<a id="2189">!</a>v)</code> consume a vector and return the sum and mean of all the elements<a id="1935">!</a> of the vector respectively.</li>
          <li><code>min(<a id="2191">!</a>v)</code> and <code>max(<a id="2184">!</a>v)</code> return two quantities: the minimum<a id="2194">!</a> or maximum value<a id="2346">!</a> in a vector, as well as the position in that vector where that value<a id="2347">!</a> occurred. For example:<br>
          <code>>> [value<a id="2348">!</a> where] = max(<a id="2185">!</a>[2 7 42 9 -4])<br>
          value<a id="2349">!</a> = 42<br>
          where = 3<br></code>
          indicates that the largest value<a id="2350">!</a> is <code>42</code>, and it occurs in the third element of the vector. You saw in Chapter 3 how to implement returning multiple results from a function<a id="2059">!</a>.</li>
          <li><code>round(<a id="2308">!</a>v)</code> , <code>ceil(<a id="1830">!</a>v)</code> , <code>floor(<a id="2008">!</a>v)</code> , and <code>fix(<a id="2007">!</a>v)</code> remove the fractional part of the numbers<a id="2208">!</a> in a vector by conventional rounding, rounding up, rounding down, and rounding toward zero, respectively.</li>
        </ul>
        <p><b>Concatenation</b> In Section 4.2.1, we saw the technique for<a id="2025">!</a> creating a vector by assembling numbers<a id="2209">!</a> between square<a id="2326">!</a> brackets:<br>
        <code>A = [2 5 7 1 3]</code><br>
        This is in fact a special case<a id="1827">!</a> of concatenation<a id="1876">!</a>. The MATLAB<a id="2155">!</a> language lets you construct a new vector by concatenating other vectors<a id="2408">!</a>:<br>
        <code>A = [B C D ...]</code><br>
        where the individual items in the brackets may be any vector defined as a constant or variable<a id="2367">!</a>, and the length of A will be the sum of the lengths of the individual vectors<a id="2409">!</a>. The simple vector constructor in Section 4.2.1 is a special case<a id="1828">!</a> of this rule because each number is implicitly a <code>1 × 1</code> vector. The result is therefore a <code>1 × N</code> vector, where N is the sum of the lengths of <code>A</code> and <code>B</code>. Try concatenating the vectors<a id="2410">!</a> in Exercise 4.5.</p>
        <div class="exercise"><iframe src="..\exercises\exercise_4_5html.html"></iframe></div>
        <p><b>Slicing</b> is the name given to complex operations<a id="2263">!</a> where elements<a id="1936">!</a> are copied from specified locations in one vector to different locations in another vector. As we saw earlier, the basic operation<a id="2234">!</a> of extracting and replacing the elements<a id="1937">!</a> of a vector is called indexing. Furthermore, we saw that indexing is not confined to single elements<a id="1938">!</a> in a vector; you can also use vectors<a id="2411">!</a> of indices. These index vectors<a id="2412">!</a> either can be the values of previously named variables, or they can be created anonymously as they are needed. When you index a single element in a vector, for<a id="2026">!</a> example, <code>A(4)</code>, you are actually creating an anonymous <code>1 &<a id="2289">!</a>#215; 1</code> index vector, <code>4</code>, and then using it to access the specified element(s) from the array<a id="1736">!</a> <code>A</code>.</p>
        <p>Creating anonymous index vectors<a id="2413">!</a> as needed makes some additional features of the colon<a id="1848">!</a> operator available. The general form for<a id="2027">!</a> generating a vector of numbers<a id="2210">!</a> is: <br>
        <code>&lt;start&gt; : &lt;increment&gt; : &lt;end<a id="1969">!</a>&gt;</code>.<br>
         We already know that by omitting the <code>&lt;increment&gt;</code> portion, the default increment is <code>1</code>. When used anonymously while<a id="2433">!</a> indexing a vector, the following features are also available:<br>
        <ul>
          <li>The key word <code>end<a id="1970">!</a></code> is defined as the length of the index vector in which it is used</li>
          <li>The operator <code>:</code> by itself is short for<a id="2028">!</a> <code>1:end<a id="1971">!</a></code></li>
        </ul>
        </p>
        <p>Finally, as you saw earlier, it is legal to index with a vector of logical<a id="2125">!</a> values. For example, if <code>A</code> is defined as:<br>
        <code>A = [2 5 7 1 3];</code><br>
        then <code>A([false<a id="1998">!</a> true false<a id="1999">!</a> true])</code> returns:<br>
        <code>ans =<br>
        &nbsp;&nbsp;&nbsp;&nbsp;5 1</code><br>
        yielding a new vector containing only those values of the original vector where the corresponding logical<a id="2126">!</a> index is <code>true</code>. This is extremely useful, as you will see later in this chapter, for<a id="2029">!</a> indexing items in a vector that match a specific test.</p>
        <p>The general form of statements for<a id="2030">!</a> slicing vectors<a id="2414">!</a> is:<br>
        <code>B(&lt;rangeB&gt;) = A(&lt;rangeA&gt;)</code><br>
        where <code>&lt;rangeA&gt;</code> and <code>&lt;rangeB&gt;</code> are both index vectors<a id="2415">!</a>, <code>A</code> is an existing array<a id="1737">!</a>, and <code>B</code> can be an existing array<a id="1738">!</a> or a new array<a id="1739">!</a>. The values in <code>B</code> at the indices in <code>rangeB</code> are assigned the values of <code>A</code> from <code>rangeA</code>. The rules for<a id="2031">!</a> use of this template are as follows:<br>
        <ul>
          <li>Either the size of <code>rangeB</code> must be equal<a id="1975">!</a> to the size of <code>rangeA</code> or
          <code>rangeA</code> must be of size <code>1</code></li>
          <li>If <code>B</code> did not exist before this statement was implemented, it is zero filled where assignments were not explicitly made</li>
          <li>If <code>B</code> did exist before this statement, the values not directly assigned in <code>rangeB</code> remain unchanged. </li>
        </ul>
        Study the comments<a id="1875">!</a> in Listing 4.1 and do Exercise 4.6.</p>
        <div class="listing"><iframe src="..\listings\listing_04_1_livehtml.html"></iframe></div>
        <div class="exercise"><iframe src="..\exercises\exercise_4_6html.html"></iframe></div>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="3" data-sect-name="Engineering Example - Forces and Moments">
    <!-- Engineering Examples -->
    <h2 id="4_3">4.3 Engineering Example - Forces  and  Moments</h2>
    <div class="container clearfix">
      <div class="float-sm-right card">
        <img src="..\Images\Fig_4_2.JPG" alt="Figure 4.2" class="fig card-img">
        <p class="figure-name card-title">Figure 4.2: Vector Analysis</p>
      </div>
      <p>Vectors are ideal representations of the concept of a vector used in physics. Consider two forces acting on an object at a point P, as shown in Figure 4.2. Calculate the resultant force at P, the unit vector in the direction of that resultant, and the moment of that force about the point M. We can represent each of the vectors<a id="2416">!</a> in this problem as a MATLAB<a id="2156">!</a> vector with three components: the x, y, and z values of the vector. The solution to this problem for<a id="2032">!</a> specific vectors<a id="2417">!</a> is shown in Listing 4.2.</p>
    </div>
    <div class="listing"><iframe src="..\listings\listing_04_2_livehtml.html"></iframe></div>
    <div class="container">
      <p><b>Strong Suggestion:</b> After any nontrivial computation, a good engineer will always perform a sanity check on the answers. When you run the  code<a id="1834">!</a> for<a id="2033">!</a> this problem, for<a id="2034">!</a> example, the answers returned are:<br>
      <code>PC = [ 1 2 1]</code><br>
      <code>unit_vector = [0.4082 0.8165 0.4082]</code><br>
      <code>mom = [ 1 2 -5]</code><br>
      To check the moment result, visualize the rotation of PC
      about M and apply the right-hand rule to find the axis of
      rotation of the moment. Roughly speaking, the right-hand
      rule states that the direction of the moment is the direction
      in which a normal, right-handed screw at point M would turn
      under the influence of this force. Without being too accurate,
      we can conclude that the axis of the moment is approximately
      along the negative z -axis, an estimate confirmed by the
      result shown.</p>
    </div>
  </div>

  <div class="chp-section" data-sect-num="4" data-sect-name="Arrays">
    <!-- Arrays -->
    <h2 id="4_4">4.4  Arrays</h2>
    <div class="container clearfix">
      <div class="float-sm-right card">
        <img src="..\Images\Fig_4_3.JPG" alt="Figure 4.3" class="fig card-img">
        <p class="figure-name card-title">Figure 4.3: An Array</p>
      </div>
      <p>In Section 4.2, we saw that a vector is the simplest way to group a collection<a id="1843">!</a> of similar data<a id="1893">!</a> items. We will now extend these ideas to include arrays of multiple dimensions, initially confined to two dimensions. Each row will have the same number of columns, and each column<a id="1853">!</a> will have the same number of rows.</p>
      <p>At this point, we will refer to these collections as arrays to distinguish them from the matrices<a id="2169">!</a> discussed in Chapter 12. While arrays and matrices<a id="2170">!</a> are stored in the same way, they differ in their multiplication<a id="2200">!</a>, division<a id="1911">!</a>, and exponentiation operations<a id="2264">!</a>. Figure 4.3 illustrates a typical two-dimensional array<a id="1740">!</a> <code>A</code> with <code>m</code> rows and <code>n</code> columns, commonly referred to as an <code>m &<a id="2290">!</a>#215; n</code> array<a id="1741">!</a>.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Properties of an Array">
      <!-- Properties of an Array -->
      <h3 id="4_4_1">4.4.1  Properties of an Array</h3>
      <div class="container">
        <p>As with vectors<a id="2418">!</a>, individual items in an array<a id="1742">!</a> are referred to as its elements<a id="1939">!</a>. These elements<a id="1940">!</a> also have the unique attributes combining their value<a id="2351">!</a> and their position. In a two-dimensional array<a id="1743">!</a>, the position will be the row and column<a id="1854">!</a> (in that order) of the element. In general, in an n-dimensional array<a id="1744">!</a>, the element position will be a vector of <code>n</code> index values. When applied to an array<a id="1745">!</a> <code>A</code> with <code>n</code> dimensions, the function<a id="2060">!</a> <code>size(<a id="2322">!</a>A)</code> will return the information in one of two forms:</p>
        <ul>
          <li>If called with a single return value<a id="2352">!</a> like <code>sz = size(<a id="2323">!</a>A)</code>, it will return a vector of length <code>n</code> containing the size of each dimension of the array<a id="1746">!</a>.</li>
          <li>If called with multiple return values like <code>[rows, cols] = size(<a id="2324">!</a>A)</code>, it returns the individual array<a id="1747">!</a> dimension up to the number of values requested. To avoid erroneous results with this approach, you should always provide as many variables as there are dimensions of the array<a id="1748">!</a>.</li>
        </ul>
        <div class="float-sm-right card">
          <img src="..\Images\Fig_4_4.JPG" alt="Figure 4.4" class="fig card-img">
          <p class="figure-name card-title">Figure 4.4: An Array Transposed</p>
        </div>
        <p>The <code>length(<a id="2080">!</a>...)</code> function<a id="2061">!</a> returns the <b>maximum dimension</b> of the array<a id="1749">!</a>. So if we created an array<a id="1750">!</a> <code>A</code> dimensioned 2 &<a id="2291">!</a>#215; 8 &<a id="2292">!</a>#215; 3, <code>size(<a id="2325">!</a>A)</code> would return <code>[2 8 3]</code> and <code>length(<a id="2081">!</a>A)</code> would return <code>8</code>. The <b>transpose</b> of an <code>m &<a id="2293">!</a>#215; n</code> array<a id="1751">!</a>, indicated by the apostrophe character<a id="1831">!</a> (') placed after the array<a id="1752">!</a> identifier, returns an <code>n &<a id="2294">!</a>#215; m</code> array<a id="1753">!</a> with the values in the rows and columns interchanged. Figure 4.4 shows a transposed array<a id="1754">!</a>.</p>
        <p>A number of special cases arise that are worthy of note:</p>
        <ul>
          <li>When a 2-D matrix<a id="2177">!</a> has the same number of rows and columns, it is called square<a id="2327">!</a>.</li>
          <li>When the only nonzero values in an array<a id="1755">!</a> occur when the row and column<a id="1855">!</a> indices are the same, the array<a id="1756">!</a> is called diagonal<a id="1904">!</a>.</li>
          <li>When there is only one row, the array<a id="1757">!</a> is a row vector, or just a
          vector as you saw earlier.</li>
          <li>When there is only one column<a id="1856">!</a>, the array<a id="1758">!</a> is a column<a id="1857">!</a> vector, the transpose of a row vector.</li>
        </ul>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Creating an Array">
      <!-- Creating an Array -->
      <h3 id="4_4_2">4.4.2  Creating an Array</h3>
      <div class="container">
        <p>Arrays can be created either by entering values directly or by using one of a number of built-in functions that create arrays with specific characteristics.</p>
        <ul>
          <li>As with vectors<a id="2419">!</a>, you can directly enter the values in an array<a id="1759">!</a> using either a semicolon<a id="2320">!</a> (;) or a new line to indicate the end<a id="1972">!</a> of a row, for<a id="2035">!</a> example: <code>A = [2, 5, 7; 1, 3, 42]</code>.</li>
          <li>The functions <code>zeros(<a id="2439">!</a>m, n)</code> and <code>ones(<a id="2230">!</a>m, n)</code> create arrays with <code>m</code> rows and <code>n</code> columns filled with zeros and ones, respectively.</li>
          <li>The function<a id="2062">!</a> <code>rand(<a id="2301">!</a>m, n)</code> fills an array<a id="1760">!</a> with random numbers<a id="2211">!</a> in the range <code>0 .. 1</code>.</li>
          <li>The function<a id="2063">!</a> <code>randn(<a id="2304">!</a>m, n)</code> fills an array<a id="1761">!</a> with random numbers<a id="2212">!</a> normally distributed about <code>0</code> with a standard deviation of <code>1</code>.</li>
          <li>The function<a id="2064">!</a> <code>diag(<a id="1900">!</a>...)</code> takes several forms, the most useful of which are <code>diag(<a id="1901">!</a>A)</code>, where <code>A</code> is an array<a id="1762">!</a>, that returns its diagonal<a id="1905">!</a> as a vector, and <code>diag(<a id="1902">!</a>V)</code>, where <code>V</code> is a vector, that returns a square<a id="2328">!</a> matrix<a id="2178">!</a> with that diagonal<a id="1906">!</a>. Type <code>help<a id="2076">!</a> diag</code> in the Command<a id="1874">!</a> window for<a id="2036">!</a> a full description of the capabilities of <code>diag(<a id="1903">!</a>...)</code></li>
          <li>The MATLAB<a id="2157">!</a> language also defines the function<a id="2065">!</a> <code>magic(<a id="2140">!</a>m)</code>, which fills a square<a id="2329">!</a> matrix<a id="2179">!</a> with the numbers<a id="2213">!</a> <code>1</code> to <code>m<sup>2</sup></code> organized in such a way that its rows, columns, and diagonals all add up to the same value<a id="2353">!</a>.</li>
        </ul>
        <p>Try Exercise 4.7 to practice creating arrays.</p>
        <div class="exercise"><iframe src="..\exercises\exercise_4_7html.html"></iframe></div>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="Accessing Elements of an Array">
      <!-- Accessing Elements -->
      <h3 id="4_4_3">4.4.3   Accessing Elements of an Array</h3>
      <div class="container">
        <p>The elements<a id="1941">!</a> of an array<a id="1763">!</a> may be addressed by enclosing the indices of the required element in parentheses, with the first index being the row index and the second index the column<a id="1858">!</a> index. Considering the values produced by Exercise 4.7, <code>A(2, 3)</code> would return the element in the second row, third column<a id="1859">!</a>: <code>42</code>. If you were to attempt to read outside the length of the rows or columns, an error would result.</p>
        <p>We can also store values that are elements<a id="1942">!</a> of an array<a id="1764">!</a>. For example, continuing Exercise 4.7, <br>
        <code>A(2, 3) = 0</code><br>
        would result in this answer:</p>
        <code>A =<br>
        &nbsp;&nbsp;&nbsp;&nbsp;2	5	7<br>
        &nbsp;&nbsp;&nbsp;&nbsp;1	3	0<br></code>
        <p>As with vectors<a id="2420">!</a>, MATLAB<a id="2158">!</a> will automatically extend the array<a id="1765">!</a> if you write beyond its boundaries. If there are missing elements<a id="1943">!</a> between the current array<a id="1766">!</a> elements<a id="1944">!</a> and the index at which you attempt to store a new value<a id="2354">!</a>, the missing elements<a id="1945">!</a> will be zero filled. For example, again continuing Exercise 4.7,<br>
        <code>A(4, 1) = 3</code><br>
        would result in this answer:<br>
        <code>A =<br>
        &nbsp;&nbsp;&nbsp;&nbsp;2	5	7<br>
        &nbsp;&nbsp;&nbsp;&nbsp;1	3	0<br>
        &nbsp;&nbsp;&nbsp;&nbsp;0	0	0<br>
        &nbsp;&nbsp;&nbsp;&nbsp;3	0	0<br>
        </code>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="4" data-sub-name="Removing Elements of an Array">
      <!-- Removing -->
      <h3 id="4_4_4">4.4.4   Removing Elements of an Array</h3>
      <div class="container">
        <p>You can remove elements<a id="1946">!</a> from arrays in the same way that you remove elements<a id="1947">!</a> from a vector. However, since the arrays must remain rectangular, elements<a id="1948">!</a> have to be removed as complete rows or columns. For example, for<a id="2037">!</a> the array<a id="1767">!</a> <code>A</code> in the previous section, entering:<br>
        <code>A(3, :) = []</code><br>
        would remove all elements<a id="1949">!</a> from the third row, and the result would be:<br>
        <code>A =<br>
        &nbsp;&nbsp;&nbsp;&nbsp;2	5	7<br>
        &nbsp;&nbsp;&nbsp;&nbsp;1	3	0<br>
        &nbsp;&nbsp;&nbsp;&nbsp;3	0	0<br>
        </code>
        Similarly, if <br>
        <code>A(:, 3) = []<br></code>
        was then entered, the result would be:<br>
        <code>A =<br>
        &nbsp;&nbsp;&nbsp;&nbsp;2	5<br>
        &nbsp;&nbsp;&nbsp;&nbsp;1	3<br>
        &nbsp;&nbsp;&nbsp;&nbsp;3	0<br>
        </code>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="5" data-sub-name="Operating on Arrays">
      <!-- Operating on Arrays -->
      <h3 id="4_4_5">4.4.5  Operating on Arrays</h3>
      <div class="container">
        <p>This section discusses how array<a id="1768">!</a> operations<a id="2265">!</a> extend directly from vector operations<a id="2266">!</a>: arithmetic<a id="1732">!</a> and logical<a id="2127">!</a> operations<a id="2267">!</a>, the application of functions, concatenation<a id="1877">!</a>, and slicing. This section will also discuss two topics peculiar to arrays: reshaping and linearizing arrays.</p>
        <p><b>Array Arithmetic Operations</b>: Arithmetic operations<a id="2268">!</a> can be performed collectively on the individual components of two arrays as long as both arrays have the same dimensions or one of them is a scalar<a id="2315">!</a> (i.e., has a vector of length 1). Addition and subtraction have exactly the syntax you would expect, as shown in Exercise 4.8. Multiplication, division<a id="1912">!</a>, and exponentiation, however, must use the “dot<a id="1915">!</a> operator” symbols: .*, ./, and .^ (the dot<a id="1916">!</a> is part of the symbol, but the commas are not) for<a id="2038">!</a> scalar<a id="2316">!</a> multiplication<a id="2201">!</a>, division<a id="1913">!</a>, and exponentiation.</p>
        <div class="exercise"><iframe src="..\exercises\exercise_4_8html.html"></iframe></div>
        <p><b>Array Logical Operations:</b> As with vectors<a id="2421">!</a>, logical<a id="2128">!</a> array<a id="1769">!</a> operations<a id="2269">!</a> can be performed collectively on the individual components of two arrays as long as both arrays have the same dimensions or one of the arrays is a scalar<a id="2317">!</a> (i.e., has a vector of length 1). The result will be an array<a id="1770">!</a> of logical<a id="2129">!</a> values with the same size as the original array(s). Do Exercise 4.9 to see how array<a id="1771">!</a> logical<a id="2130">!</a> operations<a id="2270">!</a> work. Here, we successfully compare the array<a id="1772">!</a> <code>A</code> to a scalar<a id="2318">!</a> value<a id="2355">!</a>, and to the array<a id="1773">!</a> <code>B</code> that has the same dimensions as <code>A</code>. However, comparing to the array<a id="1774">!</a> <code>C</code> that has the same number of elements<a id="1950">!</a> but the wrong shape produces an error. </p>
        <div class="exercise"><iframe src="..\exercises\exercise_4_9html.html"></iframe></div>
        <p><b>Applying Library Functions:</b> In addition to being able to consume vectors<a id="2422">!</a>, most mathematical functions in the MATLAB<a id="2159">!</a> language can consume an array<a id="1775">!</a> of numbers<a id="2214">!</a> and return an array<a id="1776">!</a> of the same shape. The following functions deserve special mention because they are exceptions<a id="1982">!</a> to this rule and provide specific capabilities that are frequently useful:</p>
        <ul>
          <li><code>sum(<a id="2331">!</a>v)</code> and <code>mean(<a id="2190">!</a>v)</code> when applied to a 2-D array<a id="1777">!</a> return a row vector containing the sum and mean of each column<a id="1860">!</a> of the array<a id="1778">!</a>, respectively. If you want the sum of the whole array<a id="1779">!</a>, use <code>sum(<a id="2332">!</a>sum(<a id="2333">!</a>v))</code>.</li>
          <li><code>min(<a id="2192">!</a>v)</code> and <code>max(<a id="2186">!</a>v)</code> return two row vectors<a id="2423">!</a>: the minimum<a id="2195">!</a> or maximum value<a id="2356">!</a> in each column<a id="1861">!</a> and also the row in that column<a id="1862">!</a> where that value<a id="2357">!</a> occurred. For example:<br>
          <code>>> [values rows] = max(<a id="2187">!</a>[2	7 42;<br>
          &nbsp;&nbsp;&nbsp;&nbsp;9 14	8;<br>
          &nbsp;&nbsp;&nbsp;&nbsp;10 12 -6])<br>
          values =<br>
          &nbsp;&nbsp;&nbsp;&nbsp;[10 14 42]<br>
          rows =<br>
          &nbsp;&nbsp;&nbsp;&nbsp;[3 2 1]<br></code>
          This indicates that the maximum values in each column<a id="1863">!</a> are <code>10</code>, <code>14</code>, and <code>42</code>, respectively, and they occur in rows <code>3</code>, <code>2</code>, and <code>1</code>.<br>
          If you really need the row and column<a id="1864">!</a> containing, say, the maximum value<a id="2358">!</a> of the whole array<a id="1780">!</a>, continue<a id="1881">!</a> the preceding example with the following lines:<br>
          <code>>> [value<a id="2359">!</a> col] = max(<a id="2188">!</a>values)<br>
            value<a id="2360">!</a> = <br>
            &nbsp;&nbsp;&nbsp;&nbsp;42<br>
            col = <br>
            &nbsp;&nbsp;&nbsp;&nbsp;3<br>
          </code>
          This finds the maximum value<a id="2361">!</a> in the whole array<a id="1781">!</a> and determines that it occurs in column<a id="1865">!</a> <code>3</code>. So to determine the row in which that maximum occurred, we index the vector of row maximum locations, <code>rows</code>, with the column<a id="1866">!</a> in which the maximum occurred.<br>
          <code>>> row = rows(col)<br>
          row = <br>
          1<br></code>
          Therefore, we correctly conclude that the maximum number in this array<a id="1782">!</a> is <code>42</code>, and it occurs at row <code>1</code>, column<a id="1867">!</a> <code>3</code>.</li>
        </ul>
        <p><b>Array Concatenation:</b> The MATLAB<a id="2160">!</a> language permits programmers to construct a new array<a id="1783">!</a> by concatenating other arrays in the following ways:
        <ul>
          <li>Horizontally, as long as each component has the same number of rows:<br>
          <code>A = [B C D ... X Y Z]</code></li>
          <li>Vertically, as long as each has the same number of columns:<br>
          <code>A = [B; C; D; ... X; Y; Z]</code></li>
        </ul>
        <p>The result of horizontal concatenation<a id="1878">!</a> will be an array<a id="1784">!</a> with the number of rows common to all and for<a id="2039">!</a> the number of columns, the sum of the columns of each element concatenated. Similarly, the result of vertical concatenation<a id="1879">!</a> will be an array<a id="1785">!</a> with the number of columns common to all and for<a id="2040">!</a> the number of rows, the sum of the rows of each element concatenated. Exercise 4.10 gives you the opportunity to concatenate an array<a id="1786">!</a>.</p>
        <div class="exercise"><iframe src="..\exercises\exercise_4_10html.html"></iframe></div>
        <p><b>Slicing Arrays:</b> The general form of statements for<a id="2041">!</a> moving sections of one array<a id="1787">!</a> into sections of another is as follows:<br>
        <code>B(&lt;rangeBR&gt;, &lt;rangeBC&gt;) = A(&lt;rangeAR&gt;,&lt;rangeAC&gt;)</code><br>
        where each <code>&lt;range..&gt;</code> is an index vector, <code>A</code> is an existing array<a id="1788">!</a>, and <code>B</code> can be either an existing array<a id="1789">!</a> or a new array<a id="1790">!</a>. The values in <code>B</code> at the specified indices are all assigned the corresponding values copied from A. The rules for<a id="2042">!</a> using this template are as follows:</p>
        <ul>
          <li>Either<ul>
          <li>each dimension of each sliced array<a id="1791">!</a> must be equal<a id="1976">!</a>,</li>
           <li>or the number of elements<a id="1951">!</a> moved must match (i.e. the product <code>&lt;rangeAR&gt;*&lt;rangeAC&gt;</code> must equal<a id="1977">!</a> the product <code>&lt;rangeBR&gt;*&lt;rangeBC&gt;</code>)</li>
           <li>or the size of the slice from <code>A</code> must be <code>1&<a id="2295">!</a>#215;1</code>.</li>
           </ul>
          <li>If B did not exist before this statement was implemented, it would be zero filled where assignments were not explicitly made.</li>
          <li>If B did exist before this statement, the values not directly assigned would remain unchanged.</li>
        </ul>
        <p><b>Reshaping Arrays:</b> Occasionally, it is useful to take an array<a id="1792">!</a> with one set of dimensions and reshape it to another set. The function<a id="2066">!</a> <code>reshape(<a id="2305">!</a> ... )</code> accomplishes this. The command <code>reshape(<a id="2306">!</a>A, rows, cols, ...)</code> will take the array<a id="1793">!</a> <code>A</code>, whatever its dimensions, and reform it into an array<a id="1794">!</a> sized <code>(rows &<a id="2296">!</a>#215; cols &<a id="2297">!</a>#215; ...)</code> out to as many dimensions as desired. However, <code>reshape(<a id="2307">!</a>...)</code> neither discards excess data<a id="1894">!</a> nor pads the data<a id="1895">!</a> to fill any empty<a id="1965">!</a> space. The product of all the original dimensions of <code>A</code> must equal<a id="1978">!</a> the product of the new dimensions. Try Exercise 4.11 to see how to reshape an array<a id="1795">!</a>. Here, we first take a 1 x 10 array<a id="1796">!</a>, A, and attempt to reshape it to 4 x 3. Since the element count does not match, an error results. When we concatenate two zeros to the array<a id="1797">!</a> A, it has the right element count and the reshape succeeds.</p>
        <div class="exercise"><iframe src="..\exercises\exercise_4_11html.html"></iframe></div>
        <p><b>Linearized Arrays:</b> A discussion of arrays would not be complete without revealing an infamous secret of the MATLAB<a id="2161">!</a> language: multi-dimensional arrays are not stored in some nice, rectangular chunk of memory. Rather, like all other blocks of memory, the block allocated for<a id="2043">!</a> an array<a id="1798">!</a> is sequential, and the array<a id="1799">!</a> is stored in that space in column<a id="1868">!</a> order. Normally, if MATLAB<a id="2162">!</a> behaved as we "have a right to expect," we would not care how an array<a id="1800">!</a> is stored. However, there are circumstances under which the designers of MATLAB<a id="2163">!</a> needed to expose this secret. The primary situation in which array<a id="1801">!</a> linearization becomes evident is the mechanization of the <code>find(<a id="2003">!</a>...)</code> function<a id="2067">!</a>. If we perform a logical<a id="2131">!</a> operation<a id="2235">!</a> on an array<a id="1802">!</a>, the result is an array<a id="1803">!</a> of logical<a id="2132">!</a> values of the same size as the original array<a id="1804">!</a>. In general, the true values would be scattered randomly about that resulting array<a id="1805">!</a>. If we wanted to convert this to a collection<a id="1844">!</a> of indices, what would we expect to see? The <code>find(<a id="2004">!</a>...)</code> function<a id="2068">!</a> has two modes of operation<a id="2236">!</a>: we can give it separate variables in which to store the rows and columns by saying:<br>
        <code>[rows cols] = find(<a id="2005">!</a>...)</code> <br>
        or we can receive back just one result by asking for<a id="2044">!</a>:<br>
        <code>ndx = find(<a id="2006">!</a>...)</code>.<br>
        Indexing with this result exposes the linearized<a id="2089">!</a> nature of arrays. The way this feature manifests itself is shown in Exercise 4.12.</p>
        <div class="exercise"><iframe src="..\exercises\exercise_4_12html.html"></iframe></div>
        <p>Here, we build a 4 &<a id="2298">!</a>#215; 3 array<a id="1806">!</a> <code>A</code> and calculate the logical<a id="2133">!</a> array<a id="1807">!</a> where <code>A</code> is greater than <code>5</code>. When we save the result of finding these locations in the variable<a id="2368">!</a> <code>ix</code>, we see that this is a vector of values. If we count down the columns from the top left, we see that the second, seventh, eighth, and eleventh values in the linearized<a id="2090">!</a> version of <code>A</code> are indeed <code>true</code>. We also see that it is legal to use this linearized<a id="2091">!</a> index vector to access the values in the original array<a id="1808">!</a>—in this case<a id="1829">!</a>, to add <code>3</code> to each one. </p>
        <p><b>Hints:</b><br>
        <ol>
          <li>It is best not to expose the detailed steps of finding logical<a id="2134">!</a>
          results in arrays, but to use an integrated approach:<br>
          <code>A(A>5) = A(A>5) + 3</code<a id="1835">!</a>><br>
          This produces the expected answers without exposing the
          nasty secrets underneath.</li>
          <li>Never use an array<a id="1809">!</a> linearization as part of your program<a id="2299">!</a>
          logic<a id="2095">!</a>. It makes the code<a id="1836">!</a> hideous to look at and/or understand,
          and it is never the “only way to do” anything.</li>
        </ol>
        <p>Finally, we have a right to express a loud complaint when trying to reference the eleventh element of an array<a id="1810">!</a> with only three rows. In fact
        MATLAB<a id="2164">!</a> “unwinds” the storage of the array<a id="1811">!</a>, counts down to the eleventh entry—3 for<a id="2045">!</a> column<a id="1869">!</a> 1, 3 for<a id="2046">!</a> column<a id="1870">!</a> 2, and 3 for<a id="2047">!</a> column<a id="1871">!</a> 3—and then extracts the second element of column<a id="1872">!</a> 4.</p>
        <p>To understand all these array<a id="1812">!</a> manipulation ideas fully, you should work carefully through the script in Listing 4.3, study the explanatory notes that follow, and do Exercise 4.13.</p>
        <div class="listing"><iframe src="..\listings\listing_04_3_livehtml.html"></iframe></div>
        <div class="exercise"><iframe src="..\exercises\exercise_4_13html.html"></iframe></div>
        <p>Notice that all the results are consistent with our expectations.</p>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="5" data-sect-name="Engineering Example - Computing Soil Volume">
    <!-- Engineering Example -->
    <h2 id="4_5">4.5  Engineering Example - Computing  Soil  Volume</h2>
    <div class="container clearfix">
      <div class="float-sm-right card">
        <img src="..\Images\Fig_4_5.JPG" alt="Figure 4.5" class="fig card-img">
        <p class="figure-name card-title">Figure 4.5: A Road through Hilly Terrain</p>
      </div>
      <div class="float-sm-right card">
        <img src="..\Images\Fig_4_6.JPG" alt="Figure 4.6" class="fig card-img">
        <p class="figure-name card-title">Figure 4.6: Material to be Moved</p>
      </div>
    <p><b>Problem</b><br>
    <p>We consider now an interesting problem from civil engineering<a id="1974">!</a>.  Whenever a road [or railway track] is being run through hilly terrain, portions of hills need to be removed and valleys filled in.  The preliminary planning for<a id="2048">!</a> the road location, slope and height must include the problem of moving earth.  It is most economical to use the earth removed from hills to fill in nearby valleys without having to haul surplus earth away or bring in extra fill dirt. Typically, the slopes of the cuttings and embankments are specified, for<a id="2049">!</a> example, at 45 degrees.  Figure 4.5 illustrates a typical example.</p>
    <p><b>Solution</b><br>
    <p>Listing 4.4 shows one solution to this problem. Consider Figure 4.6 showing the earth to be removed in red and the earth needed to fill the valley in green. In order to balance the amount of earth to be moved, we need merely to sum the depths of the red patches and subtract the sum of the depth of the green patch. </p>
    <p>There are a number of MATLAB<a id="2165">!</a> language features in Listing 4.4 that will be dealt with in later chapters.  Refer to MATLAB<a id="2166">!</a> documentation<a id="1914">!</a> or the subsequent chapters of this text<a id="2334">!</a>.</p>
  </div>
  <div class="listing"><iframe src="..\listings\listing_04_4_livehtml.html"></iframe></div>
</div>

  <!-- Chapter Summary -->
  <h2>Chapter Summary</h2>
  <div class="container">
    <p>This chapter introduced you to vectors<a id="2424">!</a> and arrays. For each collection<a id="1845">!</a>, you saw how to:
    <ul>
      <li>Create a vectors<a id="2425">!</a> and arrays by concatenation<a id="1880">!</a> and a variety of special-purpose functions</li>
      <li>Access and remove elements<a id="1952">!</a>, rows, or columns</li>
      <li>Perform mathematical and logical<a id="2135">!</a> operations<a id="2271">!</a> on them</li>
      <li>Apply library functions, including those that summarize whole
      columns or rows</li>
      <li>Move arbitrary selected rows and columns from one array<a id="1813">!</a> to
      another</li>
      <li>Reshape and linearize arrays</li>
    </ul>
    </p>
  </div>
<h2>Self Test</h2>
<div class="container">

Use the following questions to check your understanding of the material in this
chapter:
<h3>True or False</h3>
<ol>
<li>A homogeneous<a id="2078">!</a> collection<a id="1846">!</a> must consist entirely of numbers<a id="2215">!</a>.</li>
<li>The function<a id="2069">!</a> linspace(<a id="2093">!</a>...) can create only vectors<a id="2426">!</a>, whereas the
functions zeros(<a id="2440">!</a>...) , ones(<a id="2231">!</a>...) , and rand(<a id="2302">!</a>...) produce either
vectors<a id="2427">!</a> or arrays of any dimension.</li>
<li>The length(<a id="2082">!</a>...) function<a id="2070">!</a> applied to a column<a id="1873">!</a> vector gives you the
number of rows.</li>
<li>You can access any element(s) of an array<a id="1814">!</a> of any dimension using a
single index vector.</li>
<li>Mathematical or logical<a id="2136">!</a> operators<a id="2284">!</a> are allowed only between two
arrays of the same shape (rows and columns).</li>
<li>You can access data<a id="1896">!</a> in a vector A with an index vector that is longer
than A .</li>
<li>You can access data<a id="1897">!</a> in a vector A with a logical<a id="2137">!</a> vector that is longer
than A .</li>
<li>When moving a block of data<a id="1898">!</a> in the form of specified rows and
columns from array<a id="1815">!</a> A to array<a id="1816">!</a> B , the shape of the block in A must
match the shape of the block in B .</li>
</ol>
<h3>Fill in the Blanks</h3>
<ol>
<li>Vector elements<a id="1953">!</a> have two attributes that make them unique: their
____________ and their ____________.</li>
<li>Vectors can be created using the colon<a id="1849">!</a> operator, for<a id="2050">!</a> example,
B = 1:3:20 , where the first number is the __________, the second
number is the ______________, and the third number is the
______________.</li>
<li>When indexing a source vector with a logical<a id="2138">!</a> vector, the result will
contain the _____________of the source vector corresponding in
position to the ____________ in the logical<a id="2139">!</a> vector.</li>
<li>The normal precedence of operators<a id="2285">!</a> can be overruled by the use of
_____________________.</li>
<li>Arithmetic operations<a id="2272">!</a> can be performed collectively on the
individual components of two arrays as long as both arrays
_______________or one of them is _____________.</li>
<li>To remove elements<a id="1954">!</a> from arrays, you write ______________in
___________________________.</li>
<li>Removing rows or columns from an array<a id="1817">!</a> is ________________, and
can lead to ______________. Wherever possible, use _____________
to _____________________.</li>
</ol>

<h3>Programming Projects</h3>
For these exercises, do not use the direct entry method to construct
the vectors<a id="2428">!</a>.
<ol>
<li>Write a script that does the following:
<ul>
<li>Construct a vector containing all of the even numbers<a id="2216">!</a> between 6
and 33, inclusive of the end<a id="1973">!</a> points. Store your answer in the
variable<a id="2369">!</a> evens . ( Note: 33 is not an even number)</li>
<li>Construct a vector, threes , containing every third number
starting with 8 and ending at 38.</li>
<li>Construct a vector, reverse , containing numbers<a id="2217">!</a> starting at 20
and counting backward by 1 to 10.</li>
<li>Construct a vector, theta , containing 100 evenly spaced values
between 0 and 2pi.</li>
<li>Construct a vector, myZeros , containing 15 elements<a id="1955">!</a>, all of which
are zeros.</li>
<li>Construct a vector, random , containing 15 randomly generated
numbers<a id="2218">!</a> between 1 and 12.</li>
</ul>
<li>Write a script that performs the following exercises on vectors<a id="2429">!</a>:
<ul>
<li>You are given a vector vec, defined as: vec = [45 8 2 6 98 55 45
-48 75] . You decide that you don't want the numbers<a id="2219">!</a> with even
values. Write as script to remove all of the even numbers<a id="2220">!</a> (i.e., 8, 2,
6, 98, and 248) from vec . You should alter the vector vec rather
than storing your answer in a new variable<a id="2370">!</a>. Since your
commands must work for<a id="2051">!</a> any vector of any length, you must not
use direct entry.</li>
<li>Create a variable<a id="2371">!</a> called vLength that holds the length of the
vector vec modified in part a. You should use a built-in function<a id="2071">!</a>
to calculate the value<a id="2362">!</a> based on the vector itself.</li>
<li>Create a variable<a id="2372">!</a> called vSum that holds the sum of the elements<a id="1956">!</a>
in vector vec . Do not just enter the value<a id="2363">!</a>. You should use a
built-in function<a id="2072">!</a> to calculate the value<a id="2364">!</a> based on the vector
itself.</li>
<li>Calculate the average of the values in the vector vec two ways.
First, use a built-in function<a id="2073">!</a> to find the average of vec . Then,
use the results from parts b and c to calculate the average
of vec.</li>
<li>Create a variable<a id="2373">!</a> called vProd that holds the product of the
elements<a id="1957">!</a> in vector vec . You should use a built-in function<a id="2074">!</a> to
calculate the value<a id="2365">!</a> based on the vector itself.</li>
</ul>
<li>Write a script to solve the following problems using only vector
operations<a id="2273">!</a>:
<ul>
<li>Assume that you have two vectors<a id="2430">!</a> named A1 and B1 of equal<a id="1979">!</a>
length, and create a vector C1 that combines A1 and B1 such that
C1 = [A1(1) B1(1) A1(2) B1(2) ... . A1(end) B1(end)] . For
example, if A1 = [2, 4, 8] and B1 = [3, 9, 27] , C1 should
contain [2, 3, 4, 9, 8, 27]</li>
<li>Assume that you have two vectors<a id="2431">!</a> named A2 and B2 of different
lengths. Create a vector C2 that combines A2 and B2 in a manner
similar to part a. However, if you run out of elements<a id="1958">!</a> in one of
the vectors<a id="2432">!</a>, C2 also contains the elements<a id="1959">!</a> remaining from the
longer vector. <br>
For example, if A2 = [1, 2, 3, 4, 5, 6] and B2 =
[10, 20, 30] , then C2 = [1, 10, 2, 20, 3, 30, 4, 5, 6] ;<br>
 if A2 = [1, 2, 3] and B2 = [10, 20, 30, 40, 50] , then C2 = [1, 10,
2, 20, 3, 30, 40, 50]</li>
</ul>
<li>Write a script that, when given a vector of numbers<a id="2221">!</a>, nums , creates a
vector newNums containing every other element of the original vector,
starting with the first element. For example, if nums = [6 3 56 7 8 9
445 6 7 437 357 5 4 3] , newNums should be [6 56 8 445 7 357 4] .
Note: You must not simply hard-code<a id="1837">!</a> the numbers<a id="2222">!</a> into your
answer; your script should work with any vector of numbers<a id="2223">!</a>.</li>
<li>You are given a vector, tests, of test scores and wish to normalize
these scores by computing a new vector, normTests , that will contain
the test scores on linear<a id="2088">!</a> scale<a id="2319">!</a> from 0 to 100. A zero still corresponds
to a zero, and the highest test score will correspond to 100.<br>
 For example, <br>
 if tests = [90 45 76 21 85 97 91 84 79 67 76 72 89
95 55] , <br>
normTests should be
[92.78 46.39 78.35 21.65 87.63 100 93.81 86.6 ...
81.44 69.07 78.35 74.23 91.75 97.94 56.7];</li>
<li>Write a script that takes a vector of numbers<a id="2224">!</a>, A , and return a new vector
B , containing the cubes of the positive numbers<a id="2225">!</a> in A . If a particular
entry is negative, replace its cube with 0. <br>
For example, <br>
if A = [1 2 -1 5
6 7 -4 3 -2 0] , B should be [1 8 0 125 216 343 0 27 0 0]</li>
<li>Great news! You have just been selected to appear on Jeopardy
this fall. You decide that it might be to your advantage to
generate an array<a id="1818">!</a> representing the values of the questions on
the board.
<ul>
<li>Write a script to generate the matrix<a id="2180">!</a> jeopardy that consists of
six columns and five rows. The columns are all identical, but
the values of the rows range from 200 to 1,000 in equal<a id="1980">!</a>
increments.</li>
<li>Next, generate the matrix<a id="2181">!</a> doubleJeopardy , which has the same
dimensions as jeopardy but whose values range from 400 to
2,000.</li>
<li>You've decided to go even one step further and practice for<a id="2052">!</a> a
round that doesn't even exist yet. Generate the matrix<a id="2182">!</a>
squaredJeopardy that contains each entry of the original jeopardy
matrix<a id="2183">!</a> squared.</li>
</ul>
<li>Write a script named array<a id="1819">!</a>Collide that will combine two arrays,
sort them, and then return a new array<a id="1820">!</a> of a specified size.<br>
Your script should process the following data<a id="1899">!</a>:
<ul>
<li>A : a 2-D array<a id="1821">!</a> of any size</li>
<li>B : another 2-D array<a id="1822">!</a> that may be a different size from A</li>
<li>N : a number specifying the number of rows for<a id="2053">!</a> the new array<a id="1823">!</a></li>
<li>M : a number specifying the number of columns for<a id="2054">!</a> the new
array<a id="1824">!</a>.</li>
</ul>
Your script should produce an array<a id="1825">!</a>, res , of size N x M that contains
the first N x M elements<a id="1960">!</a> of A and B and is sorted columnwise. If N x M
is larger than the total number of elements<a id="1961">!</a> in A and B , you should fill
empty<a id="1966">!</a> spots with 0.
Test this script by writing another script that repeatedly sets the
values of A , B , M , and N and then invokes your array<a id="1826">!</a>Collide script.
You can then create as many test cases as you wish.<br> For example,<br> if
A = [1 2 3; 5 4 6] , B = [7 8; 9 10; 12 11] , N = 3 and M = 4 , res
will be
[1 4 7 10
2 5 8 11
3 6 9 12]<br>
Change N to 4, and res will be
[1 5 9 0
2 6 10 0
3 7 11 0
4 8 12 0</li>
 
</ol>
</div>
</div>


</body>
</html>


<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<head>
<title>08_File_I_O</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
<link rel="stylesheet" href="styles/styles.css" />
<script async src="./javascript/index.js"></script>
</head>
<body>
<div><nav class="navbar navbar-expand-lg fixed-top top-nav navbar-light bg-light"><a class="navbar-brand" href="#"><img src="../Images/1371.png" width="30" height="30" class="d-inline-block align-top" alt="">&nbspEngineering Computation Using MATLAB</a></nav></div>
<div class="nav-obj"><nav class="nav sidenav nav-scroll navbar-dark bg-dark"><ul class="navbar-nav"><li class="nav-item"><a class="nav-link" href="..\..\index.html">Home</a></li><li class="nav-item"><a class="nav-link" href="Preface.htm">Preface</a></li><li class="nav-item"><div class="nav-link"><a href="01_Introduction.htm#1">1 Introduction&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_1"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="01_Introduction.htm#1_1">1.1 Background</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="01_Introduction.htm#1_2">1.2 History of Computer Architectures&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_1_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_1_2"><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_2_1">1.2.1 Babbage's Difference Engine</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_2_2">1.2.2 Colossus</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_2_3">1.2.3 The von Neumann Architecture</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="01_Introduction.htm#1_3">1.3 Modern Computer Software&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_1_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_1_3"><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_3_1">1.3.1 Operating Systems</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_3_2">1.3.2 Software Tools</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_3_3">1.3.3 Programming Languages</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_3_4">1.3.4 Running a Computer Program</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_3_5">1.3.5 Running an Interpreted Program</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="01_Introduction.htm#1_4">1.4 Anticipated Outcomes&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_1_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_1_4"><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_4_1">1.4.1 Introduction to MATLAB</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_4_2">1.4.2 Learning Programming Concepts</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_4_3">1.4.3 Problem-Solving Skills</a></div></li></ul></li></ul></li><li class="nav-item"><div class="nav-link"><a href="02_Basics.htm#2">2 Basics&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_2"><li class="nav-item secnav"><div class="nav-link"><a href="02_Basics.htm#2_1">2.1 Programming Language Background&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_2_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_2_1"><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_1_1">2.1.1 Abstraction</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_1_2">2.1.2 Algorithms</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_1_3">2.1.3 Programming Paradigms</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="02_Basics.htm#2_2">2.2 Basic Data Manipulation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_2_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_2_2"><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_2_1">2.2.1 Starting and Stopping MATLAB</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_2_2">2.2.2 Assigning Values to Variables</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_2_3">2.2.3 Data Typing</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_2_4">2.2.4 Classes and Objects</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="02_Basics.htm#2_3">2.3 MATLAB User Interface&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_2_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_2_3"><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_1">2.3.1 Command Window</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_2">2.3.2 Command History</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_3">2.3.3 Workspace Window</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_4">2.3.4 Current Folder Window</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_5">2.3.5 Variable Editor</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_6">2.3.6 Figure Window</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_7">2.3.7 Editor Window</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="02_Basics.htm#2_4">2.4 Scripts&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_2_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_2_4"><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_1">2.4.1 Text Files</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_2">2.4.2 Creating Scripts</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_3">2.4.3 The Current Directory</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_4">2.4.4 Running Scripts</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_5">2.4.5 Punctuating Scripts</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_6">2.4.6 Debugging Scripts</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="02_Basics.htm#2_5">2.5 Engineering Example - Spacecraft Launch</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="03_Functions.htm#3">3 Functions&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_3"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="03_Functions.htm#3_1">3.1 Concepts: Abstraction and Encapsulation</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="03_Functions.htm#3_2">3.2 Black Box View of a Function</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="03_Functions.htm#3_3">3.3 MATLAB Implementation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_3_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_3_3"><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_1">3.3.1 General Template</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_2">3.3.1 Function Definition</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_3">3.3.3 Storing and Using Functions</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_4">3.3.4 Calling Functions</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_5">3.3.5 Variable Number of Parameters</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_6">3.3.6 Returning Multiple Results</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_7">3.3.7 Auxiliary Local Functions</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_8">3.3.8 Encapsulation in MATLAB Functions</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_9">3.3.9 Global Variables</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="03_Functions.htm#3_4">3.4 Engineering Example: Measuring a Solid Object</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="04_Vectors.htm#4">4 Vectors&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_4"><li class="nav-item secnav"><div class="nav-link"><a href="04_Vectors.htm#4_1">4.1 Concept: Data Collection&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_4_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_4_1"><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_1_1">4.1.1 Data Abstraction</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_1_2">4.1.2 Homogeneous Collections</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="04_Vectors.htm#4_2">4.2 Vectors&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_4_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_4_2"><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_2_1">4.2.2 Creating a Vector</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_2_2">4.2.2 Size of a Vector</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_2_3">4.2.3 Indexing a Vector</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_2_4">4.2.4 Shortening a Vector</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_2_5">4.2.5 Operating on Vectors</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="04_Vectors.htm#4_3">4.3 Engineering Example - Forces and Moments</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="04_Vectors.htm#4_4">4.4 Arrays&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_4_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_4_4"><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_4_1">4.4.1 Properties of an Array</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_4_2">4.4.2 Creating an Array</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_4_3">4.4.3 Accessing Elements of an Array</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_4_4">4.4.4 Removing Elements of an Array</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_4_5">4.4.5 Operating on Arrays</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="04_Vectors.htm#4_5">4.5 Engineering Example - Computing Soil Volume</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="05_Execution.htm#5">5 Execution&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_5" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_5"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_1">5.1 Concept: Code Blocks</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_2">5.2 Conditional Execution in General</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_3">5.3 if Statements&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_5_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_5_3"><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_3_1">5.3.1 General Template</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_3_2">5.3.2 MATLAB Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_3_3">5.3.3 Important Ideas</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_4">5.4 switch Statements&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_5_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_5_4"><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_4_1">5.4.1 General Template</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_4_2">5.4.2 MATLAB Implementation</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_5">5.5 Iteration in General</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_6">5.6 for Loops&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_5_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_5_6"><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_6_1">5.6.1 General for Loop Template</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_6_2">5.6.2 MATLAB Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_6_3">5.6.3 Indexing Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_6_4">5.6.4 Breaking out of a for Loop</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_7">5.7 while Loops&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_5_7" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_5_7"><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_7_1">5.7.1 General while Template</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_7_2">5.7.2 MATLAB while Loop Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_7_3">5.7.3 Loop-and-a-Half Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_7_4">5.7.4 Breaking a while Loop</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_8">5.8 Engineering Example - Computing Liquid Levels</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="06_Strings.htm#6">6 Strings&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_6"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_2">6.2 MATLAB Implementation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_6_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_6_2"><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_2_1">6.2.1 Slicing and Concatenating Strings</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_2_2">6.2.2 Arithmetic and Logical Operations</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_2_3">6.2.3 Useful Functions</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_3">6.3 Format Conversion Functions&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_6_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_6_3"><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_3_1">6.3.1 Conversion from Numbers to Strings</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_4">6.4 Character String Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_6_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_6_4"><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_4_1">6.4.1 Simple Data Output: The disp(...) Function</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_4_2">6.4.2 Complex Output</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_4_3">6.4.3 Comparing Strings</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_5">6.5 Arrays of Strings</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_6">6.6 Engineering Example - Encryption</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="07_Structures.htm#7">7 Structures&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_7" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_7"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_1">7.1 Concept: Collecting Dissimilar Objects</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_2">7.2 Cell Arrays&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_7_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_7_2"><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_2_1">7.2.1 Creating Cell Arrays</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_2_2">7.2.2 Accessing Cell Arrays</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_2_3">7.2.3 Using Cell Arrays</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_2_4">7.2.4 Processing Cell Arrays</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_3">7.3 Structures&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_7_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_7_3"><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_3_1">7.3.1 Constructing and Accessing One Structure</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_3_2">7.3.2 Constructor Functions</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_4">7.4 Structure Arrays&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_7_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_7_4"><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_4_1">7.4.1 Constructing Structure Arrays</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_4_2">7.4.2 Accessing Structure Arrays</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_4_3">7.4.3 Manipulating Structures</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_5">7.5 Comparing Cell Arrays to Structure Arrays</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_6">7.6 Engineering Example: Assembling a Physical Structure</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="08_File_I_O.htm#8">8 File I O&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_8" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_8"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="08_File_I_O.htm#8_1">8.1 Concept: Serial Input and Output (I/O)</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="08_File_I_O.htm#8_2">8.2 Workspace I/O</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="08_File_I_O.htm#8_3">8.3 High-Level I/O Functions&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_8_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_8_3"><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_3_1">8.3.1 Exploration</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_3_2">8.3.2 Spreadsheets</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_3_3">8.3.3 Delimited Text Files</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="08_File_I_O.htm#8_4">8.4 Lower-Level File I/O&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_8_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_8_4"><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_4_1">8.4.1 Opening and Closing Files</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_4_2">8.4.2 Reading Text Files</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_4_3">8.4.3 Writing Text Files</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="08_File_I_O.htm#8_5">8.5 Engineering Example - Spreadsheet Data</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="09_Recursion.htm#9">9 Recursion&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_9" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_9"><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_1">9.1 Concept: The Activation Stack&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_9_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_9_1"><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_1_1">9.1.1 A Stack</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_1_2">9.1.2 Activation Stack</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_1_3">9.1.3 Function Instances</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_2">9.2 Recursion Defined</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_3">9.3 Implementing a Recursive Function</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_4">9.4 Exceptions&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_9_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_9_4"><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_4_1">9.4.1 Historical Approaches</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_4_2">9.4.2 Generic Exception Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_4_3">9.4.3 MATLAB Implementation</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_5">9.5 Wrapper Functions</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_6">9.6 Examples of Recursion&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_9_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_9_6"><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_6_1">9.6.1 Detecting Palindromes</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_6_2">9.6.2 Fibonacci Series</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_6_3">9.6.3 Zeros of a Function</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_7">9.7 Engineering Example - Robot Arm Motion</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="10_Problem_Solving.htm#10">10 Problem Solving&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_10" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_10"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_1">10.1 Solving Simple Problems</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_2">10.2 Assembling Solution Steps</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3">10.3 Summary of Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_10_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_10_3"><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_1">10.3.1 Basic Arithmetic Operations</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_2">10.3.2 Inserting into a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_3">10.3.3 Traversing a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_4">10.3.4 Building a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_5">10.3.5 Mapping a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_6">10.3.6 Filtering a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_7">10.3.7 Folding a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_8">10.3.8 Searching a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_9">10.3.9 Sorting a Collection</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_4">10.4 Solving Larger Problems</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_5">10.5 Engineering Example - Processing Geopolitical Data</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="11_Plotting.htm#11">11 Plotting&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_11" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_11"><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_1">11.1 Plotting in General&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_11_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_11_1"><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_1_1">11.1.1 A Figure - The Plot Container</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_1_2">11.1.2 Simple Functions for Enhancing Plots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_1_3">11.1.3 Multiple Plots on One Figure - Subplots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_1_4">11.1.4 Manually Editing Plots</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_2">11.2 2-D Plotting&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_11_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_11_2"><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_2_1">11.2.1 Simple Plots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_2_2">11.2.2 Plot Options</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_2_3">11.2.3 Parametric Plots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_2_4">11.2.4 Other 2-D Plot Capabilities</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_3">11.3 3-D Plotting&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_11_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_11_3"><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_3_1">11.3.1 Linear 3-D Plots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_3_2">11.3.2 Linear Parametric 3-D Plots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_3_3">11.3.3 Other 3-D Plot Capabilities</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_4">11.4 Surface Plots&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_11_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_11_4"><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_1">11.4.1 Basic Capabilities</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_2">11.4.2 Simple Exercises</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_3">11.4.3 3-D Parametric Surfaces</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_4">11.4.4 Bodies of Rotation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_5">11.4.5 Other 3-D Surface Plot Capabilities</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_6">11.4.6 Assembling Compound Surfaces</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_5">11.5 Manipulating Plotted Data</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_6">11.6 Engineering Example - Visualizing Geographic Data&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_11_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_11_6"><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_6_1">11.6.1 Analyzing the Data</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_6_2">11.6.2 Displaying the Data</a></div></li></ul></li></ul></li><li class="nav-item"><div class="nav-link"><a href="12_Matrices.htm#12">12 Matrices&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_12" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_12"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_1">12.1 Concept: Behavioral Abstraction</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_2">12.2 Matrix Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_12_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_12_2"><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_2_1">12.2.1 Matrix Multiplication</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_2_2">12.2.2 Matrix Division</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_2_3">12.2.3 Matrix Exponentiation</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_3">12.3 Implementation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_12_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_12_3"><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_3_1">12.3.1 Matrix Multiplication</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_3_2">12.3.2 Matrix Division</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_4">12.4 Rotating Coordinates&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_12_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_12_4"><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_4_1">12.4.1 2-D Rotation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_4_2">12.4.2 3-D Rotation</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_5">12.5 Solving Simultaneous Linear Equations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_12_5" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_12_5"><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_5_1">12.5.1 Intersecting Lines</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_6">12.2 Engineering Examples&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_12_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_12_6"><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_6_1">12.2.1 Ceramic Composition</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_6_2">12.2.2 Analyzing an Electrical Circuit</a></div></li></ul></li></ul></li><li class="nav-item"><div class="nav-link"><a href="13_Images.htm#13">13 Images&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_13" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_13"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="13_Images.htm#13_1">13.1 Nature of an Image</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="13_Images.htm#13_2">13.2 Image Types&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_13_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_13_2"><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_2_1">13.2.1 True Color Images</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_2_2">13.2.2 Gray Scale Images</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_2_3">13.2.3 Color Mapped Images</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_2_4">13.2.4 Preferred Image Format</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="13_Images.htm#13_3">13.3 Reading, Displaying, and Writing Images</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="13_Images.htm#13_4">13.4 Operating on Images&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_13_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_13_4"><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_4_1">13.4.1 Stretching or Shrinking Images</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_4_2">13.4.2 Color Masking</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_4_3">13.4.3 Creating a Kaleidoscope</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_4_4">13.4.4 Images on a Surface</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="13_Images.htm#13_5">13.5 Engineering Example - Detecting Edges</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="14_Sounds.htm#14">14 Sounds&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_14" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_14"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_1">14.1 The Physics of Sound</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_2">14.2 Recording and Playback</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_3">14.3 Implementation</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_4">14.4 Time Domain Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_14_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_14_4"><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_4_1">14.4.2 Slicing and Concatenating Sounds</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_4_2">14.4.2 Musical Background</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_4_3">14.4.3 Changing Sound Frequency</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_5">14.5 The Fast Fourier Transform&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_14_5" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_14_5"><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_5_1">14.5.1 Background</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_5_2">14.5.2 Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_5_3">14.5.3 Simple Spectral Analysis</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_6">14.6 Frequency Domain Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_14_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_14_6"><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_6_1">14.6.1 Details of the Spectral Data</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_6_2">14.6.2 Notes fading with time</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_7">14.7 Engineering Example - Music Synthesizer</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="15_Numerical_Methods.htm#15">15 Numerical Methods&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_15" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_15"><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_1">15.1 Interpolation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_15_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_15_1"><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_1_1">15.1.1 Linear Interpolation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_1_2">15.1.2 Cubic Spline Interpolation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_1_3">15.1.3 Extrapolation</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_2">15.2 Curve Fitting&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_15_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_15_2"><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_2_1">15.2.1 Linear Regression</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_2_2">15.2.2 Polynomial Regression</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_2_3">15.2.3 Practical Application</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_3">15.3 Numerical Integration&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_15_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_15_3"><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_3_1">15.3.1 Determination of the Complete Integral</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_3_2">15.3.2 Continuous Integration Problems</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_4">15.4 Numerical Differentiation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_15_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_15_4"><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_4_1">15.4.1 Difference Expressions</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_5">15.5 Analytical Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_15_5" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_15_5"><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_5_1">15.5.1 Analytical Integration</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_5_2">15.5.2 Analytical Differentiation</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_6">15.6 Implementation</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_7">15.7 Engineering Example - Shaping the Synthesizer Notes</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="16_Sorting.htm#16">16 Sorting&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_16" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_16"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="16_Sorting.htm#16_1">16.1 Measuring Algorithm Cost</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="16_Sorting.htm#16_2">16.2 Algorithms for Sorting Data&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_16_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_16_2"><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_2_1">16.2.1 Insertion Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_2_2">16.2.2 Bubble Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_2_3">16.2.3 Quick Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_2_4">16.2.4 Merge Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_2_5">16.2.5 Radix Sort</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="16_Sorting.htm#16_3">16.3 Performance Analysis</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="16_Sorting.htm#16_4">16.4 Applications of Sorting Algorithms&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_16_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_16_4"><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_1">16.4.1 Using sort(...)</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_2">16.4.2 Insertion Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_3">16.4.3 Bubble Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_4">16.4.4 Quick Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_5">16.4.5 Merge Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_6">16.4.6 Radix Sort</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="16_Sorting.htm#16_5">16.5 Engineering Example - A Selection of Countries</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="17_Graphs.htm#17">17 Graphs&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_17" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_17"><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_1">17.1 Stacks&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_17_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_17_1"><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_1_1">17.1.1 The Nature of a Stack</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_1_2">17.1.2 Implementing Stacks</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_2">17.2 Queues&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_17_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_17_2"><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_2_1">17.2.1 The Nature of a Queue</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_2_2">17.2.2 Implementing Queues</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_2_3">17.2.3 Priority Queues</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#">17.3 Testing Stacks and Queues</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_4">17.4 Graphs&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_17_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_17_4"><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_4_1">17.4.1 Graph Examples</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_4_2">17.4.2 Processing Graphs</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_5">17.5 Minimum Spanning Trees</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_6">17.6 Finding Paths through a Graph&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_17_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_17_6"><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_6_1">17.6.1 Depth-First Search</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_6_2">17.6.2 Breadth-First Search</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_6_3">17.6.3 Dijkstra's Algorithm</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_6_4">17.6.4 An Approximation Algorithm</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_6_5">17.6.5 Serious Path Finding Algorithms</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_7">17.7 Engineering Applications&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_17_7" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_17_7"><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_7_1">17.7.1 Simple Applications</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_7_2">17.7.2 Complex Extensions</a></div></li></ul></li></ul></li><li class="nav-item"><a class="nav-link" href="Appendix_A.htm">Appendix A</a></li><li class="nav-item"><a class="nav-link" href="Appendix_B.htm">Appendix B</a></li><li class="nav-item"><a class="nav-link" href="Appendix_C.htm">Appendix C</a></li><li class="nav-item"><a class="nav-link" href="Appendix_D.htm">Appendix D</a></li><li class="nav-item"><a class="nav-link" href="text_index.htm">Index</a></li></ul></nav></div>
<div class="content">
  <h1 id="8" align="center">Chapter 8: File Input and Output</h1>

  <!-- Chapter Objectives -->
  <h1>Chapter Objectives</h1>
  <div class="container">
    <p>Reading and writing data<a id="4184">!</a> in data<a id="4185">!</a> files<a id="4321">!</a> are fundamental to the utility of programming<a id="4487">!</a> languages in general, and MATLAB<a id="4443">!</a> in particular. In addition to the obvious need to save and restore scripts<a id="4497">!</a> and functions (covered in Chapter 2), here we consider four types of activities that read and write data<a id="4186">!</a> files<a id="4322">!</a> in MATLAB<a id="4444">!</a>, each including a discussion of the circumstances under which they are appropriate:
    <ul>
      <li><b>Saving and restoring the workspace:</b>The MATLAB<a id="4445">!</a> language provides for<a id="4355">!</a> the basic ability to save your workspace (or parts of your workspace) to a file and restore it later for<a id="4356">!</a> further processing.</li>
      <li><b>High-level functions for<a id="4357">!</a> accessing files<a id="4323">!</a> in specific formats:</b>There are high-level<a id="4433">!</a> functions that consume the name of a file whose contents are in any one of a number of popular formats and produce an internal representation of the data<a id="4187">!</a> from that file in a form ready for<a id="4358">!</a> processing. Almost all these functions have an equivalent write function<a id="4401">!</a> that will write a new file in the same format<a id="4389">!</a> after you have manipulated the data<a id="4188">!</a>.</li>
      <li><b>Lower-level file access programs for<a id="4359">!</a> general-purpose text<a id="4519">!</a> file processing:</b> we also need to deal with lower-level<a id="4441">!</a> capabilities for<a id="4360">!</a> manipulating text<a id="4520">!</a> files<a id="4324">!</a> that do not contain recognizable structures.
      </li>
      <li><b>Really low-level binary<a id="4109">!</a> file access:</b> we recognize also that at the most fundamental level, file access is about reading and writing arbitrary bit patterns in a file. While the principles remain the same, the practice of operating<a id="4469">!</a> on binary<a id="4110">!</a> files<a id="4325">!</a> is unusual for<a id="4361">!</a> engineers to require and will not be further explored in this text<a id="4521">!</a>.
      </li>
    </ul></p>
  </div>

  <!-- Introduction -->
  <h1>Introduction</h1>
  <div class="container clearfix">
    <div class="float-sm-right card">
      <img src="..\Images\Fig_8_1.JPG" alt="Figure 8.1" class="fig card-image">
      <p class="figure-name card-title">Figure 8.1: Paper Tape I/O</p>
    </div>
    <p>This chapter discusses files<a id="4326">!</a> that contain workspace variables, spreadsheet data<a id="4189">!</a>, and text<a id="4522">!</a>. Subsequent chapters will discuss image files<a id="4327">!</a> and sound<a id="4502">!</a> files<a id="4328">!</a> that have their own unique file access. MATLAB<a id="4446">!</a> has the ability to process the many file formats currently in use. For information on the other file formats, consult the MATLAB<a id="4447">!</a> help<a id="4429">!</a> documentation<a id="4294">!</a> for<a id="4362">!</a> details of their usage.</p>
    <p>We frequently refer to the process of reading and writing data<a id="4190">!</a> files<a id="4329">!</a> as Input/Output<a id="4438">!</a> (I/O). We have already seen and used examples of file I/O to store and retrieve data<a id="4191">!</a> and programs. Your script and function<a id="4402">!</a> files<a id="4330">!</a> are stored in your current directory and could be invoked from there by name from the Command<a id="4175">!</a> window. To understand fully the concept of serial I/O, consider Figure 8.1. This figure takes us back to the early days of computing when paper tape was the only available storage medium. After the leader containing only the small holes used to move the tape forward<a id="4399">!</a>, each row of the paper tape represents the value<a id="4559">!</a> of one character<a id="4134">!</a> as 8 bits<a id="4113">!</a> of data<a id="4192">!</a>.  The 8 bits<a id="4114">!</a> represent the ASCII<a id="4085">!</a> value<a id="4560">!</a> in binary<a id="4111">!</a> form with a hole punched where a bit is set. These tapes were prepared on a tape punching machine, and were fed through a tape reader to recover all the characters. This illustrates the meaning of "serial" processing - in this case<a id="4115">!</a>, the data<a id="4193">!</a> are actually stored sequentially on the paper tape. In principle, while<a id="4575">!</a> the storage techniques have evolved beyond recognition and continue<a id="4182">!</a> to evolve, to a user's program<a id="4475">!</a>, any computer<a id="4178">!</a> file system saves and retrieves data<a id="4194">!</a> as a sequential stream of characters.</p>
  </div>

  <div class="chp-section" data-sect-num="1" data-sect-name="Concept: Serial Input and Output (I/O)">
    <!-- Serial Input and Output -->
    <h2 id="8_1">8.1 Concept: Serial Input and Output (I/O)</h2>
    <div class="container clearfix">
      <div class="float-sm-right card style-points">
        <p class="card-title">Style Points 8.1</p>
        <p class="card-text">
          In a practical sense, saving workspace data<a id="4195">!</a> is very rarely an
          appropriate approach to saving work because it saves the
          results but not the code<a id="4161">!</a> that generated the results. It is
          almost always better to save the scripts<a id="4498">!</a> and raw data<a id="4196">!</a> that
          created the workspace. For example, this is a good idea
          when you have a lengthy computation (perhaps one run
          overnight) to prepare data<a id="4197">!</a> for<a id="4363">!</a> a display. You could split that
          script into two halves. The first half would do the overnight
          calculation and save the workspace. The second part can
          then read the workspace quickly, and you can develop
          sophisticated ways to display the data<a id="4198">!</a> without having to
          re-run the lengthy calculations.
        </p>
      </div>
      <p>Although the media used to store data<a id="4199">!</a> have changed, the fundamental operations<a id="4471">!</a> needed to read and write sequential files<a id="4331">!</a> have not.  In order to create a paper tape from data<a id="4200">!</a> in the computer<a id="4179">!</a>, access to the tape punch was prepared, the leader and then the characters then a trailer are sent one item at a time to the punch.  When all the items had been sent, access to the punch was closed.  To read a paper tape, its leader was loaded into the tape reader and the reader motion started. As each character<a id="4135">!</a> passed the read head, it was received and stored in the computer<a id="4180">!</a> until no characters were left. The modern world of serial processing follows exactly the same pattern.</p>
      <p>When a program<a id="4476">!</a> opens a file by name for<a id="4364">!</a> reading, it continually requests data<a id="4201">!</a> from the file data<a id="4202">!</a> stream until the end<a id="4301">!</a> of the file is reached. As the data<a id="4203">!</a> are received, the program<a id="4477">!</a> must identify any special characters that define specific data<a id="4204">!</a> characteristics and use them to format<a id="4390">!</a> the data<a id="4205">!</a> to reconstruct the organization of the data<a id="4206">!</a> stored in the file. Similarly, when writing data<a id="4207">!</a> to a file, the program<a id="4478">!</a> must serialize the data<a id="4208">!</a>, and include special character<a id="4136">!</a> to preserve the organization of the data<a id="4209">!</a>.  As we consider workspace I/O and high-level<a id="4434">!</a> I/O, most of these operations<a id="4472">!</a> will be invisible to the user inside the built-in functions.  However, when discussing text<a id="4523">!</a> files<a id="4332">!</a>, we will need to implement all of these concepts in our code<a id="4162">!</a>.</p>
    </div>
  </div>

  <div class="chp-section" data-sect-num="2" data-sect-name="Workspace I/O">
    <!-- Workspace I/O -->
    <h2 id="8_2">8.2 Workspace<a id="4578">!</a> I/O</h2>
    <div class="container">
      <p>The MATLAB<a id="4448">!</a> language defines the tools to save your complete workspace to a file with the <code>save</code> command and reload it with the <code>load</code> command. If you provide a file name with the <code>save</code> command, a file of that name will be written into your current directory in such a form that a subsequent <code>load</code> command with that file name will restore the saved workspace. By convention, these files<a id="4333">!</a> will have a <code>".mat"</code> extension. If you do not provide a file name, the workspace is saved as <code>matlab.mat</code>.  If you are using MATLAB<a id="4449">!</a>, you can also identify specific variables that you want to save — either by listing them explicitly or by providing logical<a id="4440">!</a> expressions to indicate the variable<a id="4569">!</a> names. For example:<br>
      <code>>> save mydata.mat a b c* </code><a id="4163">!</a><br>
      would save the variables  <code>a</code> and  <code>b</code> and any variable<a id="4570">!</a> beginning with the letter  <code>c</code>.</p>
      <p>To recover the data<a id="4210">!</a>:<br>
      <code>>> clear<a id="4156">!</a>  % if necessary to remove all existing variables from the workspace<br>
      >> load mydata.mat</code><a id="4164">!</a></p>
      <p>For more details, consult the MATLAB<a id="4450">!</a> help<a id="4430">!</a> documentation<a id="4295">!</a>.</p>
    </div>
  </div>

  <div class="chp-section" data-sect-num="3" data-sect-name="High-Level I/O Functions">
    <!-- High Level I/O Functions -->
    <h2 id="8_3">8.3 High-Level I/O Functions</h2>
    <div class="container">
      <p>We turn to a more specific case<a id="4116">!</a> of file I/O in which we expect to load a complete file from external sources with one function<a id="4403">!</a> call, thereby hiding from the user all the details of file access. We might wish to process that data<a id="4211">!</a>, and perhaps save the modified data<a id="4212">!</a> back to the file system with one function<a id="4404">!</a> call.  When  you  try  to process  data<a id="4213">!</a>  from  some  unknown source, it is difficult to write code<a id="4165">!</a> to process the data<a id="4214">!</a> without some initial exploration   of   the   nature   and organization of that data<a id="4215">!</a>. So a good habit is to explore the data<a id="4216">!</a> in a file by whatever means you have available and then decide how to process the data<a id="4217">!</a> according to your observations. Most programming<a id="4488">!</a> languages require the programmer to write detailed programs to read and write files<a id="4334">!</a>, especially those produced by other application programs or data<a id="4218">!</a> acquisition packages. Fortunately for<a id="4365">!</a> MATLAB<a id="4451">!</a> programmers, much of this messy work has been built into special file readers and writers. Table 8.1 identifies the type of data<a id="4219">!</a>, the name of the appropriate reader and writer, and the internal form in which MATLAB<a id="4452">!</a> returns the data<a id="4220">!</a>.</p>
      <table class="table">
        <caption>Table 8.1: File Types</caption>
        <thead>
          <tr>
            <th>File</th><th>Content</th><th>Reader</th><th>Writer</th><th>Data Format</th><th>Extensions</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Binary</td><td>Anything</td><td><code>fread(...)</code></td><td><code>fwrite(...)</code></td><td>Any</td><td>various</td>
          </tr>
          <tr>
            <td>Text</td><td>ASCII<a id="4086">!</a> Codes</td><td>See 8.4</td><td>See 8.4</td><td>Text Lines</td><td><code>.txt</code> etc</td>
          </tr>
          <tr>
            <td>CSV</td><td>Comma Separated Values</td><td><code>readcell(<a id="4489">!</a>...)</code></td><td><code>writecell(<a id="4580">!</a>...)</code><td><code>double</code> array<a id="4091">!</a></td><td><code>.csv</code></td>
          </tr>
          <tr>
            <td>Delimited</td><td>Numbers separated  by delimiters</td><td><code>readcell(<a id="4490">!</a>...)</code></td><td><code>writecell(<a id="4581">!</a>...)</code></td><td><code>double</code> array<a id="4092">!</a></td><td><code>.txt</code> etc</td>
          </tr>
          <tr>
            <td>Excel<a id="4311">!</a></td><td>Spread Sheet</td><td><code>readcell(<a id="4491">!</a>...)</code></td><td><code>writecell(<a id="4582">!</a>...)</code><td><code>cell<a id="4118">!</a></code> array<a id="4093">!</a></td><td><code>.xls, .xlsx</code></td>
          </tr>
          <tr>
            <td>Image</td><td>Color image</td><td><code>imread(...)</code></td><td><code>imwrite(...)</code></td><td><code>uint8</code> array<a id="4094">!</a></td><td><code>.jpg </code>etc</td>
          </tr>
          <tr>
            <td>Audio</td><td>Multichannel Sound</td><td><code>audioread(<a id="4108">!</a>...)</code></td><td><code>audiowrite(...)</code><td><code>double</code> vector</td><td><code>.wav<a id="4574">!</a>, .mp3, .avi</code> etc</td>
          </tr>
          <tr>
            <td>Workspace<a id="4579">!</a></td><td>variable<a id="4571">!</a> values</td><td><code>load ...</code></td><td><code>save ...</code><td>anything</td><td><code>.mat</code></td>
          </tr>
        </tbody>
      </table>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Exploration">
      <!-- Exploration -->
      <h3 id="8_3_1">8.3.1	Exploration</h3>
      <div class="container">
        <p>The types of data<a id="4221">!</a> of immediate interest are text<a id="4524">!</a> files<a id="4335">!</a> and spreadsheets<a id="4503">!</a>. In Table 8.1 notice that the delimited<a id="4284">!</a> text<a id="4525">!</a> files<a id="4336">!</a> are presumed to contain numerical<a id="4461">!</a> values, whereas the spreadsheet data<a id="4222">!</a> may be either numerical<a id="4462">!</a> data<a id="4223">!</a> stored as doubles or string data<a id="4224">!</a> stored in cell<a id="4119">!</a> arrays. Typically, text<a id="4526">!</a> files<a id="4337">!</a> are delimited<a id="4285">!</a> by a special character<a id="4137">!</a> (comma, tab, or anything else<a id="4298">!</a>) to designate the column<a id="4167">!</a> divider and a new-line character<a id="4138">!</a> to designate the rows. Once the data<a id="4225">!</a> are imported, all of our normal array<a id="4095">!</a> and matrix<a id="4459">!</a> processing tools can be applied. The exception to this rule is the plain text<a id="4527">!</a> reader that must be provided with a format<a id="4391">!</a> specifier to define the data<a id="4226">!</a>, and the names of the variables in which the data<a id="4227">!</a> are to be stored.  So when you are approached with a file, the file extension (the part of the file name after the dot<a id="4296">!</a>) gives you a significant clue to the nature of the data<a id="4228">!</a>. For example, if it is the output from a spreadsheet, you should open the data<a id="4229">!</a> in that spreadsheet program<a id="4479">!</a> to explore its contents and organization. [Typically, spreadsheet data<a id="4230">!</a> will not open well in a plain text<a id="4528">!</a> editor.] If you do not recognize the file extension as coming from a spreadsheet, try opening the file in a plain text<a id="4529">!</a> editor such as that used for<a id="4366">!</a> your scripts<a id="4499">!</a> and functions and see if the data<a id="4231">!</a> are legible. You should be able to discern the field<a id="4320">!</a> delimiters and the content of each line if the file contains plain text<a id="4530">!</a>.</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Spreadsheets">
      <!-- Spreadsheets -->
      <h3 id="8_3_2">8.3.2 Spreadsheets</h3>
      <div class="container">
        <p>Excel<a id="4312">!</a> is a Microsoft product that implements spreadsheets<a id="4504">!</a>. Spreadsheets are rectangular arrays containing labeled rows and columns of cells. The data<a id="4232">!</a> in the cells may be numbers<a id="4460">!</a>, strings<a id="4511">!</a>, or formulae that combine the data<a id="4233">!</a> values in other cells. Because of this computational capability, spreadsheets<a id="4505">!</a> can be used to solve many problems, and most offer flexible plotting packages for<a id="4367">!</a> presenting the results in colorful charts. There are occasions, however, when we need to apply the power of the MATLAB<a id="4453">!</a> language to the data<a id="4234">!</a> in a spreadsheet.  MATLAB<a id="4454">!</a> provides a reader for<a id="4368">!</a> Excel<a id="4313">!</a> spreadsheets<a id="4506">!</a> that gives you a significant amount of flexibility in retrieving the data<a id="4235">!</a> from the spreadsheet. Consider the typical set of data<a id="4236">!</a> in a spreadsheet named grades.xls shown in Table 8.2.</p>
        <table class="table table-bordered">
          <caption>Table 8.2: Sample Spreadsheet Data</caption>
          <thead>
            <tr>
              <th>Name</th><th>Age</th><th>Grade</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Joe</td><td>22</td><td>83</td>
            </tr>
            <tr>
              <td>Sally</td><td>98</td><td>99</td>
            </tr>
            <tr>
              <td>Charlie</td><td>21</td><td>56</td>
            </tr>
            <tr>
              <td>Mary</td><td>23</td><td>89</td>
            </tr>
            <tr>
              <td>Ann</td><td>19</td><td>51</td>
            </tr>
          </tbody>
        </table>
        <p>The goal of your spreadsheet reader is to separate the text<a id="4531">!</a> and numerical<a id="4463">!</a> portions of the spreadsheet. The parameter consumed by your spreadsheet reader is the name of the file; you can ask for<a id="4369">!</a> up to three return variables: the first will hold<a id="4435">!</a> all the numerical<a id="4464">!</a> values in an array<a id="4096">!</a> of doubles; the second will hold<a id="4436">!</a> all the text<a id="4532">!</a> data<a id="4237">!</a> in cell<a id="4120">!</a> arrays; and the third, if you request it, will hold<a id="4437">!</a> both string and numerical<a id="4465">!</a> data<a id="4238">!</a> in cell<a id="4121">!</a> arrays (try Exercise 8.1).</p>
        <div class="exercise"><iframe src="..\exercises\exercise_8_1html.html"></iframe></div>
        <p><code>readcell(<a id="4492">!</a>...)</code> outputs the contents of the file as a cell<a id="4122">!</a> array<a id="4097">!</a>. In the cell<a id="4123">!</a> array<a id="4098">!</a>, each spot is a cell<a id="4124">!</a> containing the information from the spreadsheet, with a double inside if there was a number, char inside if there was text<a id="4533">!</a>, and missing if it was an empty<a id="4299">!</a> cell<a id="4125">!</a>; <code>missing</code> is its own data<a id="4239">!</a> type.</p>
        <p>Frequently, after processing data<a id="4240">!</a>, you need to write the results back to a spreadsheet. Excel<a id="4314">!</a> spreadsheets<a id="4507">!</a> can be written using:<br>
        <code>writecell(<a id="4583">!</a>&lt;data<a id="4241">!</a>&gt;, &lt;filename&gt;)</code><br>
        where <code>&lt;data<a id="4242">!</a>&gt;</code> is the data<a id="4243">!</a> source (a cell<a id="4126">!</a> array<a id="4099">!</a>) and <code>&lt;filename&gt;</code> is the name of the file.</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="Delimited Text Files">
      <h3 id="8_3_3">8.3.3	Delimited Text Files</h3>
      <div class="container">
        <p>If information is not available specifically in spreadsheet form, it can frequently be presented in text<a id="4534">!</a> file form. If the data<a id="4244">!</a> in a text<a id="4535">!</a> file are numerical<a id="4466">!</a> values only and are organized in a reasonable format<a id="4392">!</a>, you can read the file directly into an array<a id="4100">!</a>. It is necessary that the data<a id="4245">!</a> values are separated by commas, spaces, or tab characters [See 6.3.2 about delimiters]. Rows in the data<a id="4246">!</a> are separated as expected by a new-line character<a id="4139">!</a> combination [See 8.4]. These values might be saved in a file named, for<a id="4370">!</a> example, <code>nums.txt</code>.</p>
        <table class="table table-borderless">
          <caption>Table 8.3: Delimited Data</caption>
            <tbody>
              <tr><td>19,78,42</td></tr>
              <tr><td>22,83,100</td></tr>
              <tr><td>98,99,34</td></tr>
              <tr><td>21,56,12</td></tr>
              <tr><td>23,89</td></tr>
              <tr><td>19,51</td></tr>
            </tbody>
        </table>
        <p>If the text<a id="4536">!</a> file contains only representation of data<a id="4247">!</a> separated by delimiters, it can be read using this:<br>
        <code>arr = readcell(<a id="4493">!</a>&lt;file_name&gt;, &lt;Name&gt;, &lt;Value&gt;)</code>,<br>
        where the <code>filename</code> parameter is the name of the file. The <code>readcell(<a id="4494">!</a>...)</code> function<a id="4405">!</a> produces a cell<a id="4127">!</a> array<a id="4101">!</a> containing the data<a id="4248">!</a> values with default delimiter<a id="4289">!</a> <code>','</code>. If you use a delimiter<a id="4290">!</a> other than a comma, you can specify <code>'Delimiter'</code> as the second input and <code>&lt;delimiter<a id="4291">!</a>_value<a id="4561">!</a>&gt;</code>, for<a id="4371">!</a> example <code>':'</code> as the third input. The second and third inputs are optional.</p>
        <p>Try reading delimited<a id="4286">!</a> files<a id="4338">!</a> in Exercise 8.2 where Table 8.3 shows the content of the file <code>nums.txt</code>.  Notice that the array<a id="4102">!</a> elements<a id="4297">!</a> where data<a id="4249">!</a> are not supplied are filled with class <code>missing</code>.</p>
        <div class="exercise"><iframe src="..\exercises\exercise_8_2html.html"></iframe></div>
        <p>Delimited data<a id="4250">!</a> files<a id="4339">!</a> can be written using:<br>
        <code>writecell(<a id="4584">!</a>&lt;data<a id="4251">!</a>&gt;, &lt;filename&gt;, &lt;Name&gt;, &lt;Value&gt;)</code><br>
        where <code>&lt;data<a id="4252">!</a>&gt;</code> is the data<a id="4253">!</a> source (a cell<a id="4128">!</a> array<a id="4103">!</a>) and <code>&lt;filename&gt;</code> is the name of the file. The third and fourth inputs can specify the delimiting correct, using <code>'Delimiter'</code> as the third input and <code>&lt;delimiter<a id="4292">!</a>_value<a id="4562">!</a>&gt;</code>, for<a id="4372">!</a> example <code>':'</code> as the fourth input. If  the  delimiting  character<a id="4140">!</a>  is  not  specified,  it  is  presumed  to  be  a comma.</p>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="4" data-sect-name="Lower-Level File I/O">
    <!-- Lower Level File I/O -->
    <h2 id="8_4">8.4 Lower-Level File I/O</h2>
    <div class="container">
      <p>We will assume here that the file in which we are interested contains text<a id="4537">!</a> data<a id="4254">!</a> in the form of ASCII<a id="4087">!</a> character<a id="4141">!</a> codes.  Files for<a id="4373">!</a> which this is not the case<a id="4117">!</a> have to be treated as binary<a id="4112">!</a> files<a id="4340">!</a> which we will not discuss further. The MATLAB<a id="4455">!</a> language provides a set of lower-level<a id="4442">!</a> I/O functions that permit general-purpose text<a id="4538">!</a> file reading and writing. The following is a partial discussion of these functions that is sufficient for<a id="4374">!</a> most text<a id="4539">!</a> file processing needs. Recall in the discussion of the paper tape in 8.1 that once the tape has been loaded into the tape reader and begins to move (the file is opened), the individual characters are delivered to the calling program<a id="4480">!</a> until it reached the end<a id="4302">!</a> when the tape reader is stopped by the calling program<a id="4481">!</a> (the file is closed). Today, text<a id="4540">!</a> files<a id="4341">!</a> are delivered on many kinds of media, but to the calling program<a id="4482">!</a>, the same three features are required:
      <ol>
        <li>the file must be successfully opened,</li>
        <li>data<a id="4255">!</a> characters must be received by the calling program<a id="4483">!</a>, and</li>
        <li>the files<a id="4342">!</a> should be closed.</li>
      </ol></p>
      <p>Although MATLAB<a id="4456">!</a> may close<a id="4157">!</a> the file automatically when your program<a id="4484">!</a> exits, it is good practice to actually close<a id="4158">!</a> the file yourself when you have finished reading it.</p>
      <p><b>The End-Of-File (EOF) Character:</b> The following question also arises: in the paper tape days, how do you know when you have reached the end<a id="4303">!</a> of the data<a id="4256">!</a>?  If you let the tape read until you reach the end<a id="4304">!</a> of the physical tape, no fresh data<a id="4257">!</a> will be passing the read heads and some kind of error condition will arise.  By convention, it was decided that a specific non-printable character<a id="4142">!</a> called 'EOF' with ASCII<a id="4088">!</a> value<a id="4563">!</a> 26 would be written at the end<a id="4305">!</a> of the data<a id="4258">!</a> on the tape. When that character<a id="4143">!</a> was read from the tape, the calling program<a id="4485">!</a> is informed that the end<a id="4306">!</a> of the tape has been reached and the tape can be stopped (the file closed). While the modern era has many different ways of delivering data<a id="4259">!</a> from a file to your program<a id="4486">!</a>, the need is still present to identify when there are no more data<a id="4260">!</a> to process, and the EOF character<a id="4144">!</a> is still used to terminate file reading.</p>
      <p><b>New Line Markers:</b> There is another need for<a id="4375">!</a> special markers in a text<a id="4541">!</a> file inherited again from the paper tape era.  The tape reader was at that time directly connected to a primitive typewriter style printer of which the classic example was called the ASR-33. Each character<a id="4145">!</a> read from the tape was typed onto the paper and the carriage holding the print mechanism moved one place to the right waiting for<a id="4376">!</a> the next character<a id="4146">!</a>. When the carriage reached the 80th character<a id="4147">!</a> position, it could no longer advance to the right.  If nothing special happened, all the remaining characters on the tape were printed at the same location - not really what you want. In order to continue<a id="4183">!</a> printing legibly, two different actions were required, triggered by reading two different non-printable characters:
      <ul>
        <li>return the carriage to the first column<a id="4168">!</a> by driving it all the way to the left, (CR, ASCII<a id="4089">!</a> 13), and</li>
        <li>move the paper up so that the next character<a id="4148">!</a> will type below the previous line (LF, ASCII<a id="4090">!</a> 10).</li>
      </ul></p>
      <p>In the modern era, of course, there may be no printing carriage to move to the left or paper to move up, but initially, the CR/LF sequence was still required to begin the next line of text<a id="4542">!</a>.  However, at some point, somebody said to themselves that it was wasting storage space to use two characters where only one action is required. Some people decided to leave off the CR, and some decided to leave off the LF, and so we are now blessed with three different possible end<a id="4307">!</a>-of-line indicators: CR, LF, or CR/LF.  This dilemma is usually hidden from the user, but can occasionally cause issues when moving text<a id="4543">!</a> files<a id="4343">!</a> from an Apple computer<a id="4181">!</a> to a Windows machine or a Unix machine.</p>
      <p>In general, when reading a file, the file must be opened to return a value<a id="4564">!</a> to be used by subsequent functions to identify its data<a id="4261">!</a> stream. We usually refer to this identifier as the “file handle.” After the file contents have been manipulated, the file must be closed to complete the activity.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Opening and Closing Files">
      <!-- Opening and Closing Files -->
      <h3 id="8_4_1">8.4.1	Opening and Closing Files</h3>
      <div class="container">
        <p>To open a file for<a id="4377">!</a> reading or writing, use <code>fh = fopen(<a id="4352">!</a> &lt;file_name&gt;, &lt;purpose&gt;)</code>
        where <code>fh</code> is a file handle used in subsequent function<a id="4406">!</a> calls to identify this particular input stream, <code>&lt;file_name&gt;</code> is the name of the file, and <code>&lt;purpose&gt;</code> is a string specifying the purpose for<a id="4378">!</a> opening the file. The most common purposes are <code>'r'</code> to read the file, <code>'w'</code> to write it, or <code>'a'</code> to append to an existing file. See the help<a id="4431">!</a> files<a id="4344">!</a> for<a id="4379">!</a> more complex situations. If the purpose is <code>'r'</code>, the file must already exist; if <code>'w'</code> and the file already exists, it will be overwritten; if <code>'a'</code> and the file already exists, the new data<a id="4262">!</a> will be appended to the end<a id="4308">!</a>. The consequence of failure to open the file is indicated by returning a file handle of –1 rather than a positive number. It is good practice to check the file handle upon return from a file open command.</p>
        <p>To close<a id="4159">!</a> the file, call <code>fclose(<a id="4315">!</a> fh )</code>.
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Reading Text Files">
      <!-- Reading Text Files -->
      <h3 id="8_4_2">8.4.2	Reading Text Files</h3>
      <div class="container">
        <p>It is possible, but rarely appropriate, to read one character<a id="4149">!</a> at a time from a text<a id="4544">!</a> file using <code>fread(...)</code> or <code>fwrite(...)</code> and we will not consider that here.  Rather, we will make use of the presence of the New Line Markers (whatever they are) to read and write whole lines or more from the file.</p>
        <p>To read a file, three levels of support are provided: reading whole lines with or without the new-line character<a id="4150">!</a>, parsing into tokens with delimiters, or parsing into cell<a id="4129">!</a> arrays using a format<a id="4393">!</a> string:
        <ul>
          <li>To read a whole line including the new-line character<a id="4151">!</a>, use <code>str = fgets(<a id="4318">!</a> fh )</code> that will return each line as a string until the end<a id="4309">!</a> of the file, when the value<a id="4565">!</a> –1 is returned instead of a string. To leave out each new-line character<a id="4152">!</a>, use <code>fgetl(<a id="4316">!</a>...)</code> instead (the last character<a id="4153">!</a> is a lowercase L).</li>
          <li>To parse each line into tokens (elementary text<a id="4545">!</a> strings<a id="4512">!</a>) separated by white space delimiters, use a combination of <code>fgetl(<a id="4317">!</a>...)</code> and the tokenizer function<a id="4407">!</a> <code>[&lt;tk&gt;, &lt;rest&gt;] = strtok( &lt;ln&gt; )</code>; where <code>&lt;tk&gt;</code> is a string token<a id="4557">!</a>, <code>&lt;rest&gt;</code> is the remainder of the line, and <code>&lt;ln&gt;</code> is a string to be parsed into tokens.</li>
          <li>you could try to parse a line according to a specific format<a id="4394">!</a> string into a cell<a id="4130">!</a> array<a id="4104">!</a> by using
          <code>ca = textscan(<a id="4556">!</a> fh, &lt;format<a id="4395">!</a>&gt; );</code>
          where <code>ca</code> is the resulting cell<a id="4131">!</a> array<a id="4105">!</a>, <code>fh</code> is the file handle, and <code>&lt;format<a id="4396">!</a>&gt;</code> is a format<a id="4397">!</a> control string such as we used for<a id="4380">!</a> <code>sscanf(<a id="4510">!</a>...)</code> in para 6.3.2.</li>
        </ul>
        <p>When the read function<a id="4408">!</a> finds the EOF character<a id="4154">!</a>, instead of returning a string, it returns <code>-1</code>. This is actually the reason to exit a while<a id="4576">!</a> loop processing the text<a id="4546">!</a> which can conveniently be accomplished with the <code>ischar(<a id="4439">!</a>...)</code> function<a id="4409">!</a>.</p>
        <p>To illustrate the use of these functions for<a id="4381">!</a> reading a text<a id="4547">!</a> file, the script in Listing 8.1 shows a script that will list any text<a id="4548">!</a> file in the Command<a id="4176">!</a> window.</p>
        <div class="listing"><iframe src="..\listings\listing_08_1_livehtml.html"></iframe></div>
        <p>As an example of the use of a strtok(...), consider the code<a id="4166">!</a> shown in Listing 8.2, which performs the same function<a id="4410">!</a> as Listing 8.1 but uses tokens.</p>
        <div class="listing"><iframe src="..\listings\listing_08_2_livehtml.html"></iframe></div>
        <p>Run the scripts<a id="4500">!</a> in Listings 8.1 and 8.2. This will show the difference in output results between the conventional listing script and the tokenizing lister. With the tokenizer, we see each individual token<a id="4558">!</a> (really, each word in a normal text<a id="4549">!</a> file) separately listed.</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="Writing Text Files">
      <!-- Writing Text Files -->
      <h3 id="8_4_3">8.4.3	Writing Text Files</h3>
      <div class="container">
        <p>Once a file has been opened for<a id="4382">!</a> writing, the <code>fprintf(<a id="4400">!</a>...)</code>function<a id="4411">!</a> can be used to write to the file by including its file handle as the first parameter. For example, Listing 8.3 is a minor alteration to Listing 8.1, copying a text<a id="4550">!</a> file instead of listing it in the Command<a id="4177">!</a> window.</p>
        <div class="listing"><iframe src="..\listings\listing_08_3_livehtml.html"></iframe></div>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="5" data-sect-name="Engineering Example - Spreadsheet Data">
    <!-- Engineering Example -->
    <h2 id="8_5">8.5	Engineering Example &mdash; Spreadsheet Data</h2>
    <div class="container">
      <div class="float-sm-right card">
        <img src="..\Images\Fig_8_2.JPG" alt="Figure 8.2" class="fig card-image">
        <p class="figure-name card-title">Figure 8.2: Spreadsheet Data</p>
      </div>
      <p>Frequently, engineering<a id="4310">!</a> data<a id="4263">!</a> are provided in spreadsheets<a id="4508">!</a>. Here we will adapt the structure<a id="4516">!</a> assembly problem from Chapter 7. The script for<a id="4383">!</a> that solution created the data<a id="4264">!</a> using a constructor function<a id="4412">!</a>. Consider the situation in which the data<a id="4265">!</a> are provided in a spreadsheet such as that shown in Figure 8.2. To make it more interesting, we imagine that the spreadsheet would have numerical<a id="4467">!</a> information such as the node's coordinates and an index value<a id="4566">!</a> which other users might need, but we don't. We have to start by examining the layout of the data<a id="4266">!</a> and the process necessary to extract what we need. Based on the spreadsheet, there is both string and numerical<a id="4468">!</a> data<a id="4267">!</a>.</p>
      <p>The other concern is that there are a different number of connections on each row of the sheet. Our solution to the beams problem requires the connections to be placed in a cell<a id="4132">!</a> array<a id="4106">!</a>. When a connection is present, it is a string. When it is not present, we can see from the behavior of the raw data<a id="4268">!</a> that the contents of empty<a id="4300">!</a> cells appear as a cell<a id="4133">!</a> containing <code>missiong</code>.</p>
      <p>We need a function<a id="4413">!</a> that will read this spread sheet and produce the same model of the structure<a id="4517">!</a> used in Chapter 7. Such a function<a id="4414">!</a> is shown in Listing 8.4.</p>
      <div class="listing"><iframe src="..\listings\listing_08_4_livehtml.html"></iframe></div>
      <p>To test this function<a id="4415">!</a>, replace the structure<a id="4518">!</a> array<a id="4107">!</a> construction in lines 1–22 of Listing 7.6 in Chapter 7 with the following line:<br>
      <code>data<a id="4269">!</a> = readStruct(<a id="4496">!</a>'beams.xlsx');</code><br>
      The script should then produce the same results as before.</p>
    </div>
  </div>

  <!-- Chapter Summary -->
  <h2>Chapter Summary</h2>
  <div class="container">
    <p>We have described three levels of capability for<a id="4384">!</a> reading and writing files<a id="4345">!</a>:
    <ul>
      <li>The save and load operators<a id="4474">!</a> allow you to save variables from the workspace and restore them to the workspace</li>
      <li>Specialized functions read and write spreadsheets<a id="4509">!</a> and delimited<a id="4287">!</a> text<a id="4551">!</a> files<a id="4346">!</a></li>
      <li>Lower-level functions provide the ability to open and close<a id="4160">!</a> files<a id="4347">!</a>, and to read and write text<a id="4552">!</a> files<a id="4348">!</a> in any form that is required</li>
    </ul>
  </div>
<h2>Self Test</h2>
<div class="container">

Use the following questions to check your understanding of the material in this
chapter:
<h3>True or False</h3>
<ol>
<li>All data<a id="4270">!</a> files<a id="4349">!</a> should be treated as a sequential series of characters.</li>
      <li> When you save a workspace,<a id="4577">!</a> you are actually saving the scripts<a id="4501">!</a> that
generate the data<a id="4271">!</a> in the workspace.</li>
      <li>MATLAB<a id="4457">!</a> reads strings<a id="4513">!</a> from tab- or comma-delimited<a id="4288">!</a> files<a id="4350">!</a> by
recognizing the double quotes that delimit strings<a id="4514">!</a>.</li>
      <li>If you use fopen(<a id="4353">!</a>...) to open an existing file and write to it, the
original data<a id="4272">!</a> in the file will be overwritten.</li>
      <li>The function<a id="4416">!</a> fgets(<a id="4319">!</a>fh) does not always return a string.</li>
</ol>
<h3>Fill in the Blanks</h3>
<ol>
<li>In general, data<a id="4273">!</a> files<a id="4351">!</a> contain text<a id="4553">!</a> that represents the ________ of the
data<a id="4274">!</a> and control characters that specify the _____________ of the
data<a id="4275">!</a>.</li>
      <li>The MATLAB<a id="4458">!</a> readcell(<a id="4495">!</a>...) function<a id="4417">!</a> returns three results: the
____________ in a(n) __________, the __________ in a(n) __________,
and _____________ in a ____________.</li>
      <li>When using dlmread(<a id="4293">!</a>...) to populate a(n) ___________, any
unassigned values are ___________.</li>
      <li>When using fopen(<a id="4354">!</a>...) , the consequence of failure to open the file
is _____________.</li>
</ol>

<h3>Programming Projects</h3>
<ol>
<li>Write a script that performs the following operations<a id="4473">!</a>:
<ul>
<li>Set the value<a id="4567">!</a> of variables a, b, c1, c2, c3, and x . The values
don’t matter, except you should set c2 to 42.</li>
      <li>Save the values of all the variable<a id="4572">!</a> except x to mydata.mat using
the save operation<a id="4470">!</a>.</li>
      <li>Set the value<a id="4568">!</a> of c2 to -99.</li>
      <li>Load myData.mat and check that c2 is now 42.</li>
      <li>Clear all variables.</li>
      <li>Load myData.mat again and note that the variable<a id="4573">!</a> x is not present.
</ul></li>
      <li>One requirement for<a id="4385">!</a> all freshmen classes<a id="4155">!</a> is an issue of a 'Standing'
during the middle of the term. The results are either Satisfactory (S)
or Unsatisfactory (U) . Since you are the office employee in charge of
issuing these grades, you decide to write a function<a id="4418">!</a> called
midtermGrades to help<a id="4432">!</a> yourself. You discover that the grades are on
a spreadsheet organized like this:
<ul>
<li>Each student is represented by one row on the spreadsheet.</li>
      <li>Unfortunately, since these sheets are created by different
instructors, they are not necessarily consistent in their layout.</li>
      <li>The first row will contain the following six strings<a id="4515">!</a> in any order:<br>
'name', 'math', 'science', 'english', 'history', and 'cs'.</li>
      <li>Under the name column<a id="4169">!</a> will be a string with the student's name.</li>
      <li>Grades in the other columns can be 'A', 'B', 'C', 'D', 'F', or
'W</li>
      <li>A student's grade is 'S' if there are more A's, B's and C's than
not.</li>
      </ul>
Your function<a id="4419">!</a> should print out grades ready to be entered consisting
of a table with headings 'Name' and 'S/U'</li>
      <li>Write a function<a id="4420">!</a> called genStats that will compute statistics for<a id="4386">!</a> a set
of class grades. The grades will be stored in a spreadsheet, and your
function<a id="4421">!</a> will compute statistics and then write the grades along
with the statistics to another spreadsheet. <br>
You may assume that the initial spreadsheet will have a format<a id="4398">!</a>
similar to:<br>
Student Name Exam1 Exam2 Exam3 ...<br>
student 1 100 76 45 ...<br>
student 2 34 83 89 ...<br>
The first row is the header row, and the first column<a id="4170">!</a> is the list of
student names. There may be any number of exam grades, and there
may be any number of students. Although, you may assume that
there will be at least one student and that there will be at least one
exam.<br>
Also, every student will have a grade for<a id="4387">!</a> every exam.
Your function<a id="4422">!</a> should only have one input (a string containing the
file name of the grades file) and no outputs. You must write your
function<a id="4423">!</a> to perform the following steps:
<ul>
<li>Calculate the average grade of each student (across the rows) and
store it in a new column<a id="4171">!</a> called 'Average' (to the right of the last
exam grade).</li>
      <li>Calculate the deviation of each student's overall average
(calculated in step a) from the maximum student average and
store it in a new column<a id="4172">!</a> called 'Deviation' (to the right of the
'Average' column<a id="4173">!</a>). Note that deviation is just the difference
between the maximum student average and a student's overall
average.</li>
      <li>Calculate the average of each column<a id="4174">!</a>'s data<a id="4276">!</a> (each exam), the
averages calculated in step a, and the deviations calculated in
step b, then store these averages below the last row of the original
data<a id="4277">!</a> and name that row 'Total Average'.</li>
      <li>Write the original data<a id="4278">!</a> along with all of the new data<a id="4279">!</a> to a file
named 'Stats_&lt;name_of_original_file&gt;' (so if the inputted file
name was 'Student_Grades.csv' , the new data<a id="4280">!</a> would be written
to the file named 'Stats_Student_Grades.csv' ).</li>
      <li>Construct a spreadsheet with suitable test data<a id="4281">!</a> and use it to test
your function<a id="4424">!</a>.</li>
      </ul></li>
      <li>Write a function<a id="4425">!</a> called replaceStr . Your function<a id="4426">!</a> should take in the
following order:<br>
filename: A string that corresponds to the name of a file<br>
wordA: A string that is a word (contains no spaces)<br>
wordB: Another string that is also a word (contains no spaces)<br>
Your function<a id="4427">!</a> should do the following:
<ul>
<ul>Read the file a line at a time.</li>
      <li>On each line, replace every occurrence of wordA with wordB.</li>
      <li>Write the modified text<a id="4554">!</a> file with the same name as the original
file, but preprended with 'new_' . For instance, if the input
filename was 'data<a id="4282">!</a>.txt' , the output filename would be 'new_
data<a id="4283">!</a>.txt'.</li>
      <li>Prepare a test file by downloading a text<a id="4555">!</a> file from the Internet.
For example, the complete works of Shakespeare are accessible at
http://www.william-shakespeare.info</li>
      <li>Examine the file for<a id="4388">!</a> repeated words, and test your function<a id="4428">!</a> by
writing a script that replaces frequently repeated words.</li>
</ul></li>
 
</ol>
</div>
</div>


</body>
</html>


<!DOCTYPE HTML>
<html>
<head>
	<title>02_Basics.htm</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
	<link rel="stylesheet" href="styles/styles.css" />
	<script async src="./javascript/index.js"></script>
</head>


<body>

<div class="nav-obj"><nav class="nav sidenav nav-scroll navbar-dark bg-dark"><ul class="navbar-nav"><li class="nav-item"><a class="nav-link" href="Preface.htm">Preface</a></li><li class="nav-item"><div class="nav-link"><a href="01_Introduction.htm#1">1 Introduction&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_1"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="01_Introduction.htm#1_1">1.1 Background</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="01_Introduction.htm#1_2">1.2 History of Computer Architectures&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_1_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_1_2"><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_2_1">1.2.1 Babbage’s Difference Engine</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_2_2">1.2.2 Colossus</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_2_3">1.2.3 The von Neumann Architecture</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="01_Introduction.htm#1_3">1.3 Modern Computer Software&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_1_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_1_3"><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_3_1">1.3.1 Operating Systems</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_3_2">1.3.2 Software Tools</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_3_3">1.3.3 Programming Languages</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_3_4">1.3.4 Running a Computer Program</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_3_5">1.3.5 Running an Interpreted Program</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="01_Introduction.htm#1_4">1.4 Anticipated Outcomes&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_1_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_1_4"><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_4_1">1.4.1 Introduction to MATLAB</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_4_2">1.4.2 Learning Programming Concepts</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_4_3">1.4.3 Problem-Solving Skills</a></div></li></ul></li></ul></li><li class="nav-item"><div class="nav-link"><a href="02_Basics.htm#2">2 Basics&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_2"><li class="nav-item secnav"><div class="nav-link"><a href="02_Basics.htm#2_1">2.1 Programming Language Background&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_2_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_2_1"><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_1_1">2.1.1 Abstraction</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_1_2">2.1.2 Algorithms</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_1_3">2.1.3 Programming Paradigms</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="02_Basics.htm#2_2">2.2 Basic Data Manipulation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_2_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_2_2"><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_2_1">2.2.1 Starting and Stopping MATLAB</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_2_2">2.2.2 Assigning Values to Variables</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_2_3">2.2.3 Data Typing</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_2_4">2.2.4 Classes and Objects</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="02_Basics.htm#2_3">2.3 MATLAB User Interface&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_2_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_2_3"><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_1">2.3.1 Command Window</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_2">2.3.2 Command Window</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_3">2.3.3 Workspace Window</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_4">2.3.4 Current Folder Window</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_5">2.3.5 Variable Editor</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_6">2.3.6 Figure Window</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_7">2.3.7 Editor Window</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="02_Basics.htm#2_4">2.4 Scripts&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_2_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_2_4"><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_1">2.4.1 Text Files</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_2">2.4.2 Creating Scripts</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_3">2.4.3 The Current Directory</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_4">2.4.4 Running Scripts</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_5">2.4.5 Punctuating Scripts</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_6">2.4.6 Debugging Scripts</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="02_Basics.htm#2_5">2.5 Engineering Example - Spacecraft Launch</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="03_Functions.htm#3">3 Functions&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_3"></ul></li><li class="nav-item"><div class="nav-link"><a href="04_Vectors.htm#4">4 Vectors&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_4"></ul></li><li class="nav-item"><div class="nav-link"><a href="05_Execution.htm#5">5 Execution&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_5" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_5"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_1">5.1 Concept: Code Blocks</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_2">5.2 Conditional Execution in General</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_3">5.3 if Statements&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_5_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_5_3"><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_3_1">5.3.1 General Template</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_3_2">5.3.2 MATLAB Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_3_3">5.3.3 Important Ideas</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_4">5.4 switch Statements&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_5_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_5_4"><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_4_1">5.4.1 General Template</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_4_2">5.4.2 MATLAB Implementation</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_5">5.5 Iteration in General</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_6">5.6 for Loops&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_5_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_5_6"><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_6_1">5.6.1 General for Loop Template</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_6_2">5.6.2 MATLAB Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_6_3">5.6.3 Indexing Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_6_4">5.6.4 Breaking out of a for Loop</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_7">5.7 while Loops&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_5_7" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_5_7"><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_7_1">5.7.1 General while Template</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_7_2">5.7.2 MATLAB while Loop Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_7_3">5.7.3 Loop-and-a-Half Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_7_4">5.7.4 Breaking a while Loop</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_8">5.8 Engineering Example - Computing Liquid Levels</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="06_Strings.htm#6">6 Strings&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_6"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_2">6.2 MATLAB Implementation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_6_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_6_2"><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_2_1">6.2.1 Slicing and Concatenating Strings</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_2_2">6.2.2 Arithmetic and Logical Operations</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_2_3">6.2.3 Useful Functions</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_3">6.3 Format Conversion Functions&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_6_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_6_3"><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_3_1">6.3.1 Conversion from Numbers to Strings</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_4">6.4 Character String Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_6_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_6_4"><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_4_1">6.4.1 Simple Data Output: The disp(...) Function</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_4_2">6.4.2 Complex Output</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_4_3">6.4.3 Comparing Strings</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_5">6.5 Arrays of Strings</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_6">6.6 Engineering Example - Encryption</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="07_Structures.htm#7">7 Structures&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_7" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_7"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_1">7.1 Concept: Collecting Dissimilar Objects</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_2">7.2 Cell Arrays&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_7_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_7_2"><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_2_1">7.2.1 Creating Cell Arrays</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_2_2">7.2.2 Accessing Cell Arrays</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_2_3">7.2.3 Using Cell Arrays</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_2_4">7.2.4 Processing Cell Arrays</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_3">7.3 Structures&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_7_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_7_3"><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_3_1">7.3.1 Constructing and Accessing One Structure</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_3_2">7.3.2 Constructor Functions</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_4">7.4 Structure Arrays&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_7_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_7_4"><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_4_1">7.4.1 Constructing Structure Arrays</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_4_2">7.4.2 Accessing Structure Arrays</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_4_3">7.4.3 Manipulating Structures</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_5">7.5 Comparing Cell Arrays to Structure Arrays</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_6">7.6 Engineering Example: Assembling a Physical Structure</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="08_File_I_O.htm#8">8 File I O&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_8" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_8"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="08_File_I_O.htm#8_1">8.1 Concept: Serial Input and Output (I/O)</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="08_File_I_O.htm#8_2">8.2 Workspace I/O</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="08_File_I_O.htm#8_3">8.3 High-Level I/O Functions&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_8_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_8_3"><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_3_1">8.3.1 Exploration</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_3_2">8.3.2 Spreadsheets</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_3_3">8.3.3 Delimited Text Files</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="08_File_I_O.htm#8_4">8.4 Lower-Level File I/O&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_8_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_8_4"><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_4_1">8.4.1 Opening and Closing Files</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_4_2">8.4.2 Reading Text Files</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_4_3">8.4.3 Writing Text Files</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="08_File_I_O.htm#8_5">8.5 Engineering Example - Spreadsheet Data</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="09_Recursion.htm#9">9 Recursion&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_9" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_9"><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_1">9.1 Concept: The Activation Stack&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_9_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_9_1"><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_1_1">9.1.1 A Stack</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_1_2">9.1.2 Activation Stack</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_1_3">9.1.3 Function Instances</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_2">9.2 Recursion Defined</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_3">9.3 Implementing a Recursive Function</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_4">9.4 Exceptions&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_9_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_9_4"><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_4_1">9.4.1 Historical Approaches</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_4_2">9.4.2 Generic Exception Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_4_3">9.4.3 MATLAB Implementation</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_5">9.5 Wrapper Functions</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_6">9.6 Examples of Recursion&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_9_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_9_6"><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_6_1">9.6.1 Detecting Palindromes</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_6_2">9.6.2 Fibonacci Series</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_6_3">9.6.3 Zeros of a Function</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_7">9.7 Engineering Example - Robot Arm Motion</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="10_Problem_Solving.htm#10">10 Problem Solving&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_10" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_10"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_1">10.1 Solving Simple Problems</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_2">10.2 Assembling Solution Steps</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3">10.3 Summary of Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_10_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_10_3"><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_1">10.3.1 Basic Arithmetic Operations</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_2">10.3.2 Inserting into a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_3">10.3.3 Traversing a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_4">10.3.4 Building a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_5">10.3.5 Mapping a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_6">10.3.6 Filtering a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_7">10.3.7 Folding a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_8">10.3.8 Searching a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_9">10.3.9 Sorting a Collection</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_4">10.4 Solving Larger Problems</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_5">10.5 Engineering Example—Processing Geopolitical Data</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="11_Plotting.htm#11">11 Plotting&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_11" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_11"><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_1">11.1 Plotting in General&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_11_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_11_1"><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_1_1">11.1.1 A Figure - The Plot Container</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_1_2">11.1.2 Simple Functions for Enhancing Plots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_1_3">11.1.3 Multiple Plots on One Figure - Subplots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_1_4">11.1.4 Manually Editing Plots</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_2">11.2 2-D Plotting&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_11_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_11_2"><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_2_1">11.2.1 Simple Plots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_2_2">11.2.2 Plot Options</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_2_3">11.2.3 Parametric Plots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_2_4">11.2.4 Other 2-D Plot Capabilities</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_3">11.3 3-D Plotting&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_11_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_11_3"><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_3_1">11.3.1 Linear 3-D Plots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_3_2">11.3.2 Linear Parametric 3-D Plots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_3_3">11.3.3 Other 3-D Plot Capabilities</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_4">11.4 Surface Plots&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_11_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_11_4"><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_1">11.4.1 Basic Capabilities</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_2">11.4.2 Simple Exercises</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_3">11.4.3 3-D Parametric Surfaces</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_4">11.4.4 Bodies of Rotation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_5">11.4.5 Other 3-D Surface Plot Capabilities</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_6">11.4.6 Assembling Compound Surfaces</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_5">11.5 Manipulating Plotted Data</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_6">11.6 Engineering Example - Visualizing Geographic Data&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_11_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_11_6"><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_6_1">11.6.1 Analyzing the Data</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_6_2">11.6.2 Displaying the Data</a></div></li></ul></li></ul></li><li class="nav-item"><div class="nav-link"><a href="12_Matrices.htm#12">12 Matrices&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_12" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_12"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_1">12.1 Concept: Behavioral Abstraction</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_2">12.2 Matrix Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_12_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_12_2"><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_2_1">12.2.1 Matrix Multiplication</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_2_2">12.2.2 Matrix Division</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_2_3">12.2.3 Matrix Exponentiation</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_3">12.3 Implementation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_12_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_12_3"><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_3_1">12.3.1 Matrix Multiplication</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_3_2">12.3.2 Matrix Division</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_4">12.4 Rotating Coordinates&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_12_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_12_4"><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_4_1">12.4.1 2-D Rotation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_4_2">12.4.2 3-D Rotation</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_5">12.5 Solving Simultaneous Linear Equations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_12_5" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_12_5"><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_5_1">12.5.1 Intersecting Lines</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_6">12.2 Engineering Examples&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_12_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_12_6"><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_6_1">12.2.1 Ceramic Composition</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_6_2">12.2.2 Analyzing an Electrical Circuit</a></div></li></ul></li></ul></li><li class="nav-item"><div class="nav-link"><a href="13_Images.htm#13">13 Images&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_13" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_13"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="13_Images.htm#13_1">13.1 Nature of an Image</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="13_Images.htm#13_2">13.2 Image Types&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_13_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_13_2"><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_2_1">13.2.1 True Color Images</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_2_2">13.2.2 Gray Scale Images</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_2_3">13.2.3 Color Mapped Images</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_2_4">13.2.4 Preferred Image Format</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="13_Images.htm#13_3">13.3 Reading, Displaying, and Writing Images</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="13_Images.htm#13_4">13.4 Operating on Images&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_13_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_13_4"><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_4_1">13.4.1 Stretching or Shrinking Images</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_4_2">13.4.2 Color Masking</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_4_3">13.4.3 Creating a Kaleidoscope</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_4_4">13.4.4 Images on a Surface</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="13_Images.htm#13_5">13.5 Engineering Example - Detecting Edges</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="14_Sounds.htm#14">14 Sounds&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_14" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_14"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_1">14.1 The Physics of Sound</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_2">14.2 Recording and Playback</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_3">14.3 Implementation</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_4">14.4 Time Domain Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_14_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_14_4"><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_4_1">14.4.2 Slicing and Concatenating Sounds</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_4_2">14.4.2 Musical Background</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_4_3">14.4.3 Changing Sound Frequency</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_5">14.5 The Fast Fourier Transform&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_14_5" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_14_5"><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_5_1">14.5.1 Background</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_5_2">14.5.2 Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_5_3">14.5.3 Simple Spectral Analysis</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_6">14.6 Frequency Domain Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_14_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_14_6"><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_6_1">14.6.1 Details of the Spectral Data</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_6_2">14.6.2 Notes fading with time</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_7">14.7 Engineering Example - Music Synthesizer</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="15_Numerical_Methods.htm#15">15 Numerical Methods&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_15" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_15"><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_1">15.1 Interpolation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_15_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_15_1"><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_1_1">15.1.1 Linear Interpolation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_1_2">15.1.2 Cubic Spline Interpolation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_1_3">15.1.3 Extrapolation</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_2">15.2 Curve Fitting&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_15_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_15_2"><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_2_1">15.2.1 Linear Regression</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_2_2">15.2.2 Polynomial Regression</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_2_3">15.2.3 Practical Application</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_3">15.3 Numerical Integration&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_15_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_15_3"><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_3_1">15.3.1 Determination of the Complete Integral</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_3_2">15.3.2 Continuous Integration Problems</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_4">15.4 Numerical Differentiation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_15_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_15_4"><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_4_1">15.4.1 Difference Expressions</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_5">15.5 Analytical Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_15_5" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_15_5"><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_5_1">15.5.1 Analytical Integration</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_5_2">15.5.2 Analytical Differentiation</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_6">15.6 Implementation</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_7">15.7 Engineering Example - Shaping the Synthesizer Notes</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="16_Sorting.htm#16">16 Sorting&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_16" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_16"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="16_Sorting.htm#16_1">16.1 Measuring Algorithm Cost</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="16_Sorting.htm#16_2">16.2 Algorithms for Sorting Data&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_16_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_16_2"><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_2_1">16.2.1 Insertion Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_2_2">16.2.2 Bubble Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_2_3">16.2.3 Quick Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_2_4">16.2.4 Merge Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_2_5">16.2.5 Radix Sort</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="16_Sorting.htm#16_3">16.3 Performance Analysis</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="16_Sorting.htm#16_4">16.4 Applications of Sorting Algorithms&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_16_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_16_4"><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_1">16.4.1 Using sort(...)</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_2">16.4.2 Insertion Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_3">16.4.3 Bubble Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_4">16.4.4 Quick Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_5">16.4.5 Merge Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_6">16.4.6 Radix Sort</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="16_Sorting.htm#16_5">16.5 Engineering Example - A Selection of Countries</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="17_Graphs.htm#17">17 Graphs&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_17" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_17"><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_1">17.1 Stacks&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_17_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_17_1"><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_1_1">17.1.1 The Nature of a Stack</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_1_2">17.1.2 Implementing Stacks</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_2">17.2 Queues&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_17_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_17_2"><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_2_1">17.2.1 The Nature of a Queue</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_2_2">17.2.2 Implementing Queues</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_2_3">17.2.3 Priority Queues</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#">17.3 Testing Stacks and Queues</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_4">17.4 Graphs&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_17_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_17_4"><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_4_1">17.4.1 Graph Examples</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_4_2">17.4.2 Processing Graphs</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_5">17.5 Minimum Spanning Trees</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_6">17.6 Finding Paths through a Graph&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_17_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_17_6"><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_6_1">17.6.1 Depth-First Search</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_6_2">17.6.2 Breadth-First Search</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_6_3">17.6.3 Dijkstra's Algorithm</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_6_4">17.6.4 An Approximation Algorithm</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_6_5">17.6.5 Serious Path Finding Algorithms</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_7">17.7 Engineering Applications&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_17_7" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_17_7"><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_7_1">17.7.1 Simple Applications</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_7_2">17.7.2 Complex Extensions</a></div></li></ul></li></ul></li></ul></nav></div>

<div class="content">
	<h1 id="2" align="center">Chapter 2: Matlab Basics</h1>

	<!-- Chapter Objectives -->
	<h2>Chapter Objectives</h2>
	<div class="container">
		<p>This chapter introduces you to some of the fundamentals of computing that apply to all programming languages, and specifically to the programming environment used for program development. The fundamentals of programming include</p>
		<ul>
			<li>How to use abstraction to think in a general way about a collection of data and procedural steps</li>
			<li>How to describe the solution of a problem as an algorithm</li>
			<li>The three paradigms of computing and the position of MATLAB in that spectrum</li>
			<li>Three aspects of the apparently simple task of assigning a value to a variable</li>
		</ul>
		<p>As you study the user interface, you will understand:</p>
		<ul>
			<li>How to explore single commands interactively and how to recall earlier commands to be repeated or changed</li>
			<li>Where to examine the variables and files</li>
			<li>How to view data</li>
			<li>How graphical data are presented</li>
			<li>How to create scripts to solve simple arithmetic problems</li>
		</ul>
	</div>

	<!-- Introduction -->
	<h2>Introduction</h2>
	<div class="container">
		<p>The name MATLAB is a contraction of Matrix Laboratory. It was developed for engineers to create, manipulate, and visualize matrices&mdash;rectangular arrays of numerical values. At its most basic level, MATLAB can perform the same functions as your scientific calculator, but it has expanded far beyond its original capabilities and now provides an interactive system and programming language for many applications, including financial analysis as well as general scientific and technical computation. The following are the fundamental components of MATLAB:</p>
		<ul>
			<li>A computing system that accepts one instruction at a time in text form and implements the logic of that instruction. Instructions must conform to a specific syntax and vocabulary, which will be the topic of Chapters 3&ndash;9.</li>
			<li>A large library of modules that provide high-level capabilities for processing data. These modules will be the major topic of Chapters 10&ndash;17.</li>
			<li>A graphical user interface (GUI) that lets users assemble and implement programs that solve specific problems. The rest of this chapter will describe the basic behavior of these windows.</li>
		</ul>
		<p>MATLAB offers a number of advantages to users over conventional, compiled languages like C++, Java, or FORTRAN:</p>
		<ul>
			<li>Because MATLAB programs are interpreted rather than compiled, the process of producing a working solution can be much quicker than with compiled languages.</li>
			<li>MATLAB excels at numerical calculations, especially matrix calculations.</li>
			<li>MATLAB has built-in graphics capabilities that produce professional-looking images for reports.</li>
		</ul>
		<p>However, the very attributes that make MATLAB convenient for a user to develop quick solutions to certain problems make it unsuitable for other kinds of projects. For example:</p>
		<ul>
			<li>MATLAB does not work well for large computing projects where a number of developers share coding responsibilities.</li>
			<li>Professional GUIs and windowing applications (like the MATLAB system itself) are best written in a compiled language.</li>
		</ul>
	</div>

	<div class="chp-section" data-sect-num="1" data-sect-name="Programming Language Background">
		<!-- Programming Language Background -->
		<h2 id="2_1">2.1 Programming Language Background</h2>
		<div class="container">
			<p>Before learning about concepts in computing, you need to understand the background of programming languages. This section discusses the following aspects of programming languages: abstraction, algorithms, programming paradigms, and three fundamental concepts of programming&mdash;assigning values to variables, data typing, and the difference between classes and objects.</p>
		</div>

		<div class="chp-subsection" data-sub-num="1" data-sub-name="Abstraction">
			<!-- Abstraction -->
			<h3 id="2_1_1">2.1.1 Abstraction</h3>
			<div class="container">
				<p>For the purpose of this text, we will define abstraction as &ldquo;expressing a quality apart from a particular implementation.&rdquo; We use the concept of abstraction in everyday conversation without thinking about it:</p>
				<p><code>&ldquo;To convert from degrees Celsius to Kelvin, you add 273 to the temperature.&rdquo;</code><br>
				<code>&ldquo;drive home.&rdquo; </code></p>
				<p>The first is an example of <strong>data abstraction</strong>. <code>&ldquo;The temperature&rdquo;</code> could mean a single reading from the thermometer hanging outside the window or a table of temperature readings for the month of August. The specifics are unimportant; the phrase captures all you need to know. The second example is actually much more complex &mdash; an example of multiple levels of <strong>procedural abstraction</strong>. To a person taking the same route home every night, <code>&ldquo;drive home&rdquo;</code> is all that is required to understand the idea. To a competent driver unfamiliar with the route, the next level of abstraction might be necessary&mdash;turn right out of the parking lot, left onto Main Street, and so on. For instructions to guide a future robotic commuter vehicle, an incredibly fine-grained level of abstraction will be required. Everything taken for granted in the higher level abstractions will need to be meticulously spelled out for the robotic vehicle &mdash; start the engine, accelerate the vehicle, look out for traffic, keep in the lane, find the turn, steer the vehicle, control the speed, observe and obey all signs, and so on.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="2" data-sub-name="Algorithms">
			<!-- Algorithms -->
			<h3 id="2_1_2">2.1.2 Algorithms</h3>
			<div class="container clearfix">
				<div class="float-sm-right card">
					<img src="..\Images\Fig_2_0.JPG" alt="Figure 2.1" class="fig card-image">
					<p class="figure-name card-title">Figure 2.1: Problem Decomposition</p>
				</div>
				<p>Chapter 1 defined problem solving as the ability to isolate sub-problems that seem simple and appropriate to solve, and then assemble the solutions to these sub-problems. The solutions to each of these sub-problems would be expressed as an <b>algorithm</b>, which is a sequence of instructions for solving a sub-problem. The process of solving each sub-problem and assembling the solutions to form the solution to the whole problem could also be expressed as an algorithm at a higher level of abstraction.</p>
				<p>The level of abstraction needed to describe an algorithm varies greatly with the mechanism available. For example, describing the algorithm (recipe) for baking cookies might take the following forms:</p>
				<ul>
					<li>To your grandmother, who has been baking cookies for the last 50 years, it might be <code>&ldquo;Please bake some cookies.&rdquo;</code></li>
					<li>To others it might be <code>&ldquo;Buy a cookie mix and follow the directions.&rdquo;</code></li>
					<li>To a young person learning to cook from scratch, the algorithm might include an intricate series of instructions for measuring, sifting, and combining ingredients; setting the oven temperature and preheating the oven; forming the cookies and putting them on the cookie sheet; and so on.</li>
				</ul>
				<p>In programming terms, algorithms are frequently expressed first conceptually at a high level of abstraction, as illustrated in Figure 2.1. The solutions to each sub-problem would then be expressed at lower and lower levels of abstraction until the description is sufficient to write programs that solve each sub-problem, thereby contributing the pieces that, when assembled, solve the whole problem.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="3" data-sub-name="Programming Paradigms">
			<!-- Programming Paradigms -->
			<h3 id="2_1_3">2.1.3 Programming Paradigms</h3>
			<div class="container">
				<p>From the Greek word <i>paradeigma</i>&mdash;&ldquo;to show alongside&rdquo;&mdash;the American Heritage Dictionary defines a paradigm as &ldquo;a set of assumptions, concepts, values, and practices that constitutes a way of viewing reality for the community that shares them, especially in an intellectual discipline.&rdquo; So a programming paradigm becomes a codified set of practices allowing the community of computing professionals to frame their ideas. This section considers three radically different paradigms: functional programming, procedural programming, and object-oriented programming.</p>
				<p><b>Functional programming</b> is typically associated with languages like Lisp and Forth, in which every programming operation is actually implemented as a function call with no side effects (changes of state of the program surroundings) permitted or implemented in the language. Without side effects, a programming solution can be mathematically proven to be correct&mdash;an enormous advantage. Except for the discussion of recursion, this paradigm will not be mentioned again.</p>
				<p><b>Procedural programming</b> is typical of languages like FORTRAN, C, and MATLAB, where the basic programs or sub-programs are sequences of operations on data items that are generally accessible to all programs. Although side effects from sub-programs&mdash;such as changing the values of variables outside that sub-program&mdash;are considered poor practice, they are not prohibited by the language.</p>
				<p><b>Object-oriented programming (OOP)</b>, typical of languages like C++, Ada, and Java, is a relatively new addition to the world of programming paradigms. It is characterized by the concept of encapsulating, or packaging, data items together with the methods or functions that manipulate those data items. In this paradigm, side effects are explicitly managed by controlling access to the data and methods in a particular grouping. The major theme in true OOP is that &ldquo;everything is an object.&rdquo; You will see MATLAB exhibiting many traits of OOP as you work through this book, but you will not need to use this programming paradigm.</p>
			</div>
		</div>
	</div>

	<div class="chp-section" data-sect-num="2" data-sect-name="Basic Data Manipulation">
		<!-- Basic Data Manipulation -->
		<h2 id="2_2">2.2 Basic Data Manipulation</h2>
		<div class="container">
			<p>In order to use MATLAB to demonstrate basic data manipulation, we begin with an exercise in starting and stopping the MATLAB system, and then discuss assigning values to variables, how Matlab determines the data type, and the difference between a class and an object.</p>
		</div>

		<div class="chp-subsection" data-sub-num="1" data-sub-name="Starting and Stopping MATLAB">
			<!-- Starting and Stopping MATLAB -->
			<h3 id="2_2_1">2.2.1 Starting and Stopping MATLAB</h3>
			<div class="container">
				<p>The process of starting and stopping MATLAB varies with the nature of the implementation. Refer to the &quot;Getting Started&quot; that came with your MATLAB release. We will soon see the details of all the&nbsp;possible windows. For the moment, however, we will interact with MATLAB by typing instructions in the Command window that will always be the first window available to you..</p>
				<div class="exercise"><iframe src="..\exercises\exercise_2_1html.html"></iframe></div>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="2" data-sub-name="Assigning Values to Variables">
			<!-- Assigning Values to Variables -->
			<h3 id="2_2_2">2.2.2 Assigning Values to Variables</h3>
			<div class="container">
				<p>The concept of assigning values to variables is the first challenge facing novice programmers. The difficulty arises because many programming languages (including MATLAB) present this simple concept in a syntax that is very similar to conventional algebra, but with significantly different meaning. Consider, for example, the following algebraic expression:</p>
				<p><code>z = x + y</code></p>
				<p>In normal algebra, this is a two-way relationship that is an identity for the duration of the problem. If you knew the values of <code>z</code> and <code>x</code>, you could derive the value of <code>y</code> with no further analysis. To a programmer, however, this statement has a different meaning. It means that you want to sum the values given to the variables <code>x</code> and <code>y</code>, and store the result in a variable called <code>z</code>. If either <code>x</code> or <code>y</code> is unknown at the time of executing this statement, an error ensues. In particular, this relationship is true only for this statement. The relationship can be revoked in the next instruction, which might be:</p>
				<p><code>z = 4*x - y</code></p>
				<p>In algebra, this pair of statements collectively constrains the values of <code>x</code>, <code>y</code>, and <code>z</code>. In programming, the only significance is that the programmer decided to calculate the current value of <code>z</code> differently. A few computer languages are sensitive to this dilemma and use a different symbol for assigning values to a variable. For example, in Pascal or Ada, an instruction to assign the value <code>z = x + y</code> would be written as follows: <code>z := x + y</code> The &ldquo;<code>:=</code>&rdquo; operator clearly indicates that this is an assignment statement, not an algebraic identity.</p>
				<p><strong>Variable names</strong>: In general, variable names may contain any combination of uppercase and lowercase alphabetic letters, numbers, and the special characters <code>_</code> (underscore) and <code>$</code> (dollar). The underscore character is frequently used to represent a space in a variable name because spaces are not allowed. However, variable names may not begin with a numeric character, and even though the names may be hundreds of characters long, the first 64 characters must be unique. Exercise 2.2 demonstrates the assignment of values to variables.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="3" data-sub-name="Data Typing">
			<!-- Data Typing -->
			<h3 id="2_2_3">2.2.3 Data Typing</h3>
			<div class="container clearfix">
				<div class="card float-sm-right style-points">
			      <p class="card-title">Style Points 2.1</p>
			      <p class="card-text">
							<p>1. Some early versions of the FORTRAN and Basic languages severely restricted the number of characters you could use for variable names. It is no longer necessary to program as if you were still in the &ldquo;bad old days.&rdquo; Choose names for variables that describe their content. For example, a variable used to store the velocity of an object should be named <code>velocity_in_feet_per_second</code> rather than <code>v</code>.</p>
							<p>2. Since the space character is not permitted in variable names, there are two conventions for joining multiple words together to make a single variable name. One uses the underscore character to separate the words (<code>file_size</code>), and the other capitalizes the first letter of additional words (<code>fileSize</code>).You should choose one convention and be consistent with it. You cannot use a hyphen to concatenate words&mdash;MATLAB treats the name <code>file-size</code> as the arithmetic operation subtracting the value of the variable <code>size</code> from the value of the variable <code>file</code>.</p>
					</div>
				<p>It is important to understand how MATLAB treats the data stored in a variable. Different languages take varying approaches to this problem, and languages in general fall into two broad categories: untyped and typed. In general, interpreted languages like Lisp, Forth, Python, and MATLAB determine the type of data contained by a variable based on the type of data being stored there. Such languages are referred to as untyped languages. Each assignment statement is presumed to be correct. If the variable already exists, both its type and value are reassigned; if it did not exist before, a new variable is created. Exercise 2.2 illustrates the effect of performing simple mathematical operations in MATLAB. By putting <code>49</code> into the variable <code>radius</code>, you established its type as numeric and enabled it to be used in normal arithmetic operations. Character strings are specified by including arbitrary characters between single quote marks. These have the type <code>char</code>, and must be handled differently, as discussed fully in Chapter 6. When you stored a character string in the variable radius, adding 1 to it did not cause an error in MATLAB as it would in some other languages, because addition is actually defined for character strings. It just did something radically different &mdash; it actually converted the individual characters to numbers and then added <code>1</code>!</p>
			</div>
			<div class="exercise"><iframe src="..\exercises\exercise_2_2html.html"></iframe></div>
			<div class="container">
				<p>While this ability to assign data types dynamically is good for interpreted languages, it has two undesirable consequences that are really hard to unravel as the program runs:</p>
				<ul>
					<li>Typographical errors that misspell variable names in assignment statements cause new variables to be declared unintentionally and without the user noticing the error</li>
					<li>Logical errors that assign incompatible data to the same variable can cause obscure runtime errors</li>
				</ul>
				<p><strong>Typed languages </strong>require that programmers declare both the name and type of a variable before a value can be assigned to it. With this information, a compiler can then do a better job of ensuring that the programmer is not using a variable in an unintended way. Typed languages fall into two categories: weak typing and strong typing. If programmers decide to use only the normal data types, such as double and char as we saw above, this is known as <strong>weak typing </strong>and is the usual approach to typing. In some extreme circumstances, programmers may choose to be more restrictive and define specific data types with a limited set of permitted interactions. This is called <strong>strong typing</strong>. For example, programmers might define the following data types, all of which are actually of type double: <code>meters</code>, <code>seconds</code>, and <code>meters_per_second</code>. The compiler would then be provided with a set of rules specifying the legal relationships between these types. For example, assignments can only be made to a variable of type <code>meters_per_ second</code> from another variable of the same type, or by dividing a variable of type <code>meters</code> by a variable of type <code>seconds</code>. Before rushing to judge on the pickiness of this approach, note that this would have avoided the loss in 1999 of the Mars Climate Orbiter, which crashed into Mars because one group of programmers used English units while another used metric.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="4" data-sub-name="Classes and Objects">
			<!-- Classes and Objects -->
			<h3 id="2_2_4">2.2.4 Classes and Objects</h3>
			<div class="container">
				<p>This section discusses two different attributes of a variable: its type and its value. In Section 2.2.2 you saw that a variable is a container for data, whose value is determined by what is assigned to the variable. In Section 2.2.3 you saw that by making that assignment to a variable, MATLAB also infers the type of data stored in that variable. You will see that while MATLAB is an untyped language, the programs you write will behave differently if applied to data of different types. For example, the type <code>double</code> specifies the form and expected behavior of a number. Adding <code>1</code> to a variable of class <code>double</code> containing <code>4</code> will, as expected, produce the result <code>5</code>. Similarly, the type <code>char</code> is intended to hold a single character. Adding <code>1</code> to a <code>char</code> variable containing the value <code>&quot;d&quot;</code> will produce the numerical equivalent of the character <code>&quot;e&quot;</code>. MATLAB refers to the type of data in a variable as its class, and the value contained in the variable at any time as an object, an instance of that class. So in the operation:</p>
				<p><code>this_number = 42.0</code></p>
				<p>the variable <code>this_number</code> would be defined (if it didn&#39;t already exist); its class would be set to <code>double</code>, the inherent type of a floating point number; and its value to <code>42.0</code>. So the word <code>double</code> corresponds to a type definition or class, while the variable <code>this_number</code> is a variable of that type, which is an instance of that class or, in programming terms, an object.</p>
			</div>
		</div>
	</div>

	<div class="chp-section" data-sect-num="3" data-sect-name="MATLAB User Interface">
		<!-- MATLAB User Interface -->
		<h2 id="2_3">2.3 MATLAB User Interface</a></h2>
		<div class="container">
			<p>MATLAB uses several display windows. The default view includes a large Command window and a set of other windows showing the files, variables, and command history. You can customize the window layout by selecting the blue bar on the top of the window and dragging that window. You can even drop one window on top of another so they share screen space as shown in Figs 2.3 and 2.4. If you want to return to the default window layout, select the HOME tab at the top of the screen and pull down Layout-&gt;Default.</p>
			<p>Other windows, such as an editor window or a figure window, will automatically open when needed.</p>
		</div>

		<div class="chp-subsection" data-sub-num="1" data-sub-name="Command Window">
			<!-- Command Window -->
			<h3 id="2_3_1">2.3.1 Command Window</h3>
			<div class="container clearfix">
				<div class="card float-right">
			      <img src="..\Images\Fig_2_1.jpg" alt="Figure 2.2" class="fig card-image">
			      <p class="figure-name card-title">Figure 2.2: Command Window</p>
			    </div>
				<p>You can use MATLAB in two modes:</p>
				<ul>
					<li>Command mode, which is useful if you need instant responses to specific MATLAB commands, and</li>
					<li>Edit mode, in which practical solutions are developed.</li>
				</ul>
				<p>When working in Command mode, we use the Command window, which offers an environment similar to a scientific calculator. This window lets you save any values you calculate, but you cannot permanently save the commands used to generate those values. Figure 2.2 shows how the Command Window might look after the completion of an exercise similar to Exercise 2.2. The Command window is useful for performing quick experiments to discover the effects of different commands in MATLAB before embedding them in a larger program. You can perform calculations in the Command window much like doing calculations on a scientific calculator. In fact, most of the syntax is even the same. Exercise 2.3 shows how you might use the Command window to test two simple calculations. Notice that in both of the commands in Exercise 2.3, MATLAB echoes the result as if it were saved in a variable called <code>ans</code>. This is the default variable used to save the result of any calculation you perform in the Command window that is not specifically assigned to another variable. Notice also the use of one of MATLAB&rsquo;s many built-in functions, <code>cos(...)</code> that computes the cosine of an angle in radians, and values, in this case, <code>pi</code>.</p>
				<p>You will see in the next section how to use the Editor window to create and execute a text file of commands as the first step to unleashing the full programming capability of the language.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="2" data-sub-name="Command Window">
			<!-- Command History -->
			<h3 id="2_3_2">2.3.2 Command History</h3>
			<div class="container">
				<p>The Command History records the commands you issued in the Command window in chronological sequence. When you exit MATLAB or when you issue the <code>clc</code> (Clear Commands) instruction, the commands listed in the Command window are cleared. However, the Command History retains a list of all the commands you issued. When in Command mode, you can recall commands from the Command History with the up-arrow key. A window pops up listing the most recent entries if the Command History. In general, the up-arrow and down-arrow keys can navigate throughout the Command History copying each command in turn in the Command Window. You execute any command from the Command History with the Enter key.</p>
				<p>While more complex operations on the Command History are available, we recommend changing to Edit mode, building and saving sequences of commands as scripts.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="3" data-sub-name="Workspace Window">
			<!-- Workspace Window -->
			<h3 id="2_3_3">2.3.3 Workspace Window</h3>
			<div class="container clearfix">
				<div class="card float-right">
				      <img src="..\Images\Fig_2_2.jpg" alt="Figure 2.2" class="fig card-image">
				      <p class="figure-name card-title">Figure 2.3: Workspace Window</p>
			  </div>
				<p>The Workspace window keeps track of the variables you have defined as you execute commands in the Command window or from scripts or functions. By default, the columns in the window display the name of the variable and its current value. You can customize the columns by right-clicking the menu bar containing &quot;Name.&quot; In Figure 2.3, we have added columns for the size of the variables, the number of bytes occupied in memory and the data type, or class. In this case, we are seeing the workspace that results from Exercise 2.2. Notice that in addition to the &quot;class&quot; column, the icon to the left of the variable name symbolizes the data type of the variables. We see that the variable <code>label</code> is a 1 &times; 18 array, uses 36 bytes of memory, and is an object of class char. We will discuss strings in a later chapter.</p>
				<p>You can recall the values for any variable by typing the variable name in the Command window. If you prefer to have a less cluttered desktop, you can close any of the windows except the Command window by clicking the x in the upper-right corner of each window.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="4" data-sub-name="Current Folder Window">
			<!-- Current Folder Window -->
			<h3 id="2_3_4">2.3.4 Current Folder Window</h3>
			<div class="container clearfix">
				<div class="card float-right">
			      <img src="..\Images\Fig_2_3.jpg" alt="Figure 2.3" class="fig card-image">
			      <p class="figure-name card-title">Figure 2.3: Current Folder Window</p>
			  </div>
				<p>When MATLAB accesses files from and saves information to your hard drive, it uses the current directory shown on the tool bar above the Command window. The default for the current directory depends on your version of the software and how it was installed. This can be changed by selecting another directory from the drop-down list to the right of the current directory name, or by browsing through your computer files using the browse button located to the right of the drop-down list.</p>
				<p>Like the Workspace Window, the Current Folder window can be customized. By right-clicking the white bar containing &quot;Name&quot;, you can select columns for the size, date modified, type or description of the file. The first three add columns to the display. If the file is a .m file the Description selection (shown in Fig 2.4) adds a row below the file basic information indicating the purpose of the file. In this case, we have a file that implements the my_cylinder function and a script to test that function. MATLAB finds that information as the first comment line on these files as discussed in Chapter 3.</p>
			</div>
			<div class="exercise"><iframe src="..\exercises\exercise_2_3html.html"></iframe></div>
		</div>

		<div class="chp-subsection" data-sub-num="5" data-sub-name="Variable Editor">
			<!-- Variable Editor -->
			<h3 id="2_3_5">2.3.5 Variable Editor</h3>
			<div class="container">
				<p>Double-clicking on any variable listed in the Workspace window automatically launches a Variable Editor window. Values stored in the variable are displayed in a spreadsheet-like format. You can change values in the Variable editor, or you can add new values.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="6" data-sub-name="Figure Window">
			<!-- Figure Window -->
			<h3 id="2_3_6">2.3.6 Figure Window</h3>
			<div class="container">
				<p>A Figure window is created automatically when a MATLAB command requests presentation of a graph or an image. Any additional graphs you create will overwrite the plot in the current Figure window unless you specifically command MATLAB to open a new Figure window with the <code>figure</code> command. MATLAB makes it easy to customize graphs by adding titles, x and y labels, multiple lines, and more with MATLAB built-in commands. Details of these commands will be presented in Chapter 11.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="7" data-sub-name="Editor Window">
			<!-- Editor Window -->
			<h3 id="2_3_7">2.3.7 Editor Window</h3>
			<div class="container">
				<p>MATLAB provides a text editor, enabling you to create or modify text files that run in the editor window. This window lets you type and save a series of commands without executing them. You can also open the editor window by double-clicking a file name in the Current Directory window or by typing: <code>&gt;&gt; edit &lt;file_name&gt; </code>in the Command window, where <code>&gt;&gt; edit &lt;file_name&gt; </code> is the name of the file you want to open. You can open multiple files at the same time, using the tabbed overlays to identify the files. An asterisk appears on the tab with the file name to indicate that the file has been modified since it was saved. Options under the Window menu let you organize the multiple files in various ways that make more than one file visible at once. When closing the Editor window, MATLAB displays a dialog asking if you need to save any changed files.</file_name></file_name></p>
			</div>
		</div>
	</div>

	<div class="chp-section" data-sect-num="4" data-sect-name="Scripts">
		<!-- Scripts -->
		<h2 id="2_4">2.4 Scripts</h2>
		<div class="container">
			<p>This section describes the basic mechanism for creating, saving, and executing scripts as m-files. Building script files lets you save and reuse program statements without retyping them in the Command window.</p>
		</div>

		<div class="chp-subsection" data-sub-num="1" data-sub-name="Text Files">
			<!-- Text Files -->
			<h3 id="2_4_1">2.4.1 Text Files</h3>
			<div class="container">
				<p>MATLAB uses text files as a permanent means of saving scripts (sets of instructions) rather than just entering commands in the Command window. As you will see in Chapter 8, text files are streams of characters stored sequentially with &ldquo;markers&rdquo; that indicate the end of each line of text. For now, think of a script much like writing an e-mail message&mdash;a number of lines of text written in a &ldquo;smart&rdquo; editor. The MATLAB Editor uses various techniques to help you format commands in these files.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="2" data-sub-name="Creating Scripts">
			<h3 id="2_4_2">2.4.2 Creating Scripts</h3>
			<div class="container">
				<p>A MATLAB script consists of a combination of executable instructions that MATLAB interprets and comment statements that help readers understand the script. You create comments by putting a percent sign (%) in the text file. MATLAB will ignore all text from that mark to the end of the current line. The MATLAB Editor colors all such comments green to distinguish them from the executable instructions. Most applications that use files specify a particular file name ext ension ( the characters after the period in the file name) to identify how the text files will be used. MATLAB uses the extension .m, and the script files are often referred to as m-files. You create a new script file either by choosing File &gt; New &gt; M-File or by clicking the new file icon on the far left of the tool bar. The MATLAB Editor will then open a blank file in which you can enter commands and comments. Try creating the script described in Exercise 2.3.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="3" data-sub-name="The Current Directory">
			<!-- Current Directory -->
			<h3 id="2_4_3">2.4.3 The Current Directory</h3>
			<div class="container">
				<p>After you have entered a script, you must name it and save it in a directory. MATLAB will need to find that directory&mdash;its working directory&mdash;in order to run the script. By default, MATLAB expects scripts to be stored in the working directory, displayed in the tool bar at the top of the MATLAB main window. The specific path will vary with your version of MATLAB. However, the Current Directory window always shows the default location when MATLAB starts. If you decide to store your scripts elsewhere, you will need to redirect MATLAB to that directory by typing it into the Current Directory window or using the browse button to the right of the display. Once script files are saved in your working directory, you can edit them again by selecting and opening them with the MATLAB Editor. To open them, either use the open menu command or double-click the file name in the Current Directory window. Before you close MATLAB, you should save the file created in Exercise 2.3.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="4" data-sub-name="Running Scripts">
			<!-- Running Scripts -->
			<h3 id="2_4_4">2.4.4 Running Scripts</h3>
			<div class="container">
				<p>After you have built and saved a script, you can run it using any of the following methods:</p>
				<ul>
					<li>Type the name of the script in the Command window.</li>
					<li>Choose the Debug &gt; Run menu item in the MATLAB Editor window.</li>
					<li>Press the F5 key when the script is visible in the editor. Doing this saves the script automatically before executing it.</li>
				</ul>
				<p>The latest versions of MATLAB will echo the file name in the Command window when you invoke the script by the latter two methods. After you execute the script, the trace output is written to the Command window as if you had typed the script instructions there one at a time. For practice, run the script created in Exercise 2.3.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="5" data-sub-name="Punctuating Scripts">
			<!-- Punctuating Scripts -->
			<h3 id="2_4_5">2.4.5 Punctuating Scripts</h3>
			<div class="container">
				<p>Many programming languages put a semicolon (;) at the end of a line to indicate the end of a command. Since the MATLAB language uses the end of a line to indicate the end of a command, it does not require an end-of-line command character. If a long command needs to be extended to the next line for convenience in viewing the program, three periods, frequently referred to as ellipses, must be entered at the end of the line to continue the script. The MATLAB language uses the semicolon for a different purpose. By default, all assignment commands display their results in the Command window in text form. For complex programs, the volume of this output can become too large. Whenever you really don&rsquo;t want to see all that output, putting a semicolon character at the end of a line will prevent the results of that assignment from displaying in the Command window.</p>
			</div>
		</div>

		<div class="chp-subsection" data-sub-num="6" data-sub-name="Debugging Scripts">
			<!-- Debugging Scripts -->
			<h3 id="2_4_6">2.4.6 Debugging Scripts</h3>
			<div class="container">
				<p>MATLAB provides extensive debugging capabilities based on the use of break points, which are places in your program where you want to stop and verify that the code is doing what you expect. You insert break points as you edit a code segment by clicking the small dash between the line number and the start of the text. If the program is ready to run, a red dot appears in place of the dash where you clicked. If the file has been changed and hasn&rsquo;t been saved, the dot will be gray, in which case you should save the file. You can set any number of break points throughout your code. After you start running a program, when MATLAB reaches a break point, execution stops, an arrow overwrites the break point symbol, and you can examine the contents of the variables either in the Workspace window or by passing the mouse slowly over the variable in the Editor window. A Debugging tool bar is available with icons that let you:</p>
				<ul>
					<li>Continue executing the logic from this point (other break points may come into effect)</li>
					<li>Step over the logic in this line to the next line in this code block</li>
					<li>Step into any modules referenced by this line of code</li>
					<li>Step out of this current code block
				</ul>
			<p>Use the script from Listing 2.1 to practice inserting break points.</p>
			<div class="listing"><iframe src="..\listings\listing_02_1_livehtml.html"></iframe></div>
			</div>
		</div>
	</div>

	<div class="chp-section" data-sect-num="5" data-sect-name="Engineering Example - Spacecraft Launch">
		<!-- Engineering Example -->
		<h2 id="2_5">2.5 Engineering Example - Spacecraft Launch</h2>
		<div class="container">
			<p>In 1996, the Ansari X Prize was offered for the first time for a private venture: a reusable spacecraft. The requirements were for the same vehicle to carry three people into outer space twice in a two-week time period. The competition was won in 2004 by Tier 1, a company led by Burt Rutan. Their concept was to have a mother ship take off and land on a conventional runway carrying Space Ship One. The spacecraft would be launched at 25,000 feet altitude and would reach outer space (an altitude of 100 km), then glide back and land on the same runway. They repeated this within a week, and they won the prize.</p>
			<p><strong>Problem:</strong> Assuming that the spacecraft uses all its fuel to achieve a vertical velocity <code>u</code> at 25,000 feet, what is the value of <code>u</code> for the spacecraft to reach outer space?</p>
			<p><strong>Solution:</strong> There are two parts to this problem: converting units to the metric system, and choosing and solving an equation for motion under constant acceleration (the rocket motor is no longer burning).</p>
			<ol>
				<li>
					<p>Convert the launch altitude from feet to meters. I like to remember as few numbers as possible. I do remember that 1 inch = 2.54 cm, so we will use this in a MATLAB script to find the conversion from feet to meters. The appropriate chain of calculations is this:</p>
					<p><code>meters = feet X (meters/cm) X (cm/inch) X (inch/feet) </code></p>
				</li>
				<li>
					<p>Find and solve the equation. Given the following:</p>
					<ul>
						<li>Initial and final altitudes from which you can compute the distance traveled: <code>s</code></li>
						<li>The motion is under constant acceleration, the force of gravity: <code>g</code></li>
						<li>To just reach outer space, the final velocity, <code>v</code>, is 0</li>
						<li>The initial velocity, <code>u</code>, is needed</li>
					</ul>
					<br>
					<p>So after some diligent head scratching, we remember the equation of motion under constant acceleration connecting <code>u</code>, <code>v</code>, <code>s</code>, and <code>a</code> is:</p>
					<p><code>v2 = u2 + 2as</code></p>
				</li>
			</ol>
			<p>However, this is not yet in a useful form. For computers to be able to solve an equation, you need the unknown quantity on the left of the equation and everything known on the right. Since <code>u</code> is the unknown, we move this to the left side of the assignment, and organize the known quantities to the right. These are the final velocity, <code>v</code> (i.e., 0) the given distance, <code>s</code>, and the acceleration, <code>a</code>. Since the positive direction for <code>u</code> and <code>s</code> is upward, but gravity is downward, we must use <code>a = -g</code>, and the equation can be transformed to: <code>u = -gs</code> With this information, you can now solve this problem. </p>
			<p>Listing 2.2 show the author's version of a script to perform  this calculation. Although most modern computing environments, including MATLAB, have tools that actually solve symbolic equations, these tools are not appropriate for an introduction to programming and will not be discussed in this book.</p>
			<div class="listing"><iframe src="..\listings\listing_02_2_livehtml.html"></iframe></div>
		</div>
	</div>

	<!-- Chapter Summary -->
	<h2>Chapter Summary</h2>
	<div class="container">
		<p>This chapter presented some fundamental notions of computing and introduced you to the nature of MATLAB, its user interface, and the fundamental tools for making programs work.</p>
		<ul>
			<li>Abstraction lets you refer to collections of data or instructions as a whole</li>
			<li>An algorithm is a set of instructions at an appropriate level of abstraction for solving a specific problem</li>
			<li>A data class describes the type of data and the nature of operations that can be performed on that data</li>
			<li>An object is a specific instance of a class with specific values that can be assigned to a variable</li>
			<li>The Command window lets you experiment with ideas by entering commands line-by-line and seeing immediate results</li>
			<li>The Command History window lets you review and recall previous commands</li>
			<li>The Workspace window lists the names, values, and class of your local variables.</li>
			<li>The Current Directory window lists the current files in the directory to which MATLAB is currently pointed</li>
			<li>A Document window opens when a variable in the Workspace window is selected, to let you view and edit data items</li>
			<li>A Figure window presents data and/or images when invoked by programs</li>
			<li>The Editor window lets you view and modify text files</li>
			<li>Scripts provide the basic mechanism for implementing solutions to problems</li>
		</ul>
	</div>
</div>


</body>
</html>

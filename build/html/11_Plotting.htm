<!DOCTYPE HTML>
<html>
<head>
<title>11_Plotting</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
<link rel="stylesheet" href="styles/styles.css" />
<script async src="./javascript/index.js"></script>
</head>
<body>
<div><nav class="navbar navbar-expand-lg fixed-top top-nav navbar-light bg-light"><a class="navbar-brand" href="#"><img src="../Images/1371.png" width="30" height="30" class="d-inline-block align-top" alt="">&nbspEngineering Computation Using MATLAB</a></nav></div>
<div class="nav-obj"><nav class="nav sidenav nav-scroll navbar-dark bg-dark"><ul class="navbar-nav"><li class="nav-item"><a class="nav-link" href="..\..\index.html">Home</a></li><li class="nav-item"><a class="nav-link" href="Preface.htm">Preface</a></li><li class="nav-item"><div class="nav-link"><a href="01_Introduction.htm#1">1 Introduction&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_1"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="01_Introduction.htm#1_1">1.1 Background</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="01_Introduction.htm#1_2">1.2 History of Computer Architectures&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_1_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_1_2"><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_2_1">1.2.1 Babbage's Difference Engine</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_2_2">1.2.2 Colossus</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_2_3">1.2.3 The von Neumann Architecture</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="01_Introduction.htm#1_3">1.3 Modern Computer Software&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_1_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_1_3"><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_3_1">1.3.1 Operating Systems</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_3_2">1.3.2 Software Tools</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_3_3">1.3.3 Programming Languages</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_3_4">1.3.4 Running a Computer Program</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_3_5">1.3.5 Running an Interpreted Program</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="01_Introduction.htm#1_4">1.4 Anticipated Outcomes&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_1_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_1_4"><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_4_1">1.4.1 Introduction to MATLAB</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_4_2">1.4.2 Learning Programming Concepts</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="01_Introduction.htm#1_4_3">1.4.3 Problem-Solving Skills</a></div></li></ul></li></ul></li><li class="nav-item"><div class="nav-link"><a href="02_Basics.htm#2">2 Basics&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_2"><li class="nav-item secnav"><div class="nav-link"><a href="02_Basics.htm#2_1">2.1 Programming Language Background&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_2_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_2_1"><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_1_1">2.1.1 Abstraction</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_1_2">2.1.2 Algorithms</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_1_3">2.1.3 Programming Paradigms</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="02_Basics.htm#2_2">2.2 Basic Data Manipulation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_2_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_2_2"><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_2_1">2.2.1 Starting and Stopping MATLAB</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_2_2">2.2.2 Assigning Values to Variables</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_2_3">2.2.3 Data Typing</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_2_4">2.2.4 Classes and Objects</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="02_Basics.htm#2_3">2.3 MATLAB User Interface&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_2_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_2_3"><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_1">2.3.1 Command Window</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_2">2.3.2 Command History</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_3">2.3.3 Workspace Window</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_4">2.3.4 Current Folder Window</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_5">2.3.5 Variable Editor</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_6">2.3.6 Figure Window</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_3_7">2.3.7 Editor Window</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="02_Basics.htm#2_4">2.4 Scripts&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_2_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_2_4"><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_1">2.4.1 Text Files</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_2">2.4.2 Creating Scripts</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_3">2.4.3 The Current Directory</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_4">2.4.4 Running Scripts</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_5">2.4.5 Punctuating Scripts</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="02_Basics.htm#2_4_6">2.4.6 Debugging Scripts</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="02_Basics.htm#2_5">2.5 Engineering Example - Spacecraft Launch</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="03_Functions.htm#3">3 Functions&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_3"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="03_Functions.htm#3_1">3.1 Concepts: Abstraction and Encapsulation</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="03_Functions.htm#3_2">3.2 Black Box View of a Function</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="03_Functions.htm#3_3">3.3 MATLAB Implementation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_3_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_3_3"><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_1">3.3.1 General Template</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_2">3.3.1 Function Definition</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_3">3.3.3 Storing and Using Functions</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_4">3.3.4 Calling Functions</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_5">3.3.5 Variable Number of Parameters</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_6">3.3.6 Returning Multiple Results</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_7">3.3.7 Auxiliary Local Functions</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_8">3.3.8 Encapsulation in MATLAB Functions</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="03_Functions.htm#3_3_9">3.3.9 Global Variables</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="03_Functions.htm#3_4">3.4 Engineering Example: Measuring a Solid Object</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="04_Vectors.htm#4">4 Vectors&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_4"><li class="nav-item secnav"><div class="nav-link"><a href="04_Vectors.htm#4_1">4.1 Concept: Data Collection&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_4_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_4_1"><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_1_1">4.1.1 Data Abstraction</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_1_2">4.1.2 Homogeneous Collections</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="04_Vectors.htm#4_2">4.2 Vectors&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_4_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_4_2"><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_2_1">4.2.2 Creating a Vector</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_2_2">4.2.2 Size of a Vector</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_2_3">4.2.3 Indexing a Vector</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_2_4">4.2.4 Shortening a Vector</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_2_5">4.2.5 Operating on Vectors</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="04_Vectors.htm#4_3">4.3 Engineering Example - Forces and Moments</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="04_Vectors.htm#4_4">4.4 Arrays&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_4_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_4_4"><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_4_1">4.4.1 Properties of an Array</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_4_2">4.4.2 Creating an Array</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_4_3">4.4.3 Accessing Elements of an Array</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_4_4">4.4.4 Removing Elements of an Array</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="04_Vectors.htm#4_4_5">4.4.5 Operating on Arrays</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="04_Vectors.htm#4_5">4.5 Engineering Example - Computing Soil Volume</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="05_Execution.htm#5">5 Execution&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_5" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_5"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_1">5.1 Concept: Code Blocks</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_2">5.2 Conditional Execution in General</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_3">5.3 if Statements&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_5_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_5_3"><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_3_1">5.3.1 General Template</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_3_2">5.3.2 MATLAB Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_3_3">5.3.3 Important Ideas</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_4">5.4 switch Statements&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_5_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_5_4"><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_4_1">5.4.1 General Template</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_4_2">5.4.2 MATLAB Implementation</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_5">5.5 Iteration in General</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_6">5.6 for Loops&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_5_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_5_6"><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_6_1">5.6.1 General for Loop Template</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_6_2">5.6.2 MATLAB Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_6_3">5.6.3 Indexing Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_6_4">5.6.4 Breaking out of a for Loop</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_7">5.7 while Loops&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_5_7" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_5_7"><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_7_1">5.7.1 General while Template</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_7_2">5.7.2 MATLAB while Loop Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_7_3">5.7.3 Loop-and-a-Half Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="05_Execution.htm#5_7_4">5.7.4 Breaking a while Loop</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="05_Execution.htm#5_8">5.8 Engineering Example - Computing Liquid Levels</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="06_Strings.htm#6">6 Strings&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_6"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_1">6.1 Character String Concepts: Mapping, Casting, Tokens, and Delimiting</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_2">6.2 MATLAB Implementation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_6_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_6_2"><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_2_1">6.2.1 Slicing and Concatenating Strings</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_2_2">6.2.2 Arithmetic and Logical Operations</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_2_3">6.2.3 Useful Functions</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_3">6.3 Format Conversion Functions&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_6_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_6_3"><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_3_1">6.3.1 Conversion from Numbers to Strings</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_3_2">6.3.2 Conversion from Strings to Numbers and Other Stuff</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_4">6.4 Character String Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_6_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_6_4"><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_4_1">6.4.1 Simple Data Output: The disp(...) Function</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_4_2">6.4.2 Complex Output</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="06_Strings.htm#6_4_3">6.4.3 Comparing Strings</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_5">6.5 Arrays of Strings</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="06_Strings.htm#6_6">6.6 Engineering Example - Encryption</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="07_Structures.htm#7">7 Structures&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_7" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_7"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_1">7.1 Concept: Collecting Dissimilar Objects</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_2">7.2 Cell Arrays&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_7_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_7_2"><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_2_1">7.2.1 Creating Cell Arrays</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_2_2">7.2.2 Accessing Cell Arrays</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_2_3">7.2.3 Using Cell Arrays</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_2_4">7.2.4 Processing Cell Arrays</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_3">7.3 Structures&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_7_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_7_3"><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_3_1">7.3.1 Constructing and Accessing One Structure</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_3_2">7.3.2 Constructor Functions</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_4">7.4 Structure Arrays&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_7_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_7_4"><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_4_1">7.4.1 Constructing Structure Arrays</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_4_2">7.4.2 Accessing Structure Arrays</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="07_Structures.htm#7_4_3">7.4.3 Manipulating Structures</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_5">7.5 Comparing Cell Arrays to Structure Arrays</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="07_Structures.htm#7_6">7.6 Engineering Example: Assembling a Physical Structure</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="08_File_I_O.htm#8">8 File I O&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_8" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_8"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="08_File_I_O.htm#8_1">8.1 Concept: Serial Input and Output (I/O)</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="08_File_I_O.htm#8_2">8.2 Workspace I/O</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="08_File_I_O.htm#8_3">8.3 High-Level I/O Functions&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_8_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_8_3"><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_3_1">8.3.1 Exploration</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_3_2">8.3.2 Spreadsheets</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_3_3">8.3.3 Delimited Text Files</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="08_File_I_O.htm#8_4">8.4 Lower-Level File I/O&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_8_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_8_4"><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_4_1">8.4.1 Opening and Closing Files</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_4_2">8.4.2 Reading Text Files</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="08_File_I_O.htm#8_4_3">8.4.3 Writing Text Files</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="08_File_I_O.htm#8_5">8.5 Engineering Example - Spreadsheet Data</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="09_Recursion.htm#9">9 Recursion&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_9" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_9"><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_1">9.1 Concept: The Activation Stack&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_9_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_9_1"><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_1_1">9.1.1 A Stack</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_1_2">9.1.2 Activation Stack</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_1_3">9.1.3 Function Instances</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_2">9.2 Recursion Defined</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_3">9.3 Implementing a Recursive Function</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_4">9.4 Exceptions&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_9_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_9_4"><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_4_1">9.4.1 Historical Approaches</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_4_2">9.4.2 Generic Exception Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_4_3">9.4.3 MATLAB Implementation</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_5">9.5 Wrapper Functions</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_6">9.6 Examples of Recursion&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_9_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_9_6"><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_6_1">9.6.1 Detecting Palindromes</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_6_2">9.6.2 Fibonacci Series</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="09_Recursion.htm#9_6_3">9.6.3 Zeros of a Function</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="09_Recursion.htm#9_7">9.7 Engineering Example - Robot Arm Motion</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="10_Problem_Solving.htm#10">10 Problem Solving&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_10" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_10"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_1">10.1 Solving Simple Problems</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_2">10.2 Assembling Solution Steps</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3">10.3 Summary of Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_10_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_10_3"><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_1">10.3.1 Basic Arithmetic Operations</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_2">10.3.2 Inserting into a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_3">10.3.3 Traversing a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_4">10.3.4 Building a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_5">10.3.5 Mapping a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_6">10.3.6 Filtering a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_7">10.3.7 Folding a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_8">10.3.8 Searching a Collection</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_3_9">10.3.9 Sorting a Collection</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_4">10.4 Solving Larger Problems</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="10_Problem_Solving.htm#10_5">10.5 Engineering Example - Processing Geopolitical Data</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="11_Plotting.htm#11">11 Plotting&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_11" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_11"><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_1">11.1 Plotting in General&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_11_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_11_1"><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_1_1">11.1.1 A Figure - The Plot Container</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_1_2">11.1.2 Simple Functions for Enhancing Plots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_1_3">11.1.3 Multiple Plots on One Figure - Subplots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_1_4">11.1.4 Manually Editing Plots</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_2">11.2 2-D Plotting&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_11_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_11_2"><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_2_1">11.2.1 Simple Plots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_2_2">11.2.2 Plot Options</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_2_3">11.2.3 Parametric Plots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_2_4">11.2.4 Other 2-D Plot Capabilities</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_3">11.3 3-D Plotting&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_11_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_11_3"><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_3_1">11.3.1 Linear 3-D Plots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_3_2">11.3.2 Linear Parametric 3-D Plots</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_3_3">11.3.3 Other 3-D Plot Capabilities</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_4">11.4 Surface Plots&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_11_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_11_4"><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_1">11.4.1 Basic Capabilities</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_2">11.4.2 Simple Exercises</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_3">11.4.3 3-D Parametric Surfaces</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_4">11.4.4 Bodies of Rotation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_5">11.4.5 Other 3-D Surface Plot Capabilities</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_4_6">11.4.6 Assembling Compound Surfaces</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_5">11.5 Manipulating Plotted Data</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="11_Plotting.htm#11_6">11.6 Engineering Example - Visualizing Geographic Data&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_11_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_11_6"><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_6_1">11.6.1 Analyzing the Data</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="11_Plotting.htm#11_6_2">11.6.2 Displaying the Data</a></div></li></ul></li></ul></li><li class="nav-item"><div class="nav-link"><a href="12_Matrices.htm#12">12 Matrices&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_12" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_12"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_1">12.1 Concept: Behavioral Abstraction</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_2">12.2 Matrix Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_12_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_12_2"><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_2_1">12.2.1 Matrix Multiplication</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_2_2">12.2.2 Matrix Division</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_2_3">12.2.3 Matrix Exponentiation</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_3">12.3 Implementation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_12_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_12_3"><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_3_1">12.3.1 Matrix Multiplication</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_3_2">12.3.2 Matrix Division</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_4">12.4 Rotating Coordinates&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_12_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_12_4"><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_4_1">12.4.1 2-D Rotation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_4_2">12.4.2 3-D Rotation</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_5">12.5 Solving Simultaneous Linear Equations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_12_5" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_12_5"><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_5_1">12.5.1 Intersecting Lines</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="12_Matrices.htm#12_6">12.2 Engineering Examples&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_12_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_12_6"><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_6_1">12.2.1 Ceramic Composition</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="12_Matrices.htm#12_6_2">12.2.2 Analyzing an Electrical Circuit</a></div></li></ul></li></ul></li><li class="nav-item"><div class="nav-link"><a href="13_Images.htm#13">13 Images&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_13" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_13"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="13_Images.htm#13_1">13.1 Nature of an Image</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="13_Images.htm#13_2">13.2 Image Types&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_13_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_13_2"><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_2_1">13.2.1 True Color Images</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_2_2">13.2.2 Gray Scale Images</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_2_3">13.2.3 Color Mapped Images</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_2_4">13.2.4 Preferred Image Format</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="13_Images.htm#13_3">13.3 Reading, Displaying, and Writing Images</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="13_Images.htm#13_4">13.4 Operating on Images&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_13_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_13_4"><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_4_1">13.4.1 Stretching or Shrinking Images</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_4_2">13.4.2 Color Masking</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_4_3">13.4.3 Creating a Kaleidoscope</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="13_Images.htm#13_4_4">13.4.4 Images on a Surface</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="13_Images.htm#13_5">13.5 Engineering Example - Detecting Edges</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="14_Sounds.htm#14">14 Sounds&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_14" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_14"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_1">14.1 The Physics of Sound</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_2">14.2 Recording and Playback</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_3">14.3 Implementation</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_4">14.4 Time Domain Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_14_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_14_4"><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_4_1">14.4.2 Slicing and Concatenating Sounds</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_4_2">14.4.2 Musical Background</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_4_3">14.4.3 Changing Sound Frequency</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_5">14.5 The Fast Fourier Transform&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_14_5" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_14_5"><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_5_1">14.5.1 Background</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_5_2">14.5.2 Implementation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_5_3">14.5.3 Simple Spectral Analysis</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_6">14.6 Frequency Domain Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_14_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_14_6"><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_6_1">14.6.1 Details of the Spectral Data</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="14_Sounds.htm#14_6_2">14.6.2 Notes fading with time</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="14_Sounds.htm#14_7">14.7 Engineering Example - Music Synthesizer</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="15_Numerical_Methods.htm#15">15 Numerical Methods&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_15" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_15"><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_1">15.1 Interpolation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_15_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_15_1"><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_1_1">15.1.1 Linear Interpolation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_1_2">15.1.2 Cubic Spline Interpolation</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_1_3">15.1.3 Extrapolation</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_2">15.2 Curve Fitting&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_15_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_15_2"><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_2_1">15.2.1 Linear Regression</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_2_2">15.2.2 Polynomial Regression</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_2_3">15.2.3 Practical Application</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_3">15.3 Numerical Integration&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_15_3" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_15_3"><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_3_1">15.3.1 Determination of the Complete Integral</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_3_2">15.3.2 Continuous Integration Problems</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_4">15.4 Numerical Differentiation&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_15_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_15_4"><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_4_1">15.4.1 Difference Expressions</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_5">15.5 Analytical Operations&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_15_5" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_15_5"><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_5_1">15.5.1 Analytical Integration</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_5_2">15.5.2 Analytical Differentiation</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_6">15.6 Implementation</a></div></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="15_Numerical_Methods.htm#15_7">15.7 Engineering Example - Shaping the Synthesizer Notes</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="16_Sorting.htm#16">16 Sorting&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_16" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_16"><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="16_Sorting.htm#16_1">16.1 Measuring Algorithm Cost</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="16_Sorting.htm#16_2">16.2 Algorithms for Sorting Data&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_16_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_16_2"><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_2_1">16.2.1 Insertion Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_2_2">16.2.2 Bubble Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_2_3">16.2.3 Quick Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_2_4">16.2.4 Merge Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_2_5">16.2.5 Radix Sort</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="16_Sorting.htm#16_3">16.3 Performance Analysis</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="16_Sorting.htm#16_4">16.4 Applications of Sorting Algorithms&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_16_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_16_4"><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_1">16.4.1 Using sort(...)</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_2">16.4.2 Insertion Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_3">16.4.3 Bubble Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_4">16.4.4 Quick Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_5">16.4.5 Merge Sort</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="16_Sorting.htm#16_4_6">16.4.6 Radix Sort</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="16_Sorting.htm#16_5">16.5 Engineering Example - A Selection of Countries</a></div></li></ul></li><li class="nav-item"><div class="nav-link"><a href="17_Graphs.htm#17">17 Graphs&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sec_17" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sec_17"><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_1">17.1 Stacks&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_17_1" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_17_1"><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_1_1">17.1.1 The Nature of a Stack</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_1_2">17.1.2 Implementing Stacks</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_2">17.2 Queues&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_17_2" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_17_2"><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_2_1">17.2.1 The Nature of a Queue</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_2_2">17.2.2 Implementing Queues</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_2_3">17.2.3 Priority Queues</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#">17.3 Testing Stacks and Queues</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_4">17.4 Graphs&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_17_4" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_17_4"><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_4_1">17.4.1 Graph Examples</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_4_2">17.4.2 Processing Graphs</a></div></li></ul></li><li class="nav-item secnav"><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_5">17.5 Minimum Spanning Trees</a></div></li><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_6">17.6 Finding Paths through a Graph&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_17_6" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_17_6"><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_6_1">17.6.1 Depth-First Search</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_6_2">17.6.2 Breadth-First Search</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_6_3">17.6.3 Dijkstra's Algorithm</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_6_4">17.6.4 An Approximation Algorithm</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_6_5">17.6.5 Serious Path Finding Algorithms</a></div></li></ul></li><li class="nav-item secnav"><div class="nav-link"><a href="17_Graphs.htm#17_7">17.7 Engineering Applications&nbsp;&nbsp;</a><span class="dropdown-toggle" data-target="#sub_17_7" data-toggle="collapse"></span></div><ul class="list-unstyled collapse" id="sub_17_7"><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_7_1">17.7.1 Simple Applications</a></div></li><li class="nav-item subnav"><div class="nav-link"><a href="17_Graphs.htm#17_7_2">17.7.2 Complex Extensions</a></div></li></ul></li></ul></li></ul></nav></div>

<div class="content">
  <h1 id="11" align="center">Chapter 11: Plotting</h1>

  <!-- Chapter Objectives -->
  <h1>Chapter Objectives</h1>
  <div class="container">
    <p>This chapter presents the principles and practice of plotting in the following forms:</p>
    <ul>
      <li>Basic two-dimensional (2-D) line plots
      <li>2-D parametric plots
      <li>Three-dimensional (3-D) line and parametric plots
      <li>Basic 3-D surface plots
      <li>Parametric surface plots
      <li>Bodies of rotation
    </ul>
  </div>

  <!-- Introduction -->
  <h1>Introduction</h1>
  <div class="container">
    <p>There is a much-quoted expression that "a picture is worth a thousand words," and this is never more appropriate than when talking about data. In previous chapters, we used some simple plot commands to display data to illustrate its behavior. The capability of the MATLAB language to present data reaches far beyond ordinary data plotting, and far beyond the limited confines of a textbook. This chapter will present the fundamental concepts of the different forms in which data can be presented, but it leaves to the reader the challenge of exploring the full range of capabilities available. You only really discover the power inherent in the plotting capabilities of MATLAB when you have some unusual data to visualize.</p>
  </div>

  <div class="chp-section" data-sect-num="1" data-sect-name="Plotting in General">
    <!-- Plotting in General -->
    <h2 id="11_1">11.1  Plotting in General</h2>
    <div class="container">
      <p>Before considering the details of how each plotting mode works, we should set the context. In this section, we will discuss the general container for all graphical types, the figure, and some basic operations that apply to all figures—functions that enhance them, the ability to assemble subplots into a single figure, and the advisability of making manual changes to plots.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="A Figure - The Plot Container">
      <h3 id="11_1_1">11.1.1	A Figure - The Plot Container</h3>
      <div class="container">
        <p>The fundamental container for plotting is a figure. In a simple script, if you just start plotting data, figure number 1 is automatically created to present the data. You can manage the figures by asserting the <code>figure</code> command. Each time figure is called, a new figure is made available, with the next higher figure number. If you use the form <code>figure &lt;number&gt;</code>, you can select a specific figure number for the next plot.  To clear the current figure, put the key word <code>clf</code> in the header of your script. To remove all the figures, put the key phrase <code>close all</code> at the beginning of your script. The listing examples below will assume that each script begins with <code>clear</code>, <code>clc</code>, <code>close all</code>.</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Simple Functions for Enhancing Plots">
      <!-- Simple Functions for Enhancing Plots -->
      <h3 id="11_1_2">11.1.2	Simple Functions for Enhancing Plots</h3>
      <div class="container">
        <p>We have already introduced <code>plot(x, y)</code>, the basic function that creates a simple plot of <code>x</code> versus <code>y</code>. The following functions can be used to enhance any of the plots discussed in this chapter. Note that they enhance an existing plot; they should all be called after the fundamental function that creates a plot figure.</p>
         <ul>
           <li><code>axis &lt;param&gt;</code> provides a rich set of tools for managing the appearance of the axes, including the following:
            <ul>
              <li><code>tight</code> reduces the axes to their smallest possible size</li>
              <li><code>equal</code> sets the <code>x</code> and <code>y</code> scales to the same value</li>
              <li><code>square</code> makes the plot figure of equal width and height</li>
              <li><code>off</code> does not show the axes at all</li>
            </ul></li>
            <li><code>axis([xl xu yl yu zl zu])</code> overrides the automatic computation of the axis values, forcing the x-axis to reach from <code>xl</code> to <code>xu</code>, the y-axis from <code>yl</code> to <code>yu</code>, and the z-axis from <code>zl</code> to <code>zu</code>. For 2-D plots, the <code>z</code> values should be omitted.</li>
            <li><code>colormap &lt;specification&gt;</code> establishes a sequence of colors, the color map, to be used under a number of circumstances to cycle through a series of colors automatically. The legal specification values are listed in Appendix A.</li>
            <li><code>grid on</code> puts a grid on the plot; <code>grid off</code> (the default) removes grid lines.</li>
            <li><code>hold on</code> keeps the existing data on the current figure to allow the results of subsequent plotting calls to be added to the current figure without first erasing the existing plot; <code>hold off</code> (the default) allows you to redraw the current figure at the next plot call, erasing the previous contents.</li>
            <li><code>legend(...)</code> takes a cell array of strings, one for each of the multiple plots on a single figure, and creates a legend box. By default, that box appears in the top-right corner of the figure. However, this default can be overridden by explicitly specifying the location of the legend. See the help files for a complete discussion of the legend options.</li>
            <li><code>shading &lt;spec&gt;</code> defines the method for shading surfaces. See the help files for a complete discussion of the shading specification options.</li>
            <li><code>text(x, y, {z,}, str)</code> places the text provided at the specified (x, y) location on a 2-D plot, or at the (x, y, z) location on a 3-D plot.</li>
            <li><code>title(&lt;string&gt;)</code> places the text provided as the title of the current plot.</li>
            <li><code>view(az, el)</code> sets the angle from which to view a plot. The parameters are <code>az</code>, the azimuth, an angle measured in the horizontal plane, and <code>el</code>, the elevation, an angle measured upward from the x axis. Both angles are specified in degrees.</li>
            <li><code>xlabel(&lt;string&gt;)</code> sets the string provided as the label for the x-axis.</li>
            <li><code>ylabel(&lt;string&gt;)</code> sets the string provided as the label for the y-axis.</li>
            <li><code>zlabel(&lt;string&gt;)</code> sets the string provided as the label for the z-axis. (As we will soon see, all plots actually have a third axis.)</li>
          </ul>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="Multiple Plots on One Figure - Subplots">
      <!-- Subplots -->
      <h3 id="11_1_3">11.1.3	Multiple Plots on One Figure - Subplots</h3>
      <div class="container clearfix">
          <p>Within the current figure, you can place multiple plots with the subplot command, as shown in Figure 11.1. The function <code>subplot(r, c, n)</code>divides the current figure into <code>r</code> rows and <code>c</code> columns of equally spaced plot areas, and then establishes the nth of these (counting across the rows first) as the current figure. You do not have to draw in all of the areas you specify. Figure 11.1 was generated by the code shown in Listing 11.1. Notice that the order of the plot positions is in an order different from that achieved when you linearize an array.</p>
          <div class="card">
               <img src="..\Images\Fig_11_1.JPG" alt="Figure 11.1" class="fig card-img">
               <p class="figure-name card-title">Figure 11.1: Using Subplots</p>
          </div>
      </div>
      <div class="listing"><iframe src="..\listings\listing_11_1_livehtml.html"></iframe></div>
    </div>

    <div class="chp-subsection" data-sub-num="4" data-sub-name="Manually Editing Plots">
      <!-- Manually Editing Plots -->
      <h3 id="11_1_4">11.1.4	Manually Editing Plots</h3>
      <div class="container">
        <p>When a figure has been created, you are free to manipulate many of its characteristics  by  using  its  menu items and tool bars. They provide the ability to resize the plot, change the view characteristics, and annotate it with legends, axis labels, lines, and text call-outs. However, <b><i>a word of caution</i></b> is in order here. It is very rare that you achieve what you desire on the first try.  Manual edits become very tedious and error prone when they must be repeated. You will always be better served by putting all that additions into your source code rather than ever using manual figure editing.  If for no other reason, by never using manual edits, you are avoiding the appearance of impropriety by being able to repeat any graphics you created from the source materials.</p>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="2" data-sect-name="2-D Plotting">
    <h2 id="11_2">11.2 2-D Plotting</h2>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Simple Plots">
      <!-- Simple Plots -->
      <h3 id="11_2_1">11.2.1 Simple Plots</h3>
      <div class="container clearfix">
        <div class="float-sm-right card">
             <img src="..\Images\Fig_11_2.JPG" alt="Figure 11.2" class="fig card-img">
             <p class="figure-name card-title">Figure 11.2: Overlaying plots with <code>hold on</code></p>
        </div>
        <p>The basic function to use for 2-D plots is <code>plot(...)</code>. The normal use of this function is to give it three parameters, <code>plot(x, y, str)</code>, where <code>x</code> and <code>y</code> are vectors of the same length containing the x and y coordinates respectively, and <code>str</code> is a string containing one or more optional line color and style control characters. A complete list of these control characters is included in Appendix A. If the vector <code>x</code> is omitted, MATLAB assumes that the x coordinates are <code>1:N</code>, where <code>N</code> is the length of the y vector. If the <code>str</code> is omitted, the default line is solid blue with no symbols at the data points. The MATLAB definition of this function also permits multiple <code>(x, y, str)</code> data sets in a single function call. It is always possible, of course, to produce the same result with multiple function calls in <code>hold on</code> mode.  Since we have already seen basic 2-D plotting at work, it should be sufficient to observe and comment on the simple example seen in Figure 11.2, generated by the code shown in Listing 11.2.</p>
      </div>
      <div class="listing"><iframe src="..\listings\listing_11_2_livehtml.html"></iframe></div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Plot Options">
      <!-- Plot Options -->
      <h3 id="11_2_2">11.2.2	Plot Options</h3>
      <div class="container">
        <p>In addition to the plot enhancement tools listed in Section 11.1.2, the following capabilities are available.</p>
        <ul>
          <li>Setting line styles and symbols to mark the data points (details in Appendix A)</li>
          <li>Using <code>plotyy(...)</code> to put a second axis on the right side of the figure</li>
          <li>Obtaining logarithmic plots on the x-axis <code>(semilogx(...))</code>, y-axis <code>(semilogy(...))</code>, or both axes (<code>loglog(...)</code>)</li>
        </ul>
        <p>We strongly suggest that the reader experiment with these features and observe their effects.</p>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="Parametric Plots">
      <!-- Parametric Plots -->
      <h3 id="11_2_3">11.2.3	Parametric Plots</h3>
      <div class="container clearfix">
        <div class="float-sm-right card">
             <img src="..\Images\Fig_11_3.JPG" alt="Figure 11.3" class="fig card-img">
             <p class="figure-name card-title">Figure 11.3: Parametric Plots</p>
        </div>
        <p>Plotting is not restricted to the situation where the data along one axis are the  independent  variable  and  that along   the   other   are   dependent. Parametric plots allow the variables on each axis to be dependent on a separate, independent variable. That independent variable will define a path or locus on the plotting surface. Consider the plot shown in Figure 11.3, which presents   a   simple   exercise   in transforming a circle into the shape of an airfoil, for example, the cross-section of an aircraft wing or a turbine blade. It was generated using the code shown in Listing 11.3.</p>
      </div>
      <div class="listing"><iframe src="..\listings\listing_11_3_livehtml.html"></iframe></div>
    </div>

    <div class="chp-subsection" data-sub-num="4" data-sub-name="Other 2-D Plot Capabilities">
      <!-- Other 2D Plot Capabilities -->
      <h3 id="11_2_4">11.2.4	Other 2-D Plot Capabilities</h3>
      <div class="container">
        <p>You can also create some more exotic plots that are not necessary to understand the basic principles of plotting, but are powerful methods for visualizing real data:</p>
        <ul>
          <li><code>bar(x, y)</code> produces a bar graph with the values in y positioned at the horizontal locations in x. The options available can be studied with <code>&gt;&gt; help bar</code></li>
          <li><code>barh(x, y)</code> produces a bar graph with the values in y positioned at the horizontal locations in x. The options available can be studied with <code>&gt;&gt; help bar</code>.</li>
          <li><code>fill(x,y,n)</code> produces a filled polygon defined by the coordinates in <code>x</code> and <code>y</code>. The fill color is specified by indexing n into the color map. The options available can be studied with <code>&gt;&gt; help fill</code></li>
          <li><code>hist(y, x)</code> produces a histogram plot with the values in <code>y</code> counted into bins defined by <code>x</code>. The options available can be studied with <code>&gt;&gt; help hist.</code></li>
          <li><code>pie(y)</code> makes a pie chart of the values in <code>y</code>. For more options, see <code>&gt;&gt; help pie</code>.</li>
          <li><code>polar(th, y)</code> makes a polar plot of the angle <code>th</code> (radians) with the radius <code>r</code> specified for each angle. For more options, see <code>&gt;&gt; help polar</code>.</li>
        </ul>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="3" data-sect-name="3-D Plotting">
    <!-- 3D Plotting -->
    <h2 id="11_3">11.3 3-D Plotting</h2>
    <div class="container clearfix">
      <div class="float-sm-right card">
           <img src="..\Images\Fig_11_3a.JPG" alt="Figure 11.3a" class="fig card-img">
           <p class="figure-name card-title">Figure 11.3a: Rotating 2-D Plots</p>
      </div>
      <p>Before attacking the details of plotting in three dimensions, it should be noted that even 2-D plots are actually 3-D plots. Consider the picture shown in Figure 11.3a, which was generated originally as the 2-D plot in Figure 11.3. By selecting the Rotate 3-D icon on the tool bar and moving the mouse on your figure, it becomes apparent that what appeared to be a 2-D plot in the x-y plane is really a 3-D plot in the x-y-z plane “suspended in space” at z = 0.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Linear 3-D Plots">
      <!-- Linear 3D Plots -->
      <h3 id="11_3_1">11.3.1 Linear 3-D Plots</h3>
      <div class="container clearfix">
        <div class="float-sm-right card">
             <img src="..\Images\Fig_11_4.JPG" alt="Figure 11.4" class="fig card-img">
             <p class="figure-name card-title">Figure 11.4: Linear 3-D Plots</p>
        </div>
        <p>The simplest method of 3-D plotting is to extend our 2-D plots by adding a set of z values. In the same style as <code>plot(...)</code>, <code>plot3(x, y, z, str)</code> consumes three vectors of equal size and connects the points defined by those vectors in 3-D space. The optional <code>str</code> specifies the color and/or line style. If the <code>str</code> is omitted, the default line is solid blue.  Figure 11.4 shows three curves plotted in three dimensions, using the script shown in Listing 11.4. Each plot is in the z-x plane: the red curve at y = 0, the blue curve at y = 0.5, and the green curve at y = 1.</p>
      </div>
      <div class="listing"><iframe src="..\listings\listing_11_4_livehtml.html"></iframe></div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Linear Parametric 3-D Plots">
      <!-- Linear Parametric 3-D Plots -->
      <h3 id="11_3_2">11.3.2	Linear Parametric 3-D Plots</h3>
      <div class="container clearfix">
        <div class="float-sm-right card">
             <img src="..\Images\Fig_11_5.JPG" alt="Figure 11.5" class="fig card-img">
             <p class="figure-name card-title">Figure 11.5: Linear Parametric 3-D Plots</p>
        </div>
        <p>We can generalize the concept of parametric plots to 3-D, as shown in Figure 11.5, in which the x, y, and z values are mappings of some linear parameter. On the left side, the spiral is an example of a 3-D plot where two of the dimensions, x and y, are dependent on the third, independent parameter. The independent parameter in this example is the rotation angle, <code>theta</code>, varying from 0 to 10&pi; (five complete revolutions). The x and y values are mapped as sin(u) and cos(u) — the classic Polar to Cartesian conversion for describing a circle. The spiral effect is accomplished by plotting <code>theta</code> on the z-axis.  The right half of Figure 11.5 illustrates a fully parametric plot, where the values of all three coordinates are mappings of an independent parameter, <code>t</code>. This particular example is a plot of the 3-D Brownian motion of a particle receiving random impulses in all three axes. Note the use of text anchored in x-y-z space to label points on the graph. The figure is drawn using Listing 11.5.</p>
      </div>
      <div class="listing"><iframe src="..\listings\listing_11_5_livehtml.html"></iframe></div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="Other 3-D Plot Capabilities">
      <!-- Other 3-D Plot Capabilities -->
      <h3 id="11_3_3">11.3.3	Other 3-D Plot Capabilities</h3>
      <div class="container">
       <p>If you are using MATLAB, you can also create some more exotic 3-D plots that are not necessary to understand the basic principles of plotting, but are powerful methods for visualizing real data:</p>
       <ul>
          <li><code>bar3(x, y)</code> produces a bar graph with the values in <code>y</code> positioned at the horizontal locations in <code>x</code>. The options available can be studied with<br>
          <code>>> help bar3.</code></li>
          <li><code>barh3(x, y)</code> produces a bar graph with the values in <code>y</code> positioned at the horizontal locations in <code>x</code>. The options available can be studied with <br>
          <code>>> help barh.</code></li>
          <li><code>pie3(y)</code> makes a 3-D pie chart of the values in <code>y</code>. For more options, see<br>
          <code>>> help pie3.</code></li>
        </ul>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="4" data-sect-name="Surface Plots">
    <!-- Surface Plots -->
    <h2 id="11_4">11.4 Surface Plots</h2>
    <div class="container">
      <p>In Section 11.3.2, we saw that data can be generated for all three axes based on one linear parameter. However, more dramatic graphics are produced by a different group of 3-D graphics functions that produce images based on mapping a 2-D surface. The underlying 2-D surface is sometimes referred to as plaid because of its conceptual similarity to a Scottish tartan pattern. To design such a pattern, one needs only to specify the color sequence of the horizontal and vertical threads. In the same way, we specify a plaid by defining vectors of the row and column data configurations.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Basic Capabilities">
      <!-- Basic Capabilities -->
      <h3 id="11_4_1">11.4.1	Basic Capabilities</h3>
      <div class="container">
        <p>Three fundamental functions are used to create 3-D surface plots:</p>
        <ul>
          <li><code>[xx, yy] = meshgrid(x, y)</code> accepts the <code>x<sub>1*m</sub></code> and <code>y<sub>1*n</sub></code> vectors that bound the edges of the plaid and replicates the rows and columns appropriately to produce <code>xx<sub>n*m</sub></code> and <code>yy<sub>n*m</sub></code>, containing the <code>x</code> and <code>y</code> values (respectively) of the complete plaid. This enables us in general to compute mappings for the 3-D coordinates of the figure we want to plot.</li>
          <li><code>mesh(xx, yy, zz)</code> plots the surface as white facets outlined by colored lines. The line coloring uses one of many color maps (listed in Appendix A), where the color is selected in proportion to the <code>zz</code> parameter. You can turn the white facets transparent with the command <code>hidden off</code>.</li>
          <li><code>surf(xx, yy, zz)</code> plots the surface as colored facets outlined by black lines. The line coloring by default is selected in proportion to the <code>zz</code> parameter. You can remove the lines by using one of a number of shading commands listed in Appendix A.</li>
        </ul>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Simple Exercises">
      <!-- Simple Exercises -->
      <h3 id="11_4_2">11.4.2	Simple Exercises</h3>
      <div class="container clearfix">
        <div class="float-sm-right">
          <div class="card">
               <img src="..\Images\Fig_11_6.JPG" alt="Figure 11.6" class="fig card-img">
               <p class="figure-name card-title">Figure 11.6: Geometry of a cube</p>
          </div>
          <div class="card">
               <img src="..\Images\Fig_11_7.JPG" alt="Figure 11.7" class="fig card-img">
               <p class="figure-name card-title">Figure 11.7: Cube with solid fill</p>
          </div>
        </div>
        <p>We will consider some simple situations that illustrate many of the features of surface drawing.</p>
        <p><b>Draw a cube</b>: In this example, in order to understand the underlying logic, we will develop the basic concept of drawing a cube without the help of the <code>meshgrid(...)</code> function. Figure 11.6 shows the coordinates of a cube of side 2 units centered at the origin drawn with simple line plots and Figure 11.7 shows the same cube drawn as a solid object. Before we descend into specifics, you need to understand specifically in the case of this cube how the <code>surf(...)</code> function works. Visualize four pens that can draw in 3-D space attached to the tops of your forefingers and thumbs respectively.Put your forefingers and thumbs together at the point P, and then slide them out to the points A, B, C and D. The <code>surf(...)</code>function fills in a surface between the lines you drew making the top of the cube. Now slide your fingers and thumbs down the sides of the cube to the points E, F, G and H. Filling in those surfaces draws the sides of the cube.  Finally, draw the bottom by sliding your fingers and thumbs across the bottom of the cube to its center at Q.</p>
        <p>To define the sides of the cube, we need to draw four lines to complete the horizontal square, thereby needing five columns with the first column repeated at the last column.  To define the top and bottom of the cube, we must add the points P and Q at the centers of the top and bottom. Although only one point each is required to define P and Q, the array must have the same number of columns in each row. Therefore, P and Q must be replicated five times to keep the arrays rectangular.</p>
        <p>Listing 11.6 shows the code that plots this cube from scratch.</p>
      </div>
      <div class="listing"><iframe src="..\listings\listing_11_6_livehtml.html"></iframe></div>
      <div class="container clearfix">
        <div class="float-sm-right card">
             <img src="..\Images\Fig_11_8.JPG" alt="Figure 11.8" class="fig card-img">
             <p class="figure-name card-title">Figure 11.8: A Parabolic Dish</p>
        </div>
        <p><b>A Simple Parabolic Dish</b>:  The simplest surface plots are obtained by defining a z value for each point on an x-y plaid. We will continue with a simple example illustrating the use of <code>meshgrid(...)</code> to define the plaid. Consider
        how we might plot the data shown in Figure 11.8 . Before we look at the code, consider what the picture represents. The independent variables are <code>x</code> and <code>y</code>, each covering the range from −3 to 3, each having seven discrete
        values. As the title indicates, the <code>z</code> values are calculated as the sum of <code>x<sup>2</sup></code> and
        <code>y<sup>2</sup></code>. However, we don't need 14 <code>z</code> values as the range of <code>x</code> and <code>y</code> values might suggest, but <code>49</code>! In order to plot the 3-D shape of our parabolic bowl, we must have a <code>z</code> value for every point on the <code>x-y</code> surface. Each of these points has values of <code>x</code> and <code>y</code> corresponding to the intersections of the <code>x</code> and <code>y</code> vectors. Therefore, the process of creating this plot has three parts:</p>
        <ol>
          <li>Develop the underlying plaid specifying the x-y location of every point on the x-y plane.</li>
          <li>Calculate the z values from the plaid.</li>
          <li>Call a plotting function that will accept the plaid and these z values to produce the required plot.</li>
        </ol>
        <p>The code to accomplish this is shown in Listing 11.7.</p>
      </div>
      <div class="listing"><iframe src="..\listings\listing_11_7_livehtml.html"></iframe></div>
    </div>

    <div class="chp-subsection" data-sub-num="3" data-sub-name="3-D Parametric Surfaces">
      <!-- 3-D Parametric Surfaces -->
      <h3 id="11_4_3">11.4.3	3-D Parametric Surfaces</h3>
      <div class="container clearfix">
        <div class="float-sm-right card">
             <img src="..\Images\Fig_11_9.JPG" alt="Figure 11.9" class="fig card-img">
             <p class="figure-name card-title">Figure 11.9: A Cylinder</p>
        </div>
        <p><strong>Cylinder</strong>: Consider first the construction of a cylinder. One could consider this as a sheet of paper rolled up in a cylindrical shape. We could visualize that piece of paper as a plaid of values, not of <code>x-y</code>, but perhaps <code>x−&theta;</code> where the range of <code>x</code> would be from 0 to the length of the cylinder, and the range of <code>&theta;</code> would be <code>0</code> to <code>360°</code>.  To plot this, one would then merely need to create a plaid in <code>x</code> and <code>&theta;</code>, and then decide on the mapping from <code>x-&theta;</code> to the <code>y</code> and <code>z</code> values of the cylinder.</p>
        <p>Fortunately for us, however, the Matlab folks have provided a function named <code>cylinder</code> that takes two parameters: a vector or radius values along the length of the cylinder and the number of points around the circumference. We will see later how to generalize this, but for now, we use it in one line of code to compute the <code>xx</code>, <code>yy</code> and <code>zz</code> values that will draw a cylinder.</p>
        <p>The resulting picture is shown in Figure 11.9, and the code is shown in Listing 11.8.</p>
      </div>
      <div class="listing"><iframe src="..\listings\listing_11_8_livehtml.html"></iframe></div>
      <div class="container clearfix">
        <div class="float-sm-right card">
             <img src="..\Images\Fig_11_10.JPG" alt="Figure 11.10" class="fig card-img">
             <p class="figure-name card-title">Figure 11.10: A Simple Sphere</p>
        </div>
        <p><strong>Sphere</strong>: Now, we construct a sphere as shown in Figure 11.10. Conceptually, we could start with a cylinder but instead of using a constant radius in the x direction, we will calculate the radius in that direction by rotating a second angle from 0 to 180°. Again, however, the Mathworks folks have taken all the fun and math out of this by providing the <code>sphere(N)</code> function where the parameter determines the number of facets around the face of the sphere.</p>
        <p>The code for drawing this sphere is shown in Listing 11.9.</p>
      </div>
      <div class="listing"><iframe src="..\listings\listing_11_9_livehtml.html"></iframe></div>
    </div>

    <div class="chp-subsection" data-sub-num="4" data-sub-name="Bodies of Rotation">
      <!-- Bodies of Rotation -->
      <h3 id="11_4_4">11.4.4	Bodies of Rotation</h3>
      <div class="container clearfix">
        <div class="float-sm-right card">
             <img src="..\Images\Fig_11_11.JPG" alt="Figure 11.11" class="fig card-img">
             <p class="figure-name card-title">Figure 11.11: Rotate a Function about the X Axis</p>
        </div>
        <div class="float-sm-right card">
             <img src="..\Images\Fig_11_12.JPG" alt="Figure 11.12" class="fig card-img">
             <p class="figure-name card-title">Figure 11.12: Rotate a Function about X Axis</p>
        </div>
        <p>The cylinder and sphere drawn in the above section are special cases of a more general form of 3-D body. Bodies of rotation are created in general by rotating a function <code>v = f(u)</code> defined over a range of <code>u</code> values about the <code>x</code>, <code>y</code> or <code>z</code> axes.  In general, we make no claims about the nature of <code>f(u)</code>. It could be a rational function, or merely a “lookup table” specifying a value of <code>f(u)</code> for every <code>u</code>.  First, we consider rotating a continuous function <code>v = f(u)</code> about the x axis.</p>
        <p><strong>Using the <b><code>cylinder(...)</code></b> function</strong>: To rotate <code>v = f(u)</code> about the x-axis, we could consider this equation as <code>r = f(x)</code>. Figure 11.11 shows the logic of this rotation. The independent variable is x, and the values of y and z are computed as the usual polar-to-Cartesian conversion:</p>
        <p><code>y = r cos(u)</code> and <br>
        <code>z = r sin(u)</code>.</p>
        <p>Whenever the rotation you want can be performed using the <code>cylinder(...)</code> function, you should do so, as is the case here. We want to put the independent variable <code>u</code> along the axis of rotation <code>x</code>  and make the dependent variable <code>v</code> the radius. The most general form of the <code>cylinder(...)</code> function allows you to specify a vector of radii equally spaced along the cylinder, which is the case here. Listing 11.9 shows how we do this, and Fig 11.12 is the result.</p>
      </div>
      <div class="container clearfix">
        <div class="float-sm-right">
          <div class="card">
             <img src="..\Images\Fig_11_13.JPG" alt="Figure 11.13" class="fig card-img">
             <p class="figure-name card-title">Figure 11.13: Rotate a Function about Z Axis</p>
          </div>
          <div class="card">
             <img src="..\Images\Fig_11_14.JPG" alt="Figure 11.14" class="fig card-img">
             <p class="figure-name card-title">Figure 11.14: Rotate a Function about Z Axis</p>
          </div>
        </div>
        <p><strong>Generalized Bodies of Rotation</strong>: To rotate a shaping function <code>v = f(u)</code> about the z-axis requires some thought. Consider Fig 11.13. Although superficially similar to the X axis rotation in Figs 11.11 and 11.12 above, we need to exchange to roles of <code>u</code> and <code>v</code>. The independent variable <code>u</code> is now the radius of the shape and <code>v</code>, the dependent variable, needs to lie along the axis of rotation, z. There are several ways to accomplish this, and we will consider them in decreasing levels of 'horrible':</p>
        <ol>
          <li>We could invert the body of <code>f(u)</code> by changing it to <code>sqrt(u)</code>, but only the very simple functions are invertible like this</li>
          <li>As we will see later, Matlab has some useful tools that will look up equally spaced values of <code>v</code> and produce a new set of <code>u</code> values at those spacings, or</li>
          <li>we could give up on the <code>cylinder(...)</code> function and do the rotation from first principles.</li>
        </ol>
        <p>We will implement this rotation using the third, most general strategy. Figure 11.13 shows the logic of this rotation. The independent variable is now <code>r</code>, and the values of <code>x</code> and <code>y</code> are computed as the usual polar-to-Cartesian conversion:</p>
        <p><code>x = r cos(u)</code> and <br>
        <code>y = r sin(u)</code>.</p>
        <p>You can see the results in Figure 11.14.  The code that generated this output is in Listing 11.10.</p>
      </div>
      <div class="listing"><iframe src="..\listings\listing_11_10_livehtml.html"></iframe></div>
      <div class="container clearfix">
        <div class="float-sm-right card">
           <img src="..\Images\Fig_11_15.JPG" alt="Figure 11.15" class="fig card-img">
           <p class="figure-name card-title">Figure 11.15: A Donut</p>
        </div>
        <p><strong>More Complex shapes: a Torus (Donut)</strong>: A donut is actually very simple to draw from first principles.  We merely need to visualize what the cross-section looks like and then rotate it about the appropriate axis.  Clearly, the axis about which the final rotation is performed will be the Z axis so that the donut will be horizontal.  We therefore first visualize in the x-z plane what the section looks like.  In this case, it will be a circle offset from the origin of coordinates by a distance that will become the radius of the donut. That circle will be created using standard polar-to-Cartesian coordinates.  Finally, we realize that the plaid on which it will be built consists of two angles each going from 0 to 2&pi;.</p>
        <p>The code to accomplish this is in Listing 11.11, and the resulting image is in Figure 11.15.</p>
      </div>
      <div class="listing"><iframe src="..\listings\listing_11_11_livehtml.html"></iframe></div>
      <div class="container clearfix">
        <div class="float-sm-right card">
           <img src="..\Images\Fig_11_16.JPG" alt="Figure 11.16" class="fig card-img">
           <p class="figure-name card-title">Figure 11.16: An Irregular Shape</p>
        </div>
        <p><strong>Rotating Discrete Functions</strong>: There is no need to restrict ourselves to continuous functions as the profiles for bodies of rotation. Figure 11.16 shows the 2-D profile of a fictitious machine part and the picture created when that profile is rotated about the x-axis. The figure was generated by the code shown in Listing 11.12.</p>
      </div>
      <div class="listing"><iframe src="..\listings\listing_11_12_livehtml.html"></iframe></div>
      <div class="container">
        <p>Notice in Listing 11.12 that we elected to use the <code>cylinder(...)</code> function to make the values of <code>v</code> the radii of the cylinder.  However, this placed the values of <code>v</code> at regular intervals down the cylinder.  Since the corresponding values of <code>u</code> indicated where they should have been placed, we then had to move all the <code>xx</code> circle values to the locations specified in <code>u</code>. We could have replaced all the code from <code>subplot(1, 2, 1)</code> to <code>surf(xx, yy, zz)</code> with this:</p>
      </div>
      <div class="exercise"><iframe src="..\exercises\exercise_11html.html"></iframe></div>
    </div>

    <div class="chp-subsection" data-sub-num="5" data-sub-name="Other 3-D Surface Plot Capabilities">
      <!-- Other 3-D Surface Plot Capabilities -->
      <h3 id="11_4_5">11.4.5	Other 3-D Surface Plot Capabilities</h3>
      <div class="container">
        <p>The MATLAB language defines special-purpose functions to enhance the quality of surface plots:</p>
        <ul>
          <li><code>alpha(x)</code> sets the transparency of the surfaces. 0<=x<=1, where 0 means completely transparent and 1 (the default value) is opaque. The options available can be studied with <code>>> help alpha</code>.
          <li><code>contour(z)</code> produces a contour plot of the plaid surface defined by z. The options available can be studied with <code>>> help bar3</code>.</li>
          <li><code>[x,y,z] = cylinder(n)</code> constructs the meshgrid for a cylinder with n facets in each direction. For more options, see <code>>> help cylinder</code>.</li>
          <li><code>[x,y,z] = ellipsoid(n)</code> constructs the meshgrid for an ellipsoid with n facets in each direction. For more options, see <code>>> help ellipsoid</code>.</li>
          <li><code>[x,y,z] = sphere(n)</code> constructs the meshgrid for a sphere with n facets in each direction. For more options, see <code>>> help sphere</code>.</li>
          <li><code>meshc(x,y,z)</code> makes a mesh plot with contours below. For more options, see <code>>> help meshc</code>.</li>
          <li><code>meshz(x,y,z)</code> makes a mesh plot with vertical line extensions. For more options, see <code>>> help meshz</code>.</li>
          <li><code>surfc(x,y,z)</code> makes a surface plot with contours below. For more options, see <code>>> help surfc</code>.</li>
          <li><code>surfz(x,y,z)</code> makes a surface plot with vertical line extensions. For more options, see <code>>> help surfz</code>.</li>
          <li><code>waterfall(x,y,z)</code> makes a mesh plot with vertical line extensions only in the x direction. For more options, see <code>>> help waterfall</code>.</li>
        </ul>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="6" data-sub-name="Assembling Compound Surfaces">
      <!-- Assembling Compound Surfaces -->
      <h3 id="11_4_6">11.4.6	Assembling Compound Surfaces</h3>
      <div class="container clearfix">
        <div class="float-sm-right card">
          <video controls class="card-image"><source src="..\Images\klein_bottle.mp4" type="video/mp4">Figure 11.17</video>
          <p class="figure-name card-title">Fig 11.17: A Klein Bottle</p>
        </div>
        <p>We can assemble more complex solid bodies by constructing simple surfaces and concatenating the data before submitting it to the rendering machine. Shapes of considerable complexity can be assembled this way. Consider, for example, the Klein bottle shown below, a well-documented example of topological curiosity. The particular example shown in Figure 11.17. It was constructed by building a set of simple components and then concatenating the arrays. All the components could be created from the examples shown above. Moving from top to bottom, these components are:</p>
        <ul>
          <li> the top of the handle is just half of a donut,</li>
          <li> the curved section of the handle is a cylinder with the yy circled shifted with a cosine function.</li>
          <li> the top part of the body is a cosine function rotated about the z axis, and</li>
          <li> the bottom of the body is another donut sliced in half horizontally.</li>
        </ul>
       <p>The code is a little too complex to be included here, but can be found on the companion Web site. If you are curious, Figure 11.17 is actually a video clip explaining the very strange topological challenge posed by the Klein bottle.</p>
      </div>
    </div>
  </div>

  <div class="chp-section" data-sect-num="5" data-sect-name="Manipulating Plotted Data">
    <!-- Manipulating Plotted Data -->
    <h2 id="11_5">11.5 Manipulating Plotted Data</h2>
    <div class="container">
      <p>Two new features introduced with MATLAB 7.6 (R2008a) allow you to interact with the data presented in a plot. Brushing allows you to select portions of the data presented in a plot and make changes to the values presented. Linking allows you to connect the plotted data to the underlying data source, so that when you make changes to the plotted data, these changes are reflected in the data source. Whereas these tools allow the user to change the appearance of data presentations interactively, a careful user would return to the original tools that created the plots and explicitly insert the logic that changes the appearance of the results. This provides a traceable set of programs that show exactly how the data were generated.</p>
    </div>
  </div>

  <div class="chp-section" data-sect-num="6" data-sect-name="Engineering Example - Visualizing Geographic Data">
    <!-- Engineering Example -->
    <h2 id="11_6">11.6  Engineering Example - Visualizing Geographic Data</h2>
    <div class="container">
      <p>You have been given two files of data: "atlanta.txt", which presents the streets of Atlanta in graphical form, and "ttimes.txt", which gives the travel times between Atlanta suburbs and the city center. You have been asked to present these data sets in a manner that will help to visualize and validate the data.</p>
    </div>

    <div class="chp-subsection" data-sub-num="1" data-sub-name="Analyzing the Data">
      <!-- Analyzing the Data -->
      <h3 id="11_6_1">11.6.1	Analyzing the Data</h3>
      <div class="container clearfix">
        <p>First, we proceed to determine the nature of the data by opening the files and examining their format and content.</p>
        <ol>
          <li><b>Determine the file format</b>: the first step is to open the data files in a plain text editor. The format appears to be consistent with that of a text file delimited by tab characters. Since there are no strings in the files, it should be suitable to be read using the built-in <code>dlmread(...)</code> function. Of course, the down side of being able to read the files easily is that we have no idea what they contain, and we need to spend some quality time figuring that out.</li>
          <li><b>Discern the street map file content</b>: Table 11.1 shows the first few lines of the file &quot;atlanta.txt&quot; simplified by omitting certain irrelevant columns. The numbers in columns 2-5 are pairs, the first of the pair being a large negative number, and the second a smaller positive number. Assuming that each row of this file is a street segment, these could be the x-y coordinates of the ends of a line. A little thought confirms this guess when we realize that the latitude of Atlanta is around -84&deg; relative to the Greenwich meridian, and its longitude is around 33&deg; north of the equator - clearly, the values in these columns are 1,000,000 times the latitude and longitude of points within the city, probably each end of street segments. Column 6 contains numbers mostly in the range 1-6, which could indicate the type of street. We could explore this idea by coloring each line according to that value.</li>
          <div class="card">
             <img src="..\Images\Table_11_1.JPG" alt="Table 11.1" class="fig fig-wide card-img">
             <p class="figure-name card-title">Table 11.1: Part of the File</p>
          </div>
          <li><b>Discern the travel time file content</b>: Table 11.2 shows the first few lines of the file "ttimes.txt" simplified by omitting certain irrelevant columns. The same latitude/longitude values occur in columns 4 and 5, but they are not repeated, suggesting that the data in this file are in a different form. Examining the first two columns, the numbers in column 2 cycle repeatedly from 1 to 75, with column 1 counting the number of cycles up to 75. Furthermore, the values in column 5 are the same whenever column 1 is the same, and the values in column 4 are the same whenever the value in column 2 matches. This seems to be much like the plaid that results from a meshgrid(...) function call. The values in column 6 then become evident — they would be the z values of the plaid, and it seems reasonable to assume that they represent the travel time in minutes.</li>
          <div class="card">
             <img src="..\Images\Table_11_2.JPG" alt="Figure 11.16" class="fig card-img">
             <p class="figure-name card-title">Table 11.2: Part of the File</p>
          </div>
        </ol>
      </div>
    </div>

    <div class="chp-subsection" data-sub-num="2" data-sub-name="Displaying the Data">
      <h3 id="11_6_2">11.6.2	Displaying the Data</h3>
      <div class="container clearfix">
        <p>With this much understanding of the data sources, we proceed to solve the problem of presenting the data. The script shown in Listing 11.13 shows the code used to visualize these data files and Figure 11.18 shows the resulting plot.</p>
        <div class="card">
          <video controls class="card-image"><source src="..\Images\Atlanta.mp4" type="video/mp4">Figure 11.17</video>
          <p class="figure-name card-title">Fig 11.18: Travel Times in Atlanta</p>
        </div>
       <p>As a credibility check, play the video clip to see the plot rotated to look straight down on the map. The travel time surface shows &quot;valleys&quot; of low travel times that follow the paths of the major expressways through the city.</p>
      </div>
      <div class="listing"><iframe src="..\listings\listing_11_13_livehtml.html"></iframe></div>
    </div>
  </div>

  <!-- Chapter Summary -->
  <h2>Chapter Summary</h2>
  <div class="container">
    <p>This chapter presented the principles and practice of plotting:</p>
    <ul>
      <li>Basic 2-D line plots are accomplished by using <code>plot(x,y)</code>, where <code>x</code> is the independent variable and <code>y</code> the dependent variable</li>
      <li>2-D parametric plots are accomplished by using <code>plot(x,y)</code>, where both <code>x</code> and <code>y</code> are dependent on another independent variable</li>
      <li>3-D line and parametric plots are accomplished by using <code>plot3(x,y,z)</code></li>
      <li>Basic 3-D surface plots are accomplished by building a plaid using <code>[xx yy] = meshgrid(x,y)</code>, computing the <code>zz</code> layer as a function of <code>xx</code> and <code>yy</code>, and then plotting the surface using <code>mesh(xx, yy, zz)</code> or <code>surf(xx, yy, zz)</code></li>
      <li>Parametric surface plots, like parametric line plots, are achieved by building the plaid with two independent variables and making <code>xx</code>, <code>yy</code>, and <code>zz</code> functions of those independent variables</li>
      <li>Bodies of rotation are a special case of parametric surface plots where one of the independent variables is an angle with values between <code>0</code> and <code>2&pi;</code>.</li>
    </ul>
  </div>
</div>


</body>
</html>

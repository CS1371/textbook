Chapter 3 - Functions


3.1  Concepts: Abstraction and Encapsulation
3.2   Black Box View of a Function
3.3    MATLAB  Implementation
3.3.1  General Template
3.3.2   Function Definition
3.3.3  Storing and Using Functions
3.3.4  Calling Functions
3.3.5  Variable Numbers of Parameter
3.3.6   Returning Multiple Results
3.3.7  Auxiliary Local Functions
3.3.8  Encapsulation in MATLAB Functions
3.3.9  Global Variables
3.4 Engineering Example— Measuring a Solid Object

Chapter Objectives

This chapter discusses the nature, implementation, and behavior of user-defined functions in MATLAB:
■	How to define a function
■	How data are passed into a function
■	How to return data, including multiple results
■	How to include other functions not needed except as helpers to your own function
Writing a user-defined function allows you to isolate and package together a code block, so that you can apply that code block to dif- ferent sets of input data. We have already made use of some built-in functions like sin(...) and plot(...) by calling them; this chapter will deal with creating and using your own functions.

3.1	Concepts: Abstraction and Encapsulation
A function is an implementation of procedural abstraction and encapsulation. Procedural abstraction is the concept that permits a code block that solves a particular sub-problem to be packaged and applied to different data inputs. This is exactly analogous to the concept of data abstraction we discussed in Chapter 3 where individual data items are gathered to form a collection. We have already used a number of built-in procedural abstractions in the form of functions. All the mathematical functions that compute—for example, the sine of a collection of angles or the maximum value of a vector—are examples of procedural abstraction. They allow us to apply a code block about which we know nothing to data sets that we provide. To make use of a built-in function, all we have to do is provide data in the form the function expects and interpret the results according to the function’s specification.

Encapsulation is the concept of putting a wrapper around a collection that you wish to protect from outside influence. Functions encapsulate the code they contain in two ways: the variables declared within the function are not visible from elsewhere, and the function’s ability to change the values of variables (otherwise known as causing side effects) is restricted to its own code body.

3.2	Black Box View of a Function

The most abstract view of a function can be seen in Figure 3.1. It consists of two parts: the definition of the interface by which the user passes data items to and from the function, and the code block that produces the results required by that interface. A function definition consists of the following components:
■	A name that follows the same syntactic rules as a variable name
■	A set of 0 or more parameters provided to the function
■	Zero or more results to be returned to the caller of the function
The basic operation of a function begins before execution of the function actually starts. If the function definition requires n parameters, the calling instructions first prepare n items of data from its workspace to be provided to the function. These data are then passed to the function, the code body is executed, and the results are returned to the caller.

3.3  MATLAB Implementation
In this section, first we consider the general template for implementing functions and then the MATLAB implementation of that template.
3.3.1	General Template
The general layout of a function definition is shown in Template 3.1. The <return info> section for most functions involves providing the name(s) of the results returned followed by an = sign. If more than one result is to be returned, they are defined in a vector-like container. If nothing is to be returned from this function, both the result list and the = sign are omitted. The <function name> is a name with the same syntactic rules as a variable name and will be used to invoke the code body. The <parameters> section is a comma-separated list of the names of the data to be provided to the function. The <documentation> section is one or more lines of comments that describe what the function does and how to call it. These lines will appear in two situations:
■	All the documentation lines up to the first non-document line are printed in the Command window when you type the following:
>> help <function name>
■	The first line is listed next to the file name in the Current Directory listing

3.3.2	Function Definition
In the MATLAB language, functions must be stored in a separate file located in a directory accessible to any script or function that calls it. The file containing the definition of a function named function_name must be
<function_name>.m. For the general user, the Current Directory is the normal place to store it. Listing 3.1 illustrates a typical MATLAB function called cylinder that consumes two parameters, the height and radius of a cylinder, and produces the return variable volume.

In Listing 3.1:
Line 1: The MATLAB function definition is introduced by the key word function, followed by the name of the return variable (if any) and the = sign, then the name of the function and the names of the formal parameters in parentheses. All comments written immediately after the function header are available to the MATLAB Command window when you enter:
>>help <function_name>
The first comment line also appears in the Current Directory window as an indication of the basic purpose of the function. It is a good idea to include in the comments a usage statement showing copy of the function header line, sometimes referred to as the Application Programmer Interface (API), to remind a user exactly how to use this function.
Line 3: Although encapsulation rules forbid access to the caller’s variables, the code body still has access to all built-in MATLAB variables and functions (e.g., pi, as used here).
Line 5: You must make at least one assignment to the result variable.
Line 6: Regrettably, the end statement is not required if there is only one function in the file; without it, the code body terminates at the end of the file. However, it must be present if there are other function definitions in the same file.

Try saving and testing the cylinder function in Exercise 3.1
3.3.3	Storing and Using Functions
All user-defined MATLAB functions must be created like scripts in an m-file. When the file is first created, it must be saved in an m-file with the same file name as the function. For example, the function in Listing 3.1 named cylinder must be saved in a file named cylinder.m. Once the file has been saved, you may invoke the function by entering its name and parameters of the right type and number in the Command window, in a script, or in other function definitions. If you do not specify an assignment for the result of the function call, it will be assigned to the variable ans.

3.3.4	Calling Functions
When a function is defined, the user provides a list of the names of each data item expected to be provided by the caller. These are called the formal parameters. When this function is called, the caller must provide the same number of data values expected by the function definition. These are the actual parameters and can be generated in the following ways:
■	Constants
■	Variables that have been defined
■	The result of some mathematical operation(s)
■	The result returned from other functions

When the actual parameters have been computed, copies of their values are assigned as the values of the formal parameters the function is expecting.
Values are assigned to parameters by position in the calling statement and function definition. The process of copying the actual parameters into the formal parameters is referred to as “passing by value”— the only technique defined in the MATLAB language for passing data into a function.

Once the parameter names have been defined in the function’s workspace, the function’s code body is executed, beginning with the first instruction. If return variables have been defined for the function, every exit from the code body must assign valid values for the results.

3.3.5	Variable Numbers of Parameters
Although the number of parameters is usually fixed, most languages, including MATLAB, provide the ability to deal with a variable number of parameters, both incoming and returning. The built-in function nargin computes the actual number of parameters provided by the user in the current function call. If the function is designed to make use of nargin, the user calling this function can provide any values he deems important and allow the function to set default values for the unnecessary parameters.

Similarly, the function nargout computes the number of storage variables actually provided by the user. So if one or more of the results requires extensive computation or user interaction and the caller has not asked for that data, that computation can be omitted.

3.3.6	Returning Multiple Results

The MATLAB language is unique among programming languages in providing the ability to return more than one result from a function by name. The multiple results are specified as a “vector” of variable names, for example, [area, volume], as shown in Listing 3.2. Assignments must be made to each of the result variables. However, the calling program is not required to make use of all the return values.
In Listing 3.2:
Line 1: Multiple results to be returned are specified as a “vector” of variable names, each of which must be assigned from the code body.
Lines 2–3: Same as Listing 3.1
Line 4: Added to set the value of the second result.
Exercise 3.2 shows how to invoke a function that can return multiple results. Notice that the normal method to access the multiple answers is to put the names of the variable to receive the results in a vector. The names may be any legal variable name, and the values are returned in the order of the results defined. If you choose less than the full number of results (or none at all), the answers that are specified are allocated from left to right from the available results. As with parameter assignment, the results are allocated by position in these vectors. Although we called the variable v in the last test, it still receives the value of the first result, area. If you really only want the second result value, you must put either a '~' marker or a dummy variable name like 'junk' in the place of any variable you wish to ignore. So this call:
[~, v] = cylinder(1, 1);
will put the volume in the variable v.

3.3.7	Auxiliary Local Functions
Since the MATLAB language uses the name of the file to identify a function, every function should normally be saved in its own m-file. However, there are times when auxiliary functions (sometimes called “helper functions”) are needed to implement the algorithm contained in the main function in a file. If this auxiliary function is only used in the main function or its helpers, it can be written in the same file as its calling function after the definition of the main function. By convention, some people append the word local_ to the name of local functions.

Scripts or functions that use the code in an m-file can reach only the first function. Other functions in the m-file, the auxiliary functions, can only be called from the first function or other auxiliary functions in the same file.

3.3.8	Encapsulation in MATLAB Functions
Encapsulation is accomplished in most modern languages, including MATLAB, by implementing the concept of variable scoping. In practice, this is achieved by allocating a separate workspace to each function. When MATLAB is first started, a default workspace is created in which variables created in the Command window or by running scripts are stored. When a function is called, a fresh workspace is created (see Section 9.1.2 for details), and the actual parameter values are copied into the formal parameter names in that new workspace. When the function finishes, this operation is reversed. The returning parameters are copied into the variables provided by the caller in the previous workspace, and the function’s workspace is released. The Variables window always shows you the contents of the current workspace.

Variable scoping defines the places within your Command window, MATLAB system, and m-files to which instructions have access. It is related to the Variables window, which shows you your current workspace. When using the Command window or running a script and you access the value of a variable, the system will reach into your current workspace and then into the MATLAB system libraries to find its current value. This is referred to as Global Scope. When you run a function, its local variables, including the internal names of its parameters, are not included in your current workspace, and it does not look into your current workspace for values of variables it needs. This is referred to as Local Scope, wherein the variables within a function are not visible from outside and the function is unable to cause side effects by making assignments to variables in other workspaces except by returning results.
To illustrate variable scoping, do Exercise 3.3.

3.3.9	Global Variables
Because MATLAB always copies the input data into the function’s workspace, there are occasions when it is very inefficient to pass large data sets into and out of a function. To avoid passing large amounts of data, we can use global variables. Global variables must be defined in both the calling script and the function using the key word global. For example, suppose we collect a large volume of data in a variable buffer and do not want to copy the whole buffer into and out of a function that processes that data. In this case, we declare the variable to be global in both the calling space and the called function by placing the following line of code before the variable is first used in both places:
global buffer
The function will then be able to access and modify the values in buffer without having to pass it in and out as a parameter. This feature must be used with caution, however, because any function with global access to data is empowered to change that data. In other words, the use of global data circumvents the natural MATLAB language’s encapsulation mechanisms.
3.4 Engineering Example—Measuring a Solid Object

Problem:
Consider the disk shown in Figure 3.2. It has a radius R, height h, and eight cylindrical holes each of radius r bored in it. This might be a component of a machine that must be painted and then assembled with other components. During the process of designing this machine, we may need to know the weight of this disk and the amount of paint required to finish it. The weight and the amount of paint for the machine is the sum of the values for each component. Since the weight of our disk is proportional to its volume and the amount of paint is proportional to its “wetted area,” we need the volume and area of this disk.

Write a script to compute the volume of the disk and its wetted area

Solution:
 
Figure 3.2 Disk with holes
 
Listing 3.3 shows the code that solves this problem. 
In Listing 3.3:
Lines 1–3: Set up the disk sizes. Notice that the script works fine with a vector of disk thicknesses to check the behavior as thickness varies.
Line 4: Area and volume of the large disk.
Line 5: Area and volume of one hole.
Line 6: Volume computation. Line 7: The area computation.
Table 3.1 shows the results when this code is run. Notice that for thin
 
disks, the area is smaller with the holes. However, as the thickness increases, the area with the holes is larger than without, as one would expect.

Chapter Summary

This chapter showed you how to encapsulate a code block to allow it to be reused:
■	Functions are defined in a file of the same name using the key word
function to distinguish them from scripts
■	Parameters are copied in sequence into the function and given the
names of the formal parameters
■	Results are returned to the caller by assigning value(s) to the return
variable(s)
■	Variables within the function can be accessed only in the function’s
code block unless they are declared global
■	Helper functions accessible only to functions within the same file
may be added below the main function and otherwise obey the
same rules as the main function

[Summary Table 05]

[Problems added here]





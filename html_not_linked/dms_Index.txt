Symbols#
.!  scalar transpose 04_Vectors.htm 101
.^  scalar power 04_Vectors.htm 101
! see delimit the characters, transpose 
^  matrix power 04_Vectors.htm 102
+   unary positive 04_Vectors.htm 103
-   unary negative 04_Vectors.htm 103
~   unary negation 04_Vectors.htm 103
.* scalar multiplication 04_Vectors.htm 104
./ scalar division 04_Vectors.htm 104
.\ scalar left_divide 04_Vectors.htm 104
* matrix multiplication 04_Vectors.htm 104
/ matrix division 04_Vectors.htm 104
\ matrix left_divide 04_Vectors.htm 104
+  addition _  04_Vectors.htm 105
-  subtraction _  04_Vectors.htm 105
: colon operator  04_Vectors.htm 106
< less than 04_Vectors.htm 107
<= less than_or_equal_to 04_Vectors.htm 107
>= greater than_or_equal_to  04_Vectors.htm 107
> greater than  04_Vectors.htm 107
== equals _  04_Vectors.htm 107
~= not equals 04_Vectors.htm 107
= assignment operator 02_Basics.htm 2_2_2
& element-wise AND  04_Vectors.htm 108
| element-wise OR  04_Vectors.htm 109
&& short-circuit AND   04_Vectors.htm 110
|| short-circuit OR   04_Vectors.htm 111
<...> enter parameters Appendix_A.htm 201
% percent sign Appendix_A.htm 202
. structure field Appendix_A.htm 215
... next line Appendix_A.htm 216
[] empty vector Appendix_A.htm 204
; suppress output  Appendix_A.htm 211
_ underscore character 02_Basics.htm 250
A#
A/D analog to_digital ## ##317 
abstraction see data_abstraction, procedural_abstraction
acosd(...) ## 193
activation_stack ## ##186–187
actual_parameters ## ##109
algorithm  ## ##19
 & Breadth-First Search  ## ##407–408
 & bubble_sort  ## ##373–375, 383
 & Dijkstras ## 408–411
 & insertion_sort ## ##371–373, 382–383
 & merge_sort ## ##377–379, 383
 & Prims ## ##404–406
 & quick_sort  ## ##375–377, 383
 & radix_sort  ## ##379–380, 383
all(...)  ## ##87, 100
alpha(...)  ## 255, 261
ASCII ## ##122, 129
analog-to-digital (A/D) device ## ##317
and(...)
any(...)  ## ##87, 100
arithmetic operations ## 213
array ## ##60–71
 & arithmetic operations with  ## 64
 & cell #
 & concatenation  ## 66–67
 & division (./) ## 54
 & inserting data into  ## ##214
 & linearized  ## 67–71
 & logical operations with  ## 64–65
 & multiplication (.*)  ## 51 
array_elements #
assignment (=)  ## ##21
audioread(...)  ## ##317, 334
auxiliary functions  ## ##111 
axis(...)  ## ##232, 260
B#
bar(...)  ## ##239, 260
bar3(...)  ## ##242, 261
barh(...)  ## ##239, 260
barh3(...)  ## ##243, 261
behavioral abstraction  ## ##268
BFS  #
Big O algebra  ## ##368–371
binary files  ## ##168
Binary_Search   ## 369–370 
bodies_of_rotation  ## ##250–255
Breadth-First Search ##407–408
break see break points, break statement ## ##94, 96, 97, 100
break_points #
break_statement #
bubble_sort ## ##373–375, 383
building ## ##213, 216

C#
case keyword ## ##88, 89, 100
casting ## ##122–123
catch keyword ## ##192, 193, 194, 207
ceil(...) ## ##55, 74
cell_arrays ## ##142–146
central_difference ## ##357
Ceramic_Composition #
char(...) ## ##123, 125, 132, 136
characters see mapping, casting, token, delimiter
character_strings ## ##121–135
 & Conversion_from_Numbers_to_Strings ## ##125–127
 & format_control ## ##126 
 & mapping ## ##122
 & string_conversion ## ##125–127
 & string_operations ## ##129–131
 & token ## ##123
class(...) ## ##145, 160
classes ## 24
clc command ## ##26, 33
clear command ## ##33
clf command ## ##232, 260
close all command ## ##232, 260
collections #
 & building ## ##216
 & filtering ## ##217–218
 & inserting ## ##213–215 
 & mapping ## ##216–217
 & searching ## ##219–220
 & sorting ## ##220
 & folding ## ##218–219
 & traversal ## ##215–216
colon operator (:) ## ##56
color mapped images ## ##294 
colormap## ##232, 260
column_vector ## 61
Command_History ## ##26–27 
Command_Window ## ##25–26, 92, 107,112, 122
comments ## ##33
compile-time_errors ## ##12
compilers ## ##11–12
Compound_Surfaces ## 256 computer
computer_architectures ## ##3–5
concatenation ## 66–67
continue ## ##96, 100
contour(...) ## 255, 261
cross(...) ## ##60, 74
csvread(...) ## 170, 173, 177, 179
csvwrite(...) ## ##170, 179 
cubic spline interpolation ## 343–344 
cumsum(...) ## ##353, 354, 361
cumtrapz(...) ## ##354, 361 
Current_Directory ## ##30–31, 34–35, 107, 108
curve_fitting ## ##345–351
 & polynomial ## ##347–349
cycles ## 396
cylinder(...) ## ##107–109, 255, 261

D#
data_abstraction #
deal(...) function ## ##143–145, 160
delimiter ## ##123, 168
dequeue(...) function ## ##390, 391 
derivative, of function ## ##356 
Detecting_Edges #
diag(...) function ## ##62, 74
diagonal array ## ##61
diff(...) function ## ##357, 361 
differentiation ## ##356–357
Dijkstras algorithm ## ##408–411
directional edges ## ##396
discrete functions, rotating ## ##253–255 
disp(...) ## ##58, 74, 129, 136 
dlmread(...) ## 170, 172–173, 179
dlmwrite(...) ## ##170, 173, 179
documentation ## 107
dot_notation (.) ## ##154, 160
dot_operator ## 64
double(...) ## ##123, 136


E#
edges in a graph ## 396
Editor_window ## ##32–33, 36
elements see vector_elements, array_elements
ellipses (...) ## ##35, 136, 149
ellipsoid(...) function ## ##255, 261
else keyword ## ##83, 100
elseif keyword ## ##84, 100 
empty vector ([]) ## ##50 
encapsulation ## ##106, 111–112
end keyword ## 193
end statement ## ##83, 84, 89, 92, 100
engineering examples #
 & Ceramic composition ## ##283–285
 & detecting edges ## ##306–309
 & electrical circuit analysis ## 285–286
 & encryption ## ##132–135
 & forces and moments ## ##58–60
 & geographic data, visualizing ## ##256–259
 & geopolitical data, processing ## ##221–226
 & graphs ## ##415
 & liquid levels, computation of ##97–99
 & music synthesizer ## ##332–334
 & physical structure,assembling ## ##156–160
 & robot arm motion ## ##202–206
 & Soil_Volume ## 71–73
 & spacecraft launch ## ##36–39
 & spreadsheet data ## ##177–179
 & synthesizer notes, shaping ## 359–360
electrical circuit #
encryption #
enqueue(...) function ## ##390, 391, 393 
equal to (==) ## ##54, 74
error(...) ## 193, 207
Excel spreadsheets ## 170–172
exceptions ## ##190–194
execution errors ## ##12
exponential growth (O(2<sup>N</sup>)) ## ##370 
exponentiation #
extrapolation ## 344–345
eye(...) ## ##270, 286

F#
fact() ## ##195
false values ## ##50, 74, 83, 84, 86, 100 
Fast Fourier Transform (FFT) ##324–328
fclose(...) ## ##174, 180
fft(...) ## ##327, 334
fgetl(...) ## 174, 180
fgets(...) ## 174, 180
fib(...) ## 199
Fibonacci ## ##198–199
field operator ## ##152
fieldnames(...) ## 147, 153, 154
A_Figure ## ##232, 260
fill(...) ## ##239, 260
filtering ## ##213, 217–218
find(...) ## ##68, 74
fix(...) ## 55, 74
floor(...)  ## 55, 74
flowcharts ## ##83
folding ## 213
fopen(...) ## 174, 180
for_loop ## ##90–94, 100 
forces and moments #
formal parameters ## ##109 
format_control ## ##126 
forward difference approximation ## ##356
fprintf(...) function ## ##92, 129, 130, 136, 176, 180
frame, stack ## ##187
frequency, sound ## ##322–324 
function name section ## ##107 
functional_programming ## ##20 
function #
 & acosd(...) ##193
 & all(...) ##87, 100
 & alpha(...) ##255
 & any(...) ##87, 100
 & audioread(...) ##317, 334
 & auxiliary (local) ## ##111
 & axis(...) ##232, 260
 & bar(...) ##239, 260
 & bar3(...) ##242
 & barh(...) ##239, 260
 & barh3(...) ##243
 & ceil(...) ##55
 & char(...) ##123, 125, 132, 136
 & class(...) ##145, 160
 & contour(...) ##255
 & cross(...) ##60, 74
 & csvread(...) ##170, 173, 177, 179
 & csvwrite(...) ##170, 179
 & cumsum(...) ##353, 354, 361
 & cumtrapz(...) ##354, 361
 & cylinder(...) ##107–109, 255
 & deal(...) ##143–145, 160
 & dequeue(...) ##390, 391
 & derivative of ## ##356
 & diag(...) ##62
 & diff(...) ##357, 361
 & disp(...) ##58, 129, 136
 & dlmread(...) ##170, 172–173, 179
 & dlmwrite(...) ##170, 173, 179
 & double(...) ##123, 136
 & ellipsoid(...) ##255
 & encapsulation in ## ##111–112
 & enqueue(...) ##390, 391, 393
 & error(...) ##193, 207
 & eye(...) ##270, 286
 & fact(...) ##195
 & fclose(...) ##174
 & fft(...) ##327, 334
 & fgetl(...) ##174, 180
 & fgets(...) ##174, 180
 & fib(...) ##199
 & fieldnames(...) ##147, 153, 154
 & fill(...) ##239, 260
 & find(...) ##68
 & fix(...) ##55
 & floor(...) ##55
 & fopen(...) ##174, 180
 & fprintf(...) ##92, 129, 130, 136,
 & from ## ##110–111
 & getfield(...) ##155
 & global variables ## ##112–113
 & grid off(...) ##232, 260
 & grid on(...) ##232, 260
 & gt(...) ##373, 376
 & hist(...) ##239, 260
 & hold off(...) ##233, 260
 & hold on(...) ##233, 261
 & ifft(...) ##327, 334
 & image(...) ##295, 310
 & imread(...) ##295, 310
 & imshow(...) ##295, 310
 & imwrite(...) ##295, 310
 & input(...) ##89, 90, 96, 112, 127–128,
 & int2str(...) ##125, 136
 & integral of ## ##351
 & interp1(...) ##341, 344, 361
 & interp2(...) ##343, 361
 & interp3(...) ##343, 361
 & inv(...) ##271, 286
 & isa(...) ##146, 161
 & iscell(...) ##146, 161
 & ischar(...) ##125, 136, 146, 161
 & isempty(...) ##390
 & isfield(...) ##155, 161
 & islogical(...) ##146, 161
 & isnumeric(...) ##146, 161
 & isPal(...) ##197
 & isspace(...) ##125, 136
 & isstruct(...) ##146, 161
 & largest(...) ##145
 & lasterror(...) ##193, 207
 & legend(...) ##233, 261
 & length(...) ##48, 58, 61
 & lightangle(...) ##248
 & linspace(...) ##47, 74, 310
 & load(...) ##180
 & loglog(...) ##237, 261
 & magic(...) ##62, 75
 & max(...) ##66, 92
 & mean(...) ##55, 66
 & mesh(...) ##243
 & meshc(...) ##255
 & meshgrid(...) ##243, 245, 255
 & meshz(...) ##255
 & min(...) ##66
 & nargin(...) ##110
 & nargout(...) ##110
 & num2str(...) ##125, 136
 & ones(...) ##47, 62, 305
 & peek(...) ##390
 & pie(...) ##239, 261
 & pie3(...) ##243
 & plot(...) ##232, 235, 239, 261
 & plot3(...) ##239
 & plotyy(...) ##237
 & polar(...) ##239, 261
 & polyfit(...) ##347–348, 361, 384, 385
 & polyval(...) ##348, 361
 & rand(...) ##47, 62
 & randn(...) ##47
 & read(...) ##173
 & readcell(...) ##179
 & readStruct(...) ##179
 & reshape(...) ##67, 279, 286
 & returning multiple results ##
 & rmfield(...) ##147, 153, 155
 & rot90(...) ##310
 & round(...) ##55
 & semilogx(...) ##237, 261
 & semilogy(...) ##237, 261
 & setfield(...) ##155, 161
 & size(...) ##48, 58, 61, 146
 & sort(...) ##155, 161, 382
 & sound(...) ##318, 335
 & sphere(...) ##255
 & spline(...) ##344, 361
 & sprintf(...) ##126, 129, 130,
 & sscanf(...) ##127, 129, 136
 & str2num(...) ##127, 128, 129, 136
 & strcmp(...) ##130, 131, 136
 & strcmpi(...) ##131, 136
 & strtok(...) ##129, 180
 & struct(...) ##149, 150, 161
 & structures ## ##148–150
 & subplot(...) ##233–234, 261
 & sum(...) ##55, 66, 155
 & surf(...) ##243, 244
 & surfc(...) ##247, 255
 & surfz(...) ##255
 & text(...) ##233, 261
 & textscan(...) ##175, 180
 & title(...) ##233, 261
 & view(...) ##247, 261
 & waterfall(...) ##255
 & wavread(...) ##317, 335
 & wavwrite(...) ##335
 & writecell(...) ## ##148–150
 & xlabel(...) ##233, 261
 & xlsread(...) ##170, 177, 180
 & xlswrite(...) ##170, 172, 180
 & ylabel(...) ##233, 261
 & zeros of ## ##199–202
 & zeros(...) ##47, 62
 & zlabel(...) ##233, 261


G#
geographic data #
getfield(...) ## ##155
global keyword ## ##112, 207
graphs ## ##396–404
 & Breadth-First Search ## ##407–408
 & building ## ##398–401
 & creating ## 31, 32
 & cycles ## ##396
 & defined ## ##389
 & Dijkstras algorithm ## ##408–411
 & examples ## ##396–397, 415
 & nodes ## 389
 & paths on ## ##396, 406–414
 & processing ## ##397–398
 & short-circuit evaluation ## ##87–88
 & template for ## ##84
grid on(...) ## ##232, 260
gt(...) ## ##373, 376
H#
help command ## ##108, 115
helper functions ## 111
heterogeneous collections ## ##142 
hist(...) function ## ##239, 260
hold off(...) function ## ##233, 260
hold on(...) function ## ##233, 261
homogeneous collections ## 46
I#
ifft(...) ## ##327, 334
image(...) ## ##295, 310
images ## ##291–309
 & color mapped ## ##294
 & color masking with ## ##296–301
 & displaying ## ##295
 & format of ## ##294–295
 & gray scale ## ##293
 & kaleidoscope ## 301–303
 & nature of ## ##292
 & operation on ## ##295–306
 & reading ## ##295
 & resolution of ## ##292
 & shrinking #
 & stretching ## ## 295–296
 & on_a_Surface ## ##303–306
 & true color ## ##293
 & types ## ##293–295
 & writing ## ##295
Input/Output (I/O) ## 6, 168–179
 & high-level(see also high-level I/O functions) ## ##169–173 
 & lower-level(see also lower-level I/O functions) ## ##174–177 
 & and MATLAB workspace ## 168–169
inserting data, in collection ## 213–215 template for ## ##215
insertion_sort ## ##371–373, 382–383 
integration ## ##351–355
interp1(...) function ## ##341, 344, 361
interp2(...) function ## ##343, 361
interp3(...) function ## ##343, 361
interpolation ## 340–345
 & cubic spline ## ##343–344
 & extrapolation ## 344–345
 & linear ## ##340–343
interpreted code ## 13
int2str(...) function ## ##125, 136
inv(...) function ## ##271, 273, 274, 286
isa(...) function ## ##146, 161
iscell(...) function ## ##146, 161
ischar(...) function ## 125, 136, 146, 161
isempty(...) function ## ##390
isfield(...) function ## ##155, 161
islogical(...) function ## ##146, 161
isnumeric(...) function ## ##146, 161
isPal(...) function ## ##197
isspace(...) function ## ##125, 136
isstruct(...) function ## ##146, 161
iteration ## ##90
J#
Joint Photographic Experts Group (JPEG) ## 294, 301
K#
kaleidoscope ## ##301–303
L#
length(...) ## ##48, 58, 61, 74
less than (<) ## ##54, 74
less than or equal to (< = ) ## ##54, 74 
 & with arrays ## ##65–66
 & with vectors ## ##54, 55
lightangle(...)  ## ##248, 261
linear arrays ## ##46
linear equations simultaneous#281–283
linear interpolation ## 340–343
linear matrices ## ##47
linear regression ## ##345–347
linearized array ## 67–71 line(s)
 & intersecting ## ##282–283
 & rotating ## ##275–276
linker ## ##12
linspace(...) ## ##47, 74, 310
load(...) ## ##180
loader ## ##12
Local Scope ## ##112
logic errors ## 12, 23
logical expressions ## ##86–87
logical indexing ## ##50 logical operations
 & with arrays ## ##64–65
 & on character strings ## ##125
 & with vectors ## ##52–54
logical value ## 50
loglog(...) ## ##237, 261 
loop-and-a-half iteration style#96–97
lower-level I/O functions ##174–177 
 & opening files ## 174
 & closing files ## 174
M#
magic(...) ## ##62, 75 
mapping #
 & character ## ##122
 & operation ## ##213, 216–217
MATLAB #
 & data manipulation ## ##20–24
 & introduction to ## ##13–14, 17–18
 & problem-solving ## 14–15
 & programming concepts ## ##14
 & user interface ## ##24–33
matrices ## ##267–286
matrix ## ##267–286
 & rotation ## ##274–278
 & division ## ##271, 273–274, 286
 & exponentiation ## ##271, 286
 & eye(...) the identity matrix ## ##270
 & linear ## ##47
 & multiplication ## 51, 268–270,272–273, 286
 & rotating coordinates ## ##274–281
 & sparse ## ##399, 400
max(...) ## ##66, 75, 92
mean(...) ## ##55, 66, 75
Mercator projection ## ##303
merge_sort ## ##377–379, 383
mesh(...) ## ##243, 261
meshc(...) ## ##255, 262
meshgrid(...) ## ##243, 245,255, 262
meshz(...) ## ##255, 262
min(...) ## ##66, 75 
minimum spanning trees ## ##404–406
minus, unary (2) ## 52 
multiplication array ## ##51
music synthesizer ## ##332–334
musical sounds ## ##321–324
 & changing frequency of ## 322–324
N#
NaN ## ##344, 361, 392
nargin(...) ## ##110, 115
nargout(...) ## ##110, 115
Newton’s method ## 202
nodes, graphs ## 389
numbers#
 & to strings ## ##125–127
 & from strings to ## 127–129
numerical indexing ## ##49–50
numerical methods ## ##339–360
 & analytical operations ## ##357
 & curve fitting ## ##345–351
 & differentiation ## ##356–357
 & integration ## 351–355
 & interpolation ## 340–345
num2str(...) ## ##125, 136

O#
object-oriented programming (OOP) ## ##20
objects ## ##24
ones(...) ## ##47, 62, 75, 305 
operating systems (OS) ## ##7–8, 9
operation#
 & analytical ## ##357
 & on arrays ## ##64–71
 & character string ## ##129–131
 & frequency domain ## ##328–332
 & on graphs ## ##397–398
 & on queues ## ##390
 & summary of ## ##212–220
 & on vectors ## ##51–58
operations on collections #
 & building ## ##216
 & filtering ## ##217–218
 & inserting ## ##213–215 
 & mapping ## ##216–217
 & searching ## ##219–220
 & sorting ## ##220
 & summarizing ## ##218–219
 & traversing ## ##215–216
operators dot ## 64
 & field ## 152
 & logical ## ##53
 & precedence ## ##54
OR#
 & element-wise ## ##53, 54
 & short-circuit ## ##53, 54, 87
P#
palindromes ## 197–198
parabolic dish ## 245–247
paradigms ## ##20 
parameters see formal parameters, actual parameters, variable number of parameters#
parametric plots#
 & 2-D ## ##238–239
 & 3-D ## ##241–242
 & passing by reference ## ##109 
  & passing by value ## ##109 
paths (on graphs) ## 396
 & greedy algorithm ## ##411–413
 & Breadth-First Search ## ##407–408
 & Depth-First Search ## ##407–408
 & Dijkstra’s algorithm ## ##408–411
pause(...) ## ##323
peek(...) ## 390
percent(%) ## 33, 126
pie(...) ## ##239, 261
pie3(...) ## 243, 262
pixels ## 292
plaid surface ## ##243
playback ## ##316–317
plot(...) ## 232, 235, 239, 261
plot3(...) ## ##239, 262
plots ## ##231–259
 & data, manipulation of ## ##256 
 & enhancement tools ## ##237
 & figures as containers for ## 232 
 & manually editing ## ##234–235
 & subplots ## ##233–234
 & surface ## ##243–256
plotyy(...) ## ##237
polar(...) ## 239, 261
polyfit(...) ## ##347–348, 361,384, 385
polynomial regression ## ##347–349
polyval(...) ## ##348, 361
Prims ## ##404–406
priority queues ## ##391–393
problem-solving ## ##14–15, 211–226. 
procedural_abstraction ## ##19, 106, 268
procedural_programming ## ##20
program_bugs ## ##12
programming_languages ## ##10–11

Q#
queue ## ##390–396
 & implementation ## ##390–391
 & nature of ## ##390
 & operations on ## ##390
 & overview ## ##390
 & priority ## ##391–393
 & testing ## ##393–396
quick_sort ## ##375–377, 383

R#
radix_sort ## ##379–380, 383
rand(...) ## ##47, 62, 75
randn(...) ## 47, 62, 75 
read(...) ## ##173
readcell(...) ## ##173
readStruct(...) ## ##179
recording ## ##316–317
recursion ## 185–206
 & activation stack ## ##186–187
 & defined ## ##187–188
 & endless ## 188
 & examples ## 197–202
 & implementation ## ##188–190
reshape(...) ## ##67, 279, 286 
resolution ## ##292
 & image #
 & of recorded data ## 317
RGB ## ##292
rmfield(...) ## ##147, 153, 155
rot90(...) ## 310
rotations #
 & 2-D ## ##275–278
 & 3-D ## ##278–281
round(...) ## 55, 75
runtime errors ## ##12

S#
save(...) ## ##180
scalar vectors ## ##51
scale musical ## ##322–323
scripts ## ##33–39
 & creating ## 33–34
 & debugging ## ##36
 & example using ## ##36–39
 & punctuating ## ##35
 & running ## 35
searching ## ##213, 219–220
semicolon ## ##28, 62
semilogx(...) ## ##237, 261
semilogy(...) ## ##237, 261
setfield(...) ## ##155, 161
shading(...) ## ##233, 261
short-circuit #
 & AND (&&) ## ##53, 54, 87
 & OR (||) ## ##53, 54, 87 
shortening vector ## 50–51 
shrinking images ## 295–296
Simpson’s rule ## ##351, 353
simultaneous linear equations ## 281–283
size(...) ## ##48, 58, 61, 75, 146 slicing
 & of arrays ## ##67
 & of character strings ## ##124
 & of sounds ## ##318–320
 & of vectors ## ##56–58
sort(...) ## ##155, 161, 382
sorting ## ##213, 220, 367–386
 & algorithm for ## ##371–380
 & bubble ## ##373–375, 383
 & example using ## ##384–386
 & insertion ## ##371–373, 382–383
 & measuring algorithm cost ## ##368–371
 & merge ## ##377–379, 383
 & quick ## 375–377, 383
 & radix ## 379–380, 383
sound(...) ## 318, 319, 323, 335
sound ## ##315–334
 & example using ## ##332–334
 & Fast Fourier Transform ## ##325–328
 & frequency domain operations ## ##328–332
 & intensity ## ##316
 & musical ## ##321–324
 & physics of ## 316
 & playback ## ## 316–317
 & recording ## ## 316–317
 & concatenating ## ## 318–320
 & slicing ## ## 318–320
sphere ## ##249–250
sphere(...) ## ##255, 262
spline(...) ## ##344, 361
spreadsheets ## 170–172
sprintf(...) ## ##126, 129, 130, 136, 348
square array ## ##61
sscanf(...) ## ##127, 129, 136
stack ## ##8, 186–187
strcmp(...) ## ##130, 131, 136
strcmpi(...) ## ##131, 136
stretching images ## ##295–296 strings
strings see character strings ## ##94, 96, 97, 100
structure arrays ## ##150–156
 & constructing ## ##150–152
 & acessing elements ## ##152–154
 & inserting data into ## ##214
 & manipulation ## ##154–156
 & functions ## ##148–150
subplot(...) ## ##233–234, 261
sum(...) ## ##55, 66, 75, 155, 346
surf(...) ## ##243, 244, 262, 303 
surface#
 & images on ## ##303–306
 & plots ## ##243–256
 & 3-D parametric ## ##248–250
 & bodies of rotation ## ##250–255
 & compound surfacesf ## ##256
 & cube ## ##243–245
 & manipulation of ## ##247–248
 & parabolic dish ## ##245–247
surfc(...) ## ##247, 255, 262
surfz(...) ## ##255
switch statement ## ##88–90, 100
 & template for ## ##88
T#
text files ## ##33
 & delimited ## ##169, 172–173
 & reading ## ##174–176
 & writing ## ##176–177
textscan(...) ## ##175, 180
title(...) ## ##233, 261
token ## ##123
toString(...) ## ##394
transpose #
trapezoidal rule ## ##351, 352–353
traversal
tril(...) ## ##310
type, data ## ##24
typographical errors ## ##13, 23

U#
uint8/16(...) ## ###123, 136,293, 310
unary minus ## 52
unary not (~) ## ##54, 87, 100
underscore character ## 22 
utilities, operating systems ## ##9

V#
value parameters ## ##126
value(s) ## ##24
 & assigning, to variables ## ##21–22
 & boolean/logical ## ## 50
 & parameters ## ##126
Variable Editor window ## ##31 
variable ##112 
 & assigning values to ## ##21–22
 & global ## ##112–113
 & names ## ##21–22
 & scoping ##
variable_number_of_parameters #
vector(s) ## ##46–60
 & arithmetic operations with ## 51–52
 & concatenation of ## ##55
 & creating ## 47–48
 & elements ## ##47
 & extracting/sorting ## ##382
 & indexing of ## ##48–50
 & inserting data into ## ##213
 & logical operations with ## 52–54
 & operating on ## ##51–58
 & scalar ## 51
 & shortening ## 50–51
 & size of ## 48
 & slicing ## 56–58
vector_elements #
view(...) ## 247, 261
von Neumann architecture ## ##4–5

W#
waterfall(...) ## ##255, 262
wav files ## 317, 318
wavread(...) ## 317, 335
wavwrite(...) ## ##335
weak typing ## ##24
weighted graph ## 396, 398
while loop ## 94–97, 100
 & breaking ## 97
 & example ## ##95
 & loop-and-a-half ## ##96–97
 & for loop vs.#90
 & MATLAB implementation ## ##95
 & structure of ## ##94
 & template for ## ##94–95
who command ## ##30
whos command ## 30
windows #
 & Command History window#26–27
 & Command window ## ##25–26, 92,
 & Current Directory window#30–31, 34–35, 107
 & Editor window ## ##32–33, 36
 & Figure window ## 31–32
 & Variable Editor window ## ##31
 & Workspace window ## 27–30, 48
workspace, saving ## ##168–169
Workspace window ## 27–30, 48
wrapper function ## ##185, 195–197
 & template for ## ##196
writecell(...)#

X#
xlabel(...) ## ##233, 261
xlsread(...) ## 170, 177, 180
xlswrite(...) ## ##170, 172, 180

Y#
ylabel(...) ## ##233, 261

Z#
zeros(...) ## ##47, 62
zlabel(...) ## ##233, 261

